
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Basic theory for vectors using arrays. This version of vectors is not extensional.

datatype Vec<T> {
    Vec(v: [int]T, l: int)
}

function {:builtin "MapConst"} MapConstVec<T>(T): [int]T;
function DefaultVecElem<T>(): T;
function {:inline} DefaultVecMap<T>(): [int]T { MapConstVec(DefaultVecElem()) }

function {:inline} EmptyVec<T>(): Vec T {
    Vec(DefaultVecMap(), 0)
}

function {:inline} MakeVec1<T>(v: T): Vec T {
    Vec(DefaultVecMap()[0 := v], 1)
}

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2], 2)
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3], 3)
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3][3 := v4], 4)
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    (var l := v->l;
    Vec(v->v[l := elem], l + 1))
}

function {:inline} ReadVec<T>(v: Vec T, i: int): T {
    v->v[i]
}

function {:inline} LenVec<T>(v: Vec T): int {
    v->l
}

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    v->l == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    (var l := v->l - 1;
    Vec(v->v[l := DefaultVecElem()], l))
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    (var l := v->l - 1;
    Vec(
        (lambda j: int ::
           if j >= 0 && j < l then
               if j < i then v->v[j] else v->v[j+1]
           else DefaultVecElem()),
        l))
}

function {:inline} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T {
    (var l1, m1, l2, m2 := v1->l, v1->v, v2->l, v2->v;
    Vec(
        (lambda i: int ::
          if i >= 0 && i < l1 + l2 then
            if i < l1 then m1[i] else m2[i - l1]
          else DefaultVecElem()),
        l1 + l2))
}

function {:inline} ReverseVec<T>(v: Vec T): Vec T {
    (var l := v->l;
    Vec(
        (lambda i: int :: if 0 <= i && i < l then v->v[l - i - 1] else DefaultVecElem()),
        l))
}

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v->v;
    Vec(
        (lambda k:int ::
          if 0 <= k && k < j - i then
            m[i + k]
          else
            DefaultVecElem()),
        (if j - i < 0 then 0 else j - i)))
}


function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
    Vec(v->v[i := elem], v->l)
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v->v;
    Vec(m[i := m[j]][j := m[i]], v->l))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    (var l := v->l;
    (exists i: int :: InRangeVec(v, i) && v->v[i] == e))
}

function IndexOfVec<T>(v: Vec T, e: T): int;
axiom {:ctor "Vec"} (forall<T> v: Vec T, e: T :: {IndexOfVec(v, e)}
    (var i := IndexOfVec(v,e);
     if (!ContainsVec(v, e)) then i == -1
     else InRangeVec(v, i) && ReadVec(v, i) == e &&
        (forall j: int :: j >= 0 && j < i ==> ReadVec(v, j) != e)));

// This function should stay non-inlined as it guards many quantifiers
// over vectors. It appears important to have this uninterpreted for
// quantifier triggering.
function InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

datatype Multiset<T> {
    Multiset(v: [T]int, l: int)
}

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    s->l
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := s->l;
    (var cnt := s->v[v];
    Multiset(s->v[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := s1->l;
    (var len2 := s2->l;
    Multiset((lambda v:T :: s1->v[v]-s2->v[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (s->l == 0) &&
    (forall v: T :: s->v[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (s1->l <= s2->l) &&
    (forall v: T :: s1->v[v] <= s2->v[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    s->v[v] > 0
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Theory for tables.

// v is the SMT array holding the key-value assignment. e is an array which
// independently determines whether a key is valid or not. l is the length.
//
// Note that even though the program cannot reflect over existence of a key,
// we want the specification to be able to do this, so it can express
// verification conditions like "key has been inserted".
datatype Table <K, V> {
    Table(v: [K]V, e: [K]bool, l: int)
}

// Functions for default SMT arrays. For the table values, we don't care and
// use an uninterpreted function.
function DefaultTableArray<K, V>(): [K]V;
function DefaultTableKeyExistsArray<K>(): [K]bool;
axiom DefaultTableKeyExistsArray() == (lambda i: int :: false);

function {:inline} EmptyTable<K, V>(): Table K V {
    Table(DefaultTableArray(), DefaultTableKeyExistsArray(), 0)
}

function {:inline} GetTable<K,V>(t: Table K V, k: K): V {
    // Notice we do not check whether key is in the table. The result is undetermined if it is not.
    t->v[k]
}

function {:inline} LenTable<K,V>(t: Table K V): int {
    t->l
}


function {:inline} ContainsTable<K,V>(t: Table K V, k: K): bool {
    t->e[k]
}

function {:inline} UpdateTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    Table(t->v[k := v], t->e, t->l)
}

function {:inline} AddTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    // This function has an undetermined result if the key is already in the table
    // (all specification functions have this "partial definiteness" behavior). Thus we can
    // just increment the length.
    Table(t->v[k := v], t->e[k := true], t->l + 1)
}

function {:inline} RemoveTable<K,V>(t: Table K V, k: K): Table K V {
    // Similar as above, we only need to consider the case where the key is in the table.
    Table(t->v, t->e[k := false], t->l - 1)
}

axiom {:ctor "Table"} (forall<K,V> t: Table K V :: {LenTable(t)}
    (exists k: K :: {ContainsTable(t, k)} ContainsTable(t, k)) ==> LenTable(t) >= 1
);
// TODO: we might want to encoder a stronger property that the length of table
// must be more than N given a set of N items. Currently we don't see a need here
// and the above axiom seems to be sufficient.
// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

// ==================================================================================
// Native object::exists_at// ==================================================================================
// Intrinsic implementation of aggregator_v2 for element type `u128`


datatype $1_aggregator_v2_Aggregator'u128' {
    $1_aggregator_v2_Aggregator'u128'($value: int, $max_value: int)
}
function {:inline} $Update'$1_aggregator_v2_Aggregator'u128''_value(s: $1_aggregator_v2_Aggregator'u128', x: int): $1_aggregator_v2_Aggregator'u128' {
    $1_aggregator_v2_Aggregator'u128'(x, s->$max_value)
}
function {:inline} $Update'$1_aggregator_v2_Aggregator'u128''_max_value(s: $1_aggregator_v2_Aggregator'u128', x: int): $1_aggregator_v2_Aggregator'u128' {
    $1_aggregator_v2_Aggregator'u128'(s->$value, x)
}
function $IsValid'$1_aggregator_v2_Aggregator'u128''(s: $1_aggregator_v2_Aggregator'u128'): bool {
    $IsValid'u128'(s->$value)
      && $IsValid'u128'(s->$max_value)
}
function {:inline} $IsEqual'$1_aggregator_v2_Aggregator'u128''(s1: $1_aggregator_v2_Aggregator'u128', s2: $1_aggregator_v2_Aggregator'u128'): bool {
    $IsEqual'u128'(s1->$value, s2->$value)
      && $IsEqual'u128'(s1->$max_value, s2->$max_value)
}

procedure {:inline 1} $1_aggregator_v2_create_unbounded_aggregator'u128'() returns (res: $1_aggregator_v2_Aggregator'u128')
{
    res := $1_aggregator_v2_Aggregator'u128'(0, $MAX_U128);
    }


    procedure {:inline 1} $1_aggregator_v2_create_aggregator'u128'($max_value: int) returns (res: $1_aggregator_v2_Aggregator'u128')
    {
        res := $1_aggregator_v2_Aggregator'u128'(0, $max_value);
        }


    procedure {:inline 1} $1_aggregator_v2_try_add'u128'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u128'), value: int) returns (res: bool, aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u128'))
    {
        if ($Dereference(aggregator)->$max_value < value + $Dereference(aggregator)->$value) {
            res := false;
            aggregator_updated:= aggregator;
        } else {
            res := true;
            aggregator_updated:= $UpdateMutation(aggregator, $1_aggregator_v2_Aggregator'u128'(value + $Dereference(aggregator)->$value, $Dereference(aggregator)->$max_value));
        }
        }

    procedure {:inline 1} $1_aggregator_v2_try_sub'u128'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u128'), value: int) returns (res: bool, aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u128'))
    {
        if ($Dereference(aggregator)->$value < value) {
            res := false;
            aggregator_updated:= aggregator;
            return;
        } else {
            res := true;
            aggregator_updated:= $UpdateMutation(aggregator, $1_aggregator_v2_Aggregator'u128'($Dereference(aggregator)->$value - value, $Dereference(aggregator)->$max_value));
            return;
        }
        }

    procedure {:inline 1} $1_aggregator_v2_add'u128'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u128'), value: int) returns (aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u128'))
    {
       var try_result: bool;
       var try_aggregator: $Mutation $1_aggregator_v2_Aggregator'u128';
       call try_result, try_aggregator := $1_aggregator_v2_try_add'u128'(aggregator, value);
       if (!try_result) {
           call $ExecFailureAbort();
           return;
       }
       aggregator_updated := try_aggregator;
       return;
       }

   procedure {:inline 1} $1_aggregator_v2_sub'u128'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u128'), value: int) returns (aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u128'))
   {
       var try_result: bool;
          var try_aggregator: $Mutation $1_aggregator_v2_Aggregator'u128';
          call try_result, try_aggregator := $1_aggregator_v2_try_sub'u128'(aggregator, value);
          if (!try_result) {
              call $ExecFailureAbort();
              return;
          }
          aggregator_updated := try_aggregator;
         return;
       }

   procedure {:inline 1} $1_aggregator_v2_read'u128'(aggregator: $1_aggregator_v2_Aggregator'u128') returns (res: int) {
       res := aggregator->$value;
       }

   procedure {:inline 1} $1_aggregator_v2_max_value'u128'(aggregator: $1_aggregator_v2_Aggregator'u128') returns (res: int) {
       res := aggregator->$max_value;
       }

   procedure {:inline 1} $1_aggregator_v2_is_at_least_impl'u128'(aggregator: $1_aggregator_v2_Aggregator'u128', min_amount: int) returns (res: bool)
   {
       res := aggregator->$value >= min_amount;
          return;
       }

function {:inline} $1_aggregator_v2_spec_get_value'u128'(s: $1_aggregator_v2_Aggregator'u128'): int {
    s->$value
}

function {:inline} $1_aggregator_v2_spec_get_max_value'u128'(s: $1_aggregator_v2_Aggregator'u128'): int {
    s->$max_value
}

function {:inline} $1_aggregator_v2_$read'u128'(s: $1_aggregator_v2_Aggregator'u128'): int {
    s->$value
}

function {:inline} $1_aggregator_v2_$is_at_least_impl'u128'(aggregator: $1_aggregator_v2_Aggregator'u128', min_amount: int): bool
   {
       aggregator->$value >= min_amount
   }
// ==================================================================================
// Intrinsic implementation of aggregator_v2 for element type `u64`


datatype $1_aggregator_v2_Aggregator'u64' {
    $1_aggregator_v2_Aggregator'u64'($value: int, $max_value: int)
}
function {:inline} $Update'$1_aggregator_v2_Aggregator'u64''_value(s: $1_aggregator_v2_Aggregator'u64', x: int): $1_aggregator_v2_Aggregator'u64' {
    $1_aggregator_v2_Aggregator'u64'(x, s->$max_value)
}
function {:inline} $Update'$1_aggregator_v2_Aggregator'u64''_max_value(s: $1_aggregator_v2_Aggregator'u64', x: int): $1_aggregator_v2_Aggregator'u64' {
    $1_aggregator_v2_Aggregator'u64'(s->$value, x)
}
function $IsValid'$1_aggregator_v2_Aggregator'u64''(s: $1_aggregator_v2_Aggregator'u64'): bool {
    $IsValid'u64'(s->$value)
      && $IsValid'u64'(s->$max_value)
}
function {:inline} $IsEqual'$1_aggregator_v2_Aggregator'u64''(s1: $1_aggregator_v2_Aggregator'u64', s2: $1_aggregator_v2_Aggregator'u64'): bool {
    $IsEqual'u64'(s1->$value, s2->$value)
      && $IsEqual'u64'(s1->$max_value, s2->$max_value)
}

procedure {:inline 1} $1_aggregator_v2_create_unbounded_aggregator'u64'() returns (res: $1_aggregator_v2_Aggregator'u64')
{
    res := $1_aggregator_v2_Aggregator'u64'(0, $MAX_U64);
    }


    procedure {:inline 1} $1_aggregator_v2_create_aggregator'u64'($max_value: int) returns (res: $1_aggregator_v2_Aggregator'u64')
    {
        res := $1_aggregator_v2_Aggregator'u64'(0, $max_value);
        }


    procedure {:inline 1} $1_aggregator_v2_try_add'u64'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u64'), value: int) returns (res: bool, aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u64'))
    {
        if ($Dereference(aggregator)->$max_value < value + $Dereference(aggregator)->$value) {
            res := false;
            aggregator_updated:= aggregator;
        } else {
            res := true;
            aggregator_updated:= $UpdateMutation(aggregator, $1_aggregator_v2_Aggregator'u64'(value + $Dereference(aggregator)->$value, $Dereference(aggregator)->$max_value));
        }
        }

    procedure {:inline 1} $1_aggregator_v2_try_sub'u64'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u64'), value: int) returns (res: bool, aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u64'))
    {
        if ($Dereference(aggregator)->$value < value) {
            res := false;
            aggregator_updated:= aggregator;
            return;
        } else {
            res := true;
            aggregator_updated:= $UpdateMutation(aggregator, $1_aggregator_v2_Aggregator'u64'($Dereference(aggregator)->$value - value, $Dereference(aggregator)->$max_value));
            return;
        }
        }

    procedure {:inline 1} $1_aggregator_v2_add'u64'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u64'), value: int) returns (aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u64'))
    {
       var try_result: bool;
       var try_aggregator: $Mutation $1_aggregator_v2_Aggregator'u64';
       call try_result, try_aggregator := $1_aggregator_v2_try_add'u64'(aggregator, value);
       if (!try_result) {
           call $ExecFailureAbort();
           return;
       }
       aggregator_updated := try_aggregator;
       return;
       }

   procedure {:inline 1} $1_aggregator_v2_sub'u64'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u64'), value: int) returns (aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u64'))
   {
       var try_result: bool;
          var try_aggregator: $Mutation $1_aggregator_v2_Aggregator'u64';
          call try_result, try_aggregator := $1_aggregator_v2_try_sub'u64'(aggregator, value);
          if (!try_result) {
              call $ExecFailureAbort();
              return;
          }
          aggregator_updated := try_aggregator;
         return;
       }

   procedure {:inline 1} $1_aggregator_v2_read'u64'(aggregator: $1_aggregator_v2_Aggregator'u64') returns (res: int) {
       res := aggregator->$value;
       }

   procedure {:inline 1} $1_aggregator_v2_max_value'u64'(aggregator: $1_aggregator_v2_Aggregator'u64') returns (res: int) {
       res := aggregator->$max_value;
       }

   procedure {:inline 1} $1_aggregator_v2_is_at_least_impl'u64'(aggregator: $1_aggregator_v2_Aggregator'u64', min_amount: int) returns (res: bool)
   {
       res := aggregator->$value >= min_amount;
          return;
       }

function {:inline} $1_aggregator_v2_spec_get_value'u64'(s: $1_aggregator_v2_Aggregator'u64'): int {
    s->$value
}

function {:inline} $1_aggregator_v2_spec_get_max_value'u64'(s: $1_aggregator_v2_Aggregator'u64'): int {
    s->$max_value
}

function {:inline} $1_aggregator_v2_$read'u64'(s: $1_aggregator_v2_Aggregator'u64'): int {
    s->$value
}

function {:inline} $1_aggregator_v2_$is_at_least_impl'u64'(aggregator: $1_aggregator_v2_Aggregator'u64', min_amount: int): bool
   {
       aggregator->$value >= min_amount
   }


// ==================================================================================
// Intrinsic implementation of aggregator and aggregator factory

datatype $1_aggregator_Aggregator {
    $1_aggregator_Aggregator($handle: int, $key: int, $limit: int, $val: int)
}
function {:inline} $Update'$1_aggregator_Aggregator'_handle(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(x, s->$key, s->$limit, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_key(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, x, s->$limit, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_limit(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, s->$key, x, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_val(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, s->$key, s->$limit, x)
}
function $IsValid'$1_aggregator_Aggregator'(s: $1_aggregator_Aggregator): bool {
    $IsValid'address'(s->$handle)
      && $IsValid'address'(s->$key)
      && $IsValid'u128'(s->$limit)
      && $IsValid'u128'(s->$val)
}
function {:inline} $IsEqual'$1_aggregator_Aggregator'(s1: $1_aggregator_Aggregator, s2: $1_aggregator_Aggregator): bool {
    s1 == s2
}
function {:inline} $1_aggregator_spec_get_limit(s: $1_aggregator_Aggregator): int {
    s->$limit
}
function {:inline} $1_aggregator_limit(s: $1_aggregator_Aggregator): int {
    s->$limit
}
procedure {:inline 1} $1_aggregator_limit(s: $1_aggregator_Aggregator) returns (res: int) {
    res := s->$limit;
    return;
}
function {:inline} $1_aggregator_spec_get_handle(s: $1_aggregator_Aggregator): int {
    s->$handle
}
function {:inline} $1_aggregator_spec_get_key(s: $1_aggregator_Aggregator): int {
    s->$key
}
function {:inline} $1_aggregator_spec_get_val(s: $1_aggregator_Aggregator): int {
    s->$val
}

function $1_aggregator_spec_read(agg: $1_aggregator_Aggregator): int {
    $1_aggregator_spec_get_val(agg)
}

function $1_aggregator_spec_aggregator_set_val(agg: $1_aggregator_Aggregator, val: int): $1_aggregator_Aggregator {
    $Update'$1_aggregator_Aggregator'_val(agg, val)
}

function $1_aggregator_spec_aggregator_get_val(agg: $1_aggregator_Aggregator): int {
    $1_aggregator_spec_get_val(agg)
}

function $1_aggregator_factory_spec_new_aggregator(limit: int) : $1_aggregator_Aggregator;

axiom (forall limit: int :: {$1_aggregator_factory_spec_new_aggregator(limit)}
    (var agg := $1_aggregator_factory_spec_new_aggregator(limit);
     $1_aggregator_spec_get_limit(agg) == limit));

axiom (forall limit: int :: {$1_aggregator_factory_spec_new_aggregator(limit)}
     (var agg := $1_aggregator_factory_spec_new_aggregator(limit);
     $1_aggregator_spec_aggregator_get_val(agg) == 0));

// ==================================================================================
// Native for function_info

procedure $1_function_info_is_identifier(s: Vec int) returns (res: bool);



// Uninterpreted function for all types

function $Arbitrary_value_of'#0'(): #0;

function $Arbitrary_value_of'$1_aggregator_v2_Aggregator'u128''(): $1_aggregator_v2_Aggregator'u128';

function $Arbitrary_value_of'$1_aggregator_v2_Aggregator'u64''(): $1_aggregator_v2_Aggregator'u64';

function $Arbitrary_value_of'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(): $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'';

function $Arbitrary_value_of'$1_big_vector_BigVector'address''(): $1_big_vector_BigVector'address';

function $Arbitrary_value_of'$1_chain_status_GenesisEndMarker'(): $1_chain_status_GenesisEndMarker;

function $Arbitrary_value_of'$1_comparator_Result'(): $1_comparator_Result;

function $Arbitrary_value_of'$1_dispatchable_fungible_asset_TransferRefStore'(): $1_dispatchable_fungible_asset_TransferRefStore;

function $Arbitrary_value_of'$1_event_EventHandle'$1_object_TransferEvent''(): $1_event_EventHandle'$1_object_TransferEvent';

function $Arbitrary_value_of'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent';

function $Arbitrary_value_of'$1_features_Features'(): $1_features_Features;

function $Arbitrary_value_of'$1_function_info_FunctionInfo'(): $1_function_info_FunctionInfo;

function $Arbitrary_value_of'$1_fungible_asset_BurnRef'(): $1_fungible_asset_BurnRef;

function $Arbitrary_value_of'$1_fungible_asset_ConcurrentFungibleBalance'(): $1_fungible_asset_ConcurrentFungibleBalance;

function $Arbitrary_value_of'$1_fungible_asset_ConcurrentSupply'(): $1_fungible_asset_ConcurrentSupply;

function $Arbitrary_value_of'$1_fungible_asset_Deposit'(): $1_fungible_asset_Deposit;

function $Arbitrary_value_of'$1_fungible_asset_DispatchFunctionStore'(): $1_fungible_asset_DispatchFunctionStore;

function $Arbitrary_value_of'$1_fungible_asset_Frozen'(): $1_fungible_asset_Frozen;

function $Arbitrary_value_of'$1_fungible_asset_FungibleAsset'(): $1_fungible_asset_FungibleAsset;

function $Arbitrary_value_of'$1_fungible_asset_FungibleStore'(): $1_fungible_asset_FungibleStore;

function $Arbitrary_value_of'$1_fungible_asset_Metadata'(): $1_fungible_asset_Metadata;

function $Arbitrary_value_of'$1_fungible_asset_MintRef'(): $1_fungible_asset_MintRef;

function $Arbitrary_value_of'$1_fungible_asset_Supply'(): $1_fungible_asset_Supply;

function $Arbitrary_value_of'$1_fungible_asset_TransferRef'(): $1_fungible_asset_TransferRef;

function $Arbitrary_value_of'$1_fungible_asset_Untransferable'(): $1_fungible_asset_Untransferable;

function $Arbitrary_value_of'$1_guid_GUID'(): $1_guid_GUID;

function $Arbitrary_value_of'$1_guid_ID'(): $1_guid_ID;

function $Arbitrary_value_of'$1_object_ConstructorRef'(): $1_object_ConstructorRef;

function $Arbitrary_value_of'$1_object_DeleteRef'(): $1_object_DeleteRef;

function $Arbitrary_value_of'$1_object_DeriveRef'(): $1_object_DeriveRef;

function $Arbitrary_value_of'$1_object_ExtendRef'(): $1_object_ExtendRef;

function $Arbitrary_value_of'$1_object_Object'$1_fungible_asset_FungibleStore''(): $1_object_Object'$1_fungible_asset_FungibleStore';

function $Arbitrary_value_of'$1_object_Object'$1_fungible_asset_Metadata''(): $1_object_Object'$1_fungible_asset_Metadata';

function $Arbitrary_value_of'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(): $1_object_Object'$bb_pool_v3_LiquidityPoolV3';

function $Arbitrary_value_of'$1_object_Object'$bb_position_v3_Info''(): $1_object_Object'$bb_position_v3_Info';

function $Arbitrary_value_of'$1_object_ObjectCore'(): $1_object_ObjectCore;

function $Arbitrary_value_of'$1_object_TransferRef'(): $1_object_TransferRef;

function $Arbitrary_value_of'$1_object_Untransferable'(): $1_object_Untransferable;

function $Arbitrary_value_of'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(): $1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''';

function $Arbitrary_value_of'$1_option_Option'$1_big_vector_BigVector'address'''(): $1_option_Option'$1_big_vector_BigVector'address'';

function $Arbitrary_value_of'$1_option_Option'$1_function_info_FunctionInfo''(): $1_option_Option'$1_function_info_FunctionInfo';

function $Arbitrary_value_of'$1_option_Option'u128''(): $1_option_Option'u128';

function $Arbitrary_value_of'$1_option_Option'u64''(): $1_option_Option'u64';

function $Arbitrary_value_of'$1_permissioned_signer_GrantedPermissionHandles'(): $1_permissioned_signer_GrantedPermissionHandles;

function $Arbitrary_value_of'$1_primary_fungible_store_DeriveRefPod'(): $1_primary_fungible_store_DeriveRefPod;

function $Arbitrary_value_of'$1_reconfiguration_Configuration'(): $1_reconfiguration_Configuration;

function $Arbitrary_value_of'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(): $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'';

function $Arbitrary_value_of'$1_smart_vector_SmartVector'address''(): $1_smart_vector_SmartVector'address';

function $Arbitrary_value_of'$1_string_String'(): $1_string_String;

function $Arbitrary_value_of'$1_timestamp_CurrentTimeMicroseconds'(): $1_timestamp_CurrentTimeMicroseconds;

function $Arbitrary_value_of'$bb_i128_I128'(): $bb_i128_I128;

function $Arbitrary_value_of'$bb_i32_I32'(): $bb_i32_I32;

function $Arbitrary_value_of'$bb_lp_LPObjectRef'(): $bb_lp_LPObjectRef;

function $Arbitrary_value_of'$bb_lp_LPTokenRefs'(): $bb_lp_LPTokenRefs;

function $Arbitrary_value_of'$bb_pool_v3_AddLiquidityEvent'(): $bb_pool_v3_AddLiquidityEvent;

function $Arbitrary_value_of'$bb_pool_v3_LiquidityPoolConfigsV3'(): $bb_pool_v3_LiquidityPoolConfigsV3;

function $Arbitrary_value_of'$bb_pool_v3_LiquidityPoolV3'(): $bb_pool_v3_LiquidityPoolV3;

function $Arbitrary_value_of'$bb_pool_v3_PoolSnapshot'(): $bb_pool_v3_PoolSnapshot;

function $Arbitrary_value_of'$bb_pool_v3_ProtocolFees'(): $bb_pool_v3_ProtocolFees;

function $Arbitrary_value_of'$bb_position_blacklist_PositionBlackList'(): $bb_position_blacklist_PositionBlackList;

function $Arbitrary_value_of'$bb_position_v3_Info'(): $bb_position_v3_Info;

function $Arbitrary_value_of'$bb_rewarder_PositionReward'(): $bb_rewarder_PositionReward;

function $Arbitrary_value_of'$bb_rewarder_Rewarder'(): $bb_rewarder_Rewarder;

function $Arbitrary_value_of'$bb_rewarder_RewarderManager'(): $bb_rewarder_RewarderManager;

function $Arbitrary_value_of'$bb_tick_TickInfo'(): $bb_tick_TickInfo;

function $Arbitrary_value_of'$bb_tick_TickUpdatedEvent'(): $bb_tick_TickUpdatedEvent;

function $Arbitrary_value_of'$bb_tick_bitmap_BitMap'(): $bb_tick_bitmap_BitMap;

function $Arbitrary_value_of'signer'(): $signer;

function $Arbitrary_value_of'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''(): Table int ($bb_tick_TickInfo);

function $Arbitrary_value_of'$1_table_with_length_TableWithLength'u64_vec'#0'''(): Table int (Vec (#0));

function $Arbitrary_value_of'$1_table_with_length_TableWithLength'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(): Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'));

function $Arbitrary_value_of'$1_table_with_length_TableWithLength'u64_vec'address'''(): Table int (Vec (int));

function $Arbitrary_value_of'$1_table_Table'$bb_i32_I32_u256''(): Table int (int);

function $Arbitrary_value_of'vec'#0''(): Vec (#0);

function $Arbitrary_value_of'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(): Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');

function $Arbitrary_value_of'vec'$1_big_vector_BigVector'address'''(): Vec ($1_big_vector_BigVector'address');

function $Arbitrary_value_of'vec'$1_function_info_FunctionInfo''(): Vec ($1_function_info_FunctionInfo);

function $Arbitrary_value_of'vec'$1_fungible_asset_FungibleStore''(): Vec ($1_fungible_asset_FungibleStore);

function $Arbitrary_value_of'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(): Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');

function $Arbitrary_value_of'vec'$bb_rewarder_PositionReward''(): Vec ($bb_rewarder_PositionReward);

function $Arbitrary_value_of'vec'$bb_rewarder_Rewarder''(): Vec ($bb_rewarder_Rewarder);

function $Arbitrary_value_of'vec'address''(): Vec (int);

function $Arbitrary_value_of'vec'u128''(): Vec (int);

function $Arbitrary_value_of'vec'u64''(): Vec (int);

function $Arbitrary_value_of'vec'u8''(): Vec (int);

function $Arbitrary_value_of'bool'(): bool;

function $Arbitrary_value_of'address'(): int;

function $Arbitrary_value_of'u128'(): int;

function $Arbitrary_value_of'u256'(): int;

function $Arbitrary_value_of'u32'(): int;

function $Arbitrary_value_of'u64'(): int;

function $Arbitrary_value_of'u8'(): int;

function $Arbitrary_value_of'$1_table_Table'$bb_i32_I32_bv256''(): Table int (bv256);

function $Arbitrary_value_of'vec'bv128''(): Vec (bv128);

function $Arbitrary_value_of'vec'bv64''(): Vec (bv64);

function $Arbitrary_value_of'vec'bv8''(): Vec (bv8);

function $Arbitrary_value_of'bv128'(): bv128;

function $Arbitrary_value_of'bv256'(): bv256;

function $Arbitrary_value_of'bv32'(): bv32;

function $Arbitrary_value_of'bv64'(): bv64;

function $Arbitrary_value_of'bv8'(): bv8;



// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U16: int;
axiom $MAX_U16 == 65535;
const $MAX_U32: int;
axiom $MAX_U32 == 4294967295;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;
const $MAX_U256: int;
axiom $MAX_U256 == 115792089237316195423570985008687907853269984665640564039457584007913129639935;

// Templates for bitvector operations

function {:bvbuiltin "bvand"} $And'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvor"} $Or'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvxor"} $Xor'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvadd"} $Add'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvsub"} $Sub'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvmul"} $Mul'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvudiv"} $Div'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvurem"} $Mod'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvshl"} $Shl'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvlshr"} $Shr'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvult"} $Lt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv8'(bv8,bv8) returns(bool);

procedure {:inline 1} $AddBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Add'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $AddBv8_unchecked(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $SubBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv8'(src1, src2);
}

procedure {:inline 1} $MulBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Mul'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv8'(src1, src2);
}

procedure {:inline 1} $DivBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv8'(src1, src2);
}

procedure {:inline 1} $ModBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv8'(src1, src2);
}

procedure {:inline 1} $AndBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $And'Bv8'(src1,src2);
}

procedure {:inline 1} $OrBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Or'Bv8'(src1,src2);
}

procedure {:inline 1} $XorBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Xor'Bv8'(src1,src2);
}

procedure {:inline 1} $LtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Lt'Bv8'(src1,src2);
}

procedure {:inline 1} $LeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Le'Bv8'(src1,src2);
}

procedure {:inline 1} $GtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Gt'Bv8'(src1,src2);
}

procedure {:inline 1} $GeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Ge'Bv8'(src1,src2);
}

function $IsValid'bv8'(v: bv8): bool {
  $Ge'Bv8'(v,0bv8) && $Le'Bv8'(v,255bv8)
}

function {:inline} $IsEqual'bv8'(x: bv8, y: bv8): bool {
    x == y
}

procedure {:inline 1} $int2bv8(src: int) returns (dst: bv8)
{
    if (src > 255) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.8(src);
}

procedure {:inline 1} $bv2int8(src: bv8) returns (dst: int)
{
    dst := $bv2int.8(src);
}

function {:builtin "(_ int2bv 8)"} $int2bv.8(i: int) returns (bv8);
function {:builtin "bv2nat"} $bv2int.8(i: bv8) returns (int);

function {:bvbuiltin "bvand"} $And'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvor"} $Or'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvxor"} $Xor'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvadd"} $Add'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvsub"} $Sub'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvmul"} $Mul'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvudiv"} $Div'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvurem"} $Mod'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvshl"} $Shl'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvlshr"} $Shr'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvult"} $Lt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv16'(bv16,bv16) returns(bool);

procedure {:inline 1} $AddBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Add'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $AddBv16_unchecked(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $SubBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv16'(src1, src2);
}

procedure {:inline 1} $MulBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Mul'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv16'(src1, src2);
}

procedure {:inline 1} $DivBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv16'(src1, src2);
}

procedure {:inline 1} $ModBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv16'(src1, src2);
}

procedure {:inline 1} $AndBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $And'Bv16'(src1,src2);
}

procedure {:inline 1} $OrBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Or'Bv16'(src1,src2);
}

procedure {:inline 1} $XorBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Xor'Bv16'(src1,src2);
}

procedure {:inline 1} $LtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Lt'Bv16'(src1,src2);
}

procedure {:inline 1} $LeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Le'Bv16'(src1,src2);
}

procedure {:inline 1} $GtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Gt'Bv16'(src1,src2);
}

procedure {:inline 1} $GeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Ge'Bv16'(src1,src2);
}

function $IsValid'bv16'(v: bv16): bool {
  $Ge'Bv16'(v,0bv16) && $Le'Bv16'(v,65535bv16)
}

function {:inline} $IsEqual'bv16'(x: bv16, y: bv16): bool {
    x == y
}

procedure {:inline 1} $int2bv16(src: int) returns (dst: bv16)
{
    if (src > 65535) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.16(src);
}

procedure {:inline 1} $bv2int16(src: bv16) returns (dst: int)
{
    dst := $bv2int.16(src);
}

function {:builtin "(_ int2bv 16)"} $int2bv.16(i: int) returns (bv16);
function {:builtin "bv2nat"} $bv2int.16(i: bv16) returns (int);

function {:bvbuiltin "bvand"} $And'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvor"} $Or'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvxor"} $Xor'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvadd"} $Add'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvsub"} $Sub'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvmul"} $Mul'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvudiv"} $Div'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvurem"} $Mod'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvshl"} $Shl'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvlshr"} $Shr'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvult"} $Lt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv32'(bv32,bv32) returns(bool);

procedure {:inline 1} $AddBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Add'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $AddBv32_unchecked(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $SubBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv32'(src1, src2);
}

procedure {:inline 1} $MulBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Mul'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv32'(src1, src2);
}

procedure {:inline 1} $DivBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv32'(src1, src2);
}

procedure {:inline 1} $ModBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv32'(src1, src2);
}

procedure {:inline 1} $AndBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $And'Bv32'(src1,src2);
}

procedure {:inline 1} $OrBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Or'Bv32'(src1,src2);
}

procedure {:inline 1} $XorBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Xor'Bv32'(src1,src2);
}

procedure {:inline 1} $LtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Lt'Bv32'(src1,src2);
}

procedure {:inline 1} $LeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Le'Bv32'(src1,src2);
}

procedure {:inline 1} $GtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Gt'Bv32'(src1,src2);
}

procedure {:inline 1} $GeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Ge'Bv32'(src1,src2);
}

function $IsValid'bv32'(v: bv32): bool {
  $Ge'Bv32'(v,0bv32) && $Le'Bv32'(v,2147483647bv32)
}

function {:inline} $IsEqual'bv32'(x: bv32, y: bv32): bool {
    x == y
}

procedure {:inline 1} $int2bv32(src: int) returns (dst: bv32)
{
    if (src > 2147483647) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.32(src);
}

procedure {:inline 1} $bv2int32(src: bv32) returns (dst: int)
{
    dst := $bv2int.32(src);
}

function {:builtin "(_ int2bv 32)"} $int2bv.32(i: int) returns (bv32);
function {:builtin "bv2nat"} $bv2int.32(i: bv32) returns (int);

function {:bvbuiltin "bvand"} $And'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvor"} $Or'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvxor"} $Xor'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvadd"} $Add'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvsub"} $Sub'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvmul"} $Mul'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvudiv"} $Div'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvurem"} $Mod'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvshl"} $Shl'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvlshr"} $Shr'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvult"} $Lt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv64'(bv64,bv64) returns(bool);

procedure {:inline 1} $AddBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Add'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $AddBv64_unchecked(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $SubBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv64'(src1, src2);
}

procedure {:inline 1} $MulBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Mul'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv64'(src1, src2);
}

procedure {:inline 1} $DivBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv64'(src1, src2);
}

procedure {:inline 1} $ModBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv64'(src1, src2);
}

procedure {:inline 1} $AndBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $And'Bv64'(src1,src2);
}

procedure {:inline 1} $OrBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Or'Bv64'(src1,src2);
}

procedure {:inline 1} $XorBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Xor'Bv64'(src1,src2);
}

procedure {:inline 1} $LtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Lt'Bv64'(src1,src2);
}

procedure {:inline 1} $LeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Le'Bv64'(src1,src2);
}

procedure {:inline 1} $GtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Gt'Bv64'(src1,src2);
}

procedure {:inline 1} $GeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Ge'Bv64'(src1,src2);
}

function $IsValid'bv64'(v: bv64): bool {
  $Ge'Bv64'(v,0bv64) && $Le'Bv64'(v,18446744073709551615bv64)
}

function {:inline} $IsEqual'bv64'(x: bv64, y: bv64): bool {
    x == y
}

procedure {:inline 1} $int2bv64(src: int) returns (dst: bv64)
{
    if (src > 18446744073709551615) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.64(src);
}

procedure {:inline 1} $bv2int64(src: bv64) returns (dst: int)
{
    dst := $bv2int.64(src);
}

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: int) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (int);

function {:bvbuiltin "bvand"} $And'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvor"} $Or'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvxor"} $Xor'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvadd"} $Add'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvsub"} $Sub'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvmul"} $Mul'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvudiv"} $Div'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvurem"} $Mod'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvshl"} $Shl'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvlshr"} $Shr'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvult"} $Lt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv128'(bv128,bv128) returns(bool);

procedure {:inline 1} $AddBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Add'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $AddBv128_unchecked(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $SubBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv128'(src1, src2);
}

procedure {:inline 1} $MulBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Mul'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv128'(src1, src2);
}

procedure {:inline 1} $DivBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv128'(src1, src2);
}

procedure {:inline 1} $ModBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv128'(src1, src2);
}

procedure {:inline 1} $AndBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $And'Bv128'(src1,src2);
}

procedure {:inline 1} $OrBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Or'Bv128'(src1,src2);
}

procedure {:inline 1} $XorBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Xor'Bv128'(src1,src2);
}

procedure {:inline 1} $LtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Lt'Bv128'(src1,src2);
}

procedure {:inline 1} $LeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Le'Bv128'(src1,src2);
}

procedure {:inline 1} $GtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Gt'Bv128'(src1,src2);
}

procedure {:inline 1} $GeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Ge'Bv128'(src1,src2);
}

function $IsValid'bv128'(v: bv128): bool {
  $Ge'Bv128'(v,0bv128) && $Le'Bv128'(v,340282366920938463463374607431768211455bv128)
}

function {:inline} $IsEqual'bv128'(x: bv128, y: bv128): bool {
    x == y
}

procedure {:inline 1} $int2bv128(src: int) returns (dst: bv128)
{
    if (src > 340282366920938463463374607431768211455) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.128(src);
}

procedure {:inline 1} $bv2int128(src: bv128) returns (dst: int)
{
    dst := $bv2int.128(src);
}

function {:builtin "(_ int2bv 128)"} $int2bv.128(i: int) returns (bv128);
function {:builtin "bv2nat"} $bv2int.128(i: bv128) returns (int);

function {:bvbuiltin "bvand"} $And'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvor"} $Or'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvxor"} $Xor'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvadd"} $Add'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvsub"} $Sub'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvmul"} $Mul'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvudiv"} $Div'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvurem"} $Mod'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvshl"} $Shl'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvlshr"} $Shr'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvult"} $Lt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv256'(bv256,bv256) returns(bool);

procedure {:inline 1} $AddBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Add'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $AddBv256_unchecked(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $SubBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv256'(src1, src2);
}

procedure {:inline 1} $MulBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Mul'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv256'(src1, src2);
}

procedure {:inline 1} $DivBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv256'(src1, src2);
}

procedure {:inline 1} $ModBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv256'(src1, src2);
}

procedure {:inline 1} $AndBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $And'Bv256'(src1,src2);
}

procedure {:inline 1} $OrBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Or'Bv256'(src1,src2);
}

procedure {:inline 1} $XorBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Xor'Bv256'(src1,src2);
}

procedure {:inline 1} $LtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Lt'Bv256'(src1,src2);
}

procedure {:inline 1} $LeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Le'Bv256'(src1,src2);
}

procedure {:inline 1} $GtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Gt'Bv256'(src1,src2);
}

procedure {:inline 1} $GeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Ge'Bv256'(src1,src2);
}

function $IsValid'bv256'(v: bv256): bool {
  $Ge'Bv256'(v,0bv256) && $Le'Bv256'(v,115792089237316195423570985008687907853269984665640564039457584007913129639935bv256)
}

function {:inline} $IsEqual'bv256'(x: bv256, y: bv256): bool {
    x == y
}

procedure {:inline 1} $int2bv256(src: int) returns (dst: bv256)
{
    if (src > 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.256(src);
}

procedure {:inline 1} $bv2int256(src: bv256) returns (dst: int)
{
    dst := $bv2int.256(src);
}

function {:builtin "(_ int2bv 256)"} $int2bv.256(i: int) returns (bv256);
function {:builtin "bv2nat"} $bv2int.256(i: bv256) returns (int);

datatype $Range {
    $Range(lb: int, ub: int)
}

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u16'(v: int): bool {
  v >= 0 && v <= $MAX_U16
}

function $IsValid'u32'(v: int): bool {
  v >= 0 && v <= $MAX_U32
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'u256'(v: int): bool {
  v >= 0 && v <= $MAX_U256
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(r->lb) &&  $IsValid'u64'(r->ub)
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   r->lb <= i && i < r->ub
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u16'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u32'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u256'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

datatype $Location {
    // A global resource location within the statically known resource type's memory,
    // where `a` is an address.
    $Global(a: int),
    // A local location. `i` is the unique index of the local.
    $Local(i: int),
    // The location of a reference outside of the verification scope, for example, a `&mut` parameter
    // of the function being verified. References with these locations don't need to be written back
    // when mutation ends.
    $Param(i: int),
    // The location of an uninitialized mutation. Using this to make sure that the location
    // will not be equal to any valid mutation locations, i.e., $Local, $Global, or $Param.
    $Uninitialized()
}

// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
datatype $Mutation<T> {
    $Mutation(l: $Location, p: Vec int, v: T)
}

// Representation of memory for a given type.
datatype $Memory<T> {
    $Memory(domain: [int]bool, contents: [int]T)
}

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    ref->v
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(m->l, m->p, v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(m->l, ExtendVec(m->p, offset), v)
}

// Return true if two mutations share the location and path
function {:inline} $IsSameMutation<T1, T2>(parent: $Mutation T1, child: $Mutation T2 ): bool {
    parent->l == child->l && parent->p == child->p
}

// Return true if the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    parent->l == child->l &&
    (var pp := parent->p;
    (var cp := child->p;
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true if the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    parent->l == child->l &&
    (var pp := parent->p;
    (var cp := child->p;
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    m1->l == m2->l
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    (m->l) is $Global
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    m->l == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    (m->l)->a
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    m->domain[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    m->contents[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(m->domain[a := true], m->contents[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(m->domain[a := false], m->contents)
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(m->domain[a := s->domain[a]],
            m->contents[a := s->contents[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $Abort(code: int) {
    $abort_flag := true;
    $abort_code := code;
}

function {:inline} $StdError(cat: int, reason: int): int {
    reason * 256 + cat
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU16(src: int) returns (dst: int)
{
    if (src > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU32(src: int) returns (dst: int)
{
    if (src > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU256(src: int) returns (dst: int)
{
    if (src > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// uninterpreted function to return an undefined value.
function $undefined_int(): int;

// Recursive exponentiation function
// Undefined unless e >=0.  $pow(0,0) is also undefined.
function $pow(n: int, e: int): int {
    if n != 0 && e == 0 then 1
    else if e > 0 then n * $pow(n, e - 1)
    else $undefined_int()
}

function $shl(src1: int, p: int): int {
    src1 * $pow(2, p)
}

function $shlU8(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 256
}

function $shlU16(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 65536
}

function $shlU32(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 4294967296
}

function $shlU64(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 18446744073709551616
}

function $shlU128(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 340282366920938463463374607431768211456
}

function $shlU256(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 115792089237316195423570985008687907853269984665640564039457584007913129639936
}

function $shr(src1: int, p: int): int {
    src1 div $pow(2, p)
}

// We need to know the size of the destination in order to drop bits
// that have been shifted left more than that, so we have $ShlU8/16/32/64/128/256
procedure {:inline 1} $ShlU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU8(src1, src2);
}

// Template for cast and shift operations of bitvector types

procedure {:inline 1} $CastBv8to8(src: bv8) returns (dst: bv8)
{
    dst := src;
}


function $shlBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shl'Bv8'(src1, src2)
}

procedure {:inline 1} $ShlBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2);
}

function $shrBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shr'Bv8'(src1, src2)
}

procedure {:inline 1} $ShrBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2);
}

procedure {:inline 1} $CastBv16to8(src: bv16) returns (dst: bv8)
{
    if ($Gt'Bv16'(src, 255bv16)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv32to8(src: bv32) returns (dst: bv8)
{
    if ($Gt'Bv32'(src, 255bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv64to8(src: bv64) returns (dst: bv8)
{
    if ($Gt'Bv64'(src, 255bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv128to8(src: bv128) returns (dst: bv8)
{
    if ($Gt'Bv128'(src, 255bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv256to8(src: bv256) returns (dst: bv8)
{
    if ($Gt'Bv256'(src, 255bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv8to16(src: bv8) returns (dst: bv16)
{
    dst := 0bv8 ++ src;
}


function $shlBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shl'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShlBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, 0bv8 ++ src2);
}

function $shrBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shr'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShrBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, 0bv8 ++ src2);
}

procedure {:inline 1} $CastBv16to16(src: bv16) returns (dst: bv16)
{
    dst := src;
}


function $shlBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shl'Bv16'(src1, src2)
}

procedure {:inline 1} $ShlBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2);
}

function $shrBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shr'Bv16'(src1, src2)
}

procedure {:inline 1} $ShrBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2);
}

procedure {:inline 1} $CastBv32to16(src: bv32) returns (dst: bv16)
{
    if ($Gt'Bv32'(src, 65535bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv64to16(src: bv64) returns (dst: bv16)
{
    if ($Gt'Bv64'(src, 65535bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv128to16(src: bv128) returns (dst: bv16)
{
    if ($Gt'Bv128'(src, 65535bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv256to16(src: bv256) returns (dst: bv16)
{
    if ($Gt'Bv256'(src, 65535bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv8to32(src: bv8) returns (dst: bv32)
{
    dst := 0bv24 ++ src;
}


function $shlBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShlBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, 0bv24 ++ src2);
}

function $shrBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShrBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, 0bv24 ++ src2);
}

procedure {:inline 1} $CastBv16to32(src: bv16) returns (dst: bv32)
{
    dst := 0bv16 ++ src;
}


function $shlBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShlBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, 0bv16 ++ src2);
}

function $shrBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShrBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, 0bv16 ++ src2);
}

procedure {:inline 1} $CastBv32to32(src: bv32) returns (dst: bv32)
{
    dst := src;
}


function $shlBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shl'Bv32'(src1, src2)
}

procedure {:inline 1} $ShlBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2);
}

function $shrBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shr'Bv32'(src1, src2)
}

procedure {:inline 1} $ShrBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2);
}

procedure {:inline 1} $CastBv64to32(src: bv64) returns (dst: bv32)
{
    if ($Gt'Bv64'(src, 2147483647bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv128to32(src: bv128) returns (dst: bv32)
{
    if ($Gt'Bv128'(src, 2147483647bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv256to32(src: bv256) returns (dst: bv32)
{
    if ($Gt'Bv256'(src, 2147483647bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv8to64(src: bv8) returns (dst: bv64)
{
    dst := 0bv56 ++ src;
}


function $shlBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShlBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv56 ++ src2);
}

function $shrBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShrBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv56 ++ src2);
}

procedure {:inline 1} $CastBv16to64(src: bv16) returns (dst: bv64)
{
    dst := 0bv48 ++ src;
}


function $shlBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShlBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv48 ++ src2);
}

function $shrBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShrBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv48 ++ src2);
}

procedure {:inline 1} $CastBv32to64(src: bv32) returns (dst: bv64)
{
    dst := 0bv32 ++ src;
}


function $shlBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShlBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv32 ++ src2);
}

function $shrBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShrBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv32 ++ src2);
}

procedure {:inline 1} $CastBv64to64(src: bv64) returns (dst: bv64)
{
    dst := src;
}


function $shlBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shl'Bv64'(src1, src2)
}

procedure {:inline 1} $ShlBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2);
}

function $shrBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shr'Bv64'(src1, src2)
}

procedure {:inline 1} $ShrBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2);
}

procedure {:inline 1} $CastBv128to64(src: bv128) returns (dst: bv64)
{
    if ($Gt'Bv128'(src, 18446744073709551615bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $shlBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv256to64(src: bv256) returns (dst: bv64)
{
    if ($Gt'Bv256'(src, 18446744073709551615bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $shlBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv8to128(src: bv8) returns (dst: bv128)
{
    dst := 0bv120 ++ src;
}


function $shlBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShlBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv120 ++ src2);
}

function $shrBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShrBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv120 ++ src2);
}

procedure {:inline 1} $CastBv16to128(src: bv16) returns (dst: bv128)
{
    dst := 0bv112 ++ src;
}


function $shlBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShlBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv112 ++ src2);
}

function $shrBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShrBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv112 ++ src2);
}

procedure {:inline 1} $CastBv32to128(src: bv32) returns (dst: bv128)
{
    dst := 0bv96 ++ src;
}


function $shlBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShlBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv96 ++ src2);
}

function $shrBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShrBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv96 ++ src2);
}

procedure {:inline 1} $CastBv64to128(src: bv64) returns (dst: bv128)
{
    dst := 0bv64 ++ src;
}


function $shlBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShlBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv64 ++ src2);
}

function $shrBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShrBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv64 ++ src2);
}

procedure {:inline 1} $CastBv128to128(src: bv128) returns (dst: bv128)
{
    dst := src;
}


function $shlBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shl'Bv128'(src1, src2)
}

procedure {:inline 1} $ShlBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, src2);
}

function $shrBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shr'Bv128'(src1, src2)
}

procedure {:inline 1} $ShrBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, src2);
}

procedure {:inline 1} $CastBv256to128(src: bv256) returns (dst: bv128)
{
    if ($Gt'Bv256'(src, 340282366920938463463374607431768211455bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[128:0];
}


function $shlBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shl'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShlBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, src2[128:0]);
}

function $shrBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shr'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShrBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, src2[128:0]);
}

procedure {:inline 1} $CastBv8to256(src: bv8) returns (dst: bv256)
{
    dst := 0bv248 ++ src;
}


function $shlBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShlBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    if ($Ge'Bv8'(src2, 256bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv248 ++ src2);
}

function $shrBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShrBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    if ($Ge'Bv8'(src2, 256bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv248 ++ src2);
}

procedure {:inline 1} $CastBv16to256(src: bv16) returns (dst: bv256)
{
    dst := 0bv240 ++ src;
}


function $shlBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShlBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv240 ++ src2);
}

function $shrBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShrBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv240 ++ src2);
}

procedure {:inline 1} $CastBv32to256(src: bv32) returns (dst: bv256)
{
    dst := 0bv224 ++ src;
}


function $shlBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShlBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv224 ++ src2);
}

function $shrBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShrBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv224 ++ src2);
}

procedure {:inline 1} $CastBv64to256(src: bv64) returns (dst: bv256)
{
    dst := 0bv192 ++ src;
}


function $shlBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShlBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv192 ++ src2);
}

function $shrBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShrBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv192 ++ src2);
}

procedure {:inline 1} $CastBv128to256(src: bv128) returns (dst: bv256)
{
    dst := 0bv128 ++ src;
}


function $shlBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShlBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv128 ++ src2);
}

function $shrBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShrBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv128 ++ src2);
}

procedure {:inline 1} $CastBv256to256(src: bv256) returns (dst: bv256)
{
    dst := src;
}


function $shlBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shl'Bv256'(src1, src2)
}

procedure {:inline 1} $ShlBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, src2);
}

function $shrBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shr'Bv256'(src1, src2)
}

procedure {:inline 1} $ShrBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, src2);
}

procedure {:inline 1} $ShlU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU16(src1, src2);
}

procedure {:inline 1} $ShlU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU32(src1, src2);
}

procedure {:inline 1} $ShlU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
       call $ExecFailureAbort();
       return;
    }
    dst := $shlU64(src1, src2);
}

procedure {:inline 1} $ShlU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU128(src1, src2);
}

procedure {:inline 1} $ShlU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shlU256(src1, src2);
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, r->lb, r->ub)
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`

// Not inlined. It appears faster this way.
function $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'#0'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'#0''(v: Vec (#0), prefix: Vec (#0)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'#0'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'#0''(v: Vec (#0), suffix: Vec (#0)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'#0'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'#0'(m: $Mutation (Vec (#0)), new_len: int) returns (v: (Vec (#0)), m': $Mutation (Vec (#0))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'#0'(m: $Mutation (Vec (#0)), new_len: int) returns (v: (Vec (#0)), m': $Mutation (Vec (#0))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'#0'(m: $Mutation (Vec (#0)), left: int, right: int) returns (m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var mid_vec: Vec (#0);
    var right_vec: Vec (#0);
    var v: Vec (#0);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'#0'(m: $Mutation (Vec (#0)), rot: int) returns (n: int, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    var left_vec: Vec (#0);
    var right_vec: Vec (#0);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'#0'(m: $Mutation (Vec (#0)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var mid_vec: Vec (#0);
    var right_vec: Vec (#0);
    var mid_left_vec: Vec (#0);
    var mid_right_vec: Vec (#0);
    var v: Vec (#0);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'#0'(m: $Mutation (Vec (#0)), i: int, e: #0) returns (m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var right_vec: Vec (#0);
    var v: Vec (#0);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(v1: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''), v2: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''), prefix: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''), suffix: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''), e: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''), e: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''): int;
axiom (forall v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''), e: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'':: {$IndexOfVec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v, e)}
    (var i := $IndexOfVec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v, e);
     if (!$ContainsVec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(): Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''() returns (v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(): Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), val: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'') returns (m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''), val: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''): Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''))) returns (e: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'', m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''))) {
    var v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), other: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')) returns (m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''))) returns (m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), other: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')) returns (m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), new_len: int) returns (v: (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), new_len: int) returns (v: (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), left: int, right: int) returns (m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''))) {
    var left_vec: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    var mid_vec: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    var right_vec: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    var v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), rot: int) returns (n: int, m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''))) {
    var v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    var len: int;
    var left_vec: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    var right_vec: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''))) {
    var left_vec: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    var mid_vec: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    var right_vec: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    var mid_left_vec: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    var mid_right_vec: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    var v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), i: int, e: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'') returns (m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''))) {
    var left_vec: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    var right_vec: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    var v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''), i: int) returns (dst: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''), i: int): $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), index: int)
returns (dst: $Mutation ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''), m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')))
{
    var v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''), i: int): $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), i: int, j: int) returns (m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')))
{
    var v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''), i: int, j: int): Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), i: int) returns (e: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'', m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')))
{
    var v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')), i: int) returns (e: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'', m': $Mutation (Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')))
{
    var len: int;
    var v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''), e: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'') returns (res: bool)  {
    res := $ContainsVec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''), e: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_big_vector_BigVector'address'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_big_vector_BigVector'address'''(v1: Vec ($1_big_vector_BigVector'address'), v2: Vec ($1_big_vector_BigVector'address')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_big_vector_BigVector'address''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_big_vector_BigVector'address'''(v: Vec ($1_big_vector_BigVector'address'), prefix: Vec ($1_big_vector_BigVector'address')): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_big_vector_BigVector'address''(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_big_vector_BigVector'address'''(v: Vec ($1_big_vector_BigVector'address'), suffix: Vec ($1_big_vector_BigVector'address')): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_big_vector_BigVector'address''(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_big_vector_BigVector'address'''(v: Vec ($1_big_vector_BigVector'address')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_big_vector_BigVector'address''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_big_vector_BigVector'address''(v: Vec ($1_big_vector_BigVector'address'), e: $1_big_vector_BigVector'address'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_big_vector_BigVector'address''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_big_vector_BigVector'address''(v: Vec ($1_big_vector_BigVector'address'), e: $1_big_vector_BigVector'address'): int;
axiom (forall v: Vec ($1_big_vector_BigVector'address'), e: $1_big_vector_BigVector'address':: {$IndexOfVec'$1_big_vector_BigVector'address''(v, e)}
    (var i := $IndexOfVec'$1_big_vector_BigVector'address''(v, e);
     if (!$ContainsVec'$1_big_vector_BigVector'address''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_big_vector_BigVector'address''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_big_vector_BigVector'address''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_big_vector_BigVector'address''(v: Vec ($1_big_vector_BigVector'address')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_big_vector_BigVector'address''(): Vec ($1_big_vector_BigVector'address') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_big_vector_BigVector'address''() returns (v: Vec ($1_big_vector_BigVector'address')) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_big_vector_BigVector'address''(): Vec ($1_big_vector_BigVector'address') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_big_vector_BigVector'address''(v: Vec ($1_big_vector_BigVector'address')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address')), val: $1_big_vector_BigVector'address') returns (m': $Mutation (Vec ($1_big_vector_BigVector'address'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_big_vector_BigVector'address''(v: Vec ($1_big_vector_BigVector'address'), val: $1_big_vector_BigVector'address'): Vec ($1_big_vector_BigVector'address') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address'))) returns (e: $1_big_vector_BigVector'address', m': $Mutation (Vec ($1_big_vector_BigVector'address'))) {
    var v: Vec ($1_big_vector_BigVector'address');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address')), other: Vec ($1_big_vector_BigVector'address')) returns (m': $Mutation (Vec ($1_big_vector_BigVector'address'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address'))) returns (m': $Mutation (Vec ($1_big_vector_BigVector'address'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address')), other: Vec ($1_big_vector_BigVector'address')) returns (m': $Mutation (Vec ($1_big_vector_BigVector'address'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address')), new_len: int) returns (v: (Vec ($1_big_vector_BigVector'address')), m': $Mutation (Vec ($1_big_vector_BigVector'address'))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address')), new_len: int) returns (v: (Vec ($1_big_vector_BigVector'address')), m': $Mutation (Vec ($1_big_vector_BigVector'address'))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address')), left: int, right: int) returns (m': $Mutation (Vec ($1_big_vector_BigVector'address'))) {
    var left_vec: Vec ($1_big_vector_BigVector'address');
    var mid_vec: Vec ($1_big_vector_BigVector'address');
    var right_vec: Vec ($1_big_vector_BigVector'address');
    var v: Vec ($1_big_vector_BigVector'address');
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address')), rot: int) returns (n: int, m': $Mutation (Vec ($1_big_vector_BigVector'address'))) {
    var v: Vec ($1_big_vector_BigVector'address');
    var len: int;
    var left_vec: Vec ($1_big_vector_BigVector'address');
    var right_vec: Vec ($1_big_vector_BigVector'address');
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address')), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_big_vector_BigVector'address'))) {
    var left_vec: Vec ($1_big_vector_BigVector'address');
    var mid_vec: Vec ($1_big_vector_BigVector'address');
    var right_vec: Vec ($1_big_vector_BigVector'address');
    var mid_left_vec: Vec ($1_big_vector_BigVector'address');
    var mid_right_vec: Vec ($1_big_vector_BigVector'address');
    var v: Vec ($1_big_vector_BigVector'address');
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address')), i: int, e: $1_big_vector_BigVector'address') returns (m': $Mutation (Vec ($1_big_vector_BigVector'address'))) {
    var left_vec: Vec ($1_big_vector_BigVector'address');
    var right_vec: Vec ($1_big_vector_BigVector'address');
    var v: Vec ($1_big_vector_BigVector'address');
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_big_vector_BigVector'address''(v: Vec ($1_big_vector_BigVector'address')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_big_vector_BigVector'address''(v: Vec ($1_big_vector_BigVector'address')): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_big_vector_BigVector'address''(v: Vec ($1_big_vector_BigVector'address'), i: int) returns (dst: $1_big_vector_BigVector'address') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_big_vector_BigVector'address''(v: Vec ($1_big_vector_BigVector'address'), i: int): $1_big_vector_BigVector'address' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address')), index: int)
returns (dst: $Mutation ($1_big_vector_BigVector'address'), m': $Mutation (Vec ($1_big_vector_BigVector'address')))
{
    var v: Vec ($1_big_vector_BigVector'address');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_big_vector_BigVector'address''(v: Vec ($1_big_vector_BigVector'address'), i: int): $1_big_vector_BigVector'address' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_big_vector_BigVector'address''(v: Vec ($1_big_vector_BigVector'address')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address')), i: int, j: int) returns (m': $Mutation (Vec ($1_big_vector_BigVector'address')))
{
    var v: Vec ($1_big_vector_BigVector'address');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_big_vector_BigVector'address''(v: Vec ($1_big_vector_BigVector'address'), i: int, j: int): Vec ($1_big_vector_BigVector'address') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address')), i: int) returns (e: $1_big_vector_BigVector'address', m': $Mutation (Vec ($1_big_vector_BigVector'address')))
{
    var v: Vec ($1_big_vector_BigVector'address');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_big_vector_BigVector'address''(m: $Mutation (Vec ($1_big_vector_BigVector'address')), i: int) returns (e: $1_big_vector_BigVector'address', m': $Mutation (Vec ($1_big_vector_BigVector'address')))
{
    var len: int;
    var v: Vec ($1_big_vector_BigVector'address');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_big_vector_BigVector'address''(v: Vec ($1_big_vector_BigVector'address'), e: $1_big_vector_BigVector'address') returns (res: bool)  {
    res := $ContainsVec'$1_big_vector_BigVector'address''(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_big_vector_BigVector'address''(v: Vec ($1_big_vector_BigVector'address'), e: $1_big_vector_BigVector'address') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_big_vector_BigVector'address''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_function_info_FunctionInfo`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_function_info_FunctionInfo''(v1: Vec ($1_function_info_FunctionInfo), v2: Vec ($1_function_info_FunctionInfo)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_function_info_FunctionInfo'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_function_info_FunctionInfo''(v: Vec ($1_function_info_FunctionInfo), prefix: Vec ($1_function_info_FunctionInfo)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_function_info_FunctionInfo'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_function_info_FunctionInfo''(v: Vec ($1_function_info_FunctionInfo), suffix: Vec ($1_function_info_FunctionInfo)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_function_info_FunctionInfo'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_function_info_FunctionInfo''(v: Vec ($1_function_info_FunctionInfo)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_function_info_FunctionInfo'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), e: $1_function_info_FunctionInfo): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_function_info_FunctionInfo'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), e: $1_function_info_FunctionInfo): int;
axiom (forall v: Vec ($1_function_info_FunctionInfo), e: $1_function_info_FunctionInfo:: {$IndexOfVec'$1_function_info_FunctionInfo'(v, e)}
    (var i := $IndexOfVec'$1_function_info_FunctionInfo'(v, e);
     if (!$ContainsVec'$1_function_info_FunctionInfo'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_function_info_FunctionInfo'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_function_info_FunctionInfo'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_function_info_FunctionInfo'(): Vec ($1_function_info_FunctionInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_function_info_FunctionInfo'() returns (v: Vec ($1_function_info_FunctionInfo)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_function_info_FunctionInfo'(): Vec ($1_function_info_FunctionInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), val: $1_function_info_FunctionInfo) returns (m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), val: $1_function_info_FunctionInfo): Vec ($1_function_info_FunctionInfo) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo))) returns (e: $1_function_info_FunctionInfo, m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    var v: Vec ($1_function_info_FunctionInfo);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), other: Vec ($1_function_info_FunctionInfo)) returns (m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo))) returns (m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), other: Vec ($1_function_info_FunctionInfo)) returns (m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), new_len: int) returns (v: (Vec ($1_function_info_FunctionInfo)), m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), new_len: int) returns (v: (Vec ($1_function_info_FunctionInfo)), m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), left: int, right: int) returns (m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    var left_vec: Vec ($1_function_info_FunctionInfo);
    var mid_vec: Vec ($1_function_info_FunctionInfo);
    var right_vec: Vec ($1_function_info_FunctionInfo);
    var v: Vec ($1_function_info_FunctionInfo);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), rot: int) returns (n: int, m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    var v: Vec ($1_function_info_FunctionInfo);
    var len: int;
    var left_vec: Vec ($1_function_info_FunctionInfo);
    var right_vec: Vec ($1_function_info_FunctionInfo);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    var left_vec: Vec ($1_function_info_FunctionInfo);
    var mid_vec: Vec ($1_function_info_FunctionInfo);
    var right_vec: Vec ($1_function_info_FunctionInfo);
    var mid_left_vec: Vec ($1_function_info_FunctionInfo);
    var mid_right_vec: Vec ($1_function_info_FunctionInfo);
    var v: Vec ($1_function_info_FunctionInfo);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), i: int, e: $1_function_info_FunctionInfo) returns (m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    var left_vec: Vec ($1_function_info_FunctionInfo);
    var right_vec: Vec ($1_function_info_FunctionInfo);
    var v: Vec ($1_function_info_FunctionInfo);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), i: int) returns (dst: $1_function_info_FunctionInfo) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), i: int): $1_function_info_FunctionInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), index: int)
returns (dst: $Mutation ($1_function_info_FunctionInfo), m': $Mutation (Vec ($1_function_info_FunctionInfo)))
{
    var v: Vec ($1_function_info_FunctionInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), i: int): $1_function_info_FunctionInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), i: int, j: int) returns (m': $Mutation (Vec ($1_function_info_FunctionInfo)))
{
    var v: Vec ($1_function_info_FunctionInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), i: int, j: int): Vec ($1_function_info_FunctionInfo) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), i: int) returns (e: $1_function_info_FunctionInfo, m': $Mutation (Vec ($1_function_info_FunctionInfo)))
{
    var v: Vec ($1_function_info_FunctionInfo);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), i: int) returns (e: $1_function_info_FunctionInfo, m': $Mutation (Vec ($1_function_info_FunctionInfo)))
{
    var len: int;
    var v: Vec ($1_function_info_FunctionInfo);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), e: $1_function_info_FunctionInfo) returns (res: bool)  {
    res := $ContainsVec'$1_function_info_FunctionInfo'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), e: $1_function_info_FunctionInfo) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_function_info_FunctionInfo'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_fungible_asset_FungibleStore`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_fungible_asset_FungibleStore''(v1: Vec ($1_fungible_asset_FungibleStore), v2: Vec ($1_fungible_asset_FungibleStore)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_fungible_asset_FungibleStore'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_fungible_asset_FungibleStore''(v: Vec ($1_fungible_asset_FungibleStore), prefix: Vec ($1_fungible_asset_FungibleStore)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_fungible_asset_FungibleStore'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_fungible_asset_FungibleStore''(v: Vec ($1_fungible_asset_FungibleStore), suffix: Vec ($1_fungible_asset_FungibleStore)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_fungible_asset_FungibleStore'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_fungible_asset_FungibleStore''(v: Vec ($1_fungible_asset_FungibleStore)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_fungible_asset_FungibleStore'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), e: $1_fungible_asset_FungibleStore): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_fungible_asset_FungibleStore'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), e: $1_fungible_asset_FungibleStore): int;
axiom (forall v: Vec ($1_fungible_asset_FungibleStore), e: $1_fungible_asset_FungibleStore:: {$IndexOfVec'$1_fungible_asset_FungibleStore'(v, e)}
    (var i := $IndexOfVec'$1_fungible_asset_FungibleStore'(v, e);
     if (!$ContainsVec'$1_fungible_asset_FungibleStore'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_fungible_asset_FungibleStore'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_fungible_asset_FungibleStore'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_fungible_asset_FungibleStore'(): Vec ($1_fungible_asset_FungibleStore) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_fungible_asset_FungibleStore'() returns (v: Vec ($1_fungible_asset_FungibleStore)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_fungible_asset_FungibleStore'(): Vec ($1_fungible_asset_FungibleStore) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), val: $1_fungible_asset_FungibleStore) returns (m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), val: $1_fungible_asset_FungibleStore): Vec ($1_fungible_asset_FungibleStore) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore))) returns (e: $1_fungible_asset_FungibleStore, m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    var v: Vec ($1_fungible_asset_FungibleStore);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), other: Vec ($1_fungible_asset_FungibleStore)) returns (m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore))) returns (m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), other: Vec ($1_fungible_asset_FungibleStore)) returns (m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), new_len: int) returns (v: (Vec ($1_fungible_asset_FungibleStore)), m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), new_len: int) returns (v: (Vec ($1_fungible_asset_FungibleStore)), m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), left: int, right: int) returns (m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    var left_vec: Vec ($1_fungible_asset_FungibleStore);
    var mid_vec: Vec ($1_fungible_asset_FungibleStore);
    var right_vec: Vec ($1_fungible_asset_FungibleStore);
    var v: Vec ($1_fungible_asset_FungibleStore);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), rot: int) returns (n: int, m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    var v: Vec ($1_fungible_asset_FungibleStore);
    var len: int;
    var left_vec: Vec ($1_fungible_asset_FungibleStore);
    var right_vec: Vec ($1_fungible_asset_FungibleStore);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    var left_vec: Vec ($1_fungible_asset_FungibleStore);
    var mid_vec: Vec ($1_fungible_asset_FungibleStore);
    var right_vec: Vec ($1_fungible_asset_FungibleStore);
    var mid_left_vec: Vec ($1_fungible_asset_FungibleStore);
    var mid_right_vec: Vec ($1_fungible_asset_FungibleStore);
    var v: Vec ($1_fungible_asset_FungibleStore);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), i: int, e: $1_fungible_asset_FungibleStore) returns (m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    var left_vec: Vec ($1_fungible_asset_FungibleStore);
    var right_vec: Vec ($1_fungible_asset_FungibleStore);
    var v: Vec ($1_fungible_asset_FungibleStore);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), i: int) returns (dst: $1_fungible_asset_FungibleStore) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), i: int): $1_fungible_asset_FungibleStore {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), index: int)
returns (dst: $Mutation ($1_fungible_asset_FungibleStore), m': $Mutation (Vec ($1_fungible_asset_FungibleStore)))
{
    var v: Vec ($1_fungible_asset_FungibleStore);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), i: int): $1_fungible_asset_FungibleStore {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), i: int, j: int) returns (m': $Mutation (Vec ($1_fungible_asset_FungibleStore)))
{
    var v: Vec ($1_fungible_asset_FungibleStore);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), i: int, j: int): Vec ($1_fungible_asset_FungibleStore) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), i: int) returns (e: $1_fungible_asset_FungibleStore, m': $Mutation (Vec ($1_fungible_asset_FungibleStore)))
{
    var v: Vec ($1_fungible_asset_FungibleStore);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), i: int) returns (e: $1_fungible_asset_FungibleStore, m': $Mutation (Vec ($1_fungible_asset_FungibleStore)))
{
    var len: int;
    var v: Vec ($1_fungible_asset_FungibleStore);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), e: $1_fungible_asset_FungibleStore) returns (res: bool)  {
    res := $ContainsVec'$1_fungible_asset_FungibleStore'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), e: $1_fungible_asset_FungibleStore) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_fungible_asset_FungibleStore'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_object_Object'$bb_pool_v3_LiquidityPoolV3'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v1: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), v2: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), prefix: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), suffix: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), e: $1_object_Object'$bb_pool_v3_LiquidityPoolV3'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), e: $1_object_Object'$bb_pool_v3_LiquidityPoolV3'): int;
axiom (forall v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), e: $1_object_Object'$bb_pool_v3_LiquidityPoolV3':: {$IndexOfVec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v, e)}
    (var i := $IndexOfVec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v, e);
     if (!$ContainsVec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(): Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''() returns (v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(): Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), val: $1_object_Object'$bb_pool_v3_LiquidityPoolV3') returns (m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), val: $1_object_Object'$bb_pool_v3_LiquidityPoolV3'): Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) returns (e: $1_object_Object'$bb_pool_v3_LiquidityPoolV3', m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) {
    var v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), other: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')) returns (m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) returns (m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), other: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')) returns (m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), new_len: int) returns (v: (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), new_len: int) returns (v: (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), left: int, right: int) returns (m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) {
    var left_vec: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    var mid_vec: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    var right_vec: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    var v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), rot: int) returns (n: int, m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) {
    var v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    var len: int;
    var left_vec: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    var right_vec: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) {
    var left_vec: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    var mid_vec: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    var right_vec: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    var mid_left_vec: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    var mid_right_vec: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    var v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), i: int, e: $1_object_Object'$bb_pool_v3_LiquidityPoolV3') returns (m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) {
    var left_vec: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    var right_vec: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    var v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), i: int) returns (dst: $1_object_Object'$bb_pool_v3_LiquidityPoolV3') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), i: int): $1_object_Object'$bb_pool_v3_LiquidityPoolV3' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), index: int)
returns (dst: $Mutation ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')))
{
    var v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), i: int): $1_object_Object'$bb_pool_v3_LiquidityPoolV3' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), i: int, j: int) returns (m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')))
{
    var v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), i: int, j: int): Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), i: int) returns (e: $1_object_Object'$bb_pool_v3_LiquidityPoolV3', m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')))
{
    var v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(m: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), i: int) returns (e: $1_object_Object'$bb_pool_v3_LiquidityPoolV3', m': $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')))
{
    var len: int;
    var v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), e: $1_object_Object'$bb_pool_v3_LiquidityPoolV3') returns (res: bool)  {
    res := $ContainsVec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), e: $1_object_Object'$bb_pool_v3_LiquidityPoolV3') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$bb_rewarder_PositionReward`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$bb_rewarder_PositionReward''(v1: Vec ($bb_rewarder_PositionReward), v2: Vec ($bb_rewarder_PositionReward)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$bb_rewarder_PositionReward'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$bb_rewarder_PositionReward''(v: Vec ($bb_rewarder_PositionReward), prefix: Vec ($bb_rewarder_PositionReward)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$bb_rewarder_PositionReward'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$bb_rewarder_PositionReward''(v: Vec ($bb_rewarder_PositionReward), suffix: Vec ($bb_rewarder_PositionReward)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$bb_rewarder_PositionReward'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$bb_rewarder_PositionReward''(v: Vec ($bb_rewarder_PositionReward)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$bb_rewarder_PositionReward'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$bb_rewarder_PositionReward'(v: Vec ($bb_rewarder_PositionReward), e: $bb_rewarder_PositionReward): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$bb_rewarder_PositionReward'(ReadVec(v, i), e))
}

function $IndexOfVec'$bb_rewarder_PositionReward'(v: Vec ($bb_rewarder_PositionReward), e: $bb_rewarder_PositionReward): int;
axiom (forall v: Vec ($bb_rewarder_PositionReward), e: $bb_rewarder_PositionReward:: {$IndexOfVec'$bb_rewarder_PositionReward'(v, e)}
    (var i := $IndexOfVec'$bb_rewarder_PositionReward'(v, e);
     if (!$ContainsVec'$bb_rewarder_PositionReward'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$bb_rewarder_PositionReward'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$bb_rewarder_PositionReward'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$bb_rewarder_PositionReward'(v: Vec ($bb_rewarder_PositionReward)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$bb_rewarder_PositionReward'(): Vec ($bb_rewarder_PositionReward) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$bb_rewarder_PositionReward'() returns (v: Vec ($bb_rewarder_PositionReward)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$bb_rewarder_PositionReward'(): Vec ($bb_rewarder_PositionReward) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$bb_rewarder_PositionReward'(v: Vec ($bb_rewarder_PositionReward)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward)), val: $bb_rewarder_PositionReward) returns (m': $Mutation (Vec ($bb_rewarder_PositionReward))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$bb_rewarder_PositionReward'(v: Vec ($bb_rewarder_PositionReward), val: $bb_rewarder_PositionReward): Vec ($bb_rewarder_PositionReward) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward))) returns (e: $bb_rewarder_PositionReward, m': $Mutation (Vec ($bb_rewarder_PositionReward))) {
    var v: Vec ($bb_rewarder_PositionReward);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward)), other: Vec ($bb_rewarder_PositionReward)) returns (m': $Mutation (Vec ($bb_rewarder_PositionReward))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward))) returns (m': $Mutation (Vec ($bb_rewarder_PositionReward))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward)), other: Vec ($bb_rewarder_PositionReward)) returns (m': $Mutation (Vec ($bb_rewarder_PositionReward))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward)), new_len: int) returns (v: (Vec ($bb_rewarder_PositionReward)), m': $Mutation (Vec ($bb_rewarder_PositionReward))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward)), new_len: int) returns (v: (Vec ($bb_rewarder_PositionReward)), m': $Mutation (Vec ($bb_rewarder_PositionReward))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward)), left: int, right: int) returns (m': $Mutation (Vec ($bb_rewarder_PositionReward))) {
    var left_vec: Vec ($bb_rewarder_PositionReward);
    var mid_vec: Vec ($bb_rewarder_PositionReward);
    var right_vec: Vec ($bb_rewarder_PositionReward);
    var v: Vec ($bb_rewarder_PositionReward);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward)), rot: int) returns (n: int, m': $Mutation (Vec ($bb_rewarder_PositionReward))) {
    var v: Vec ($bb_rewarder_PositionReward);
    var len: int;
    var left_vec: Vec ($bb_rewarder_PositionReward);
    var right_vec: Vec ($bb_rewarder_PositionReward);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($bb_rewarder_PositionReward))) {
    var left_vec: Vec ($bb_rewarder_PositionReward);
    var mid_vec: Vec ($bb_rewarder_PositionReward);
    var right_vec: Vec ($bb_rewarder_PositionReward);
    var mid_left_vec: Vec ($bb_rewarder_PositionReward);
    var mid_right_vec: Vec ($bb_rewarder_PositionReward);
    var v: Vec ($bb_rewarder_PositionReward);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward)), i: int, e: $bb_rewarder_PositionReward) returns (m': $Mutation (Vec ($bb_rewarder_PositionReward))) {
    var left_vec: Vec ($bb_rewarder_PositionReward);
    var right_vec: Vec ($bb_rewarder_PositionReward);
    var v: Vec ($bb_rewarder_PositionReward);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$bb_rewarder_PositionReward'(v: Vec ($bb_rewarder_PositionReward)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$bb_rewarder_PositionReward'(v: Vec ($bb_rewarder_PositionReward)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$bb_rewarder_PositionReward'(v: Vec ($bb_rewarder_PositionReward), i: int) returns (dst: $bb_rewarder_PositionReward) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$bb_rewarder_PositionReward'(v: Vec ($bb_rewarder_PositionReward), i: int): $bb_rewarder_PositionReward {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward)), index: int)
returns (dst: $Mutation ($bb_rewarder_PositionReward), m': $Mutation (Vec ($bb_rewarder_PositionReward)))
{
    var v: Vec ($bb_rewarder_PositionReward);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$bb_rewarder_PositionReward'(v: Vec ($bb_rewarder_PositionReward), i: int): $bb_rewarder_PositionReward {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$bb_rewarder_PositionReward'(v: Vec ($bb_rewarder_PositionReward)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward)), i: int, j: int) returns (m': $Mutation (Vec ($bb_rewarder_PositionReward)))
{
    var v: Vec ($bb_rewarder_PositionReward);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$bb_rewarder_PositionReward'(v: Vec ($bb_rewarder_PositionReward), i: int, j: int): Vec ($bb_rewarder_PositionReward) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward)), i: int) returns (e: $bb_rewarder_PositionReward, m': $Mutation (Vec ($bb_rewarder_PositionReward)))
{
    var v: Vec ($bb_rewarder_PositionReward);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$bb_rewarder_PositionReward'(m: $Mutation (Vec ($bb_rewarder_PositionReward)), i: int) returns (e: $bb_rewarder_PositionReward, m': $Mutation (Vec ($bb_rewarder_PositionReward)))
{
    var len: int;
    var v: Vec ($bb_rewarder_PositionReward);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$bb_rewarder_PositionReward'(v: Vec ($bb_rewarder_PositionReward), e: $bb_rewarder_PositionReward) returns (res: bool)  {
    res := $ContainsVec'$bb_rewarder_PositionReward'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$bb_rewarder_PositionReward'(v: Vec ($bb_rewarder_PositionReward), e: $bb_rewarder_PositionReward) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$bb_rewarder_PositionReward'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$bb_rewarder_Rewarder`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$bb_rewarder_Rewarder''(v1: Vec ($bb_rewarder_Rewarder), v2: Vec ($bb_rewarder_Rewarder)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$bb_rewarder_Rewarder'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$bb_rewarder_Rewarder''(v: Vec ($bb_rewarder_Rewarder), prefix: Vec ($bb_rewarder_Rewarder)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$bb_rewarder_Rewarder'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$bb_rewarder_Rewarder''(v: Vec ($bb_rewarder_Rewarder), suffix: Vec ($bb_rewarder_Rewarder)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$bb_rewarder_Rewarder'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$bb_rewarder_Rewarder''(v: Vec ($bb_rewarder_Rewarder)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$bb_rewarder_Rewarder'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$bb_rewarder_Rewarder'(v: Vec ($bb_rewarder_Rewarder), e: $bb_rewarder_Rewarder): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$bb_rewarder_Rewarder'(ReadVec(v, i), e))
}

function $IndexOfVec'$bb_rewarder_Rewarder'(v: Vec ($bb_rewarder_Rewarder), e: $bb_rewarder_Rewarder): int;
axiom (forall v: Vec ($bb_rewarder_Rewarder), e: $bb_rewarder_Rewarder:: {$IndexOfVec'$bb_rewarder_Rewarder'(v, e)}
    (var i := $IndexOfVec'$bb_rewarder_Rewarder'(v, e);
     if (!$ContainsVec'$bb_rewarder_Rewarder'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$bb_rewarder_Rewarder'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$bb_rewarder_Rewarder'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$bb_rewarder_Rewarder'(v: Vec ($bb_rewarder_Rewarder)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$bb_rewarder_Rewarder'(): Vec ($bb_rewarder_Rewarder) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$bb_rewarder_Rewarder'() returns (v: Vec ($bb_rewarder_Rewarder)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$bb_rewarder_Rewarder'(): Vec ($bb_rewarder_Rewarder) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$bb_rewarder_Rewarder'(v: Vec ($bb_rewarder_Rewarder)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder)), val: $bb_rewarder_Rewarder) returns (m': $Mutation (Vec ($bb_rewarder_Rewarder))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$bb_rewarder_Rewarder'(v: Vec ($bb_rewarder_Rewarder), val: $bb_rewarder_Rewarder): Vec ($bb_rewarder_Rewarder) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder))) returns (e: $bb_rewarder_Rewarder, m': $Mutation (Vec ($bb_rewarder_Rewarder))) {
    var v: Vec ($bb_rewarder_Rewarder);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder)), other: Vec ($bb_rewarder_Rewarder)) returns (m': $Mutation (Vec ($bb_rewarder_Rewarder))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder))) returns (m': $Mutation (Vec ($bb_rewarder_Rewarder))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder)), other: Vec ($bb_rewarder_Rewarder)) returns (m': $Mutation (Vec ($bb_rewarder_Rewarder))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder)), new_len: int) returns (v: (Vec ($bb_rewarder_Rewarder)), m': $Mutation (Vec ($bb_rewarder_Rewarder))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder)), new_len: int) returns (v: (Vec ($bb_rewarder_Rewarder)), m': $Mutation (Vec ($bb_rewarder_Rewarder))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder)), left: int, right: int) returns (m': $Mutation (Vec ($bb_rewarder_Rewarder))) {
    var left_vec: Vec ($bb_rewarder_Rewarder);
    var mid_vec: Vec ($bb_rewarder_Rewarder);
    var right_vec: Vec ($bb_rewarder_Rewarder);
    var v: Vec ($bb_rewarder_Rewarder);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder)), rot: int) returns (n: int, m': $Mutation (Vec ($bb_rewarder_Rewarder))) {
    var v: Vec ($bb_rewarder_Rewarder);
    var len: int;
    var left_vec: Vec ($bb_rewarder_Rewarder);
    var right_vec: Vec ($bb_rewarder_Rewarder);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($bb_rewarder_Rewarder))) {
    var left_vec: Vec ($bb_rewarder_Rewarder);
    var mid_vec: Vec ($bb_rewarder_Rewarder);
    var right_vec: Vec ($bb_rewarder_Rewarder);
    var mid_left_vec: Vec ($bb_rewarder_Rewarder);
    var mid_right_vec: Vec ($bb_rewarder_Rewarder);
    var v: Vec ($bb_rewarder_Rewarder);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder)), i: int, e: $bb_rewarder_Rewarder) returns (m': $Mutation (Vec ($bb_rewarder_Rewarder))) {
    var left_vec: Vec ($bb_rewarder_Rewarder);
    var right_vec: Vec ($bb_rewarder_Rewarder);
    var v: Vec ($bb_rewarder_Rewarder);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$bb_rewarder_Rewarder'(v: Vec ($bb_rewarder_Rewarder)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$bb_rewarder_Rewarder'(v: Vec ($bb_rewarder_Rewarder)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$bb_rewarder_Rewarder'(v: Vec ($bb_rewarder_Rewarder), i: int) returns (dst: $bb_rewarder_Rewarder) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$bb_rewarder_Rewarder'(v: Vec ($bb_rewarder_Rewarder), i: int): $bb_rewarder_Rewarder {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder)), index: int)
returns (dst: $Mutation ($bb_rewarder_Rewarder), m': $Mutation (Vec ($bb_rewarder_Rewarder)))
{
    var v: Vec ($bb_rewarder_Rewarder);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$bb_rewarder_Rewarder'(v: Vec ($bb_rewarder_Rewarder), i: int): $bb_rewarder_Rewarder {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$bb_rewarder_Rewarder'(v: Vec ($bb_rewarder_Rewarder)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder)), i: int, j: int) returns (m': $Mutation (Vec ($bb_rewarder_Rewarder)))
{
    var v: Vec ($bb_rewarder_Rewarder);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$bb_rewarder_Rewarder'(v: Vec ($bb_rewarder_Rewarder), i: int, j: int): Vec ($bb_rewarder_Rewarder) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder)), i: int) returns (e: $bb_rewarder_Rewarder, m': $Mutation (Vec ($bb_rewarder_Rewarder)))
{
    var v: Vec ($bb_rewarder_Rewarder);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$bb_rewarder_Rewarder'(m: $Mutation (Vec ($bb_rewarder_Rewarder)), i: int) returns (e: $bb_rewarder_Rewarder, m': $Mutation (Vec ($bb_rewarder_Rewarder)))
{
    var len: int;
    var v: Vec ($bb_rewarder_Rewarder);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$bb_rewarder_Rewarder'(v: Vec ($bb_rewarder_Rewarder), e: $bb_rewarder_Rewarder) returns (res: bool)  {
    res := $ContainsVec'$bb_rewarder_Rewarder'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$bb_rewarder_Rewarder'(v: Vec ($bb_rewarder_Rewarder), e: $bb_rewarder_Rewarder) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$bb_rewarder_Rewarder'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`

// Not inlined. It appears faster this way.
function $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'address'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'address''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'address'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'address''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'address'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'address'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'address'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'address'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'address'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'address'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'address'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u128`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u128''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u128'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u128''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u128'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u128''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u128'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u128''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u128'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u128'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u128'(ReadVec(v, i), e))
}

function $IndexOfVec'u128'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u128'(v, e)}
    (var i := $IndexOfVec'u128'(v, e);
     if (!$ContainsVec'u128'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u128'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u128'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u128'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u128'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u128'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u128'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u128'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u128'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u128'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u128'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u128'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u128'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u128'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u128'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u128'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u128'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u128'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u128'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u128'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u128'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u128'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u128'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u128'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u128'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u128'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u128'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u128'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u128'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u128'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u128'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u128'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u128'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u128'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u128'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u64`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u64''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u64'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u64''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u64'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u64''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u64'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u64''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u64'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e))
}

function $IndexOfVec'u64'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u64'(v, e)}
    (var i := $IndexOfVec'u64'(v, e);
     if (!$ContainsVec'u64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u64'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u64'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u64'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u64'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u64'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u64'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u64'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u64'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u64'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u64'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u64'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u64'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u64'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u64'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u64'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u64'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u64'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u64'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u64'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u64'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u64'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u64'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u64'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u64'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u64'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u8''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u8''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u8'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u8'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u8'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u8'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u8'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u8'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv128`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv128''(v1: Vec (bv128), v2: Vec (bv128)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv128'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv128''(v: Vec (bv128), prefix: Vec (bv128)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv128'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv128''(v: Vec (bv128), suffix: Vec (bv128)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv128'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv128''(v: Vec (bv128)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv128'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv128'(v: Vec (bv128), e: bv128): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv128'(ReadVec(v, i), e))
}

function $IndexOfVec'bv128'(v: Vec (bv128), e: bv128): int;
axiom (forall v: Vec (bv128), e: bv128:: {$IndexOfVec'bv128'(v, e)}
    (var i := $IndexOfVec'bv128'(v, e);
     if (!$ContainsVec'bv128'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv128'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv128'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv128'(v: Vec (bv128)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv128'(): Vec (bv128) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv128'() returns (v: Vec (bv128)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv128'(): Vec (bv128) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv128'(v: Vec (bv128)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv128'(m: $Mutation (Vec (bv128)), val: bv128) returns (m': $Mutation (Vec (bv128))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv128'(v: Vec (bv128), val: bv128): Vec (bv128) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv128'(m: $Mutation (Vec (bv128))) returns (e: bv128, m': $Mutation (Vec (bv128))) {
    var v: Vec (bv128);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv128'(m: $Mutation (Vec (bv128)), other: Vec (bv128)) returns (m': $Mutation (Vec (bv128))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv128'(m: $Mutation (Vec (bv128))) returns (m': $Mutation (Vec (bv128))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv128'(m: $Mutation (Vec (bv128)), other: Vec (bv128)) returns (m': $Mutation (Vec (bv128))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv128'(m: $Mutation (Vec (bv128)), new_len: int) returns (v: (Vec (bv128)), m': $Mutation (Vec (bv128))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv128'(m: $Mutation (Vec (bv128)), new_len: int) returns (v: (Vec (bv128)), m': $Mutation (Vec (bv128))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv128'(m: $Mutation (Vec (bv128)), left: int, right: int) returns (m': $Mutation (Vec (bv128))) {
    var left_vec: Vec (bv128);
    var mid_vec: Vec (bv128);
    var right_vec: Vec (bv128);
    var v: Vec (bv128);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv128'(m: $Mutation (Vec (bv128)), rot: int) returns (n: int, m': $Mutation (Vec (bv128))) {
    var v: Vec (bv128);
    var len: int;
    var left_vec: Vec (bv128);
    var right_vec: Vec (bv128);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv128'(m: $Mutation (Vec (bv128)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv128))) {
    var left_vec: Vec (bv128);
    var mid_vec: Vec (bv128);
    var right_vec: Vec (bv128);
    var mid_left_vec: Vec (bv128);
    var mid_right_vec: Vec (bv128);
    var v: Vec (bv128);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv128'(m: $Mutation (Vec (bv128)), i: int, e: bv128) returns (m': $Mutation (Vec (bv128))) {
    var left_vec: Vec (bv128);
    var right_vec: Vec (bv128);
    var v: Vec (bv128);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv128'(v: Vec (bv128)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv128'(v: Vec (bv128)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv128'(v: Vec (bv128), i: int) returns (dst: bv128) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv128'(v: Vec (bv128), i: int): bv128 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv128'(m: $Mutation (Vec (bv128)), index: int)
returns (dst: $Mutation (bv128), m': $Mutation (Vec (bv128)))
{
    var v: Vec (bv128);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv128'(v: Vec (bv128), i: int): bv128 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv128'(v: Vec (bv128)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv128'(m: $Mutation (Vec (bv128)), i: int, j: int) returns (m': $Mutation (Vec (bv128)))
{
    var v: Vec (bv128);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv128'(v: Vec (bv128), i: int, j: int): Vec (bv128) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv128'(m: $Mutation (Vec (bv128)), i: int) returns (e: bv128, m': $Mutation (Vec (bv128)))
{
    var v: Vec (bv128);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv128'(m: $Mutation (Vec (bv128)), i: int) returns (e: bv128, m': $Mutation (Vec (bv128)))
{
    var len: int;
    var v: Vec (bv128);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv128'(v: Vec (bv128), e: bv128) returns (res: bool)  {
    res := $ContainsVec'bv128'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv128'(v: Vec (bv128), e: bv128) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv128'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv64`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv64''(v1: Vec (bv64), v2: Vec (bv64)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv64'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv64''(v: Vec (bv64), prefix: Vec (bv64)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv64'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv64''(v: Vec (bv64), suffix: Vec (bv64)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv64'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv64''(v: Vec (bv64)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv64'(v: Vec (bv64), e: bv64): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv64'(ReadVec(v, i), e))
}

function $IndexOfVec'bv64'(v: Vec (bv64), e: bv64): int;
axiom (forall v: Vec (bv64), e: bv64:: {$IndexOfVec'bv64'(v, e)}
    (var i := $IndexOfVec'bv64'(v, e);
     if (!$ContainsVec'bv64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv64'(v: Vec (bv64)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv64'(): Vec (bv64) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv64'() returns (v: Vec (bv64)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv64'(): Vec (bv64) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv64'(v: Vec (bv64)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv64'(m: $Mutation (Vec (bv64)), val: bv64) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv64'(v: Vec (bv64), val: bv64): Vec (bv64) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv64'(m: $Mutation (Vec (bv64))) returns (e: bv64, m': $Mutation (Vec (bv64))) {
    var v: Vec (bv64);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv64'(m: $Mutation (Vec (bv64)), other: Vec (bv64)) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv64'(m: $Mutation (Vec (bv64))) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv64'(m: $Mutation (Vec (bv64)), other: Vec (bv64)) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv64'(m: $Mutation (Vec (bv64)), new_len: int) returns (v: (Vec (bv64)), m': $Mutation (Vec (bv64))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv64'(m: $Mutation (Vec (bv64)), new_len: int) returns (v: (Vec (bv64)), m': $Mutation (Vec (bv64))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv64'(m: $Mutation (Vec (bv64)), left: int, right: int) returns (m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var mid_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var v: Vec (bv64);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv64'(m: $Mutation (Vec (bv64)), rot: int) returns (n: int, m': $Mutation (Vec (bv64))) {
    var v: Vec (bv64);
    var len: int;
    var left_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv64'(m: $Mutation (Vec (bv64)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var mid_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var mid_left_vec: Vec (bv64);
    var mid_right_vec: Vec (bv64);
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv64'(m: $Mutation (Vec (bv64)), i: int, e: bv64) returns (m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv64'(v: Vec (bv64)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv64'(v: Vec (bv64)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv64'(v: Vec (bv64), i: int) returns (dst: bv64) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv64'(v: Vec (bv64), i: int): bv64 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv64'(m: $Mutation (Vec (bv64)), index: int)
returns (dst: $Mutation (bv64), m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv64'(v: Vec (bv64), i: int): bv64 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv64'(v: Vec (bv64)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv64'(m: $Mutation (Vec (bv64)), i: int, j: int) returns (m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv64'(v: Vec (bv64), i: int, j: int): Vec (bv64) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv64'(m: $Mutation (Vec (bv64)), i: int) returns (e: bv64, m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv64'(m: $Mutation (Vec (bv64)), i: int) returns (e: bv64, m': $Mutation (Vec (bv64)))
{
    var len: int;
    var v: Vec (bv64);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv64'(v: Vec (bv64), e: bv64) returns (res: bool)  {
    res := $ContainsVec'bv64'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv64'(v: Vec (bv64), e: bv64) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv8''(v1: Vec (bv8), v2: Vec (bv8)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv8''(v: Vec (bv8), prefix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv8''(v: Vec (bv8), suffix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv8''(v: Vec (bv8)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv8'(v: Vec (bv8), e: bv8): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e))
}

function $IndexOfVec'bv8'(v: Vec (bv8), e: bv8): int;
axiom (forall v: Vec (bv8), e: bv8:: {$IndexOfVec'bv8'(v, e)}
    (var i := $IndexOfVec'bv8'(v, e);
     if (!$ContainsVec'bv8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv8'(v: Vec (bv8)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv8'() returns (v: Vec (bv8)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv8'(v: Vec (bv8)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv8'(m: $Mutation (Vec (bv8)), val: bv8) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv8'(v: Vec (bv8), val: bv8): Vec (bv8) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv8'(m: $Mutation (Vec (bv8))) returns (e: bv8, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv8'(m: $Mutation (Vec (bv8))) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv8'(m: $Mutation (Vec (bv8)), new_len: int) returns (v: (Vec (bv8)), m': $Mutation (Vec (bv8))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv8'(m: $Mutation (Vec (bv8)), new_len: int) returns (v: (Vec (bv8)), m': $Mutation (Vec (bv8))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv8'(m: $Mutation (Vec (bv8)), left: int, right: int) returns (m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var mid_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var v: Vec (bv8);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv8'(m: $Mutation (Vec (bv8)), rot: int) returns (n: int, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    var left_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv8'(m: $Mutation (Vec (bv8)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var mid_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var mid_left_vec: Vec (bv8);
    var mid_right_vec: Vec (bv8);
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv8'(m: $Mutation (Vec (bv8)), i: int, e: bv8) returns (m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv8'(v: Vec (bv8)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv8'(v: Vec (bv8)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv8'(v: Vec (bv8), i: int) returns (dst: bv8) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv8'(m: $Mutation (Vec (bv8)), index: int)
returns (dst: $Mutation (bv8), m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv8'(v: Vec (bv8)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv8'(m: $Mutation (Vec (bv8)), i: int, j: int) returns (m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv8'(v: Vec (bv8), i: int, j: int): Vec (bv8) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var len: int;
    var v: Vec (bv8);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv8'(v: Vec (bv8), e: bv8) returns (res: bool)  {
    res := $ContainsVec'bv8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv8'(v: Vec (bv8), e: bv8) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Table

// ----------------------------------------------------------------------------------
// Native Table key encoding for type `$bb_i32_I32`

function $EncodeKey'$bb_i32_I32'(k: $bb_i32_I32): int;
axiom (
  forall k1, k2: $bb_i32_I32 :: {$EncodeKey'$bb_i32_I32'(k1), $EncodeKey'$bb_i32_I32'(k2)}
    $IsEqual'$bb_i32_I32'(k1, k2) <==> $EncodeKey'$bb_i32_I32'(k1) == $EncodeKey'$bb_i32_I32'(k2)
);


// ----------------------------------------------------------------------------------
// Native Table key encoding for type `u64`

function $EncodeKey'u64'(k: int): int;
axiom (
  forall k1, k2: int :: {$EncodeKey'u64'(k1), $EncodeKey'u64'(k2)}
    $IsEqual'u64'(k1, k2) <==> $EncodeKey'u64'(k1) == $EncodeKey'u64'(k2)
);


// ----------------------------------------------------------------------------------
// Native Table implementation for type `($bb_i32_I32,u256)`

function $IsEqual'$1_table_Table'$bb_i32_I32_u256''(t1: Table int (int), t2: Table int (int)): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_table_Table'$bb_i32_I32_u256''(t: Table int (int)): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'u256'(GetTable(t, i)))
}
procedure {:inline 2} $1_table_new'$bb_i32_I32_u256'() returns (v: Table int (int)) {
    v := EmptyTable();
}
procedure {:inline 2} $1_table_destroy_known_empty_unsafe'$bb_i32_I32_u256'(t: Table int (int)) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_table_contains'$bb_i32_I32_u256'(t: (Table int (int)), k: $bb_i32_I32) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'$bb_i32_I32'(k));
}
procedure {:inline 2} $1_table_add'$bb_i32_I32_u256'(m: $Mutation (Table int (int)), k: $bb_i32_I32, v: int) returns (m': $Mutation(Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_table_upsert'$bb_i32_I32_u256'(m: $Mutation (Table int (int)), k: $bb_i32_I32, v: int) returns (m': $Mutation(Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, UpdateTable(t, enc_k, v));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_table_remove'$bb_i32_I32_u256'(m: $Mutation (Table int (int)), k: $bb_i32_I32)
returns (v: int, m': $Mutation(Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_table_borrow'$bb_i32_I32_u256'(t: Table int (int), k: $bb_i32_I32) returns (v: int) {
    var enc_k: int;
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'$bb_i32_I32'(k));
    }
}
procedure {:inline 2} $1_table_borrow_mut'$bb_i32_I32_u256'(m: $Mutation (Table int (int)), k: $bb_i32_I32)
returns (dst: $Mutation (bv256), m': $Mutation (Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), $int2bv.256(GetTable(t, enc_k)));
        m' := m;
    }
}
procedure {:inline 2} $1_table_borrow_mut_with_default'$bb_i32_I32_u256'(m: $Mutation (Table int (int)), k: $bb_i32_I32, default: int)
returns (dst: $Mutation (int), m': $Mutation (Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    var t': Table int (int);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, AddTable(t, enc_k, default));
        t' := $Dereference(m');
        dst := $Mutation(m'->l, ExtendVec(m'->p, enc_k), GetTable(t', enc_k));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_table_spec_contains'$bb_i32_I32_u256'(t: (Table int (int)), k: $bb_i32_I32): bool {
    ContainsTable(t, $EncodeKey'$bb_i32_I32'(k))
}
function {:inline} $1_table_spec_set'$bb_i32_I32_u256'(t: Table int (int), k: $bb_i32_I32, v: int): Table int (int) {
    (var enc_k := $EncodeKey'$bb_i32_I32'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_table_spec_remove'$bb_i32_I32_u256'(t: Table int (int), k: $bb_i32_I32): Table int (int) {
    RemoveTable(t, $EncodeKey'$bb_i32_I32'(k))
}
function {:inline} $1_table_spec_get'$bb_i32_I32_u256'(t: Table int (int), k: $bb_i32_I32): int {
    GetTable(t, $EncodeKey'$bb_i32_I32'(k))
}



// ----------------------------------------------------------------------------------
// Native Table implementation for type `(u64,vec'address')`

function $IsEqual'$1_table_with_length_TableWithLength'u64_vec'address'''(t1: Table int (Vec (int)), t2: Table int (Vec (int))): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_table_with_length_TableWithLength'u64_vec'address'''(t: Table int (Vec (int))): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'vec'address''(GetTable(t, i)))
}
procedure {:inline 2} $1_table_with_length_new'u64_vec'address''() returns (v: Table int (Vec (int))) {
    v := EmptyTable();
}
procedure {:inline 2} $1_table_with_length_destroy_empty'u64_vec'address''(t: Table int (Vec (int))) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_table_with_length_length'u64_vec'address''(t: (Table int (Vec (int)))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_table_with_length_empty'u64_vec'address''(t: (Table int (Vec (int)))) returns (r: bool) {
    r := LenTable(t) == 0;
}
procedure {:inline 2} $1_table_with_length_contains'u64_vec'address''(t: (Table int (Vec (int))), k: int) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'u64'(k));
}
procedure {:inline 2} $1_table_with_length_add'u64_vec'address''(m: $Mutation (Table int (Vec (int))), k: int, v: Vec (int)) returns (m': $Mutation(Table int (Vec (int)))) {
    var enc_k: int;
    var t: Table int (Vec (int));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_table_with_length_upsert'u64_vec'address''(m: $Mutation (Table int (Vec (int))), k: int, v: Vec (int)) returns (m': $Mutation(Table int (Vec (int)))) {
    var enc_k: int;
    var t: Table int (Vec (int));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, UpdateTable(t, enc_k, v));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_table_with_length_remove'u64_vec'address''(m: $Mutation (Table int (Vec (int))), k: int)
returns (v: Vec (int), m': $Mutation(Table int (Vec (int)))) {
    var enc_k: int;
    var t: Table int (Vec (int));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_table_with_length_borrow'u64_vec'address''(t: Table int (Vec (int)), k: int) returns (v: Vec (int)) {
    var enc_k: int;
    enc_k := $EncodeKey'u64'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'u64'(k));
    }
}
procedure {:inline 2} $1_table_with_length_borrow_mut'u64_vec'address''(m: $Mutation (Table int (Vec (int))), k: int)
returns (dst: $Mutation (Vec (int)), m': $Mutation (Table int (Vec (int)))) {
    var enc_k: int;
    var t: Table int (Vec (int));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
procedure {:inline 2} $1_table_with_length_borrow_mut_with_default'u64_vec'address''(m: $Mutation (Table int (Vec (int))), k: int, default: Vec (int))
returns (dst: $Mutation (Vec (int)), m': $Mutation (Table int (Vec (int)))) {
    var enc_k: int;
    var t: Table int (Vec (int));
    var t': Table int (Vec (int));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, AddTable(t, enc_k, default));
        t' := $Dereference(m');
        dst := $Mutation(m'->l, ExtendVec(m'->p, enc_k), GetTable(t', enc_k));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_table_with_length_spec_len'u64_vec'address''(t: (Table int (Vec (int)))): int {
    LenTable(t)
}
function {:inline} $1_table_with_length_spec_contains'u64_vec'address''(t: (Table int (Vec (int))), k: int): bool {
    ContainsTable(t, $EncodeKey'u64'(k))
}
function {:inline} $1_table_with_length_spec_set'u64_vec'address''(t: Table int (Vec (int)), k: int, v: Vec (int)): Table int (Vec (int)) {
    (var enc_k := $EncodeKey'u64'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_table_with_length_spec_remove'u64_vec'address''(t: Table int (Vec (int)), k: int): Table int (Vec (int)) {
    RemoveTable(t, $EncodeKey'u64'(k))
}
function {:inline} $1_table_with_length_spec_get'u64_vec'address''(t: Table int (Vec (int)), k: int): Vec (int) {
    GetTable(t, $EncodeKey'u64'(k))
}



// ----------------------------------------------------------------------------------
// Native Table implementation for type `(u64,vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')`

function $IsEqual'$1_table_with_length_TableWithLength'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(t1: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), t2: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_table_with_length_TableWithLength'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(t: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(GetTable(t, i)))
}
procedure {:inline 2} $1_table_with_length_new'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''() returns (v: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) {
    v := EmptyTable();
}
procedure {:inline 2} $1_table_with_length_destroy_empty'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(t: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_table_with_length_length'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(t: (Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_table_with_length_empty'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(t: (Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')))) returns (r: bool) {
    r := LenTable(t) == 0;
}
procedure {:inline 2} $1_table_with_length_contains'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(t: (Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))), k: int) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'u64'(k));
}
procedure {:inline 2} $1_table_with_length_add'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))), k: int, v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')) returns (m': $Mutation(Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')))) {
    var enc_k: int;
    var t: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_table_with_length_upsert'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))), k: int, v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')) returns (m': $Mutation(Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')))) {
    var enc_k: int;
    var t: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, UpdateTable(t, enc_k, v));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_table_with_length_remove'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))), k: int)
returns (v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), m': $Mutation(Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')))) {
    var enc_k: int;
    var t: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_table_with_length_borrow'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(t: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), k: int) returns (v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')) {
    var enc_k: int;
    enc_k := $EncodeKey'u64'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'u64'(k));
    }
}
procedure {:inline 2} $1_table_with_length_borrow_mut'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))), k: int)
returns (dst: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), m': $Mutation (Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')))) {
    var enc_k: int;
    var t: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
procedure {:inline 2} $1_table_with_length_borrow_mut_with_default'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(m: $Mutation (Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))), k: int, default: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))
returns (dst: $Mutation (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), m': $Mutation (Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')))) {
    var enc_k: int;
    var t: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'));
    var t': Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, AddTable(t, enc_k, default));
        t' := $Dereference(m');
        dst := $Mutation(m'->l, ExtendVec(m'->p, enc_k), GetTable(t', enc_k));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_table_with_length_spec_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(t: (Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')))): int {
    LenTable(t)
}
function {:inline} $1_table_with_length_spec_contains'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(t: (Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))), k: int): bool {
    ContainsTable(t, $EncodeKey'u64'(k))
}
function {:inline} $1_table_with_length_spec_set'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(t: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), k: int, v: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')): Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')) {
    (var enc_k := $EncodeKey'u64'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_table_with_length_spec_remove'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(t: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), k: int): Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')) {
    RemoveTable(t, $EncodeKey'u64'(k))
}
function {:inline} $1_table_with_length_spec_get'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(t: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), k: int): Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3') {
    GetTable(t, $EncodeKey'u64'(k))
}



// ----------------------------------------------------------------------------------
// Native Table implementation for type `(u64,vec'#0')`

function $IsEqual'$1_table_with_length_TableWithLength'u64_vec'#0'''(t1: Table int (Vec (#0)), t2: Table int (Vec (#0))): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_table_with_length_TableWithLength'u64_vec'#0'''(t: Table int (Vec (#0))): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'vec'#0''(GetTable(t, i)))
}
procedure {:inline 2} $1_table_with_length_new'u64_vec'#0''() returns (v: Table int (Vec (#0))) {
    v := EmptyTable();
}
procedure {:inline 2} $1_table_with_length_destroy_empty'u64_vec'#0''(t: Table int (Vec (#0))) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_table_with_length_length'u64_vec'#0''(t: (Table int (Vec (#0)))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_table_with_length_empty'u64_vec'#0''(t: (Table int (Vec (#0)))) returns (r: bool) {
    r := LenTable(t) == 0;
}
procedure {:inline 2} $1_table_with_length_contains'u64_vec'#0''(t: (Table int (Vec (#0))), k: int) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'u64'(k));
}
procedure {:inline 2} $1_table_with_length_add'u64_vec'#0''(m: $Mutation (Table int (Vec (#0))), k: int, v: Vec (#0)) returns (m': $Mutation(Table int (Vec (#0)))) {
    var enc_k: int;
    var t: Table int (Vec (#0));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_table_with_length_upsert'u64_vec'#0''(m: $Mutation (Table int (Vec (#0))), k: int, v: Vec (#0)) returns (m': $Mutation(Table int (Vec (#0)))) {
    var enc_k: int;
    var t: Table int (Vec (#0));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, UpdateTable(t, enc_k, v));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_table_with_length_remove'u64_vec'#0''(m: $Mutation (Table int (Vec (#0))), k: int)
returns (v: Vec (#0), m': $Mutation(Table int (Vec (#0)))) {
    var enc_k: int;
    var t: Table int (Vec (#0));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_table_with_length_borrow'u64_vec'#0''(t: Table int (Vec (#0)), k: int) returns (v: Vec (#0)) {
    var enc_k: int;
    enc_k := $EncodeKey'u64'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'u64'(k));
    }
}
procedure {:inline 2} $1_table_with_length_borrow_mut'u64_vec'#0''(m: $Mutation (Table int (Vec (#0))), k: int)
returns (dst: $Mutation (Vec (#0)), m': $Mutation (Table int (Vec (#0)))) {
    var enc_k: int;
    var t: Table int (Vec (#0));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
procedure {:inline 2} $1_table_with_length_borrow_mut_with_default'u64_vec'#0''(m: $Mutation (Table int (Vec (#0))), k: int, default: Vec (#0))
returns (dst: $Mutation (Vec (#0)), m': $Mutation (Table int (Vec (#0)))) {
    var enc_k: int;
    var t: Table int (Vec (#0));
    var t': Table int (Vec (#0));
    enc_k := $EncodeKey'u64'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, AddTable(t, enc_k, default));
        t' := $Dereference(m');
        dst := $Mutation(m'->l, ExtendVec(m'->p, enc_k), GetTable(t', enc_k));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_table_with_length_spec_len'u64_vec'#0''(t: (Table int (Vec (#0)))): int {
    LenTable(t)
}
function {:inline} $1_table_with_length_spec_contains'u64_vec'#0''(t: (Table int (Vec (#0))), k: int): bool {
    ContainsTable(t, $EncodeKey'u64'(k))
}
function {:inline} $1_table_with_length_spec_set'u64_vec'#0''(t: Table int (Vec (#0)), k: int, v: Vec (#0)): Table int (Vec (#0)) {
    (var enc_k := $EncodeKey'u64'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_table_with_length_spec_remove'u64_vec'#0''(t: Table int (Vec (#0)), k: int): Table int (Vec (#0)) {
    RemoveTable(t, $EncodeKey'u64'(k))
}
function {:inline} $1_table_with_length_spec_get'u64_vec'#0''(t: Table int (Vec (#0)), k: int): Vec (#0) {
    GetTable(t, $EncodeKey'u64'(k))
}



// ----------------------------------------------------------------------------------
// Native Table implementation for type `($bb_i32_I32,$bb_tick_TickInfo)`

function $IsEqual'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''(t1: Table int ($bb_tick_TickInfo), t2: Table int ($bb_tick_TickInfo)): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''(t: Table int ($bb_tick_TickInfo)): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'$bb_tick_TickInfo'(GetTable(t, i)))
}
procedure {:inline 2} $1_smart_table_new'$bb_i32_I32_$bb_tick_TickInfo'() returns (v: Table int ($bb_tick_TickInfo)) {
    v := EmptyTable();
}
procedure {:inline 2} $1_smart_table_destroy_empty'$bb_i32_I32_$bb_tick_TickInfo'(t: Table int ($bb_tick_TickInfo)) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_smart_table_length'$bb_i32_I32_$bb_tick_TickInfo'(t: (Table int ($bb_tick_TickInfo))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_smart_table_contains'$bb_i32_I32_$bb_tick_TickInfo'(t: (Table int ($bb_tick_TickInfo)), k: $bb_i32_I32) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'$bb_i32_I32'(k));
}
procedure {:inline 2} $1_smart_table_add'$bb_i32_I32_$bb_tick_TickInfo'(m: $Mutation (Table int ($bb_tick_TickInfo)), k: $bb_i32_I32, v: $bb_tick_TickInfo) returns (m': $Mutation(Table int ($bb_tick_TickInfo))) {
    var enc_k: int;
    var t: Table int ($bb_tick_TickInfo);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_smart_table_upsert'$bb_i32_I32_$bb_tick_TickInfo'(m: $Mutation (Table int ($bb_tick_TickInfo)), k: $bb_i32_I32, v: $bb_tick_TickInfo) returns (m': $Mutation(Table int ($bb_tick_TickInfo))) {
    var enc_k: int;
    var t: Table int ($bb_tick_TickInfo);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, UpdateTable(t, enc_k, v));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_smart_table_remove'$bb_i32_I32_$bb_tick_TickInfo'(m: $Mutation (Table int ($bb_tick_TickInfo)), k: $bb_i32_I32)
returns (v: $bb_tick_TickInfo, m': $Mutation(Table int ($bb_tick_TickInfo))) {
    var enc_k: int;
    var t: Table int ($bb_tick_TickInfo);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_smart_table_borrow'$bb_i32_I32_$bb_tick_TickInfo'(t: Table int ($bb_tick_TickInfo), k: $bb_i32_I32) returns (v: $bb_tick_TickInfo) {
    var enc_k: int;
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'$bb_i32_I32'(k));
    }
}
procedure {:inline 2} $1_smart_table_borrow_mut'$bb_i32_I32_$bb_tick_TickInfo'(m: $Mutation (Table int ($bb_tick_TickInfo)), k: $bb_i32_I32)
returns (dst: $Mutation ($bb_tick_TickInfo), m': $Mutation (Table int ($bb_tick_TickInfo))) {
    var enc_k: int;
    var t: Table int ($bb_tick_TickInfo);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
procedure {:inline 2} $1_smart_table_borrow_mut_with_default'$bb_i32_I32_$bb_tick_TickInfo'(m: $Mutation (Table int ($bb_tick_TickInfo)), k: $bb_i32_I32, default: $bb_tick_TickInfo)
returns (dst: $Mutation ($bb_tick_TickInfo), m': $Mutation (Table int ($bb_tick_TickInfo))) {
    var enc_k: int;
    var t: Table int ($bb_tick_TickInfo);
    var t': Table int ($bb_tick_TickInfo);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, AddTable(t, enc_k, default));
        t' := $Dereference(m');
        dst := $Mutation(m'->l, ExtendVec(m'->p, enc_k), GetTable(t', enc_k));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_smart_table_spec_len'$bb_i32_I32_$bb_tick_TickInfo'(t: (Table int ($bb_tick_TickInfo))): int {
    LenTable(t)
}
function {:inline} $1_smart_table_spec_contains'$bb_i32_I32_$bb_tick_TickInfo'(t: (Table int ($bb_tick_TickInfo)), k: $bb_i32_I32): bool {
    ContainsTable(t, $EncodeKey'$bb_i32_I32'(k))
}
function {:inline} $1_smart_table_spec_set'$bb_i32_I32_$bb_tick_TickInfo'(t: Table int ($bb_tick_TickInfo), k: $bb_i32_I32, v: $bb_tick_TickInfo): Table int ($bb_tick_TickInfo) {
    (var enc_k := $EncodeKey'$bb_i32_I32'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_smart_table_spec_remove'$bb_i32_I32_$bb_tick_TickInfo'(t: Table int ($bb_tick_TickInfo), k: $bb_i32_I32): Table int ($bb_tick_TickInfo) {
    RemoveTable(t, $EncodeKey'$bb_i32_I32'(k))
}
function {:inline} $1_smart_table_spec_get'$bb_i32_I32_$bb_tick_TickInfo'(t: Table int ($bb_tick_TickInfo), k: $bb_i32_I32): $bb_tick_TickInfo {
    GetTable(t, $EncodeKey'$bb_i32_I32'(k))
}



// ----------------------------------------------------------------------------------
// Native Table implementation for type `($bb_i32_I32,bv256)`

function $IsEqual'$1_table_Table'$bb_i32_I32_bv256''(t1: Table int (bv256), t2: Table int (bv256)): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_table_Table'$bb_i32_I32_bv256''(t: Table int (bv256)): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'bv256'(GetTable(t, i)))
}
procedure {:inline 2} $1_table_new'$bb_i32_I32_bv256'() returns (v: Table int (bv256)) {
    v := EmptyTable();
}
procedure {:inline 2} $1_table_destroy_known_empty_unsafe'$bb_i32_I32_bv256'(t: Table int (bv256)) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_table_contains'$bb_i32_I32_bv256'(t: (Table int (bv256)), k: $bb_i32_I32) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'$bb_i32_I32'(k));
}
procedure {:inline 2} $1_table_add'$bb_i32_I32_bv256'(m: $Mutation (Table int (bv256)), k: $bb_i32_I32, v: bv256) returns (m': $Mutation(Table int (bv256))) {
    var enc_k: int;
    var t: Table int (bv256);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_table_upsert'$bb_i32_I32_bv256'(m: $Mutation (Table int (bv256)), k: $bb_i32_I32, v: bv256) returns (m': $Mutation(Table int (bv256))) {
    var enc_k: int;
    var t: Table int (bv256);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, UpdateTable(t, enc_k, v));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_table_remove'$bb_i32_I32_bv256'(m: $Mutation (Table int (bv256)), k: $bb_i32_I32)
returns (v: bv256, m': $Mutation(Table int (bv256))) {
    var enc_k: int;
    var t: Table int (bv256);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_table_borrow'$bb_i32_I32_bv256'(t: Table int (bv256), k: $bb_i32_I32) returns (v: bv256) {
    var enc_k: int;
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'$bb_i32_I32'(k));
    }
}
procedure {:inline 2} $1_table_borrow_mut'$bb_i32_I32_bv256'(m: $Mutation (Table int (bv256)), k: $bb_i32_I32)
returns (dst: $Mutation (bv256), m': $Mutation (Table int (bv256))) {
    var enc_k: int;
    var t: Table int (bv256);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
procedure {:inline 2} $1_table_borrow_mut_with_default'$bb_i32_I32_bv256'(m: $Mutation (Table int (bv256)), k: $bb_i32_I32, default: bv256)
returns (dst: $Mutation (bv256), m': $Mutation (Table int (bv256))) {
    var enc_k: int;
    var t: Table int (bv256);
    var t': Table int (bv256);
    enc_k := $EncodeKey'$bb_i32_I32'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, AddTable(t, enc_k, default));
        t' := $Dereference(m');
        dst := $Mutation(m'->l, ExtendVec(m'->p, enc_k), GetTable(t', enc_k));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_table_spec_contains'$bb_i32_I32_bv256'(t: (Table int (bv256)), k: $bb_i32_I32): bool {
    ContainsTable(t, $EncodeKey'$bb_i32_I32'(k))
}
function {:inline} $1_table_spec_set'$bb_i32_I32_bv256'(t: Table int (bv256), k: $bb_i32_I32, v: bv256): Table int (bv256) {
    (var enc_k := $EncodeKey'$bb_i32_I32'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_table_spec_remove'$bb_i32_I32_bv256'(t: Table int (bv256), k: $bb_i32_I32): Table int (bv256) {
    RemoveTable(t, $EncodeKey'$bb_i32_I32'(k))
}
function {:inline} $1_table_spec_get'$bb_i32_I32_bv256'(t: Table int (bv256), k: $bb_i32_I32): bv256 {
    GetTable(t, $EncodeKey'$bb_i32_I32'(k))
}



// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_hash_sha2(v1), $1_hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha2(v1), $1_hash_sha2(v2)));

procedure $1_hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha2_256(val: Vec int): Vec int {
    $1_hash_sha2(val)
}

// similarly for Hash_sha3
function $1_hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_hash_sha3(v1), $1_hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha3(v1), $1_hash_sha3(v2)));

procedure $1_hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha3_256(val: Vec int): Vec int {
    $1_hash_sha3(val)
}

// ==================================================================================
// Native string

// TODO: correct implementation of strings

procedure {:inline 1} $1_string_internal_check_utf8(x: Vec int) returns (r: bool) {
}

procedure {:inline 1} $1_string_internal_sub_string(x: Vec int, i: int, j: int) returns (r: Vec int) {
}

procedure {:inline 1} $1_string_internal_index_of(x: Vec int, y: Vec int) returns (r: int) {
}

procedure {:inline 1} $1_string_internal_is_char_boundary(x: Vec int, i: int) returns (r: bool) {
}




// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: $signer
) {
  return;
}

// ==================================================================================
// Native account

procedure {:inline 1} $1_Account_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

// ==================================================================================
// Native Signer

datatype $signer {
    $signer($addr: int),
    $permissioned_signer($addr: int, $permission_addr: int)
}

function {:inline} $IsValid'signer'(s: $signer): bool {
    if s is $signer then
        $IsValid'address'(s->$addr)
    else
        $IsValid'address'(s->$addr) &&
        $IsValid'address'(s->$permission_addr)
}

function {:inline} $IsEqual'signer'(s1: $signer, s2: $signer): bool {
    if s1 is $signer && s2 is $signer then
        s1 == s2
    else if s1 is $permissioned_signer && s2 is $permissioned_signer then
        s1 == s2
    else
        false
}

procedure {:inline 1} $1_signer_borrow_address(signer: $signer) returns (res: int) {
    res := signer->$addr;
}

function {:inline} $1_signer_$borrow_address(signer: $signer): int
{
    signer->$addr
}

function $1_signer_is_txn_signer(s: $signer): bool;

function $1_signer_is_txn_signer_addr(a: int): bool;


// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native bcs::serialize

// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `address`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'address'(v: int): Vec int;

axiom (forall v1, v2: int :: {$1_bcs_serialize'address'(v1), $1_bcs_serialize'address'(v2)}
   $IsEqual'address'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'address'(v1), $1_bcs_serialize'address'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: int :: {$1_bcs_serialize'address'(v)}
     ( var r := $1_bcs_serialize'address'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'address'(v: int) returns (res: Vec int);
ensures res == $1_bcs_serialize'address'(v);

function {:inline} $1_bcs_$to_bytes'address'(v: int): Vec int {
    $1_bcs_serialize'address'(v)
}

// Serialized addresses should have the same length.
const $serialized_address_len: int;
// Serialized addresses should have the same length
axiom (forall v: int :: {$1_bcs_serialize'address'(v)}
     ( var r := $1_bcs_serialize'address'(v); LenVec(r) == $serialized_address_len));



// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `u8`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'u8'(v: int): Vec int;

axiom (forall v1, v2: int :: {$1_bcs_serialize'u8'(v1), $1_bcs_serialize'u8'(v2)}
   $IsEqual'u8'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'u8'(v1), $1_bcs_serialize'u8'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: int :: {$1_bcs_serialize'u8'(v)}
     ( var r := $1_bcs_serialize'u8'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'u8'(v: int) returns (res: Vec int);
ensures res == $1_bcs_serialize'u8'(v);

function {:inline} $1_bcs_$to_bytes'u8'(v: int): Vec int {
    $1_bcs_serialize'u8'(v)
}





// ==================================================================================
// Native Event module



procedure {:inline 1} $InitEventStore() {
}

// ============================================================================================
// Type Reflection on Type Parameters

datatype $TypeParamInfo {
    $TypeParamBool(),
    $TypeParamU8(),
    $TypeParamU16(),
    $TypeParamU32(),
    $TypeParamU64(),
    $TypeParamU128(),
    $TypeParamU256(),
    $TypeParamAddress(),
    $TypeParamSigner(),
    $TypeParamVector(e: $TypeParamInfo),
    $TypeParamStruct(a: int, m: Vec int, s: Vec int)
}



//==================================
// Begin Translation

function $TypeName(t: $TypeParamInfo): Vec int;
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamBool ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 98][1 := 111][2 := 111][3 := 108], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 98][1 := 111][2 := 111][3 := 108], 4)) ==> t is $TypeParamBool);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU8 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 56], 2)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 56], 2)) ==> t is $TypeParamU8);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU16 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 54], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 54], 3)) ==> t is $TypeParamU16);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU32 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 51][2 := 50], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 51][2 := 50], 3)) ==> t is $TypeParamU32);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU64 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 54][2 := 52], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 54][2 := 52], 3)) ==> t is $TypeParamU64);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU128 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 50][3 := 56], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 50][3 := 56], 4)) ==> t is $TypeParamU128);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU256 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 50][2 := 53][3 := 54], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 50][2 := 53][3 := 54], 4)) ==> t is $TypeParamU256);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamAddress ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 97][1 := 100][2 := 100][3 := 114][4 := 101][5 := 115][6 := 115], 7)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 97][1 := 100][2 := 100][3 := 114][4 := 101][5 := 115][6 := 115], 7)) ==> t is $TypeParamAddress);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamSigner ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 115][1 := 105][2 := 103][3 := 110][4 := 101][5 := 114], 6)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 115][1 := 105][2 := 103][3 := 110][4 := 101][5 := 114], 6)) ==> t is $TypeParamSigner);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamVector ==> $IsEqual'vec'u8''($TypeName(t), ConcatVec(ConcatVec(Vec(DefaultVecMap()[0 := 118][1 := 101][2 := 99][3 := 116][4 := 111][5 := 114][6 := 60], 7), $TypeName(t->e)), Vec(DefaultVecMap()[0 := 62], 1))));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} ($IsPrefix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 118][1 := 101][2 := 99][3 := 116][4 := 111][5 := 114][6 := 60], 7)) && $IsSuffix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 62], 1))) ==> t is $TypeParamVector);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamStruct ==> $IsEqual'vec'u8''($TypeName(t), ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(Vec(DefaultVecMap()[0 := 48][1 := 120], 2), MakeVec1(t->a)), Vec(DefaultVecMap()[0 := 58][1 := 58], 2)), t->m), Vec(DefaultVecMap()[0 := 58][1 := 58], 2)), t->s)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsPrefix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 48][1 := 120], 2)) ==> t is $TypeParamVector);


// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }
var #0_info: $TypeParamInfo;
var #0_$memory: $Memory #0;

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <bool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'bool'(b1), $1_from_bcs_deserializable'bool'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u8>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u8'(b1), $1_from_bcs_deserializable'u8'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u32>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u32'(b1), $1_from_bcs_deserializable'u32'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u64>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u64'(b1), $1_from_bcs_deserializable'u64'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u128>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u128'(b1), $1_from_bcs_deserializable'u128'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u256>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u256'(b1), $1_from_bcs_deserializable'u256'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <address>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'address'(b1), $1_from_bcs_deserializable'address'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <signer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'signer'(b1), $1_from_bcs_deserializable'signer'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<u8>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'u8''(b1), $1_from_bcs_deserializable'vec'u8''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'u64''(b1), $1_from_bcs_deserializable'vec'u64''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'u128''(b1), $1_from_bcs_deserializable'vec'u128''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'address''(b1), $1_from_bcs_deserializable'vec'address''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(b1), $1_from_bcs_deserializable'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::function_info::FunctionInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_function_info_FunctionInfo''(b1), $1_from_bcs_deserializable'vec'$1_function_info_FunctionInfo''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::fungible_asset::FungibleStore>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_fungible_asset_FungibleStore''(b1), $1_from_bcs_deserializable'vec'$1_fungible_asset_FungibleStore''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::big_vector::BigVector<address>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_big_vector_BigVector'address'''(b1), $1_from_bcs_deserializable'vec'$1_big_vector_BigVector'address'''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0x1::big_vector::BigVector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(b1), $1_from_bcs_deserializable'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0xbb::rewarder::PositionReward>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$bb_rewarder_PositionReward''(b1), $1_from_bcs_deserializable'vec'$bb_rewarder_PositionReward''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<0xbb::rewarder::Rewarder>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$bb_rewarder_Rewarder''(b1), $1_from_bcs_deserializable'vec'$bb_rewarder_Rewarder''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<#0>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'#0''(b1), $1_from_bcs_deserializable'vec'#0''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::option::Option<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'u64''(b1), $1_from_bcs_deserializable'$1_option_Option'u64''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::option::Option<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'u128''(b1), $1_from_bcs_deserializable'$1_option_Option'u128''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::option::Option<0x1::function_info::FunctionInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_function_info_FunctionInfo''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_function_info_FunctionInfo''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::option::Option<0x1::big_vector::BigVector<address>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_big_vector_BigVector'address'''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_big_vector_BigVector'address'''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::option::Option<0x1::big_vector::BigVector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::string::String>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_string_String'(b1), $1_from_bcs_deserializable'$1_string_String'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::features::Features>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_features_Features'(b1), $1_from_bcs_deserializable'$1_features_Features'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::table::Table<0xbb::i32::I32, u256>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_table_Table'$bb_i32_I32_u256''(b1), $1_from_bcs_deserializable'$1_table_Table'$bb_i32_I32_u256''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::chain_status::GenesisEndMarker>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(b1), $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::timestamp::CurrentTimeMicroseconds>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(b1), $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::table_with_length::TableWithLength<u64, vector<address>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u64_vec'address'''(b1), $1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u64_vec'address'''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::table_with_length::TableWithLength<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(b1), $1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::table_with_length::TableWithLength<u64, vector<#0>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u64_vec'#0'''(b1), $1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u64_vec'#0'''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::permissioned_signer::GrantedPermissionHandles>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_permissioned_signer_GrantedPermissionHandles'(b1), $1_from_bcs_deserializable'$1_permissioned_signer_GrantedPermissionHandles'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::guid::GUID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_guid_GUID'(b1), $1_from_bcs_deserializable'$1_guid_GUID'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::guid::ID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_guid_ID'(b1), $1_from_bcs_deserializable'$1_guid_ID'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::event::EventHandle<0x1::object::TransferEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_object_TransferEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_object_TransferEvent''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::event::EventHandle<0x1::reconfiguration::NewEpochEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::object::ConstructorRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_ConstructorRef'(b1), $1_from_bcs_deserializable'$1_object_ConstructorRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::object::DeleteRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_DeleteRef'(b1), $1_from_bcs_deserializable'$1_object_DeleteRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::object::DeriveRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_DeriveRef'(b1), $1_from_bcs_deserializable'$1_object_DeriveRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::object::ExtendRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_ExtendRef'(b1), $1_from_bcs_deserializable'$1_object_ExtendRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::object::Object<0x1::fungible_asset::FungibleStore>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_FungibleStore''(b1), $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_FungibleStore''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::object::Object<0x1::fungible_asset::Metadata>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(b1), $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::object::Object<0xbb::position_v3::Info>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_Object'$bb_position_v3_Info''(b1), $1_from_bcs_deserializable'$1_object_Object'$bb_position_v3_Info''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(b1), $1_from_bcs_deserializable'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::object::ObjectCore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_ObjectCore'(b1), $1_from_bcs_deserializable'$1_object_ObjectCore'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::object::TransferRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_TransferRef'(b1), $1_from_bcs_deserializable'$1_object_TransferRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::object::Untransferable>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_Untransferable'(b1), $1_from_bcs_deserializable'$1_object_Untransferable'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::function_info::FunctionInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_function_info_FunctionInfo'(b1), $1_from_bcs_deserializable'$1_function_info_FunctionInfo'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::aggregator_v2::Aggregator<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u64''(b1), $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u64''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::aggregator_v2::Aggregator<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u128''(b1), $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u128''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::TransferRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_TransferRef'(b1), $1_from_bcs_deserializable'$1_fungible_asset_TransferRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::Untransferable>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Untransferable'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Untransferable'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::BurnRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(b1), $1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::ConcurrentFungibleBalance>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_ConcurrentFungibleBalance'(b1), $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentFungibleBalance'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::ConcurrentSupply>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_ConcurrentSupply'(b1), $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentSupply'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::Deposit>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Deposit'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Deposit'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::DispatchFunctionStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_DispatchFunctionStore'(b1), $1_from_bcs_deserializable'$1_fungible_asset_DispatchFunctionStore'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::Frozen>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Frozen'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Frozen'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::FungibleAsset>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_FungibleAsset'(b1), $1_from_bcs_deserializable'$1_fungible_asset_FungibleAsset'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::FungibleStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_FungibleStore'(b1), $1_from_bcs_deserializable'$1_fungible_asset_FungibleStore'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::Metadata>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Metadata'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Metadata'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::MintRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_MintRef'(b1), $1_from_bcs_deserializable'$1_fungible_asset_MintRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::Supply>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Supply'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Supply'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::dispatchable_fungible_asset::TransferRefStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_dispatchable_fungible_asset_TransferRefStore'(b1), $1_from_bcs_deserializable'$1_dispatchable_fungible_asset_TransferRefStore'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::primary_fungible_store::DeriveRefPod>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_primary_fungible_store_DeriveRefPod'(b1), $1_from_bcs_deserializable'$1_primary_fungible_store_DeriveRefPod'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::smart_table::SmartTable<0xbb::i32::I32, 0xbb::tick::TickInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''(b1), $1_from_bcs_deserializable'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::reconfiguration::Configuration>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_reconfiguration_Configuration'(b1), $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::comparator::Result>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_comparator_Result'(b1), $1_from_bcs_deserializable'$1_comparator_Result'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::big_vector::BigVector<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_big_vector_BigVector'address''(b1), $1_from_bcs_deserializable'$1_big_vector_BigVector'address''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::big_vector::BigVector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(b1), $1_from_bcs_deserializable'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::smart_vector::SmartVector<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_smart_vector_SmartVector'address''(b1), $1_from_bcs_deserializable'$1_smart_vector_SmartVector'address''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0x1::smart_vector::SmartVector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(b1), $1_from_bcs_deserializable'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::i32::I32>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_i32_I32'(b1), $1_from_bcs_deserializable'$bb_i32_I32'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::i128::I128>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_i128_I128'(b1), $1_from_bcs_deserializable'$bb_i128_I128'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::tick_bitmap::BitMap>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_tick_bitmap_BitMap'(b1), $1_from_bcs_deserializable'$bb_tick_bitmap_BitMap'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::tick::TickInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_tick_TickInfo'(b1), $1_from_bcs_deserializable'$bb_tick_TickInfo'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::tick::TickUpdatedEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_tick_TickUpdatedEvent'(b1), $1_from_bcs_deserializable'$bb_tick_TickUpdatedEvent'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::rewarder::PositionReward>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_rewarder_PositionReward'(b1), $1_from_bcs_deserializable'$bb_rewarder_PositionReward'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::rewarder::Rewarder>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_rewarder_Rewarder'(b1), $1_from_bcs_deserializable'$bb_rewarder_Rewarder'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::rewarder::RewarderManager>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_rewarder_RewarderManager'(b1), $1_from_bcs_deserializable'$bb_rewarder_RewarderManager'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::position_v3::Info>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_position_v3_Info'(b1), $1_from_bcs_deserializable'$bb_position_v3_Info'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::position_blacklist::PositionBlackList>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_position_blacklist_PositionBlackList'(b1), $1_from_bcs_deserializable'$bb_position_blacklist_PositionBlackList'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::lp::LPObjectRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_lp_LPObjectRef'(b1), $1_from_bcs_deserializable'$bb_lp_LPObjectRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::lp::LPTokenRefs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_lp_LPTokenRefs'(b1), $1_from_bcs_deserializable'$bb_lp_LPTokenRefs'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::pool_v3::AddLiquidityEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_pool_v3_AddLiquidityEvent'(b1), $1_from_bcs_deserializable'$bb_pool_v3_AddLiquidityEvent'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::pool_v3::LiquidityPoolConfigsV3>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_pool_v3_LiquidityPoolConfigsV3'(b1), $1_from_bcs_deserializable'$bb_pool_v3_LiquidityPoolConfigsV3'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::pool_v3::LiquidityPoolV3>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_pool_v3_LiquidityPoolV3'(b1), $1_from_bcs_deserializable'$bb_pool_v3_LiquidityPoolV3'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::pool_v3::PoolSnapshot>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_pool_v3_PoolSnapshot'(b1), $1_from_bcs_deserializable'$bb_pool_v3_PoolSnapshot'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <0xbb::pool_v3::ProtocolFees>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$bb_pool_v3_ProtocolFees'(b1), $1_from_bcs_deserializable'$bb_pool_v3_ProtocolFees'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <#0>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'#0'(b1), $1_from_bcs_deserializable'#0'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <bool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserialize'bool'(b1), $1_from_bcs_deserialize'bool'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u8>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u8'($1_from_bcs_deserialize'u8'(b1), $1_from_bcs_deserialize'u8'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u32>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u32'($1_from_bcs_deserialize'u32'(b1), $1_from_bcs_deserialize'u32'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u64>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u64'($1_from_bcs_deserialize'u64'(b1), $1_from_bcs_deserialize'u64'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u128>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u128'($1_from_bcs_deserialize'u128'(b1), $1_from_bcs_deserialize'u128'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u256>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u256'($1_from_bcs_deserialize'u256'(b1), $1_from_bcs_deserialize'u256'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <address>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'address'($1_from_bcs_deserialize'address'(b1), $1_from_bcs_deserialize'address'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <signer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'signer'($1_from_bcs_deserialize'signer'(b1), $1_from_bcs_deserialize'signer'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<u8>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'u8''($1_from_bcs_deserialize'vec'u8''(b1), $1_from_bcs_deserialize'vec'u8''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'u64''($1_from_bcs_deserialize'vec'u64''(b1), $1_from_bcs_deserialize'vec'u64''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'u128''($1_from_bcs_deserialize'vec'u128''(b1), $1_from_bcs_deserialize'vec'u128''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'address''($1_from_bcs_deserialize'vec'address''(b1), $1_from_bcs_deserialize'vec'address''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($1_from_bcs_deserialize'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(b1), $1_from_bcs_deserialize'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::function_info::FunctionInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_function_info_FunctionInfo''($1_from_bcs_deserialize'vec'$1_function_info_FunctionInfo''(b1), $1_from_bcs_deserialize'vec'$1_function_info_FunctionInfo''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::fungible_asset::FungibleStore>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_fungible_asset_FungibleStore''($1_from_bcs_deserialize'vec'$1_fungible_asset_FungibleStore''(b1), $1_from_bcs_deserialize'vec'$1_fungible_asset_FungibleStore''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::big_vector::BigVector<address>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_big_vector_BigVector'address'''($1_from_bcs_deserialize'vec'$1_big_vector_BigVector'address'''(b1), $1_from_bcs_deserialize'vec'$1_big_vector_BigVector'address'''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0x1::big_vector::BigVector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''($1_from_bcs_deserialize'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(b1), $1_from_bcs_deserialize'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0xbb::rewarder::PositionReward>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$bb_rewarder_PositionReward''($1_from_bcs_deserialize'vec'$bb_rewarder_PositionReward''(b1), $1_from_bcs_deserialize'vec'$bb_rewarder_PositionReward''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<0xbb::rewarder::Rewarder>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$bb_rewarder_Rewarder''($1_from_bcs_deserialize'vec'$bb_rewarder_Rewarder''(b1), $1_from_bcs_deserialize'vec'$bb_rewarder_Rewarder''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<#0>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'#0''($1_from_bcs_deserialize'vec'#0''(b1), $1_from_bcs_deserialize'vec'#0''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::option::Option<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'u64''($1_from_bcs_deserialize'$1_option_Option'u64''(b1), $1_from_bcs_deserialize'$1_option_Option'u64''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::option::Option<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'u128''($1_from_bcs_deserialize'$1_option_Option'u128''(b1), $1_from_bcs_deserialize'$1_option_Option'u128''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::option::Option<0x1::function_info::FunctionInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_function_info_FunctionInfo''($1_from_bcs_deserialize'$1_option_Option'$1_function_info_FunctionInfo''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_function_info_FunctionInfo''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::option::Option<0x1::big_vector::BigVector<address>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_big_vector_BigVector'address'''($1_from_bcs_deserialize'$1_option_Option'$1_big_vector_BigVector'address'''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_big_vector_BigVector'address'''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::option::Option<0x1::big_vector::BigVector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''($1_from_bcs_deserialize'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::string::String>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_string_String'($1_from_bcs_deserialize'$1_string_String'(b1), $1_from_bcs_deserialize'$1_string_String'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::features::Features>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_features_Features'($1_from_bcs_deserialize'$1_features_Features'(b1), $1_from_bcs_deserialize'$1_features_Features'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::table::Table<0xbb::i32::I32, u256>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_table_Table'$bb_i32_I32_u256''($1_from_bcs_deserialize'$1_table_Table'$bb_i32_I32_u256''(b1), $1_from_bcs_deserialize'$1_table_Table'$bb_i32_I32_u256''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::chain_status::GenesisEndMarker>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_chain_status_GenesisEndMarker'($1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(b1), $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::timestamp::CurrentTimeMicroseconds>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_timestamp_CurrentTimeMicroseconds'($1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(b1), $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::table_with_length::TableWithLength<u64, vector<address>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_table_with_length_TableWithLength'u64_vec'address'''($1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u64_vec'address'''(b1), $1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u64_vec'address'''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::table_with_length::TableWithLength<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_table_with_length_TableWithLength'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''($1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(b1), $1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::table_with_length::TableWithLength<u64, vector<#0>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_table_with_length_TableWithLength'u64_vec'#0'''($1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u64_vec'#0'''(b1), $1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u64_vec'#0'''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::permissioned_signer::GrantedPermissionHandles>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_permissioned_signer_GrantedPermissionHandles'($1_from_bcs_deserialize'$1_permissioned_signer_GrantedPermissionHandles'(b1), $1_from_bcs_deserialize'$1_permissioned_signer_GrantedPermissionHandles'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::guid::GUID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_guid_GUID'($1_from_bcs_deserialize'$1_guid_GUID'(b1), $1_from_bcs_deserialize'$1_guid_GUID'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::guid::ID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_guid_ID'($1_from_bcs_deserialize'$1_guid_ID'(b1), $1_from_bcs_deserialize'$1_guid_ID'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::event::EventHandle<0x1::object::TransferEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_object_TransferEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_object_TransferEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_object_TransferEvent''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::event::EventHandle<0x1::reconfiguration::NewEpochEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::object::ConstructorRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_ConstructorRef'($1_from_bcs_deserialize'$1_object_ConstructorRef'(b1), $1_from_bcs_deserialize'$1_object_ConstructorRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::object::DeleteRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_DeleteRef'($1_from_bcs_deserialize'$1_object_DeleteRef'(b1), $1_from_bcs_deserialize'$1_object_DeleteRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::object::DeriveRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_DeriveRef'($1_from_bcs_deserialize'$1_object_DeriveRef'(b1), $1_from_bcs_deserialize'$1_object_DeriveRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::object::ExtendRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_ExtendRef'($1_from_bcs_deserialize'$1_object_ExtendRef'(b1), $1_from_bcs_deserialize'$1_object_ExtendRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::object::Object<0x1::fungible_asset::FungibleStore>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_Object'$1_fungible_asset_FungibleStore''($1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_FungibleStore''(b1), $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_FungibleStore''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::object::Object<0x1::fungible_asset::Metadata>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(b1), $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::object::Object<0xbb::position_v3::Info>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_Object'$bb_position_v3_Info''($1_from_bcs_deserialize'$1_object_Object'$bb_position_v3_Info''(b1), $1_from_bcs_deserialize'$1_object_Object'$bb_position_v3_Info''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''($1_from_bcs_deserialize'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(b1), $1_from_bcs_deserialize'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::object::ObjectCore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_ObjectCore'($1_from_bcs_deserialize'$1_object_ObjectCore'(b1), $1_from_bcs_deserialize'$1_object_ObjectCore'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::object::TransferRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_TransferRef'($1_from_bcs_deserialize'$1_object_TransferRef'(b1), $1_from_bcs_deserialize'$1_object_TransferRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::object::Untransferable>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_Untransferable'($1_from_bcs_deserialize'$1_object_Untransferable'(b1), $1_from_bcs_deserialize'$1_object_Untransferable'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::function_info::FunctionInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_function_info_FunctionInfo'($1_from_bcs_deserialize'$1_function_info_FunctionInfo'(b1), $1_from_bcs_deserialize'$1_function_info_FunctionInfo'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::aggregator_v2::Aggregator<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_aggregator_v2_Aggregator'u64''($1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u64''(b1), $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u64''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::aggregator_v2::Aggregator<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_aggregator_v2_Aggregator'u128''($1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u128''(b1), $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u128''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::TransferRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_TransferRef'($1_from_bcs_deserialize'$1_fungible_asset_TransferRef'(b1), $1_from_bcs_deserialize'$1_fungible_asset_TransferRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::Untransferable>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Untransferable'($1_from_bcs_deserialize'$1_fungible_asset_Untransferable'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Untransferable'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::BurnRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_BurnRef'($1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(b1), $1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::ConcurrentFungibleBalance>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_ConcurrentFungibleBalance'($1_from_bcs_deserialize'$1_fungible_asset_ConcurrentFungibleBalance'(b1), $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentFungibleBalance'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::ConcurrentSupply>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_ConcurrentSupply'($1_from_bcs_deserialize'$1_fungible_asset_ConcurrentSupply'(b1), $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentSupply'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::Deposit>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Deposit'($1_from_bcs_deserialize'$1_fungible_asset_Deposit'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Deposit'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::DispatchFunctionStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_DispatchFunctionStore'($1_from_bcs_deserialize'$1_fungible_asset_DispatchFunctionStore'(b1), $1_from_bcs_deserialize'$1_fungible_asset_DispatchFunctionStore'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::Frozen>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Frozen'($1_from_bcs_deserialize'$1_fungible_asset_Frozen'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Frozen'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::FungibleAsset>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_FungibleAsset'($1_from_bcs_deserialize'$1_fungible_asset_FungibleAsset'(b1), $1_from_bcs_deserialize'$1_fungible_asset_FungibleAsset'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::FungibleStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_FungibleStore'($1_from_bcs_deserialize'$1_fungible_asset_FungibleStore'(b1), $1_from_bcs_deserialize'$1_fungible_asset_FungibleStore'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::Metadata>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Metadata'($1_from_bcs_deserialize'$1_fungible_asset_Metadata'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Metadata'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::MintRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_MintRef'($1_from_bcs_deserialize'$1_fungible_asset_MintRef'(b1), $1_from_bcs_deserialize'$1_fungible_asset_MintRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::Supply>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Supply'($1_from_bcs_deserialize'$1_fungible_asset_Supply'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Supply'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::dispatchable_fungible_asset::TransferRefStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_dispatchable_fungible_asset_TransferRefStore'($1_from_bcs_deserialize'$1_dispatchable_fungible_asset_TransferRefStore'(b1), $1_from_bcs_deserialize'$1_dispatchable_fungible_asset_TransferRefStore'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::primary_fungible_store::DeriveRefPod>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_primary_fungible_store_DeriveRefPod'($1_from_bcs_deserialize'$1_primary_fungible_store_DeriveRefPod'(b1), $1_from_bcs_deserialize'$1_primary_fungible_store_DeriveRefPod'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::smart_table::SmartTable<0xbb::i32::I32, 0xbb::tick::TickInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''($1_from_bcs_deserialize'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''(b1), $1_from_bcs_deserialize'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::reconfiguration::Configuration>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_reconfiguration_Configuration'($1_from_bcs_deserialize'$1_reconfiguration_Configuration'(b1), $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::comparator::Result>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_comparator_Result'($1_from_bcs_deserialize'$1_comparator_Result'(b1), $1_from_bcs_deserialize'$1_comparator_Result'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::big_vector::BigVector<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_big_vector_BigVector'address''($1_from_bcs_deserialize'$1_big_vector_BigVector'address''(b1), $1_from_bcs_deserialize'$1_big_vector_BigVector'address''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::big_vector::BigVector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($1_from_bcs_deserialize'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(b1), $1_from_bcs_deserialize'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::smart_vector::SmartVector<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_smart_vector_SmartVector'address''($1_from_bcs_deserialize'$1_smart_vector_SmartVector'address''(b1), $1_from_bcs_deserialize'$1_smart_vector_SmartVector'address''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0x1::smart_vector::SmartVector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($1_from_bcs_deserialize'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(b1), $1_from_bcs_deserialize'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::i32::I32>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_i32_I32'($1_from_bcs_deserialize'$bb_i32_I32'(b1), $1_from_bcs_deserialize'$bb_i32_I32'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::i128::I128>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_i128_I128'($1_from_bcs_deserialize'$bb_i128_I128'(b1), $1_from_bcs_deserialize'$bb_i128_I128'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::tick_bitmap::BitMap>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_tick_bitmap_BitMap'($1_from_bcs_deserialize'$bb_tick_bitmap_BitMap'(b1), $1_from_bcs_deserialize'$bb_tick_bitmap_BitMap'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::tick::TickInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_tick_TickInfo'($1_from_bcs_deserialize'$bb_tick_TickInfo'(b1), $1_from_bcs_deserialize'$bb_tick_TickInfo'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::tick::TickUpdatedEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_tick_TickUpdatedEvent'($1_from_bcs_deserialize'$bb_tick_TickUpdatedEvent'(b1), $1_from_bcs_deserialize'$bb_tick_TickUpdatedEvent'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::rewarder::PositionReward>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_rewarder_PositionReward'($1_from_bcs_deserialize'$bb_rewarder_PositionReward'(b1), $1_from_bcs_deserialize'$bb_rewarder_PositionReward'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::rewarder::Rewarder>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_rewarder_Rewarder'($1_from_bcs_deserialize'$bb_rewarder_Rewarder'(b1), $1_from_bcs_deserialize'$bb_rewarder_Rewarder'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::rewarder::RewarderManager>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_rewarder_RewarderManager'($1_from_bcs_deserialize'$bb_rewarder_RewarderManager'(b1), $1_from_bcs_deserialize'$bb_rewarder_RewarderManager'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::position_v3::Info>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_position_v3_Info'($1_from_bcs_deserialize'$bb_position_v3_Info'(b1), $1_from_bcs_deserialize'$bb_position_v3_Info'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::position_blacklist::PositionBlackList>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_position_blacklist_PositionBlackList'($1_from_bcs_deserialize'$bb_position_blacklist_PositionBlackList'(b1), $1_from_bcs_deserialize'$bb_position_blacklist_PositionBlackList'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::lp::LPObjectRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_lp_LPObjectRef'($1_from_bcs_deserialize'$bb_lp_LPObjectRef'(b1), $1_from_bcs_deserialize'$bb_lp_LPObjectRef'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::lp::LPTokenRefs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_lp_LPTokenRefs'($1_from_bcs_deserialize'$bb_lp_LPTokenRefs'(b1), $1_from_bcs_deserialize'$bb_lp_LPTokenRefs'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::pool_v3::AddLiquidityEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_pool_v3_AddLiquidityEvent'($1_from_bcs_deserialize'$bb_pool_v3_AddLiquidityEvent'(b1), $1_from_bcs_deserialize'$bb_pool_v3_AddLiquidityEvent'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::pool_v3::LiquidityPoolConfigsV3>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_pool_v3_LiquidityPoolConfigsV3'($1_from_bcs_deserialize'$bb_pool_v3_LiquidityPoolConfigsV3'(b1), $1_from_bcs_deserialize'$bb_pool_v3_LiquidityPoolConfigsV3'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::pool_v3::LiquidityPoolV3>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_pool_v3_LiquidityPoolV3'($1_from_bcs_deserialize'$bb_pool_v3_LiquidityPoolV3'(b1), $1_from_bcs_deserialize'$bb_pool_v3_LiquidityPoolV3'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::pool_v3::PoolSnapshot>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_pool_v3_PoolSnapshot'($1_from_bcs_deserialize'$bb_pool_v3_PoolSnapshot'(b1), $1_from_bcs_deserialize'$bb_pool_v3_PoolSnapshot'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <0xbb::pool_v3::ProtocolFees>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$bb_pool_v3_ProtocolFees'($1_from_bcs_deserialize'$bb_pool_v3_ProtocolFees'(b1), $1_from_bcs_deserialize'$bb_pool_v3_ProtocolFees'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <#0>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'#0'($1_from_bcs_deserialize'#0'(b1), $1_from_bcs_deserialize'#0'(b2)))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/permissioned_signer.spec.move:5:9+288
axiom (forall a: $1_permissioned_signer_GrantedPermissionHandles :: $IsValid'$1_permissioned_signer_GrantedPermissionHandles'(a) ==> ((var $range_0 := $Range(0, LenVec(a->$active_handles)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
((var $range_2 := $Range(0, LenVec(a->$active_handles)); (forall $i_3: int :: $InRange($range_2, $i_3) ==> (var j := $i_3;
((!$IsEqual'num'(i, j) ==> !$IsEqual'address'(ReadVec(a->$active_handles, i), ReadVec(a->$active_handles, j)))))))))))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/hash.spec.move:8:9+113
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_keccak256(b1), $1_aptos_hash_spec_keccak256(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/hash.spec.move:13:9+129
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_sha2_512_internal(b1), $1_aptos_hash_spec_sha2_512_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/hash.spec.move:18:9+129
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_sha3_512_internal(b1), $1_aptos_hash_spec_sha3_512_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/hash.spec.move:23:9+131
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_ripemd160_internal(b1), $1_aptos_hash_spec_ripemd160_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/hash.spec.move:28:9+135
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_blake2b_256_internal(b1), $1_aptos_hash_spec_blake2b_256_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:199:5+92
function {:inline} $1_vector_$is_empty'u64'(self: Vec (int)): bool {
    $IsEqual'u64'($1_vector_$length'u64'(self), 0)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:199:5+92
function {:inline} $1_vector_$is_empty'u128'(self: Vec (int)): bool {
    $IsEqual'u64'($1_vector_$length'u128'(self), 0)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:199:5+92
function {:inline} $1_vector_$is_empty'$1_function_info_FunctionInfo'(self: Vec ($1_function_info_FunctionInfo)): bool {
    $IsEqual'u64'($1_vector_$length'$1_function_info_FunctionInfo'(self), 0)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:199:5+92
function {:inline} $1_vector_$is_empty'$1_big_vector_BigVector'address''(self: Vec ($1_big_vector_BigVector'address')): bool {
    $IsEqual'u64'($1_vector_$length'$1_big_vector_BigVector'address''(self), 0)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:34:10+78
function {:inline} $1_option_spec_none'$1_function_info_FunctionInfo'(): $1_option_Option'$1_function_info_FunctionInfo' {
    $1_option_Option'$1_function_info_FunctionInfo'($EmptyVec'$1_function_info_FunctionInfo'())
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:69:10+97
function {:inline} $1_option_spec_is_none'$1_function_info_FunctionInfo'(self: $1_option_Option'$1_function_info_FunctionInfo'): bool {
    $1_vector_$is_empty'$1_function_info_FunctionInfo'(self->$vec)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:69:10+97
function {:inline} $1_option_spec_is_none'$1_big_vector_BigVector'address''(self: $1_option_Option'$1_big_vector_BigVector'address''): bool {
    $1_vector_$is_empty'$1_big_vector_BigVector'address''(self->$vec)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:82:10+98
function {:inline} $1_option_spec_is_some'u128'(self: $1_option_Option'u128'): bool {
    !$1_vector_$is_empty'u128'(self->$vec)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:82:10+98
function {:inline} $1_option_spec_is_some'$1_function_info_FunctionInfo'(self: $1_option_Option'$1_function_info_FunctionInfo'): bool {
    !$1_vector_$is_empty'$1_function_info_FunctionInfo'(self->$vec)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:111:10+84
function {:inline} $1_option_spec_borrow'$1_function_info_FunctionInfo'(self: $1_option_Option'$1_function_info_FunctionInfo'): $1_function_info_FunctionInfo {
    ReadVec(self->$vec, 0)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:111:10+84
function {:inline} $1_option_spec_borrow'$1_big_vector_BigVector'address''(self: $1_option_Option'$1_big_vector_BigVector'address''): $1_big_vector_BigVector'address' {
    ReadVec(self->$vec, 0)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:102:5+154
function {:inline} $1_option_$borrow'u64'(self: $1_option_Option'u64'): int {
    $1_vector_$borrow'u64'(self->$vec, 0)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:61:5+101
function {:inline} $1_option_$is_none'u64'(self: $1_option_Option'u64'): bool {
    $1_vector_$is_empty'u64'(self->$vec)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:74:5+102
function {:inline} $1_option_$is_some'u64'(self: $1_option_Option'u64'): bool {
    !$1_vector_$is_empty'u64'(self->$vec)
}

// struct option::Option<u64> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'u64' {
    $1_option_Option'u64'($vec: Vec (int))
}
function {:inline} $Update'$1_option_Option'u64''_vec(s: $1_option_Option'u64', x: Vec (int)): $1_option_Option'u64' {
    $1_option_Option'u64'(x)
}
function $IsValid'$1_option_Option'u64''(s: $1_option_Option'u64'): bool {
    $IsValid'vec'u64''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'u64''(s1: $1_option_Option'u64', s2: $1_option_Option'u64'): bool {
    $IsEqual'vec'u64''(s1->$vec, s2->$vec)}

// struct option::Option<u128> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'u128' {
    $1_option_Option'u128'($vec: Vec (int))
}
function {:inline} $Update'$1_option_Option'u128''_vec(s: $1_option_Option'u128', x: Vec (int)): $1_option_Option'u128' {
    $1_option_Option'u128'(x)
}
function $IsValid'$1_option_Option'u128''(s: $1_option_Option'u128'): bool {
    $IsValid'vec'u128''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'u128''(s1: $1_option_Option'u128', s2: $1_option_Option'u128'): bool {
    $IsEqual'vec'u128''(s1->$vec, s2->$vec)}

// struct option::Option<0x1::function_info::FunctionInfo> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_function_info_FunctionInfo' {
    $1_option_Option'$1_function_info_FunctionInfo'($vec: Vec ($1_function_info_FunctionInfo))
}
function {:inline} $Update'$1_option_Option'$1_function_info_FunctionInfo''_vec(s: $1_option_Option'$1_function_info_FunctionInfo', x: Vec ($1_function_info_FunctionInfo)): $1_option_Option'$1_function_info_FunctionInfo' {
    $1_option_Option'$1_function_info_FunctionInfo'(x)
}
function $IsValid'$1_option_Option'$1_function_info_FunctionInfo''(s: $1_option_Option'$1_function_info_FunctionInfo'): bool {
    $IsValid'vec'$1_function_info_FunctionInfo''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_function_info_FunctionInfo''(s1: $1_option_Option'$1_function_info_FunctionInfo', s2: $1_option_Option'$1_function_info_FunctionInfo'): bool {
    $IsEqual'vec'$1_function_info_FunctionInfo''(s1->$vec, s2->$vec)}

// struct option::Option<0x1::big_vector::BigVector<address>> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_big_vector_BigVector'address'' {
    $1_option_Option'$1_big_vector_BigVector'address''($vec: Vec ($1_big_vector_BigVector'address'))
}
function {:inline} $Update'$1_option_Option'$1_big_vector_BigVector'address'''_vec(s: $1_option_Option'$1_big_vector_BigVector'address'', x: Vec ($1_big_vector_BigVector'address')): $1_option_Option'$1_big_vector_BigVector'address'' {
    $1_option_Option'$1_big_vector_BigVector'address''(x)
}
function $IsValid'$1_option_Option'$1_big_vector_BigVector'address'''(s: $1_option_Option'$1_big_vector_BigVector'address''): bool {
    $IsValid'vec'$1_big_vector_BigVector'address'''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_big_vector_BigVector'address'''(s1: $1_option_Option'$1_big_vector_BigVector'address'', s2: $1_option_Option'$1_big_vector_BigVector'address''): bool {
    $IsEqual'vec'$1_big_vector_BigVector'address'''(s1->$vec, s2->$vec)}

// struct option::Option<0x1::big_vector::BigVector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''' {
    $1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($vec: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''))
}
function {:inline} $Update'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''_vec(s: $1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''', x: Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'')): $1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''' {
    $1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(x)
}
function $IsValid'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(s: $1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''): bool {
    $IsValid'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(s1: $1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''', s2: $1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''): bool {
    $IsEqual'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(s1->$vec, s2->$vec)}

// fun option::borrow_mut<u128> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:173:5+174
procedure {:inline 1} $1_option_borrow_mut'u128'(_$t0: $Mutation ($1_option_Option'u128')) returns ($ret0: $Mutation (int), $ret1: $Mutation ($1_option_Option'u128'))
{
    // declare local variables
    var $t1: $1_option_Option'u128';
    var $t2: bool;
    var $t3: $Mutation (Vec (int));
    var $t4: int;
    var $t5: $Mutation (int);
    var $t6: int;
    var $t7: int;
    var $t0: $Mutation ($1_option_Option'u128');
    var $temp_0'$1_option_Option'u128'': $1_option_Option'u128';
    var $temp_0'u128': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:173:5+1
    assume {:print "$at(39,5933,5934)"} true;
    $temp_0'$1_option_Option'u128'' := $Dereference($t0);
    assume {:print "$track_local(2,3,0):", $temp_0'$1_option_Option'u128''} $temp_0'$1_option_Option'u128'' == $temp_0'$1_option_Option'u128'';

    // $t1 := read_ref($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:25+4
    assume {:print "$at(39,6032,6036)"} true;
    $t1 := $Dereference($t0);

    // $t2 := opaque begin: option::is_some<#0>($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+13

    // assume WellFormed($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+13
    assume $IsValid'bool'($t2);

    // assume Eq<bool>($t2, option::spec_is_some<#0>($t1)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+13
    assume $IsEqual'bool'($t2, $1_option_spec_is_some'u128'($t1));

    // $t2 := opaque end: option::is_some<#0>($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+13

    // if ($t2) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+6
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:28+13
    assume {:print "$at(39,6084,6097)"} true;
L1:

    // $t3 := borrow_field<0x1::option::Option<#0>>.vec($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:28+13
    assume {:print "$at(39,6084,6097)"} true;
    $t3 := $ChildMutation($t0, 0, $Dereference($t0)->$vec);

    // $t4 := 0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:43+1
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := vector::borrow_mut<#0>($t3, $t4) on_abort goto L3 with $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+36
    call $t5,$t3 := $1_vector_borrow_mut'u128'($t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(39,6065,6101)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(2,3):", $t6} $t6 == $t6;
        goto L3;
    }

    // trace_return[0]($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:173:78+101
    assume {:print "$at(39,6006,6107)"} true;
    $temp_0'u128' := $Dereference($t5);
    assume {:print "$track_return(2,3,0):", $temp_0'u128'} $temp_0'u128' == $temp_0'u128';

    // trace_local[self]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:173:78+101
    $temp_0'$1_option_Option'u128'' := $Dereference($t0);
    assume {:print "$track_local(2,3,0):", $temp_0'$1_option_Option'u128''} $temp_0'$1_option_Option'u128'' == $temp_0'$1_option_Option'u128'';

    // trace_local[self]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:173:78+101
    $temp_0'$1_option_Option'u128'' := $Dereference($t0);
    assume {:print "$track_local(2,3,0):", $temp_0'$1_option_Option'u128''} $temp_0'$1_option_Option'u128'' == $temp_0'$1_option_Option'u128'';

    // goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:173:78+101
    goto L2;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+6
    assume {:print "$at(39,6016,6022)"} true;
L0:

    // pack_ref_deep($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+6
    assume {:print "$at(39,6016,6022)"} true;

    // drop($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+6

    // $t7 := 262145 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:32+15
    $t7 := 262145;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+6
    assume {:print "$at(39,6016,6022)"} true;
    assume {:print "$track_abort(2,3):", $t7} $t7 == $t7;

    // $t6 := move($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+6
    $t6 := $t7;

    // goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+6
    goto L3;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(39,6106,6107)"} true;
L2:

    // return $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(39,6106,6107)"} true;
    $ret0 := $t5;
    $ret1 := $t0;
    return;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
L3:

    // abort($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(39,6106,6107)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// struct string::String at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:13:5+70
datatype $1_string_String {
    $1_string_String($bytes: Vec (int))
}
function {:inline} $Update'$1_string_String'_bytes(s: $1_string_String, x: Vec (int)): $1_string_String {
    $1_string_String(x)
}
function $IsValid'$1_string_String'(s: $1_string_String): bool {
    $IsValid'vec'u8''(s->$bytes)
}
function {:inline} $IsEqual'$1_string_String'(s1: $1_string_String, s2: $1_string_String): bool {
    $IsEqual'vec'u8''(s1->$bytes, s2->$bytes)}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:26:5+77
function {:inline} $1_signer_$address_of(s: $signer): int {
    $1_signer_$borrow_address(s)
}

// fun signer::address_of [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:26:5+77
procedure {:inline 1} $1_signer_address_of(_$t0: $signer) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t0: $signer;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[s]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:26:5+1
    assume {:print "$at(40,794,795)"} true;
    assume {:print "$track_local(4,0,0):", $t0} $t0 == $t0;

    // $t1 := signer::borrow_address($t0) on_abort goto L2 with $t2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:27:10+17
    assume {:print "$at(40,848,865)"} true;
    call $t1 := $1_signer_borrow_address($t0);
    if ($abort_flag) {
        assume {:print "$at(40,848,865)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(4,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:27:9+18
    assume {:print "$track_return(4,0,0):", $t1} $t1 == $t1;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:28:5+1
    assume {:print "$at(40,870,871)"} true;
L1:

    // return $t1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:28:5+1
    assume {:print "$at(40,870,871)"} true;
    $ret0 := $t1;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:28:5+1
L2:

    // abort($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:28:5+1
    assume {:print "$at(40,870,871)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun error::aborted [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:3+57
procedure {:inline 1} $1_error_aborted(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:3+1
    assume {:print "$at(35,3525,3526)"} true;
    assume {:print "$track_local(5,0,0):", $t0} $t0 == $t0;

    // $t1 := 7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:47+7
    $t1 := 7;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(35,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:37+21
    assume {:print "$at(35,3559,3580)"} true;

    // assume WellFormed($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:37+21
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:37+21
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:37+21

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:37+21
    assume {:print "$track_return(5,0,0):", $t3} $t3 == $t3;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:59+1
L1:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:59+1
    assume {:print "$at(35,3581,3582)"} true;
    $ret0 := $t3;
    return;

}

// fun error::already_exists [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:3+71
procedure {:inline 1} $1_error_already_exists(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:3+1
    assume {:print "$at(35,3585,3586)"} true;
    assume {:print "$track_local(5,1,0):", $t0} $t0 == $t0;

    // $t1 := 8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:54+14
    $t1 := 8;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(35,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28
    assume {:print "$at(35,3626,3654)"} true;

    // assume WellFormed($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28
    assume {:print "$track_return(5,1,0):", $t3} $t3 == $t3;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:73+1
L1:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:73+1
    assume {:print "$at(35,3655,3656)"} true;
    $ret0 := $t3;
    return;

}

// fun error::invalid_argument [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:3+76
procedure {:inline 1} $1_error_invalid_argument(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:3+1
    assume {:print "$at(35,3082,3083)"} true;
    assume {:print "$track_local(5,4,0):", $t0} $t0 == $t0;

    // $t1 := 1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:57+16
    $t1 := 1;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(35,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume {:print "$at(35,3126,3156)"} true;

    // assume WellFormed($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume {:print "$track_return(5,4,0):", $t3} $t3 == $t3;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:78+1
L1:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:78+1
    assume {:print "$at(35,3157,3158)"} true;
    $ret0 := $t3;
    return;

}

// fun error::not_found [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:3+61
procedure {:inline 1} $1_error_not_found(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:3+1
    assume {:print "$at(35,3461,3462)"} true;
    assume {:print "$track_local(5,6,0):", $t0} $t0 == $t0;

    // $t1 := 6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:49+9
    $t1 := 6;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(35,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume {:print "$at(35,3497,3520)"} true;

    // assume WellFormed($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume {:print "$track_return(5,6,0):", $t3} $t3 == $t3;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:63+1
L1:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:63+1
    assume {:print "$at(35,3521,3522)"} true;
    $ret0 := $t3;
    return;

}

// fun error::out_of_range [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:3+68
procedure {:inline 1} $1_error_out_of_range(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:3+1
    assume {:print "$at(35,3161,3162)"} true;
    assume {:print "$track_local(5,8,0):", $t0} $t0 == $t0;

    // $t1 := 2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:53+12
    $t1 := 2;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(35,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26
    assume {:print "$at(35,3201,3227)"} true;

    // assume WellFormed($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26
    assume {:print "$track_return(5,8,0):", $t3} $t3 == $t3;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:70+1
L1:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:70+1
    assume {:print "$at(35,3228,3229)"} true;
    $ret0 := $t3;
    return;

}

// fun error::permission_denied [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:3+77
procedure {:inline 1} $1_error_permission_denied(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:3+1
    assume {:print "$at(35,3381,3382)"} true;
    assume {:print "$track_local(5,9,0):", $t0} $t0 == $t0;

    // $t1 := 5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:57+17
    $t1 := 5;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(35,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume {:print "$at(35,3425,3456)"} true;

    // assume WellFormed($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume {:print "$track_return(5,9,0):", $t3} $t3 == $t3;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:79+1
L1:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:79+1
    assume {:print "$at(35,3457,3458)"} true;
    $ret0 := $t3;
    return;

}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.spec.move:59:10+40
function  $1_features_spec_is_enabled(feature: int): bool;
axiom (forall feature: int ::
(var $$res := $1_features_spec_is_enabled(feature);
$IsValid'bool'($$res)));

// struct features::Features at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:644:5+61
datatype $1_features_Features {
    $1_features_Features($features: Vec (bv8))
}
function {:inline} $Update'$1_features_Features'_features(s: $1_features_Features, x: Vec (bv8)): $1_features_Features {
    $1_features_Features(x)
}
function $IsValid'$1_features_Features'(s: $1_features_Features): bool {
    $IsValid'vec'bv8''(s->$features)
}
function {:inline} $IsEqual'$1_features_Features'(s1: $1_features_Features, s2: $1_features_Features): bool {
    $IsEqual'vec'bv8''(s1->$features, s2->$features)}
var $1_features_Features_$memory: $Memory $1_features_Features;

// fun features::default_to_concurrent_fungible_balance_enabled [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:573:5+150
procedure {:inline 1} $1_features_default_to_concurrent_fungible_balance_enabled() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 68 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:574:20+38
    assume {:print "$at(33,20852,20890)"} true;
    $t0 := 68;
    assume $IsValid'u64'($t0);

    // $t1 := opaque begin: features::is_enabled($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:574:9+50

    // assume WellFormed($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:574:9+50
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, features::spec_is_enabled($t0)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:574:9+50
    assume $IsEqual'bool'($t1, $1_features_spec_is_enabled($t0));

    // $t1 := opaque end: features::is_enabled($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:574:9+50

    // trace_return[0]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:574:9+50
    assume {:print "$track_return(6,26,0):", $t1} $t1 == $t1;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:575:5+1
    assume {:print "$at(33,20896,20897)"} true;
L1:

    // return $t1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:575:5+1
    assume {:print "$at(33,20896,20897)"} true;
    $ret0 := $t1;
    return;

}

// fun features::dispatchable_fungible_asset_enabled [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:534:5+128
procedure {:inline 1} $1_features_dispatchable_fungible_asset_enabled() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 63 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:535:20+27
    assume {:print "$at(33,19320,19347)"} true;
    $t0 := 63;
    assume $IsValid'u64'($t0);

    // $t1 := opaque begin: features::is_enabled($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:535:9+39

    // assume WellFormed($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:535:9+39
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, features::spec_is_enabled($t0)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:535:9+39
    assume $IsEqual'bool'($t1, $1_features_spec_is_enabled($t0));

    // $t1 := opaque end: features::is_enabled($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:535:9+39

    // trace_return[0]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:535:9+39
    assume {:print "$track_return(6,30,0):", $t1} $t1 == $t1;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:536:5+1
    assume {:print "$at(33,19353,19354)"} true;
L1:

    // return $t1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:536:5+1
    assume {:print "$at(33,19353,19354)"} true;
    $ret0 := $t1;
    return;

}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/chain_status.move:35:5+90
function {:inline} $1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory: $Memory $1_chain_status_GenesisEndMarker): bool {
    $ResourceExists($1_chain_status_GenesisEndMarker_$memory, 1)
}

// struct chain_status::GenesisEndMarker at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/chain_status.move:12:5+34
datatype $1_chain_status_GenesisEndMarker {
    $1_chain_status_GenesisEndMarker($dummy_field: bool)
}
function {:inline} $Update'$1_chain_status_GenesisEndMarker'_dummy_field(s: $1_chain_status_GenesisEndMarker, x: bool): $1_chain_status_GenesisEndMarker {
    $1_chain_status_GenesisEndMarker(x)
}
function $IsValid'$1_chain_status_GenesisEndMarker'(s: $1_chain_status_GenesisEndMarker): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_chain_status_GenesisEndMarker'(s1: $1_chain_status_GenesisEndMarker, s2: $1_chain_status_GenesisEndMarker): bool {
    s1 == s2
}
var $1_chain_status_GenesisEndMarker_$memory: $Memory $1_chain_status_GenesisEndMarker;

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.spec.move:57:10+111
function {:inline} $1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds): int {
    $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, 1)->$microseconds
}

// struct timestamp::CurrentTimeMicroseconds at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:12:5+73
datatype $1_timestamp_CurrentTimeMicroseconds {
    $1_timestamp_CurrentTimeMicroseconds($microseconds: int)
}
function {:inline} $Update'$1_timestamp_CurrentTimeMicroseconds'_microseconds(s: $1_timestamp_CurrentTimeMicroseconds, x: int): $1_timestamp_CurrentTimeMicroseconds {
    $1_timestamp_CurrentTimeMicroseconds(x)
}
function $IsValid'$1_timestamp_CurrentTimeMicroseconds'(s: $1_timestamp_CurrentTimeMicroseconds): bool {
    $IsValid'u64'(s->$microseconds)
}
function {:inline} $IsEqual'$1_timestamp_CurrentTimeMicroseconds'(s1: $1_timestamp_CurrentTimeMicroseconds, s2: $1_timestamp_CurrentTimeMicroseconds): bool {
    s1 == s2
}
var $1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds;

// fun timestamp::now_microseconds [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:61:5+153
procedure {:inline 1} $1_timestamp_now_microseconds() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: $1_timestamp_CurrentTimeMicroseconds;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t0 := 0x1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:62:48+16
    assume {:print "$at(221,2511,2527)"} true;
    $t0 := 1;
    assume $IsValid'address'($t0);

    // $t1 := get_global<0x1::timestamp::CurrentTimeMicroseconds>($t0) on_abort goto L2 with $t2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:62:9+56
    if (!$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(221,2472,2528)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(13,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<0x1::timestamp::CurrentTimeMicroseconds>.microseconds($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:62:9+69
    $t3 := $t1->$microseconds;

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:62:9+69
    assume {:print "$track_return(13,0,0):", $t3} $t3 == $t3;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:63:5+1
    assume {:print "$at(221,2546,2547)"} true;
L1:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:63:5+1
    assume {:print "$at(221,2546,2547)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:63:5+1
L2:

    // abort($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:63:5+1
    assume {:print "$at(221,2546,2547)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun timestamp::now_seconds [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:67:5+123
procedure {:inline 1} $1_timestamp_now_seconds() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t0 := timestamp::now_microseconds() on_abort goto L2 with $t1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:68:9+18
    assume {:print "$at(221,2680,2698)"} true;
    call $t0 := $1_timestamp_now_microseconds();
    if ($abort_flag) {
        assume {:print "$at(221,2680,2698)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := 1000000 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:68:30+23
    $t2 := 1000000;
    assume $IsValid'u64'($t2);

    // $t3 := /($t0, $t2) on_abort goto L2 with $t1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:68:9+44
    call $t3 := $Div($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(221,2680,2724)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(13,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:68:9+44
    assume {:print "$track_return(13,1,0):", $t3} $t3 == $t3;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:69:5+1
    assume {:print "$at(221,2729,2730)"} true;
L1:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:69:5+1
    assume {:print "$at(221,2729,2730)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:69:5+1
L2:

    // abort($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.move:69:5+1
    assume {:print "$at(221,2729,2730)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/create_signer.spec.move:47:10+46
function  $1_create_signer_spec_create_signer(addr: int): $signer;
axiom (forall addr: int ::
(var $$res := $1_create_signer_spec_create_signer(addr);
$IsValid'signer'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'bool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'bool'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u8'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u8'(bytes);
$IsValid'u8'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u32'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u32'(bytes);
$IsValid'u32'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u64'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u64'(bytes);
$IsValid'u64'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u128'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u128'(bytes);
$IsValid'u128'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u256'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u256'(bytes);
$IsValid'u256'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'address'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'address'(bytes);
$IsValid'address'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'signer'(bytes: Vec (int)): $signer;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'signer'(bytes);
$IsValid'signer'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'u8''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'u8''(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'u64''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'u64''(bytes);
$IsValid'vec'u64''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'u128''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'u128''(bytes);
$IsValid'vec'u128''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'address''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'address''(bytes);
$IsValid'vec'address''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(bytes: Vec (int)): Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3');
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(bytes);
$IsValid'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_function_info_FunctionInfo''(bytes: Vec (int)): Vec ($1_function_info_FunctionInfo);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_function_info_FunctionInfo''(bytes);
$IsValid'vec'$1_function_info_FunctionInfo''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_fungible_asset_FungibleStore''(bytes: Vec (int)): Vec ($1_fungible_asset_FungibleStore);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_fungible_asset_FungibleStore''(bytes);
$IsValid'vec'$1_fungible_asset_FungibleStore''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_big_vector_BigVector'address'''(bytes: Vec (int)): Vec ($1_big_vector_BigVector'address');
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_big_vector_BigVector'address'''(bytes);
$IsValid'vec'$1_big_vector_BigVector'address'''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(bytes: Vec (int)): Vec ($1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'');
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(bytes);
$IsValid'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$bb_rewarder_PositionReward''(bytes: Vec (int)): Vec ($bb_rewarder_PositionReward);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$bb_rewarder_PositionReward''(bytes);
$IsValid'vec'$bb_rewarder_PositionReward''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$bb_rewarder_Rewarder''(bytes: Vec (int)): Vec ($bb_rewarder_Rewarder);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$bb_rewarder_Rewarder''(bytes);
$IsValid'vec'$bb_rewarder_Rewarder''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'#0''(bytes: Vec (int)): Vec (#0);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'#0''(bytes);
$IsValid'vec'#0''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'u64''(bytes: Vec (int)): $1_option_Option'u64';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'u64''(bytes);
$IsValid'$1_option_Option'u64''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'u128''(bytes: Vec (int)): $1_option_Option'u128';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'u128''(bytes);
$IsValid'$1_option_Option'u128''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_function_info_FunctionInfo''(bytes: Vec (int)): $1_option_Option'$1_function_info_FunctionInfo';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_function_info_FunctionInfo''(bytes);
$IsValid'$1_option_Option'$1_function_info_FunctionInfo''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_big_vector_BigVector'address'''(bytes: Vec (int)): $1_option_Option'$1_big_vector_BigVector'address'';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_big_vector_BigVector'address'''(bytes);
$IsValid'$1_option_Option'$1_big_vector_BigVector'address'''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(bytes: Vec (int)): $1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(bytes);
$IsValid'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_string_String'(bytes: Vec (int)): $1_string_String;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_string_String'(bytes);
$IsValid'$1_string_String'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_features_Features'(bytes: Vec (int)): $1_features_Features;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_features_Features'(bytes);
$IsValid'$1_features_Features'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_table_Table'$bb_i32_I32_u256''(bytes: Vec (int)): Table int (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_table_Table'$bb_i32_I32_u256''(bytes);
$IsValid'$1_table_Table'$bb_i32_I32_u256''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(bytes: Vec (int)): $1_chain_status_GenesisEndMarker;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(bytes);
$IsValid'$1_chain_status_GenesisEndMarker'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(bytes: Vec (int)): $1_timestamp_CurrentTimeMicroseconds;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(bytes);
$IsValid'$1_timestamp_CurrentTimeMicroseconds'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u64_vec'address'''(bytes: Vec (int)): Table int (Vec (int));
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u64_vec'address'''(bytes);
$IsValid'$1_table_with_length_TableWithLength'u64_vec'address'''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(bytes: Vec (int)): Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'));
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(bytes);
$IsValid'$1_table_with_length_TableWithLength'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u64_vec'#0'''(bytes: Vec (int)): Table int (Vec (#0));
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_table_with_length_TableWithLength'u64_vec'#0'''(bytes);
$IsValid'$1_table_with_length_TableWithLength'u64_vec'#0'''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_permissioned_signer_GrantedPermissionHandles'(bytes: Vec (int)): $1_permissioned_signer_GrantedPermissionHandles;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_permissioned_signer_GrantedPermissionHandles'(bytes);
$IsValid'$1_permissioned_signer_GrantedPermissionHandles'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_guid_GUID'(bytes: Vec (int)): $1_guid_GUID;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_guid_GUID'(bytes);
$IsValid'$1_guid_GUID'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_guid_ID'(bytes: Vec (int)): $1_guid_ID;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_guid_ID'(bytes);
$IsValid'$1_guid_ID'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_object_TransferEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_object_TransferEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_object_TransferEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_object_TransferEvent''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_ConstructorRef'(bytes: Vec (int)): $1_object_ConstructorRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_ConstructorRef'(bytes);
$IsValid'$1_object_ConstructorRef'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_DeleteRef'(bytes: Vec (int)): $1_object_DeleteRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_DeleteRef'(bytes);
$IsValid'$1_object_DeleteRef'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_DeriveRef'(bytes: Vec (int)): $1_object_DeriveRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_DeriveRef'(bytes);
$IsValid'$1_object_DeriveRef'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_ExtendRef'(bytes: Vec (int)): $1_object_ExtendRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_ExtendRef'(bytes);
$IsValid'$1_object_ExtendRef'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_FungibleStore''(bytes: Vec (int)): $1_object_Object'$1_fungible_asset_FungibleStore';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_FungibleStore''(bytes);
$IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(bytes: Vec (int)): $1_object_Object'$1_fungible_asset_Metadata';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(bytes);
$IsValid'$1_object_Object'$1_fungible_asset_Metadata''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_Object'$bb_position_v3_Info''(bytes: Vec (int)): $1_object_Object'$bb_position_v3_Info';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_Object'$bb_position_v3_Info''(bytes);
$IsValid'$1_object_Object'$bb_position_v3_Info''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(bytes: Vec (int)): $1_object_Object'$bb_pool_v3_LiquidityPoolV3';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(bytes);
$IsValid'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_ObjectCore'(bytes: Vec (int)): $1_object_ObjectCore;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_ObjectCore'(bytes);
$IsValid'$1_object_ObjectCore'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_TransferRef'(bytes: Vec (int)): $1_object_TransferRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_TransferRef'(bytes);
$IsValid'$1_object_TransferRef'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_Untransferable'(bytes: Vec (int)): $1_object_Untransferable;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_Untransferable'(bytes);
$IsValid'$1_object_Untransferable'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_function_info_FunctionInfo'(bytes: Vec (int)): $1_function_info_FunctionInfo;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_function_info_FunctionInfo'(bytes);
$IsValid'$1_function_info_FunctionInfo'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u64''(bytes: Vec (int)): $1_aggregator_v2_Aggregator'u64';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u64''(bytes);
$IsValid'$1_aggregator_v2_Aggregator'u64''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u128''(bytes: Vec (int)): $1_aggregator_v2_Aggregator'u128';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u128''(bytes);
$IsValid'$1_aggregator_v2_Aggregator'u128''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_TransferRef'(bytes: Vec (int)): $1_fungible_asset_TransferRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_TransferRef'(bytes);
$IsValid'$1_fungible_asset_TransferRef'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Untransferable'(bytes: Vec (int)): $1_fungible_asset_Untransferable;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Untransferable'(bytes);
$IsValid'$1_fungible_asset_Untransferable'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(bytes: Vec (int)): $1_fungible_asset_BurnRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(bytes);
$IsValid'$1_fungible_asset_BurnRef'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentFungibleBalance'(bytes: Vec (int)): $1_fungible_asset_ConcurrentFungibleBalance;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentFungibleBalance'(bytes);
$IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentSupply'(bytes: Vec (int)): $1_fungible_asset_ConcurrentSupply;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentSupply'(bytes);
$IsValid'$1_fungible_asset_ConcurrentSupply'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Deposit'(bytes: Vec (int)): $1_fungible_asset_Deposit;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Deposit'(bytes);
$IsValid'$1_fungible_asset_Deposit'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_DispatchFunctionStore'(bytes: Vec (int)): $1_fungible_asset_DispatchFunctionStore;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_DispatchFunctionStore'(bytes);
$IsValid'$1_fungible_asset_DispatchFunctionStore'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Frozen'(bytes: Vec (int)): $1_fungible_asset_Frozen;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Frozen'(bytes);
$IsValid'$1_fungible_asset_Frozen'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_FungibleAsset'(bytes: Vec (int)): $1_fungible_asset_FungibleAsset;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_FungibleAsset'(bytes);
$IsValid'$1_fungible_asset_FungibleAsset'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_FungibleStore'(bytes: Vec (int)): $1_fungible_asset_FungibleStore;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_FungibleStore'(bytes);
$IsValid'$1_fungible_asset_FungibleStore'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Metadata'(bytes: Vec (int)): $1_fungible_asset_Metadata;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Metadata'(bytes);
$IsValid'$1_fungible_asset_Metadata'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_MintRef'(bytes: Vec (int)): $1_fungible_asset_MintRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_MintRef'(bytes);
$IsValid'$1_fungible_asset_MintRef'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Supply'(bytes: Vec (int)): $1_fungible_asset_Supply;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Supply'(bytes);
$IsValid'$1_fungible_asset_Supply'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_dispatchable_fungible_asset_TransferRefStore'(bytes: Vec (int)): $1_dispatchable_fungible_asset_TransferRefStore;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_dispatchable_fungible_asset_TransferRefStore'(bytes);
$IsValid'$1_dispatchable_fungible_asset_TransferRefStore'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_primary_fungible_store_DeriveRefPod'(bytes: Vec (int)): $1_primary_fungible_store_DeriveRefPod;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_primary_fungible_store_DeriveRefPod'(bytes);
$IsValid'$1_primary_fungible_store_DeriveRefPod'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''(bytes: Vec (int)): Table int ($bb_tick_TickInfo);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''(bytes);
$IsValid'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(bytes: Vec (int)): $1_reconfiguration_Configuration;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(bytes);
$IsValid'$1_reconfiguration_Configuration'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_comparator_Result'(bytes: Vec (int)): $1_comparator_Result;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_comparator_Result'(bytes);
$IsValid'$1_comparator_Result'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_big_vector_BigVector'address''(bytes: Vec (int)): $1_big_vector_BigVector'address';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_big_vector_BigVector'address''(bytes);
$IsValid'$1_big_vector_BigVector'address''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(bytes: Vec (int)): $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(bytes);
$IsValid'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_smart_vector_SmartVector'address''(bytes: Vec (int)): $1_smart_vector_SmartVector'address';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_smart_vector_SmartVector'address''(bytes);
$IsValid'$1_smart_vector_SmartVector'address''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(bytes: Vec (int)): $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(bytes);
$IsValid'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_i32_I32'(bytes: Vec (int)): $bb_i32_I32;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_i32_I32'(bytes);
$IsValid'$bb_i32_I32'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_i128_I128'(bytes: Vec (int)): $bb_i128_I128;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_i128_I128'(bytes);
$IsValid'$bb_i128_I128'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_tick_bitmap_BitMap'(bytes: Vec (int)): $bb_tick_bitmap_BitMap;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_tick_bitmap_BitMap'(bytes);
$IsValid'$bb_tick_bitmap_BitMap'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_tick_TickInfo'(bytes: Vec (int)): $bb_tick_TickInfo;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_tick_TickInfo'(bytes);
$IsValid'$bb_tick_TickInfo'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_tick_TickUpdatedEvent'(bytes: Vec (int)): $bb_tick_TickUpdatedEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_tick_TickUpdatedEvent'(bytes);
$IsValid'$bb_tick_TickUpdatedEvent'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_rewarder_PositionReward'(bytes: Vec (int)): $bb_rewarder_PositionReward;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_rewarder_PositionReward'(bytes);
$IsValid'$bb_rewarder_PositionReward'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_rewarder_Rewarder'(bytes: Vec (int)): $bb_rewarder_Rewarder;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_rewarder_Rewarder'(bytes);
$IsValid'$bb_rewarder_Rewarder'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_rewarder_RewarderManager'(bytes: Vec (int)): $bb_rewarder_RewarderManager;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_rewarder_RewarderManager'(bytes);
$IsValid'$bb_rewarder_RewarderManager'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_position_v3_Info'(bytes: Vec (int)): $bb_position_v3_Info;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_position_v3_Info'(bytes);
$IsValid'$bb_position_v3_Info'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_position_blacklist_PositionBlackList'(bytes: Vec (int)): $bb_position_blacklist_PositionBlackList;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_position_blacklist_PositionBlackList'(bytes);
$IsValid'$bb_position_blacklist_PositionBlackList'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_lp_LPObjectRef'(bytes: Vec (int)): $bb_lp_LPObjectRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_lp_LPObjectRef'(bytes);
$IsValid'$bb_lp_LPObjectRef'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_lp_LPTokenRefs'(bytes: Vec (int)): $bb_lp_LPTokenRefs;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_lp_LPTokenRefs'(bytes);
$IsValid'$bb_lp_LPTokenRefs'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_pool_v3_AddLiquidityEvent'(bytes: Vec (int)): $bb_pool_v3_AddLiquidityEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_pool_v3_AddLiquidityEvent'(bytes);
$IsValid'$bb_pool_v3_AddLiquidityEvent'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_pool_v3_LiquidityPoolConfigsV3'(bytes: Vec (int)): $bb_pool_v3_LiquidityPoolConfigsV3;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_pool_v3_LiquidityPoolConfigsV3'(bytes);
$IsValid'$bb_pool_v3_LiquidityPoolConfigsV3'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_pool_v3_LiquidityPoolV3'(bytes: Vec (int)): $bb_pool_v3_LiquidityPoolV3;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_pool_v3_LiquidityPoolV3'(bytes);
$IsValid'$bb_pool_v3_LiquidityPoolV3'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_pool_v3_PoolSnapshot'(bytes: Vec (int)): $bb_pool_v3_PoolSnapshot;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_pool_v3_PoolSnapshot'(bytes);
$IsValid'$bb_pool_v3_PoolSnapshot'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$bb_pool_v3_ProtocolFees'(bytes: Vec (int)): $bb_pool_v3_ProtocolFees;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$bb_pool_v3_ProtocolFees'(bytes);
$IsValid'$bb_pool_v3_ProtocolFees'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'#0'(bytes: Vec (int)): #0;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'#0'(bytes);
$IsValid'#0'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'bool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'bool'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u8'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u8'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u32'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u32'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u64'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u64'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u128'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u128'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u256'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u256'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'address'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'address'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'signer'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'signer'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'u8''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'u8''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'u64''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'u64''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'u128''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'u128''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'address''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'address''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_function_info_FunctionInfo''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_function_info_FunctionInfo''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_fungible_asset_FungibleStore''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_fungible_asset_FungibleStore''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_big_vector_BigVector'address'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_big_vector_BigVector'address'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$bb_rewarder_PositionReward''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$bb_rewarder_PositionReward''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$bb_rewarder_Rewarder''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$bb_rewarder_Rewarder''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'#0''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'#0''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'u64''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'u64''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'u128''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'u128''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_function_info_FunctionInfo''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_function_info_FunctionInfo''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_big_vector_BigVector'address'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_big_vector_BigVector'address'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_string_String'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_string_String'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_features_Features'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_features_Features'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_table_Table'$bb_i32_I32_u256''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_table_Table'$bb_i32_I32_u256''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u64_vec'address'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u64_vec'address'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u64_vec'#0'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_table_with_length_TableWithLength'u64_vec'#0'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_permissioned_signer_GrantedPermissionHandles'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_permissioned_signer_GrantedPermissionHandles'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_guid_GUID'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_guid_GUID'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_guid_ID'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_guid_ID'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_object_TransferEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_object_TransferEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_ConstructorRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_ConstructorRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_DeleteRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_DeleteRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_DeriveRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_DeriveRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_ExtendRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_ExtendRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_FungibleStore''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_FungibleStore''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_Object'$bb_position_v3_Info''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_Object'$bb_position_v3_Info''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_ObjectCore'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_ObjectCore'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_TransferRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_TransferRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_Untransferable'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_Untransferable'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_function_info_FunctionInfo'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_function_info_FunctionInfo'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u64''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u64''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u128''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u128''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_TransferRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_TransferRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Untransferable'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Untransferable'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentFungibleBalance'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentFungibleBalance'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentSupply'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentSupply'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Deposit'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Deposit'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_DispatchFunctionStore'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_DispatchFunctionStore'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Frozen'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Frozen'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_FungibleAsset'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_FungibleAsset'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_FungibleStore'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_FungibleStore'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Metadata'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Metadata'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_MintRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_MintRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Supply'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Supply'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_dispatchable_fungible_asset_TransferRefStore'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_dispatchable_fungible_asset_TransferRefStore'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_primary_fungible_store_DeriveRefPod'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_primary_fungible_store_DeriveRefPod'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_comparator_Result'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_comparator_Result'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_big_vector_BigVector'address''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_big_vector_BigVector'address''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_smart_vector_SmartVector'address''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_smart_vector_SmartVector'address''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_i32_I32'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_i32_I32'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_i128_I128'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_i128_I128'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_tick_bitmap_BitMap'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_tick_bitmap_BitMap'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_tick_TickInfo'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_tick_TickInfo'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_tick_TickUpdatedEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_tick_TickUpdatedEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_rewarder_PositionReward'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_rewarder_PositionReward'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_rewarder_Rewarder'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_rewarder_Rewarder'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_rewarder_RewarderManager'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_rewarder_RewarderManager'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_position_v3_Info'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_position_v3_Info'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_position_blacklist_PositionBlackList'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_position_blacklist_PositionBlackList'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_lp_LPObjectRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_lp_LPObjectRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_lp_LPTokenRefs'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_lp_LPTokenRefs'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_pool_v3_AddLiquidityEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_pool_v3_AddLiquidityEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_pool_v3_LiquidityPoolConfigsV3'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_pool_v3_LiquidityPoolConfigsV3'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_pool_v3_LiquidityPoolV3'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_pool_v3_LiquidityPoolV3'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_pool_v3_PoolSnapshot'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_pool_v3_PoolSnapshot'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$bb_pool_v3_ProtocolFees'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$bb_pool_v3_ProtocolFees'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'#0'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'#0'(bytes);
$IsValid'bool'($$res)));

// struct permissioned_signer::GrantedPermissionHandles at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/permissioned_signer.move:64:5+188
datatype $1_permissioned_signer_GrantedPermissionHandles {
    $1_permissioned_signer_GrantedPermissionHandles($active_handles: Vec (int))
}
function {:inline} $Update'$1_permissioned_signer_GrantedPermissionHandles'_active_handles(s: $1_permissioned_signer_GrantedPermissionHandles, x: Vec (int)): $1_permissioned_signer_GrantedPermissionHandles {
    $1_permissioned_signer_GrantedPermissionHandles(x)
}
function $IsValid'$1_permissioned_signer_GrantedPermissionHandles'(s: $1_permissioned_signer_GrantedPermissionHandles): bool {
    $IsValid'vec'address''(s->$active_handles)
}
function {:inline} $IsEqual'$1_permissioned_signer_GrantedPermissionHandles'(s1: $1_permissioned_signer_GrantedPermissionHandles, s2: $1_permissioned_signer_GrantedPermissionHandles): bool {
    $IsEqual'vec'address''(s1->$active_handles, s2->$active_handles)}
var $1_permissioned_signer_GrantedPermissionHandles_$memory: $Memory $1_permissioned_signer_GrantedPermissionHandles;

// struct guid::GUID at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:7:5+50
datatype $1_guid_GUID {
    $1_guid_GUID($id: $1_guid_ID)
}
function {:inline} $Update'$1_guid_GUID'_id(s: $1_guid_GUID, x: $1_guid_ID): $1_guid_GUID {
    $1_guid_GUID(x)
}
function $IsValid'$1_guid_GUID'(s: $1_guid_GUID): bool {
    $IsValid'$1_guid_ID'(s->$id)
}
function {:inline} $IsEqual'$1_guid_GUID'(s1: $1_guid_GUID, s2: $1_guid_GUID): bool {
    s1 == s2
}

// struct guid::ID at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:12:5+209
datatype $1_guid_ID {
    $1_guid_ID($creation_num: int, $addr: int)
}
function {:inline} $Update'$1_guid_ID'_creation_num(s: $1_guid_ID, x: int): $1_guid_ID {
    $1_guid_ID(x, s->$addr)
}
function {:inline} $Update'$1_guid_ID'_addr(s: $1_guid_ID, x: int): $1_guid_ID {
    $1_guid_ID(s->$creation_num, x)
}
function $IsValid'$1_guid_ID'(s: $1_guid_ID): bool {
    $IsValid'u64'(s->$creation_num)
      && $IsValid'address'(s->$addr)
}
function {:inline} $IsEqual'$1_guid_ID'(s1: $1_guid_ID, s2: $1_guid_ID): bool {
    s1 == s2
}

// fun guid::create [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:23:5+286
procedure {:inline 1} $1_guid_create(_$t0: int, _$t1: $Mutation (int)) returns ($ret0: $1_guid_GUID, $ret1: $Mutation (int))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_guid_ID;
    var $t8: $1_guid_GUID;
    var $t0: int;
    var $t1: $Mutation (int);
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:23:5+1
    assume {:print "$at(182,836,837)"} true;
    assume {:print "$track_local(29,0,0):", $t0} $t0 == $t0;

    // trace_local[creation_num_ref]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:23:5+1
    $temp_0'u64' := $Dereference($t1);
    assume {:print "$track_local(29,0,1):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // $t3 := read_ref($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:24:28+17
    assume {:print "$at(182,940,957)"} true;
    $t3 := $Dereference($t1);

    // trace_local[creation_num]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:24:28+17
    assume {:print "$track_local(29,0,2):", $t3} $t3 == $t3;

    // $t4 := 1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:25:44+1
    assume {:print "$at(182,1002,1003)"} true;
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // $t5 := +($t3, $t4) on_abort goto L2 with $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:25:29+16
    call $t5 := $AddU64($t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(182,987,1003)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,0):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_ref($t1, $t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:25:9+36
    $t1 := $UpdateMutation($t1, $t5);

    // $t7 := pack 0x1::guid::ID($t3, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:27:17+70
    assume {:print "$at(182,1036,1106)"} true;
    $t7 := $1_guid_ID($t3, $t0);

    // $t8 := pack 0x1::guid::GUID($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:26:9+103
    assume {:print "$at(182,1013,1116)"} true;
    $t8 := $1_guid_GUID($t7);

    // trace_return[0]($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:23:80+211
    assume {:print "$at(182,911,1122)"} true;
    assume {:print "$track_return(29,0,0):", $t8} $t8 == $t8;

    // trace_local[creation_num_ref]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:23:80+211
    $temp_0'u64' := $Dereference($t1);
    assume {:print "$track_local(29,0,1):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:32:5+1
    assume {:print "$at(182,1121,1122)"} true;
L1:

    // return $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:32:5+1
    assume {:print "$at(182,1121,1122)"} true;
    $ret0 := $t8;
    $ret1 := $t1;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:32:5+1
L2:

    // abort($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/guid.move:32:5+1
    assume {:print "$at(182,1121,1122)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// struct event::EventHandle<0x1::object::TransferEvent> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_object_TransferEvent' {
    $1_event_EventHandle'$1_object_TransferEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_object_TransferEvent''_counter(s: $1_event_EventHandle'$1_object_TransferEvent', x: int): $1_event_EventHandle'$1_object_TransferEvent' {
    $1_event_EventHandle'$1_object_TransferEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_object_TransferEvent''_guid(s: $1_event_EventHandle'$1_object_TransferEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_object_TransferEvent' {
    $1_event_EventHandle'$1_object_TransferEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_object_TransferEvent''(s: $1_event_EventHandle'$1_object_TransferEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_object_TransferEvent''(s1: $1_event_EventHandle'$1_object_TransferEvent', s2: $1_event_EventHandle'$1_object_TransferEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<0x1::reconfiguration::NewEpochEvent> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''_counter(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', x: int): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''_guid(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s1: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', s2: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): bool {
    s1 == s2
}

// fun event::new_event_handle<0x1::object::TransferEvent> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/event.move:43:5+165
procedure {:inline 1} $1_event_new_event_handle'$1_object_TransferEvent'(_$t0: $1_guid_GUID) returns ($ret0: $1_event_EventHandle'$1_object_TransferEvent')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_event_EventHandle'$1_object_TransferEvent';
    var $t0: $1_guid_GUID;
    var $temp_0'$1_event_EventHandle'$1_object_TransferEvent'': $1_event_EventHandle'$1_object_TransferEvent';
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[guid]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/event.move:43:5+1
    assume {:print "$at(172,1543,1544)"} true;
    assume {:print "$track_local(30,5,0):", $t0} $t0 == $t0;

    // $t1 := 0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/event.move:45:22+1
    assume {:print "$at(172,1672,1673)"} true;
    $t1 := 0;
    assume $IsValid'u64'($t1);

    // $t2 := pack 0x1::event::EventHandle<#0>($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/event.move:44:9+68
    assume {:print "$at(172,1634,1702)"} true;
    $t2 := $1_event_EventHandle'$1_object_TransferEvent'($t1, $t0);

    // trace_return[0]($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/event.move:44:9+68
    assume {:print "$track_return(30,5,0):", $t2} $t2 == $t2;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/event.move:48:5+1
    assume {:print "$at(172,1707,1708)"} true;
L1:

    // return $t2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/event.move:48:5+1
    assume {:print "$at(172,1707,1708)"} true;
    $ret0 := $t2;
    return;

}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/account/account.spec.move:581:10+77
function  $1_account_spec_create_resource_address(source: int, seed: Vec (int)): int;
axiom (forall source: int, seed: Vec (int) ::
(var $$res := $1_account_spec_create_resource_address(source, seed);
$IsValid'address'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.spec.move:59:10+50
function  $1_object_spec_exists_at'$1_fungible_asset_FungibleStore'(object: int): bool;
axiom (forall object: int ::
(var $$res := $1_object_spec_exists_at'$1_fungible_asset_FungibleStore'(object);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.spec.move:59:10+50
function  $1_object_spec_exists_at'$1_fungible_asset_Metadata'(object: int): bool;
axiom (forall object: int ::
(var $$res := $1_object_spec_exists_at'$1_fungible_asset_Metadata'(object);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.spec.move:59:10+50
function  $1_object_spec_exists_at'$bb_position_v3_Info'(object: int): bool;
axiom (forall object: int ::
(var $$res := $1_object_spec_exists_at'$bb_position_v3_Info'(object);
$IsValid'bool'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.spec.move:559:10+75
function  $1_object_spec_create_object_address(source: int, seed: Vec (int)): int;
axiom (forall source: int, seed: Vec (int) ::
(var $$res := $1_object_spec_create_object_address(source, seed);
$IsValid'address'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.spec.move:561:10+92
function  $1_object_spec_create_user_derived_object_address(source: int, derive_from: int): int;
axiom (forall source: int, derive_from: int ::
(var $$res := $1_object_spec_create_user_derived_object_address(source, derive_from);
$IsValid'address'($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:249:5+91
function {:inline} $1_object_$object_address'$1_fungible_asset_FungibleStore'(object: $1_object_Object'$1_fungible_asset_FungibleStore'): int {
    object->$inner
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:249:5+91
function {:inline} $1_object_$object_address'$bb_position_v3_Info'(object: $1_object_Object'$bb_position_v3_Info'): int {
    object->$inner
}

// struct object::ConstructorRef at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:136:5+167
datatype $1_object_ConstructorRef {
    $1_object_ConstructorRef($self: int, $can_delete: bool)
}
function {:inline} $Update'$1_object_ConstructorRef'_self(s: $1_object_ConstructorRef, x: int): $1_object_ConstructorRef {
    $1_object_ConstructorRef(x, s->$can_delete)
}
function {:inline} $Update'$1_object_ConstructorRef'_can_delete(s: $1_object_ConstructorRef, x: bool): $1_object_ConstructorRef {
    $1_object_ConstructorRef(s->$self, x)
}
function $IsValid'$1_object_ConstructorRef'(s: $1_object_ConstructorRef): bool {
    $IsValid'address'(s->$self)
      && $IsValid'bool'(s->$can_delete)
}
function {:inline} $IsEqual'$1_object_ConstructorRef'(s1: $1_object_ConstructorRef, s2: $1_object_ConstructorRef): bool {
    s1 == s2
}

// struct object::DeleteRef at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:143:5+63
datatype $1_object_DeleteRef {
    $1_object_DeleteRef($self: int)
}
function {:inline} $Update'$1_object_DeleteRef'_self(s: $1_object_DeleteRef, x: int): $1_object_DeleteRef {
    $1_object_DeleteRef(x)
}
function $IsValid'$1_object_DeleteRef'(s: $1_object_DeleteRef): bool {
    $IsValid'address'(s->$self)
}
function {:inline} $IsEqual'$1_object_DeleteRef'(s1: $1_object_DeleteRef, s2: $1_object_DeleteRef): bool {
    s1 == s2
}

// struct object::DeriveRef at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:165:5+63
datatype $1_object_DeriveRef {
    $1_object_DeriveRef($self: int)
}
function {:inline} $Update'$1_object_DeriveRef'_self(s: $1_object_DeriveRef, x: int): $1_object_DeriveRef {
    $1_object_DeriveRef(x)
}
function $IsValid'$1_object_DeriveRef'(s: $1_object_DeriveRef): bool {
    $IsValid'address'(s->$self)
}
function {:inline} $IsEqual'$1_object_DeriveRef'(s1: $1_object_DeriveRef, s2: $1_object_DeriveRef): bool {
    s1 == s2
}

// struct object::ExtendRef at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:148:5+63
datatype $1_object_ExtendRef {
    $1_object_ExtendRef($self: int)
}
function {:inline} $Update'$1_object_ExtendRef'_self(s: $1_object_ExtendRef, x: int): $1_object_ExtendRef {
    $1_object_ExtendRef(x)
}
function $IsValid'$1_object_ExtendRef'(s: $1_object_ExtendRef): bool {
    $IsValid'address'(s->$self)
}
function {:inline} $IsEqual'$1_object_ExtendRef'(s1: $1_object_ExtendRef, s2: $1_object_ExtendRef): bool {
    s1 == s2
}

// struct object::Object<0x1::fungible_asset::FungibleStore> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:131:5+78
datatype $1_object_Object'$1_fungible_asset_FungibleStore' {
    $1_object_Object'$1_fungible_asset_FungibleStore'($inner: int)
}
function {:inline} $Update'$1_object_Object'$1_fungible_asset_FungibleStore''_inner(s: $1_object_Object'$1_fungible_asset_FungibleStore', x: int): $1_object_Object'$1_fungible_asset_FungibleStore' {
    $1_object_Object'$1_fungible_asset_FungibleStore'(x)
}
function $IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''(s: $1_object_Object'$1_fungible_asset_FungibleStore'): bool {
    $IsValid'address'(s->$inner)
}
function {:inline} $IsEqual'$1_object_Object'$1_fungible_asset_FungibleStore''(s1: $1_object_Object'$1_fungible_asset_FungibleStore', s2: $1_object_Object'$1_fungible_asset_FungibleStore'): bool {
    s1 == s2
}

// struct object::Object<0x1::fungible_asset::Metadata> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:131:5+78
datatype $1_object_Object'$1_fungible_asset_Metadata' {
    $1_object_Object'$1_fungible_asset_Metadata'($inner: int)
}
function {:inline} $Update'$1_object_Object'$1_fungible_asset_Metadata''_inner(s: $1_object_Object'$1_fungible_asset_Metadata', x: int): $1_object_Object'$1_fungible_asset_Metadata' {
    $1_object_Object'$1_fungible_asset_Metadata'(x)
}
function $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s: $1_object_Object'$1_fungible_asset_Metadata'): bool {
    $IsValid'address'(s->$inner)
}
function {:inline} $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''(s1: $1_object_Object'$1_fungible_asset_Metadata', s2: $1_object_Object'$1_fungible_asset_Metadata'): bool {
    s1 == s2
}

// struct object::Object<0xbb::position_v3::Info> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:131:5+78
datatype $1_object_Object'$bb_position_v3_Info' {
    $1_object_Object'$bb_position_v3_Info'($inner: int)
}
function {:inline} $Update'$1_object_Object'$bb_position_v3_Info''_inner(s: $1_object_Object'$bb_position_v3_Info', x: int): $1_object_Object'$bb_position_v3_Info' {
    $1_object_Object'$bb_position_v3_Info'(x)
}
function $IsValid'$1_object_Object'$bb_position_v3_Info''(s: $1_object_Object'$bb_position_v3_Info'): bool {
    $IsValid'address'(s->$inner)
}
function {:inline} $IsEqual'$1_object_Object'$bb_position_v3_Info''(s1: $1_object_Object'$bb_position_v3_Info', s2: $1_object_Object'$bb_position_v3_Info'): bool {
    s1 == s2
}

// struct object::Object<0xbb::pool_v3::LiquidityPoolV3> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:131:5+78
datatype $1_object_Object'$bb_pool_v3_LiquidityPoolV3' {
    $1_object_Object'$bb_pool_v3_LiquidityPoolV3'($inner: int)
}
function {:inline} $Update'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''_inner(s: $1_object_Object'$bb_pool_v3_LiquidityPoolV3', x: int): $1_object_Object'$bb_pool_v3_LiquidityPoolV3' {
    $1_object_Object'$bb_pool_v3_LiquidityPoolV3'(x)
}
function $IsValid'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(s: $1_object_Object'$bb_pool_v3_LiquidityPoolV3'): bool {
    $IsValid'address'(s->$inner)
}
function {:inline} $IsEqual'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(s1: $1_object_Object'$bb_pool_v3_LiquidityPoolV3', s2: $1_object_Object'$bb_pool_v3_LiquidityPoolV3'): bool {
    s1 == s2
}

// struct object::ObjectCore at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:100:5+551
datatype $1_object_ObjectCore {
    $1_object_ObjectCore($guid_creation_num: int, $owner: int, $allow_ungated_transfer: bool, $transfer_events: $1_event_EventHandle'$1_object_TransferEvent')
}
function {:inline} $Update'$1_object_ObjectCore'_guid_creation_num(s: $1_object_ObjectCore, x: int): $1_object_ObjectCore {
    $1_object_ObjectCore(x, s->$owner, s->$allow_ungated_transfer, s->$transfer_events)
}
function {:inline} $Update'$1_object_ObjectCore'_owner(s: $1_object_ObjectCore, x: int): $1_object_ObjectCore {
    $1_object_ObjectCore(s->$guid_creation_num, x, s->$allow_ungated_transfer, s->$transfer_events)
}
function {:inline} $Update'$1_object_ObjectCore'_allow_ungated_transfer(s: $1_object_ObjectCore, x: bool): $1_object_ObjectCore {
    $1_object_ObjectCore(s->$guid_creation_num, s->$owner, x, s->$transfer_events)
}
function {:inline} $Update'$1_object_ObjectCore'_transfer_events(s: $1_object_ObjectCore, x: $1_event_EventHandle'$1_object_TransferEvent'): $1_object_ObjectCore {
    $1_object_ObjectCore(s->$guid_creation_num, s->$owner, s->$allow_ungated_transfer, x)
}
function $IsValid'$1_object_ObjectCore'(s: $1_object_ObjectCore): bool {
    $IsValid'u64'(s->$guid_creation_num)
      && $IsValid'address'(s->$owner)
      && $IsValid'bool'(s->$allow_ungated_transfer)
      && $IsValid'$1_event_EventHandle'$1_object_TransferEvent''(s->$transfer_events)
}
function {:inline} $IsEqual'$1_object_ObjectCore'(s1: $1_object_ObjectCore, s2: $1_object_ObjectCore): bool {
    s1 == s2
}
var $1_object_ObjectCore_$memory: $Memory $1_object_ObjectCore;

// struct object::TransferEvent at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:175:5+113
datatype $1_object_TransferEvent {
    $1_object_TransferEvent($object: int, $from: int, $to: int)
}
function {:inline} $Update'$1_object_TransferEvent'_object(s: $1_object_TransferEvent, x: int): $1_object_TransferEvent {
    $1_object_TransferEvent(x, s->$from, s->$to)
}
function {:inline} $Update'$1_object_TransferEvent'_from(s: $1_object_TransferEvent, x: int): $1_object_TransferEvent {
    $1_object_TransferEvent(s->$object, x, s->$to)
}
function {:inline} $Update'$1_object_TransferEvent'_to(s: $1_object_TransferEvent, x: int): $1_object_TransferEvent {
    $1_object_TransferEvent(s->$object, s->$from, x)
}
function $IsValid'$1_object_TransferEvent'(s: $1_object_TransferEvent): bool {
    $IsValid'address'(s->$object)
      && $IsValid'address'(s->$from)
      && $IsValid'address'(s->$to)
}
function {:inline} $IsEqual'$1_object_TransferEvent'(s1: $1_object_TransferEvent, s2: $1_object_TransferEvent): bool {
    s1 == s2
}

// struct object::TransferRef at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:153:5+65
datatype $1_object_TransferRef {
    $1_object_TransferRef($self: int)
}
function {:inline} $Update'$1_object_TransferRef'_self(s: $1_object_TransferRef, x: int): $1_object_TransferRef {
    $1_object_TransferRef(x)
}
function $IsValid'$1_object_TransferRef'(s: $1_object_TransferRef): bool {
    $IsValid'address'(s->$self)
}
function {:inline} $IsEqual'$1_object_TransferRef'(s1: $1_object_TransferRef, s2: $1_object_TransferRef): bool {
    s1 == s2
}

// struct object::Untransferable at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:121:5+32
datatype $1_object_Untransferable {
    $1_object_Untransferable($dummy_field: bool)
}
function {:inline} $Update'$1_object_Untransferable'_dummy_field(s: $1_object_Untransferable, x: bool): $1_object_Untransferable {
    $1_object_Untransferable(x)
}
function $IsValid'$1_object_Untransferable'(s: $1_object_Untransferable): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_object_Untransferable'(s1: $1_object_Untransferable, s2: $1_object_Untransferable): bool {
    s1 == s2
}
var $1_object_Untransferable_$memory: $Memory $1_object_Untransferable;

// fun object::address_to_object<0x1::fungible_asset::FungibleStore> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:200:5+278
procedure {:inline 1} $1_object_address_to_object'$1_fungible_asset_FungibleStore'(_$t0: int) returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t0: int;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:200:5+1
    assume {:print "$at(192,8445,8446)"} true;
    assume {:print "$track_local(33,6,0):", $t0} $t0 == $t0;

    // $t1 := exists<0x1::object::ObjectCore>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:17+26
    assume {:print "$at(192,8528,8554)"} true;
    $t1 := $ResourceExists($1_object_ObjectCore_$memory, $t0);

    // if ($t1) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:9+6
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume {:print "$at(192,8615,8635)"} true;
L1:

    // $t2 := opaque begin: object::exists_at<#0>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume {:print "$at(192,8615,8635)"} true;

    // $t3 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    havoc $t3;

    // if ($t3) goto L7 else goto L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    if ($t3) { goto L7; } else { goto L6; }

    // label L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
L7:

    // trace_abort($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume {:print "$at(192,8615,8635)"} true;
    assume {:print "$track_abort(33,6):", $t4} $t4 == $t4;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    goto L5;

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
L6:

    // assume WellFormed($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume {:print "$at(192,8615,8635)"} true;
    assume $IsValid'bool'($t2);

    // assume Eq<bool>($t2, object::spec_exists_at<#0>($t0)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume $IsEqual'bool'($t2, $1_object_spec_exists_at'$1_fungible_asset_FungibleStore'($t0));

    // $t2 := opaque end: object::exists_at<#0>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20

    // if ($t2) goto L3 else goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:9+6
    if ($t2) { goto L3; } else { goto L2; }

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:203:9+27
    assume {:print "$at(192,8690,8717)"} true;
L3:

    // $t5 := pack 0x1::object::Object<#0>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:203:9+27
    assume {:print "$at(192,8690,8717)"} true;
    $t5 := $1_object_Object'$1_fungible_asset_FungibleStore'($t0);

    // trace_return[0]($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:200:70+213
    assume {:print "$at(192,8510,8723)"} true;
    assume {:print "$track_return(33,6,0):", $t5} $t5 == $t5;

    // goto L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:200:70+213
    goto L4;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:56+24
    assume {:print "$at(192,8654,8678)"} true;
L2:

    // $t6 := 7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:56+24
    assume {:print "$at(192,8654,8678)"} true;
    $t6 := 7;
    assume $IsValid'u64'($t6);

    // $t7 := error::not_found($t6) on_abort goto L5 with $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:39+42
    call $t7 := $1_error_not_found($t6);
    if ($abort_flag) {
        assume {:print "$at(192,8637,8679)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,6):", $t4} $t4 == $t4;
        goto L5;
    }

    // trace_abort($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:9+6
    assume {:print "$at(192,8607,8613)"} true;
    assume {:print "$track_abort(33,6):", $t7} $t7 == $t7;

    // $t4 := move($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:9+6
    $t4 := $t7;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:9+6
    goto L5;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:62+22
    assume {:print "$at(192,8573,8595)"} true;
L0:

    // $t8 := 2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:62+22
    assume {:print "$at(192,8573,8595)"} true;
    $t8 := 2;
    assume $IsValid'u64'($t8);

    // $t9 := error::not_found($t8) on_abort goto L5 with $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:45+40
    call $t9 := $1_error_not_found($t8);
    if ($abort_flag) {
        assume {:print "$at(192,8556,8596)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,6):", $t4} $t4 == $t4;
        goto L5;
    }

    // trace_abort($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:9+6
    assume {:print "$at(192,8520,8526)"} true;
    assume {:print "$track_abort(33,6):", $t9} $t9 == $t9;

    // $t4 := move($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:9+6
    $t4 := $t9;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:9+6
    goto L5;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:204:5+1
    assume {:print "$at(192,8722,8723)"} true;
L4:

    // return $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:204:5+1
    assume {:print "$at(192,8722,8723)"} true;
    $ret0 := $t5;
    return;

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:204:5+1
L5:

    // abort($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:204:5+1
    assume {:print "$at(192,8722,8723)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun object::address_to_object<0x1::fungible_asset::Metadata> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:200:5+278
procedure {:inline 1} $1_object_address_to_object'$1_fungible_asset_Metadata'(_$t0: int) returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: $1_object_Object'$1_fungible_asset_Metadata';
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t0: int;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:200:5+1
    assume {:print "$at(192,8445,8446)"} true;
    assume {:print "$track_local(33,6,0):", $t0} $t0 == $t0;

    // $t1 := exists<0x1::object::ObjectCore>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:17+26
    assume {:print "$at(192,8528,8554)"} true;
    $t1 := $ResourceExists($1_object_ObjectCore_$memory, $t0);

    // if ($t1) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:9+6
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume {:print "$at(192,8615,8635)"} true;
L1:

    // $t2 := opaque begin: object::exists_at<#0>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume {:print "$at(192,8615,8635)"} true;

    // $t3 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    havoc $t3;

    // if ($t3) goto L7 else goto L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    if ($t3) { goto L7; } else { goto L6; }

    // label L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
L7:

    // trace_abort($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume {:print "$at(192,8615,8635)"} true;
    assume {:print "$track_abort(33,6):", $t4} $t4 == $t4;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    goto L5;

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
L6:

    // assume WellFormed($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume {:print "$at(192,8615,8635)"} true;
    assume $IsValid'bool'($t2);

    // assume Eq<bool>($t2, object::spec_exists_at<#0>($t0)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume $IsEqual'bool'($t2, $1_object_spec_exists_at'$1_fungible_asset_Metadata'($t0));

    // $t2 := opaque end: object::exists_at<#0>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20

    // if ($t2) goto L3 else goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:9+6
    if ($t2) { goto L3; } else { goto L2; }

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:203:9+27
    assume {:print "$at(192,8690,8717)"} true;
L3:

    // $t5 := pack 0x1::object::Object<#0>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:203:9+27
    assume {:print "$at(192,8690,8717)"} true;
    $t5 := $1_object_Object'$1_fungible_asset_Metadata'($t0);

    // trace_return[0]($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:200:70+213
    assume {:print "$at(192,8510,8723)"} true;
    assume {:print "$track_return(33,6,0):", $t5} $t5 == $t5;

    // goto L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:200:70+213
    goto L4;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:56+24
    assume {:print "$at(192,8654,8678)"} true;
L2:

    // $t6 := 7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:56+24
    assume {:print "$at(192,8654,8678)"} true;
    $t6 := 7;
    assume $IsValid'u64'($t6);

    // $t7 := error::not_found($t6) on_abort goto L5 with $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:39+42
    call $t7 := $1_error_not_found($t6);
    if ($abort_flag) {
        assume {:print "$at(192,8637,8679)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,6):", $t4} $t4 == $t4;
        goto L5;
    }

    // trace_abort($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:9+6
    assume {:print "$at(192,8607,8613)"} true;
    assume {:print "$track_abort(33,6):", $t7} $t7 == $t7;

    // $t4 := move($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:9+6
    $t4 := $t7;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:9+6
    goto L5;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:62+22
    assume {:print "$at(192,8573,8595)"} true;
L0:

    // $t8 := 2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:62+22
    assume {:print "$at(192,8573,8595)"} true;
    $t8 := 2;
    assume $IsValid'u64'($t8);

    // $t9 := error::not_found($t8) on_abort goto L5 with $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:45+40
    call $t9 := $1_error_not_found($t8);
    if ($abort_flag) {
        assume {:print "$at(192,8556,8596)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,6):", $t4} $t4 == $t4;
        goto L5;
    }

    // trace_abort($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:9+6
    assume {:print "$at(192,8520,8526)"} true;
    assume {:print "$track_abort(33,6):", $t9} $t9 == $t9;

    // $t4 := move($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:9+6
    $t4 := $t9;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:9+6
    goto L5;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:204:5+1
    assume {:print "$at(192,8722,8723)"} true;
L4:

    // return $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:204:5+1
    assume {:print "$at(192,8722,8723)"} true;
    $ret0 := $t5;
    return;

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:204:5+1
L5:

    // abort($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:204:5+1
    assume {:print "$at(192,8722,8723)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun object::address_to_object<0xbb::position_v3::Info> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:200:5+278
procedure {:inline 1} $1_object_address_to_object'$bb_position_v3_Info'(_$t0: int) returns ($ret0: $1_object_Object'$bb_position_v3_Info')
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: $1_object_Object'$bb_position_v3_Info';
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t0: int;
    var $temp_0'$1_object_Object'$bb_position_v3_Info'': $1_object_Object'$bb_position_v3_Info';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:200:5+1
    assume {:print "$at(192,8445,8446)"} true;
    assume {:print "$track_local(33,6,0):", $t0} $t0 == $t0;

    // $t1 := exists<0x1::object::ObjectCore>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:17+26
    assume {:print "$at(192,8528,8554)"} true;
    $t1 := $ResourceExists($1_object_ObjectCore_$memory, $t0);

    // if ($t1) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:9+6
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume {:print "$at(192,8615,8635)"} true;
L1:

    // $t2 := opaque begin: object::exists_at<#0>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume {:print "$at(192,8615,8635)"} true;

    // $t3 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    havoc $t3;

    // if ($t3) goto L7 else goto L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    if ($t3) { goto L7; } else { goto L6; }

    // label L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
L7:

    // trace_abort($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume {:print "$at(192,8615,8635)"} true;
    assume {:print "$track_abort(33,6):", $t4} $t4 == $t4;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    goto L5;

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
L6:

    // assume WellFormed($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume {:print "$at(192,8615,8635)"} true;
    assume $IsValid'bool'($t2);

    // assume Eq<bool>($t2, object::spec_exists_at<#0>($t0)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20
    assume $IsEqual'bool'($t2, $1_object_spec_exists_at'$bb_position_v3_Info'($t0));

    // $t2 := opaque end: object::exists_at<#0>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:17+20

    // if ($t2) goto L3 else goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:9+6
    if ($t2) { goto L3; } else { goto L2; }

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:203:9+27
    assume {:print "$at(192,8690,8717)"} true;
L3:

    // $t5 := pack 0x1::object::Object<#0>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:203:9+27
    assume {:print "$at(192,8690,8717)"} true;
    $t5 := $1_object_Object'$bb_position_v3_Info'($t0);

    // trace_return[0]($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:200:70+213
    assume {:print "$at(192,8510,8723)"} true;
    assume {:print "$track_return(33,6,0):", $t5} $t5 == $t5;

    // goto L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:200:70+213
    goto L4;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:56+24
    assume {:print "$at(192,8654,8678)"} true;
L2:

    // $t6 := 7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:56+24
    assume {:print "$at(192,8654,8678)"} true;
    $t6 := 7;
    assume $IsValid'u64'($t6);

    // $t7 := error::not_found($t6) on_abort goto L5 with $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:39+42
    call $t7 := $1_error_not_found($t6);
    if ($abort_flag) {
        assume {:print "$at(192,8637,8679)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,6):", $t4} $t4 == $t4;
        goto L5;
    }

    // trace_abort($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:9+6
    assume {:print "$at(192,8607,8613)"} true;
    assume {:print "$track_abort(33,6):", $t7} $t7 == $t7;

    // $t4 := move($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:9+6
    $t4 := $t7;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:202:9+6
    goto L5;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:62+22
    assume {:print "$at(192,8573,8595)"} true;
L0:

    // $t8 := 2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:62+22
    assume {:print "$at(192,8573,8595)"} true;
    $t8 := 2;
    assume $IsValid'u64'($t8);

    // $t9 := error::not_found($t8) on_abort goto L5 with $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:45+40
    call $t9 := $1_error_not_found($t8);
    if ($abort_flag) {
        assume {:print "$at(192,8556,8596)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,6):", $t4} $t4 == $t4;
        goto L5;
    }

    // trace_abort($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:9+6
    assume {:print "$at(192,8520,8526)"} true;
    assume {:print "$track_abort(33,6):", $t9} $t9 == $t9;

    // $t4 := move($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:9+6
    $t4 := $t9;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:201:9+6
    goto L5;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:204:5+1
    assume {:print "$at(192,8722,8723)"} true;
L4:

    // return $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:204:5+1
    assume {:print "$at(192,8722,8723)"} true;
    $ret0 := $t5;
    return;

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:204:5+1
L5:

    // abort($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:204:5+1
    assume {:print "$at(192,8722,8723)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun object::convert<0x1::fungible_asset::Metadata, 0x1::fungible_asset::Metadata> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:254:5+115
procedure {:inline 1} $1_object_convert'$1_fungible_asset_Metadata_$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:254:5+1
    assume {:print "$at(192,10834,10835)"} true;
    assume {:print "$track_local(33,9,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::Object<#0>>.inner($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:255:30+12
    assume {:print "$at(192,10930,10942)"} true;
    $t1 := $t0->$inner;

    // $t2 := object::address_to_object<#1>($t1) on_abort goto L2 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:255:9+34
    call $t2 := $1_object_address_to_object'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(192,10909,10943)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(33,9):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:255:9+34
    assume {:print "$track_return(33,9,0):", $t2} $t2 == $t2;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:256:5+1
    assume {:print "$at(192,10948,10949)"} true;
L1:

    // return $t2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:256:5+1
    assume {:print "$at(192,10948,10949)"} true;
    $ret0 := $t2;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:256:5+1
L2:

    // abort($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:256:5+1
    assume {:print "$at(192,10948,10949)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun object::create_object_internal [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:327:5+766
procedure {:inline 1} $1_object_create_object_internal(_$t0: int, _$t1: int, _$t2: bool) returns ($ret0: $1_object_ConstructorRef)
{
    // declare local variables
    var $t3: $signer;
    var $t4: int;
    var $t5: $1_guid_GUID;
    var $t6: bool;
    var $t7: $signer;
    var $t8: int;
    var $t9: $Mutation (int);
    var $t10: $1_guid_GUID;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: $1_event_EventHandle'$1_object_TransferEvent';
    var $t15: $1_object_ObjectCore;
    var $t16: $1_object_ConstructorRef;
    var $t17: int;
    var $t18: int;
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[creator_address]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:327:5+1
    assume {:print "$at(192,14693,14694)"} true;
    assume {:print "$track_local(33,17,0):", $t0} $t0 == $t0;

    // trace_local[object]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:327:5+1
    assume {:print "$track_local(33,17,1):", $t1} $t1 == $t1;

    // trace_local[can_delete]($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:327:5+1
    assume {:print "$track_local(33,17,2):", $t2} $t2 == $t2;

    // $t6 := exists<0x1::object::ObjectCore>($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:332:18+26
    assume {:print "$at(192,14847,14873)"} true;
    $t6 := $ResourceExists($1_object_ObjectCore_$memory, $t1);

    // if ($t6) goto L0 else goto L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:332:17+27
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:334:29+21
    assume {:print "$at(192,14944,14965)"} true;
L1:

    // $t7 := opaque begin: create_signer::create_signer($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:334:29+21
    assume {:print "$at(192,14944,14965)"} true;

    // assume WellFormed($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:334:29+21
    assume $IsValid'signer'($t7) && $1_signer_is_txn_signer($t7) && $1_signer_is_txn_signer_addr($t7->$addr);

    // assume Eq<address>(signer::$address_of($t7), $t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:334:29+21
    assume $IsEqual'address'($1_signer_$address_of($t7), $t1);

    // assume Eq<signer>($t7, create_signer::spec_create_signer($t1)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:334:29+21
    assume $IsEqual'signer'($t7, $1_create_signer_spec_create_signer($t1));

    // $t7 := opaque end: create_signer::create_signer($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:334:29+21

    // trace_local[object_signer]($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:334:29+21
    assume {:print "$track_local(33,17,3):", $t7} $t7 == $t7;

    // $t8 := 1125899906842624 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:335:33+22
    assume {:print "$at(192,14999,15021)"} true;
    $t8 := 1125899906842624;
    assume $IsValid'u64'($t8);

    // $t4 := $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:335:33+22
    $t4 := $t8;

    // trace_local[guid_creation_num]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:335:33+22
    assume {:print "$track_local(33,17,4):", $t4} $t4 == $t4;

    // $t9 := borrow_local($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:336:57+22
    assume {:print "$at(192,15079,15101)"} true;
    $t9 := $Mutation($Local(4), EmptyVec(), $t4);

    // $t10 := guid::create($t1, $t9) on_abort goto L3 with $t11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:336:36+44
    call $t10,$t9 := $1_guid_create($t1, $t9);
    if ($abort_flag) {
        assume {:print "$at(192,15058,15102)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(33,17):", $t11} $t11 == $t11;
        goto L3;
    }

    // write_back[LocalRoot($t4)@]($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:336:36+44
    $t4 := $Dereference($t9);

    // trace_local[guid_creation_num]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:336:36+44
    assume {:print "$track_local(33,17,4):", $t4} $t4 == $t4;

    // trace_local[transfer_events_guid]($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:336:36+44
    assume {:print "$track_local(33,17,5):", $t10} $t10 == $t10;

    // $t12 := move($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:341:17+17
    assume {:print "$at(192,15191,15208)"} true;
    $t12 := $t4;

    // $t13 := true at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:343:41+4
    assume {:print "$at(192,15290,15294)"} true;
    $t13 := true;
    assume $IsValid'bool'($t13);

    // $t14 := event::new_event_handle<0x1::object::TransferEvent>($t10) on_abort goto L3 with $t11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:344:34+45
    assume {:print "$at(192,15329,15374)"} true;
    call $t14 := $1_event_new_event_handle'$1_object_TransferEvent'($t10);
    if ($abort_flag) {
        assume {:print "$at(192,15329,15374)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(33,17):", $t11} $t11 == $t11;
        goto L3;
    }

    // $t15 := pack 0x1::object::ObjectCore($t12, $t0, $t13, $t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:340:13+227
    assume {:print "$at(192,15162,15389)"} true;
    $t15 := $1_object_ObjectCore($t12, $t0, $t13, $t14);

    // move_to<0x1::object::ObjectCore>($t15, $t7) on_abort goto L3 with $t11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:338:9+287
    assume {:print "$at(192,15113,15400)"} true;
    if ($ResourceExists($1_object_ObjectCore_$memory, $t7->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_object_ObjectCore_$memory := $ResourceUpdate($1_object_ObjectCore_$memory, $t7->$addr, $t15);
    }
    if ($abort_flag) {
        assume {:print "$at(192,15113,15400)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(33,17):", $t11} $t11 == $t11;
        goto L3;
    }

    // $t16 := pack 0x1::object::ConstructorRef($t1, $t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:347:9+43
    assume {:print "$at(192,15410,15453)"} true;
    $t16 := $1_object_ConstructorRef($t1, $t2);

    // trace_return[0]($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:331:23+631
    assume {:print "$at(192,14828,15459)"} true;
    assume {:print "$track_return(33,17,0):", $t16} $t16 == $t16;

    // goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:331:23+631
    goto L2;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:332:68+14
    assume {:print "$at(192,14897,14911)"} true;
L0:

    // $t17 := 1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:332:68+14
    assume {:print "$at(192,14897,14911)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // $t18 := error::already_exists($t17) on_abort goto L3 with $t11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:332:46+37
    call $t18 := $1_error_already_exists($t17);
    if ($abort_flag) {
        assume {:print "$at(192,14875,14912)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(33,17):", $t11} $t11 == $t11;
        goto L3;
    }

    // trace_abort($t18) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:332:9+6
    assume {:print "$at(192,14838,14844)"} true;
    assume {:print "$track_abort(33,17):", $t18} $t18 == $t18;

    // $t11 := move($t18) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:332:9+6
    $t11 := $t18;

    // goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:332:9+6
    goto L3;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:348:5+1
    assume {:print "$at(192,15458,15459)"} true;
L2:

    // return $t16 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:348:5+1
    assume {:print "$at(192,15458,15459)"} true;
    $ret0 := $t16;
    return;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:348:5+1
L3:

    // abort($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:348:5+1
    assume {:print "$at(192,15458,15459)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun object::object_address<0x1::fungible_asset::FungibleStore> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:249:5+91
procedure {:inline 1} $1_object_object_address'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:249:5+1
    assume {:print "$at(192,10697,10698)"} true;
    assume {:print "$track_local(33,20,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::Object<#0>>.inner($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:250:9+12
    assume {:print "$at(192,10770,10782)"} true;
    $t1 := $t0->$inner;

    // trace_return[0]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:250:9+12
    assume {:print "$track_return(33,20,0):", $t1} $t1 == $t1;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:251:5+1
    assume {:print "$at(192,10787,10788)"} true;
L1:

    // return $t1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:251:5+1
    assume {:print "$at(192,10787,10788)"} true;
    $ret0 := $t1;
    return;

}

// fun object::object_address<0x1::fungible_asset::Metadata> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:249:5+91
procedure {:inline 1} $1_object_object_address'$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:249:5+1
    assume {:print "$at(192,10697,10698)"} true;
    assume {:print "$track_local(33,20,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::Object<#0>>.inner($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:250:9+12
    assume {:print "$at(192,10770,10782)"} true;
    $t1 := $t0->$inner;

    // trace_return[0]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:250:9+12
    assume {:print "$track_return(33,20,0):", $t1} $t1 == $t1;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:251:5+1
    assume {:print "$at(192,10787,10788)"} true;
L1:

    // return $t1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:251:5+1
    assume {:print "$at(192,10787,10788)"} true;
    $ret0 := $t1;
    return;

}

// fun object::object_address<0xbb::position_v3::Info> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:249:5+91
procedure {:inline 1} $1_object_object_address'$bb_position_v3_Info'(_$t0: $1_object_Object'$bb_position_v3_Info') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_object_Object'$bb_position_v3_Info';
    var $temp_0'$1_object_Object'$bb_position_v3_Info'': $1_object_Object'$bb_position_v3_Info';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:249:5+1
    assume {:print "$at(192,10697,10698)"} true;
    assume {:print "$track_local(33,20,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::Object<#0>>.inner($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:250:9+12
    assume {:print "$at(192,10770,10782)"} true;
    $t1 := $t0->$inner;

    // trace_return[0]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:250:9+12
    assume {:print "$track_return(33,20,0):", $t1} $t1 == $t1;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:251:5+1
    assume {:print "$at(192,10787,10788)"} true;
L1:

    // return $t1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:251:5+1
    assume {:print "$at(192,10787,10788)"} true;
    $ret0 := $t1;
    return;

}

// fun object::create_user_derived_object [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:268:5+277
procedure {:inline 1} $1_object_create_user_derived_object(_$t0: int, _$t1: $1_object_DeriveRef) returns ($ret0: $1_object_ConstructorRef)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: $1_object_ConstructorRef;
    var $t0: int;
    var $t1: $1_object_DeriveRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_DeriveRef': $1_object_DeriveRef;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, object::spec_create_user_derived_object_address($t0, select object::DeriveRef.self<0x1::object::DeriveRef>($t1))) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.spec.move:184:9+89
    assume {:print "$at(193,7837,7926)"} true;
    assume ($t3 == $1_object_spec_create_user_derived_object_address($t0, $t1->$self));

    // trace_local[creator_address]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:268:5+1
    assume {:print "$at(192,11625,11626)"} true;
    assume {:print "$track_local(33,21,0):", $t0} $t0 == $t0;

    // trace_local[derive_ref]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:268:5+1
    assume {:print "$track_local(33,21,1):", $t1} $t1 == $t1;

    // $t4 := get_field<0x1::object::DeriveRef>.self($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:269:76+15
    assume {:print "$at(192,11814,11829)"} true;
    $t4 := $t1->$self;

    // $t5 := opaque begin: object::create_user_derived_object_address($t0, $t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:269:24+68

    // $t6 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:269:24+68
    havoc $t6;

    // if ($t6) goto L4 else goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:269:24+68
    if ($t6) { goto L4; } else { goto L3; }

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:269:24+68
L4:

    // trace_abort($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:269:24+68
    assume {:print "$at(192,11762,11830)"} true;
    assume {:print "$track_abort(33,21):", $t7} $t7 == $t7;

    // goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:269:24+68
    goto L2;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:269:24+68
L3:

    // assume WellFormed($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:269:24+68
    assume {:print "$at(192,11762,11830)"} true;
    assume $IsValid'address'($t5);

    // assume Eq<address>($t5, object::spec_create_user_derived_object_address($t0, $t4)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:269:24+68
    assume $IsEqual'address'($t5, $1_object_spec_create_user_derived_object_address($t0, $t4));

    // $t5 := opaque end: object::create_user_derived_object_address($t0, $t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:269:24+68

    // trace_local[$t4]($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:269:24+68
    assume {:print "$track_local(33,21,2):", $t5} $t5 == $t5;

    // $t8 := false at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:270:59+5
    assume {:print "$at(192,11890,11895)"} true;
    $t8 := false;
    assume $IsValid'bool'($t8);

    // $t9 := object::create_object_internal($t0, $t5, $t8) on_abort goto L2 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:270:9+56
    call $t9 := $1_object_create_object_internal($t0, $t5, $t8);
    if ($abort_flag) {
        assume {:print "$at(192,11840,11896)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(33,21):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_return[0]($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:270:9+56
    assume {:print "$track_return(33,21,0):", $t9} $t9 == $t9;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:271:5+1
    assume {:print "$at(192,11901,11902)"} true;
L1:

    // return $t9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:271:5+1
    assume {:print "$at(192,11901,11902)"} true;
    $ret0 := $t9;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:271:5+1
L2:

    // abort($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:271:5+1
    assume {:print "$at(192,11901,11902)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun object::disable_ungated_transfer [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:454:5+191
procedure {:inline 1} $1_object_disable_ungated_transfer(_$t0: $1_object_TransferRef) returns ()
{
    // declare local variables
    var $t1: $Mutation ($1_object_ObjectCore);
    var $t2: int;
    var $t3: $Mutation ($1_object_ObjectCore);
    var $t4: int;
    var $t5: bool;
    var $t6: $Mutation (bool);
    var $t0: $1_object_TransferRef;
    var $temp_0'$1_object_ObjectCore': $1_object_ObjectCore;
    var $temp_0'$1_object_TransferRef': $1_object_TransferRef;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:454:5+1
    assume {:print "$at(192,19126,19127)"} true;
    assume {:print "$track_local(33,25,0):", $t0} $t0 == $t0;

    // $t2 := get_field<0x1::object::TransferRef>.self($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:455:52+8
    assume {:print "$at(192,19254,19262)"} true;
    $t2 := $t0->$self;

    // $t3 := borrow_global<0x1::object::ObjectCore>($t2) on_abort goto L2 with $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:455:22+39
    if (!$ResourceExists($1_object_ObjectCore_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $Mutation($Global($t2), EmptyVec(), $ResourceValue($1_object_ObjectCore_$memory, $t2));
    }
    if ($abort_flag) {
        assume {:print "$at(192,19224,19263)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,25):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[object]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:455:22+39
    $temp_0'$1_object_ObjectCore' := $Dereference($t3);
    assume {:print "$track_local(33,25,1):", $temp_0'$1_object_ObjectCore'} $temp_0'$1_object_ObjectCore' == $temp_0'$1_object_ObjectCore';

    // $t5 := false at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:456:41+5
    assume {:print "$at(192,19305,19310)"} true;
    $t5 := false;
    assume $IsValid'bool'($t5);

    // $t6 := borrow_field<0x1::object::ObjectCore>.allow_ungated_transfer($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:456:9+29
    $t6 := $ChildMutation($t3, 2, $Dereference($t3)->$allow_ungated_transfer);

    // write_ref($t6, $t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:456:9+37
    $t6 := $UpdateMutation($t6, $t5);

    // write_back[Reference($t3).allow_ungated_transfer (bool)]($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:456:9+37
    $t3 := $UpdateMutation($t3, $Update'$1_object_ObjectCore'_allow_ungated_transfer($Dereference($t3), $Dereference($t6)));

    // write_back[0x1::object::ObjectCore@]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:456:9+37
    $1_object_ObjectCore_$memory := $ResourceUpdate($1_object_ObjectCore_$memory, $GlobalLocationAddress($t3),
        $Dereference($t3));

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:457:5+1
    assume {:print "$at(192,19316,19317)"} true;
L1:

    // return () at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:457:5+1
    assume {:print "$at(192,19316,19317)"} true;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:457:5+1
L2:

    // abort($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:457:5+1
    assume {:print "$at(192,19316,19317)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun object::generate_signer [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:375:5+96
procedure {:inline 1} $1_object_generate_signer(_$t0: $1_object_ConstructorRef) returns ($ret0: $signer)
{
    // declare local variables
    var $t1: int;
    var $t2: $signer;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:375:5+1
    assume {:print "$at(192,16566,16567)"} true;
    assume {:print "$track_local(33,31,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::ConstructorRef>.self($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:376:23+8
    assume {:print "$at(192,16647,16655)"} true;
    $t1 := $t0->$self;

    // $t2 := opaque begin: create_signer::create_signer($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:376:9+23

    // assume WellFormed($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:376:9+23
    assume $IsValid'signer'($t2) && $1_signer_is_txn_signer($t2) && $1_signer_is_txn_signer_addr($t2->$addr);

    // assume Eq<address>(signer::$address_of($t2), $t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:376:9+23
    assume $IsEqual'address'($1_signer_$address_of($t2), $t1);

    // assume Eq<signer>($t2, create_signer::spec_create_signer($t1)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:376:9+23
    assume $IsEqual'signer'($t2, $1_create_signer_spec_create_signer($t1));

    // $t2 := opaque end: create_signer::create_signer($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:376:9+23

    // trace_return[0]($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:376:9+23
    assume {:print "$track_return(33,31,0):", $t2} $t2 == $t2;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:377:5+1
    assume {:print "$at(192,16661,16662)"} true;
L1:

    // return $t2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:377:5+1
    assume {:print "$at(192,16661,16662)"} true;
    $ret0 := $t2;
    return;

}

// fun object::generate_transfer_ref [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:364:5+219
procedure {:inline 1} $1_object_generate_transfer_ref(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_object_TransferRef)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: $1_object_TransferRef;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_TransferRef': $1_object_TransferRef;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:364:5+1
    assume {:print "$at(192,16065,16066)"} true;
    assume {:print "$track_local(33,33,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::ConstructorRef>.self($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:365:41+8
    assume {:print "$at(192,16175,16183)"} true;
    $t1 := $t0->$self;

    // $t2 := exists<0x1::object::Untransferable>($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:365:18+32
    $t2 := $ResourceExists($1_object_Untransferable_$memory, $t1);

    // if ($t2) goto L0 else goto L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:365:17+33
    if ($t2) { goto L0; } else { goto L1; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:366:29+8
    assume {:print "$at(192,16268,16276)"} true;
L1:

    // $t3 := get_field<0x1::object::ConstructorRef>.self($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:366:29+8
    assume {:print "$at(192,16268,16276)"} true;
    $t3 := $t0->$self;

    // $t4 := pack 0x1::object::TransferRef($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:366:9+30
    $t4 := $1_object_TransferRef($t3);

    // trace_return[0]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:364:73+151
    assume {:print "$at(192,16133,16284)"} true;
    assume {:print "$track_return(33,33,0):", $t4} $t4 == $t4;

    // goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:364:73+151
    goto L2;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:365:9+6
    assume {:print "$at(192,16143,16149)"} true;
L0:

    // $t5 := 9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:365:77+25
    assume {:print "$at(192,16211,16236)"} true;
    $t5 := 9;
    assume $IsValid'u64'($t5);

    // $t6 := error::permission_denied($t5) on_abort goto L3 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:365:52+51
    call $t6 := $1_error_permission_denied($t5);
    if ($abort_flag) {
        assume {:print "$at(192,16186,16237)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(33,33):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_abort($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:365:9+6
    assume {:print "$at(192,16143,16149)"} true;
    assume {:print "$track_abort(33,33):", $t6} $t6 == $t6;

    // $t7 := move($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:365:9+6
    $t7 := $t6;

    // goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:365:9+6
    goto L3;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:367:5+1
    assume {:print "$at(192,16283,16284)"} true;
L2:

    // return $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:367:5+1
    assume {:print "$at(192,16283,16284)"} true;
    $ret0 := $t4;
    return;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:367:5+1
L3:

    // abort($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:367:5+1
    assume {:print "$at(192,16283,16284)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun object::is_owner<0xbb::position_v3::Info> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:672:5+127
procedure {:inline 1} $1_object_is_owner'$bb_position_v3_Info'(_$t0: $1_object_Object'$bb_position_v3_Info', _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t0: $1_object_Object'$bb_position_v3_Info';
    var $t1: int;
    var $temp_0'$1_object_Object'$bb_position_v3_Info'': $1_object_Object'$bb_position_v3_Info';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[object]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:672:5+1
    assume {:print "$at(192,27808,27809)"} true;
    assume {:print "$track_local(33,38,0):", $t0} $t0 == $t0;

    // trace_local[owner]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:672:5+1
    assume {:print "$track_local(33,38,1):", $t1} $t1 == $t1;

    // $t2 := object::owner<#0>($t0) on_abort goto L2 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:673:9+13
    assume {:print "$at(192,27907,27920)"} true;
    call $t2 := $1_object_owner'$bb_position_v3_Info'($t0);
    if ($abort_flag) {
        assume {:print "$at(192,27907,27920)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(33,38):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := ==($t2, $t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:673:9+22
    $t4 := $IsEqual'address'($t2, $t1);

    // trace_return[0]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:673:9+22
    assume {:print "$track_return(33,38,0):", $t4} $t4 == $t4;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:674:5+1
    assume {:print "$at(192,27934,27935)"} true;
L1:

    // return $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:674:5+1
    assume {:print "$at(192,27934,27935)"} true;
    $ret0 := $t4;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:674:5+1
L2:

    // abort($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:674:5+1
    assume {:print "$at(192,27934,27935)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun object::owner<0xbb::position_v3::Info> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:663:5+262
procedure {:inline 1} $1_object_owner'$bb_position_v3_Info'(_$t0: $1_object_Object'$bb_position_v3_Info') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: $1_object_ObjectCore;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t0: $1_object_Object'$bb_position_v3_Info';
    var $temp_0'$1_object_Object'$bb_position_v3_Info'': $1_object_Object'$bb_position_v3_Info';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:663:5+1
    assume {:print "$at(192,27474,27475)"} true;
    assume {:print "$track_local(33,39,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::Object<#0>>.inner($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:665:32+12
    assume {:print "$at(192,27597,27609)"} true;
    $t1 := $t0->$inner;

    // $t2 := exists<0x1::object::ObjectCore>($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:665:13+32
    $t2 := $ResourceExists($1_object_ObjectCore_$memory, $t1);

    // if ($t2) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:664:9+6
    assume {:print "$at(192,27557,27563)"} true;
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:668:35+6
    assume {:print "$at(192,27711,27717)"} true;
L1:

    // $t3 := get_field<0x1::object::Object<#0>>.inner($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:668:35+12
    assume {:print "$at(192,27711,27723)"} true;
    $t3 := $t0->$inner;

    // $t4 := get_global<0x1::object::ObjectCore>($t3) on_abort goto L3 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:668:9+39
    if (!$ResourceExists($1_object_ObjectCore_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $ResourceValue($1_object_ObjectCore_$memory, $t3);
    }
    if ($abort_flag) {
        assume {:print "$at(192,27685,27724)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(33,39):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t6 := get_field<0x1::object::ObjectCore>.owner($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:668:9+45
    $t6 := $t4->$owner;

    // trace_return[0]($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:663:78+189
    assume {:print "$at(192,27547,27736)"} true;
    assume {:print "$track_return(33,39,0):", $t6} $t6 == $t6;

    // goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:663:78+189
    goto L2;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:666:30+22
    assume {:print "$at(192,27641,27663)"} true;
L0:

    // $t7 := 2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:666:30+22
    assume {:print "$at(192,27641,27663)"} true;
    $t7 := 2;
    assume $IsValid'u64'($t7);

    // $t8 := error::not_found($t7) on_abort goto L3 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:666:13+40
    call $t8 := $1_error_not_found($t7);
    if ($abort_flag) {
        assume {:print "$at(192,27624,27664)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(33,39):", $t5} $t5 == $t5;
        goto L3;
    }

    // trace_abort($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:664:9+6
    assume {:print "$at(192,27557,27563)"} true;
    assume {:print "$track_abort(33,39):", $t8} $t8 == $t8;

    // $t5 := move($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:664:9+6
    $t5 := $t8;

    // goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:664:9+6
    goto L3;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:669:5+1
    assume {:print "$at(192,27735,27736)"} true;
L2:

    // return $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:669:5+1
    assume {:print "$at(192,27735,27736)"} true;
    $ret0 := $t6;
    return;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:669:5+1
L3:

    // abort($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:669:5+1
    assume {:print "$at(192,27735,27736)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun object::object_from_constructor_ref<0x1::fungible_asset::FungibleStore> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:385:5+126
procedure {:inline 1} $1_object_object_from_constructor_ref'$1_fungible_asset_FungibleStore'(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t3: int;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:385:5+1
    assume {:print "$at(192,16887,16888)"} true;
    assume {:print "$track_local(33,42,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::ConstructorRef>.self($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:386:30+8
    assume {:print "$at(192,16998,17006)"} true;
    $t1 := $t0->$self;

    // $t2 := object::address_to_object<#0>($t1) on_abort goto L2 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:386:9+30
    call $t2 := $1_object_address_to_object'$1_fungible_asset_FungibleStore'($t1);
    if ($abort_flag) {
        assume {:print "$at(192,16977,17007)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(33,42):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:386:9+30
    assume {:print "$track_return(33,42,0):", $t2} $t2 == $t2;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:387:5+1
    assume {:print "$at(192,17012,17013)"} true;
L1:

    // return $t2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:387:5+1
    assume {:print "$at(192,17012,17013)"} true;
    $ret0 := $t2;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:387:5+1
L2:

    // abort($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:387:5+1
    assume {:print "$at(192,17012,17013)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun object::set_untransferable [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:460:5+290
procedure {:inline 1} $1_object_set_untransferable(_$t0: $1_object_ConstructorRef) returns ()
{
    // declare local variables
    var $t1: $Mutation ($1_object_ObjectCore);
    var $t2: $signer;
    var $t3: int;
    var $t4: $Mutation ($1_object_ObjectCore);
    var $t5: int;
    var $t6: bool;
    var $t7: $Mutation (bool);
    var $t8: $signer;
    var $t9: bool;
    var $t10: $1_object_Untransferable;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_ObjectCore': $1_object_ObjectCore;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:460:5+1
    assume {:print "$at(192,19360,19361)"} true;
    assume {:print "$track_local(33,46,0):", $t0} $t0 == $t0;

    // $t3 := get_field<0x1::object::ConstructorRef>.self($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:461:52+8
    assume {:print "$at(192,19485,19493)"} true;
    $t3 := $t0->$self;

    // $t4 := borrow_global<0x1::object::ObjectCore>($t3) on_abort goto L2 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:461:22+39
    if (!$ResourceExists($1_object_ObjectCore_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $Mutation($Global($t3), EmptyVec(), $ResourceValue($1_object_ObjectCore_$memory, $t3));
    }
    if ($abort_flag) {
        assume {:print "$at(192,19455,19494)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(33,46):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[object]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:461:22+39
    $temp_0'$1_object_ObjectCore' := $Dereference($t4);
    assume {:print "$track_local(33,46,1):", $temp_0'$1_object_ObjectCore'} $temp_0'$1_object_ObjectCore' == $temp_0'$1_object_ObjectCore';

    // $t6 := false at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:462:41+5
    assume {:print "$at(192,19536,19541)"} true;
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t7 := borrow_field<0x1::object::ObjectCore>.allow_ungated_transfer($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:462:9+29
    $t7 := $ChildMutation($t4, 2, $Dereference($t4)->$allow_ungated_transfer);

    // write_ref($t7, $t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:462:9+37
    $t7 := $UpdateMutation($t7, $t6);

    // write_back[Reference($t4).allow_ungated_transfer (bool)]($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:462:9+37
    $t4 := $UpdateMutation($t4, $Update'$1_object_ObjectCore'_allow_ungated_transfer($Dereference($t4), $Dereference($t7)));

    // write_back[0x1::object::ObjectCore@]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:462:9+37
    $1_object_ObjectCore_$memory := $ResourceUpdate($1_object_ObjectCore_$memory, $GlobalLocationAddress($t4),
        $Dereference($t4));

    // $t8 := object::generate_signer($t0) on_abort goto L2 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:463:29+20
    assume {:print "$at(192,19571,19591)"} true;
    call $t8 := $1_object_generate_signer($t0);
    if ($abort_flag) {
        assume {:print "$at(192,19571,19591)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(33,46):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[object_signer]($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:463:29+20
    assume {:print "$track_local(33,46,2):", $t8} $t8 == $t8;

    // $t9 := false at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:464:33+17
    assume {:print "$at(192,19625,19642)"} true;
    $t9 := false;
    assume $IsValid'bool'($t9);

    // $t10 := pack 0x1::object::Untransferable($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:464:33+17
    $t10 := $1_object_Untransferable($t9);

    // move_to<0x1::object::Untransferable>($t10, $t8) on_abort goto L2 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:464:9+42
    if ($ResourceExists($1_object_Untransferable_$memory, $t8->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_object_Untransferable_$memory := $ResourceUpdate($1_object_Untransferable_$memory, $t8->$addr, $t10);
    }
    if ($abort_flag) {
        assume {:print "$at(192,19601,19643)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(33,46):", $t5} $t5 == $t5;
        goto L2;
    }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:465:5+1
    assume {:print "$at(192,19649,19650)"} true;
L1:

    // return () at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:465:5+1
    assume {:print "$at(192,19649,19650)"} true;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:465:5+1
L2:

    // abort($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.move:465:5+1
    assume {:print "$at(192,19649,19650)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// struct function_info::FunctionInfo at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/function_info.move:20:5+142
datatype $1_function_info_FunctionInfo {
    $1_function_info_FunctionInfo($module_address: int, $module_name: $1_string_String, $function_name: $1_string_String)
}
function {:inline} $Update'$1_function_info_FunctionInfo'_module_address(s: $1_function_info_FunctionInfo, x: int): $1_function_info_FunctionInfo {
    $1_function_info_FunctionInfo(x, s->$module_name, s->$function_name)
}
function {:inline} $Update'$1_function_info_FunctionInfo'_module_name(s: $1_function_info_FunctionInfo, x: $1_string_String): $1_function_info_FunctionInfo {
    $1_function_info_FunctionInfo(s->$module_address, x, s->$function_name)
}
function {:inline} $Update'$1_function_info_FunctionInfo'_function_name(s: $1_function_info_FunctionInfo, x: $1_string_String): $1_function_info_FunctionInfo {
    $1_function_info_FunctionInfo(s->$module_address, s->$module_name, x)
}
function $IsValid'$1_function_info_FunctionInfo'(s: $1_function_info_FunctionInfo): bool {
    $IsValid'address'(s->$module_address)
      && $IsValid'$1_string_String'(s->$module_name)
      && $IsValid'$1_string_String'(s->$function_name)
}
function {:inline} $IsEqual'$1_function_info_FunctionInfo'(s1: $1_function_info_FunctionInfo, s2: $1_function_info_FunctionInfo): bool {
    $IsEqual'address'(s1->$module_address, s2->$module_address)
    && $IsEqual'$1_string_String'(s1->$module_name, s2->$module_name)
    && $IsEqual'$1_string_String'(s1->$function_name, s2->$function_name)}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:631:5+373
function {:inline} $1_fungible_asset_$balance'$1_fungible_asset_FungibleStore'($1_fungible_asset_ConcurrentFungibleBalance_$memory: $Memory $1_fungible_asset_ConcurrentFungibleBalance, $1_fungible_asset_FungibleStore_$memory: $Memory $1_fungible_asset_FungibleStore, store: $1_object_Object'$1_fungible_asset_FungibleStore'): int {
    (var fa_store := (var store := store; (var store_addr := $1_object_$object_address'$1_fungible_asset_FungibleStore'(store); $ResourceValue($1_fungible_asset_FungibleStore_$memory, store_addr))); $1_fungible_asset_$balance_impl'$1_fungible_asset_FungibleStore'($1_fungible_asset_ConcurrentFungibleBalance_$memory, $1_fungible_asset_FungibleStore_$memory, store))
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:640:5+637
function {:inline} $1_fungible_asset_$balance_impl'$1_fungible_asset_FungibleStore'($1_fungible_asset_ConcurrentFungibleBalance_$memory: $Memory $1_fungible_asset_ConcurrentFungibleBalance, $1_fungible_asset_FungibleStore_$memory: $Memory $1_fungible_asset_FungibleStore, store: $1_object_Object'$1_fungible_asset_FungibleStore'): int {
    (var store_addr := $1_object_$object_address'$1_fungible_asset_FungibleStore'(store); (if ((var store := store_addr; $ResourceExists($1_fungible_asset_FungibleStore_$memory, store))) then ((var store_balance := (var store := store; (var store_addr := $1_object_$object_address'$1_fungible_asset_FungibleStore'(store); $ResourceValue($1_fungible_asset_FungibleStore_$memory, store_addr)))->$balance; (if (($IsEqual'u64'(store_balance, 0) && (var store := store_addr; $ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, store)))) then ((var balance_resource := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, store_addr); $1_aggregator_v2_$read'u64'(balance_resource->$balance))) else (store_balance)))) else (0)))
}

// struct fungible_asset::TransferRef at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:190:5+77
datatype $1_fungible_asset_TransferRef {
    $1_fungible_asset_TransferRef($metadata: $1_object_Object'$1_fungible_asset_Metadata')
}
function {:inline} $Update'$1_fungible_asset_TransferRef'_metadata(s: $1_fungible_asset_TransferRef, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_TransferRef {
    $1_fungible_asset_TransferRef(x)
}
function $IsValid'$1_fungible_asset_TransferRef'(s: $1_fungible_asset_TransferRef): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
}
function {:inline} $IsEqual'$1_fungible_asset_TransferRef'(s1: $1_fungible_asset_TransferRef, s2: $1_fungible_asset_TransferRef): bool {
    s1 == s2
}

// struct fungible_asset::Untransferable at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:144:5+32
datatype $1_fungible_asset_Untransferable {
    $1_fungible_asset_Untransferable($dummy_field: bool)
}
function {:inline} $Update'$1_fungible_asset_Untransferable'_dummy_field(s: $1_fungible_asset_Untransferable, x: bool): $1_fungible_asset_Untransferable {
    $1_fungible_asset_Untransferable(x)
}
function $IsValid'$1_fungible_asset_Untransferable'(s: $1_fungible_asset_Untransferable): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_fungible_asset_Untransferable'(s1: $1_fungible_asset_Untransferable, s2: $1_fungible_asset_Untransferable): bool {
    s1 == s2
}
var $1_fungible_asset_Untransferable_$memory: $Memory $1_fungible_asset_Untransferable;

// struct fungible_asset::BurnRef at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:205:5+73
datatype $1_fungible_asset_BurnRef {
    $1_fungible_asset_BurnRef($metadata: $1_object_Object'$1_fungible_asset_Metadata')
}
function {:inline} $Update'$1_fungible_asset_BurnRef'_metadata(s: $1_fungible_asset_BurnRef, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_BurnRef {
    $1_fungible_asset_BurnRef(x)
}
function $IsValid'$1_fungible_asset_BurnRef'(s: $1_fungible_asset_BurnRef): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
}
function {:inline} $IsEqual'$1_fungible_asset_BurnRef'(s1: $1_fungible_asset_BurnRef, s2: $1_fungible_asset_BurnRef): bool {
    s1 == s2
}

// struct fungible_asset::ConcurrentFungibleBalance at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:171:5+132
datatype $1_fungible_asset_ConcurrentFungibleBalance {
    $1_fungible_asset_ConcurrentFungibleBalance($balance: $1_aggregator_v2_Aggregator'u64')
}
function {:inline} $Update'$1_fungible_asset_ConcurrentFungibleBalance'_balance(s: $1_fungible_asset_ConcurrentFungibleBalance, x: $1_aggregator_v2_Aggregator'u64'): $1_fungible_asset_ConcurrentFungibleBalance {
    $1_fungible_asset_ConcurrentFungibleBalance(x)
}
function $IsValid'$1_fungible_asset_ConcurrentFungibleBalance'(s: $1_fungible_asset_ConcurrentFungibleBalance): bool {
    $IsValid'$1_aggregator_v2_Aggregator'u64''(s->$balance)
}
function {:inline} $IsEqual'$1_fungible_asset_ConcurrentFungibleBalance'(s1: $1_fungible_asset_ConcurrentFungibleBalance, s2: $1_fungible_asset_ConcurrentFungibleBalance): bool {
    s1 == s2
}
var $1_fungible_asset_ConcurrentFungibleBalance_$memory: $Memory $1_fungible_asset_ConcurrentFungibleBalance;

// struct fungible_asset::ConcurrentSupply at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:118:5+74
datatype $1_fungible_asset_ConcurrentSupply {
    $1_fungible_asset_ConcurrentSupply($current: $1_aggregator_v2_Aggregator'u128')
}
function {:inline} $Update'$1_fungible_asset_ConcurrentSupply'_current(s: $1_fungible_asset_ConcurrentSupply, x: $1_aggregator_v2_Aggregator'u128'): $1_fungible_asset_ConcurrentSupply {
    $1_fungible_asset_ConcurrentSupply(x)
}
function $IsValid'$1_fungible_asset_ConcurrentSupply'(s: $1_fungible_asset_ConcurrentSupply): bool {
    $IsValid'$1_aggregator_v2_Aggregator'u128''(s->$current)
}
function {:inline} $IsEqual'$1_fungible_asset_ConcurrentSupply'(s1: $1_fungible_asset_ConcurrentSupply, s2: $1_fungible_asset_ConcurrentSupply): bool {
    s1 == s2
}
var $1_fungible_asset_ConcurrentSupply_$memory: $Memory $1_fungible_asset_ConcurrentSupply;

// struct fungible_asset::Deposit at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:220:5+83
datatype $1_fungible_asset_Deposit {
    $1_fungible_asset_Deposit($store: int, $amount: int)
}
function {:inline} $Update'$1_fungible_asset_Deposit'_store(s: $1_fungible_asset_Deposit, x: int): $1_fungible_asset_Deposit {
    $1_fungible_asset_Deposit(x, s->$amount)
}
function {:inline} $Update'$1_fungible_asset_Deposit'_amount(s: $1_fungible_asset_Deposit, x: int): $1_fungible_asset_Deposit {
    $1_fungible_asset_Deposit(s->$store, x)
}
function $IsValid'$1_fungible_asset_Deposit'(s: $1_fungible_asset_Deposit): bool {
    $IsValid'address'(s->$store)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_fungible_asset_Deposit'(s1: $1_fungible_asset_Deposit, s2: $1_fungible_asset_Deposit): bool {
    s1 == s2
}

// struct fungible_asset::DispatchFunctionStore at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:158:5+185
datatype $1_fungible_asset_DispatchFunctionStore {
    $1_fungible_asset_DispatchFunctionStore($withdraw_function: $1_option_Option'$1_function_info_FunctionInfo', $deposit_function: $1_option_Option'$1_function_info_FunctionInfo', $derived_balance_function: $1_option_Option'$1_function_info_FunctionInfo')
}
function {:inline} $Update'$1_fungible_asset_DispatchFunctionStore'_withdraw_function(s: $1_fungible_asset_DispatchFunctionStore, x: $1_option_Option'$1_function_info_FunctionInfo'): $1_fungible_asset_DispatchFunctionStore {
    $1_fungible_asset_DispatchFunctionStore(x, s->$deposit_function, s->$derived_balance_function)
}
function {:inline} $Update'$1_fungible_asset_DispatchFunctionStore'_deposit_function(s: $1_fungible_asset_DispatchFunctionStore, x: $1_option_Option'$1_function_info_FunctionInfo'): $1_fungible_asset_DispatchFunctionStore {
    $1_fungible_asset_DispatchFunctionStore(s->$withdraw_function, x, s->$derived_balance_function)
}
function {:inline} $Update'$1_fungible_asset_DispatchFunctionStore'_derived_balance_function(s: $1_fungible_asset_DispatchFunctionStore, x: $1_option_Option'$1_function_info_FunctionInfo'): $1_fungible_asset_DispatchFunctionStore {
    $1_fungible_asset_DispatchFunctionStore(s->$withdraw_function, s->$deposit_function, x)
}
function $IsValid'$1_fungible_asset_DispatchFunctionStore'(s: $1_fungible_asset_DispatchFunctionStore): bool {
    $IsValid'$1_option_Option'$1_function_info_FunctionInfo''(s->$withdraw_function)
      && $IsValid'$1_option_Option'$1_function_info_FunctionInfo''(s->$deposit_function)
      && $IsValid'$1_option_Option'$1_function_info_FunctionInfo''(s->$derived_balance_function)
}
function {:inline} $IsEqual'$1_fungible_asset_DispatchFunctionStore'(s1: $1_fungible_asset_DispatchFunctionStore, s2: $1_fungible_asset_DispatchFunctionStore): bool {
    $IsEqual'$1_option_Option'$1_function_info_FunctionInfo''(s1->$withdraw_function, s2->$withdraw_function)
    && $IsEqual'$1_option_Option'$1_function_info_FunctionInfo''(s1->$deposit_function, s2->$deposit_function)
    && $IsEqual'$1_option_Option'$1_function_info_FunctionInfo''(s1->$derived_balance_function, s2->$derived_balance_function)}
var $1_fungible_asset_DispatchFunctionStore_$memory: $Memory $1_fungible_asset_DispatchFunctionStore;

// struct fungible_asset::Frozen at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:234:5+83
datatype $1_fungible_asset_Frozen {
    $1_fungible_asset_Frozen($store: int, $frozen: bool)
}
function {:inline} $Update'$1_fungible_asset_Frozen'_store(s: $1_fungible_asset_Frozen, x: int): $1_fungible_asset_Frozen {
    $1_fungible_asset_Frozen(x, s->$frozen)
}
function {:inline} $Update'$1_fungible_asset_Frozen'_frozen(s: $1_fungible_asset_Frozen, x: bool): $1_fungible_asset_Frozen {
    $1_fungible_asset_Frozen(s->$store, x)
}
function $IsValid'$1_fungible_asset_Frozen'(s: $1_fungible_asset_Frozen): bool {
    $IsValid'address'(s->$store)
      && $IsValid'bool'(s->$frozen)
}
function {:inline} $IsEqual'$1_fungible_asset_Frozen'(s1: $1_fungible_asset_Frozen, s2: $1_fungible_asset_Frozen): bool {
    s1 == s2
}

// struct fungible_asset::FungibleAsset at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:178:5+85
datatype $1_fungible_asset_FungibleAsset {
    $1_fungible_asset_FungibleAsset($metadata: $1_object_Object'$1_fungible_asset_Metadata', $amount: int)
}
function {:inline} $Update'$1_fungible_asset_FungibleAsset'_metadata(s: $1_fungible_asset_FungibleAsset, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_FungibleAsset {
    $1_fungible_asset_FungibleAsset(x, s->$amount)
}
function {:inline} $Update'$1_fungible_asset_FungibleAsset'_amount(s: $1_fungible_asset_FungibleAsset, x: int): $1_fungible_asset_FungibleAsset {
    $1_fungible_asset_FungibleAsset(s->$metadata, x)
}
function $IsValid'$1_fungible_asset_FungibleAsset'(s: $1_fungible_asset_FungibleAsset): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_fungible_asset_FungibleAsset'(s1: $1_fungible_asset_FungibleAsset, s2: $1_fungible_asset_FungibleAsset): bool {
    s1 == s2
}

// struct fungible_asset::FungibleStore at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:148:5+324
datatype $1_fungible_asset_FungibleStore {
    $1_fungible_asset_FungibleStore($metadata: $1_object_Object'$1_fungible_asset_Metadata', $balance: int, $frozen: bool)
}
function {:inline} $Update'$1_fungible_asset_FungibleStore'_metadata(s: $1_fungible_asset_FungibleStore, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_FungibleStore {
    $1_fungible_asset_FungibleStore(x, s->$balance, s->$frozen)
}
function {:inline} $Update'$1_fungible_asset_FungibleStore'_balance(s: $1_fungible_asset_FungibleStore, x: int): $1_fungible_asset_FungibleStore {
    $1_fungible_asset_FungibleStore(s->$metadata, x, s->$frozen)
}
function {:inline} $Update'$1_fungible_asset_FungibleStore'_frozen(s: $1_fungible_asset_FungibleStore, x: bool): $1_fungible_asset_FungibleStore {
    $1_fungible_asset_FungibleStore(s->$metadata, s->$balance, x)
}
function $IsValid'$1_fungible_asset_FungibleStore'(s: $1_fungible_asset_FungibleStore): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
      && $IsValid'u64'(s->$balance)
      && $IsValid'bool'(s->$frozen)
}
function {:inline} $IsEqual'$1_fungible_asset_FungibleStore'(s1: $1_fungible_asset_FungibleStore, s2: $1_fungible_asset_FungibleStore): bool {
    s1 == s2
}
var $1_fungible_asset_FungibleStore_$memory: $Memory $1_fungible_asset_FungibleStore;

// struct fungible_asset::Metadata at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:124:5+797
datatype $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata($name: $1_string_String, $symbol: $1_string_String, $decimals: int, $icon_uri: $1_string_String, $project_uri: $1_string_String)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_name(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(x, s->$symbol, s->$decimals, s->$icon_uri, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_symbol(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, x, s->$decimals, s->$icon_uri, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_decimals(s: $1_fungible_asset_Metadata, x: int): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, s->$symbol, x, s->$icon_uri, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_icon_uri(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, s->$symbol, s->$decimals, x, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_project_uri(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, s->$symbol, s->$decimals, s->$icon_uri, x)
}
function $IsValid'$1_fungible_asset_Metadata'(s: $1_fungible_asset_Metadata): bool {
    $IsValid'$1_string_String'(s->$name)
      && $IsValid'$1_string_String'(s->$symbol)
      && $IsValid'u8'(s->$decimals)
      && $IsValid'$1_string_String'(s->$icon_uri)
      && $IsValid'$1_string_String'(s->$project_uri)
}
function {:inline} $IsEqual'$1_fungible_asset_Metadata'(s1: $1_fungible_asset_Metadata, s2: $1_fungible_asset_Metadata): bool {
    $IsEqual'$1_string_String'(s1->$name, s2->$name)
    && $IsEqual'$1_string_String'(s1->$symbol, s2->$symbol)
    && $IsEqual'u8'(s1->$decimals, s2->$decimals)
    && $IsEqual'$1_string_String'(s1->$icon_uri, s2->$icon_uri)
    && $IsEqual'$1_string_String'(s1->$project_uri, s2->$project_uri)}
var $1_fungible_asset_Metadata_$memory: $Memory $1_fungible_asset_Metadata;

// struct fungible_asset::MintRef at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:184:5+73
datatype $1_fungible_asset_MintRef {
    $1_fungible_asset_MintRef($metadata: $1_object_Object'$1_fungible_asset_Metadata')
}
function {:inline} $Update'$1_fungible_asset_MintRef'_metadata(s: $1_fungible_asset_MintRef, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_MintRef {
    $1_fungible_asset_MintRef(x)
}
function $IsValid'$1_fungible_asset_MintRef'(s: $1_fungible_asset_MintRef): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
}
function {:inline} $IsEqual'$1_fungible_asset_MintRef'(s1: $1_fungible_asset_MintRef, s2: $1_fungible_asset_MintRef): bool {
    s1 == s2
}

// struct fungible_asset::Supply at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:111:5+133
datatype $1_fungible_asset_Supply {
    $1_fungible_asset_Supply($current: int, $maximum: $1_option_Option'u128')
}
function {:inline} $Update'$1_fungible_asset_Supply'_current(s: $1_fungible_asset_Supply, x: int): $1_fungible_asset_Supply {
    $1_fungible_asset_Supply(x, s->$maximum)
}
function {:inline} $Update'$1_fungible_asset_Supply'_maximum(s: $1_fungible_asset_Supply, x: $1_option_Option'u128'): $1_fungible_asset_Supply {
    $1_fungible_asset_Supply(s->$current, x)
}
function $IsValid'$1_fungible_asset_Supply'(s: $1_fungible_asset_Supply): bool {
    $IsValid'u128'(s->$current)
      && $IsValid'$1_option_Option'u128''(s->$maximum)
}
function {:inline} $IsEqual'$1_fungible_asset_Supply'(s1: $1_fungible_asset_Supply, s2: $1_fungible_asset_Supply): bool {
    $IsEqual'u128'(s1->$current, s2->$current)
    && $IsEqual'$1_option_Option'u128''(s1->$maximum, s2->$maximum)}
var $1_fungible_asset_Supply_$memory: $Memory $1_fungible_asset_Supply;

// fun fungible_asset::extract [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1147:5+353
procedure {:inline 1} $1_fungible_asset_extract(_$t0: $Mutation ($1_fungible_asset_FungibleAsset), _$t1: int) returns ($ret0: $1_fungible_asset_FungibleAsset, $ret1: $Mutation ($1_fungible_asset_FungibleAsset))
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation (int);
    var $t8: $1_object_Object'$1_fungible_asset_Metadata';
    var $t9: $1_fungible_asset_FungibleAsset;
    var $t10: int;
    var $t11: int;
    var $t0: $Mutation ($1_fungible_asset_FungibleAsset);
    var $t1: int;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[fungible_asset]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1147:5+1
    assume {:print "$at(176,47775,47776)"} true;
    $temp_0'$1_fungible_asset_FungibleAsset' := $Dereference($t0);
    assume {:print "$track_local(42,0,0):", $temp_0'$1_fungible_asset_FungibleAsset'} $temp_0'$1_fungible_asset_FungibleAsset' == $temp_0'$1_fungible_asset_FungibleAsset';

    // trace_local[amount]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1147:5+1
    assume {:print "$track_local(42,0,1):", $t1} $t1 == $t1;

    // $t2 := get_field<0x1::fungible_asset::FungibleAsset>.amount($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1148:17+21
    assume {:print "$at(176,47876,47897)"} true;
    $t2 := $Dereference($t0)->$amount;

    // $t3 := >=($t2, $t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1148:17+31
    call $t3 := $Ge($t2, $t1);

    // if ($t3) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1148:9+6
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1149:33+21
    assume {:print "$at(176,47990,48011)"} true;
L1:

    // $t4 := get_field<0x1::fungible_asset::FungibleAsset>.amount($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1149:33+21
    assume {:print "$at(176,47990,48011)"} true;
    $t4 := $Dereference($t0)->$amount;

    // $t5 := -($t4, $t1) on_abort goto L3 with $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1149:33+30
    call $t5 := $Sub($t4, $t1);
    if ($abort_flag) {
        assume {:print "$at(176,47990,48020)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(42,0):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t7 := borrow_field<0x1::fungible_asset::FungibleAsset>.amount($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1149:9+21
    $t7 := $ChildMutation($t0, 1, $Dereference($t0)->$amount);

    // write_ref($t7, $t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1149:9+54
    $t7 := $UpdateMutation($t7, $t5);

    // write_back[Reference($t0).amount (u64)]($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1149:9+54
    $t0 := $UpdateMutation($t0, $Update'$1_fungible_asset_FungibleAsset'_amount($Dereference($t0), $Dereference($t7)));

    // trace_local[fungible_asset]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1149:9+54
    $temp_0'$1_fungible_asset_FungibleAsset' := $Dereference($t0);
    assume {:print "$track_local(42,0,0):", $temp_0'$1_fungible_asset_FungibleAsset'} $temp_0'$1_fungible_asset_FungibleAsset' == $temp_0'$1_fungible_asset_FungibleAsset';

    // $t8 := get_field<0x1::fungible_asset::FungibleAsset>.metadata($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1151:23+23
    assume {:print "$at(176,48068,48091)"} true;
    $t8 := $Dereference($t0)->$metadata;

    // $t9 := pack 0x1::fungible_asset::FungibleAsset($t8, $t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1150:9+92
    assume {:print "$at(176,48030,48122)"} true;
    $t9 := $1_fungible_asset_FungibleAsset($t8, $t1);

    // trace_return[0]($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1147:88+270
    assume {:print "$at(176,47858,48128)"} true;
    assume {:print "$track_return(42,0,0):", $t9} $t9 == $t9;

    // trace_local[fungible_asset]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1147:88+270
    $temp_0'$1_fungible_asset_FungibleAsset' := $Dereference($t0);
    assume {:print "$track_local(42,0,0):", $temp_0'$1_fungible_asset_FungibleAsset'} $temp_0'$1_fungible_asset_FungibleAsset' == $temp_0'$1_fungible_asset_FungibleAsset';

    // goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1147:88+270
    goto L2;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1148:9+6
    assume {:print "$at(176,47868,47874)"} true;
L0:

    // drop($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1148:9+6
    assume {:print "$at(176,47868,47874)"} true;

    // $t10 := 4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1148:74+21
    $t10 := 4;
    assume $IsValid'u64'($t10);

    // $t11 := error::invalid_argument($t10) on_abort goto L3 with $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1148:50+46
    call $t11 := $1_error_invalid_argument($t10);
    if ($abort_flag) {
        assume {:print "$at(176,47909,47955)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(42,0):", $t6} $t6 == $t6;
        goto L3;
    }

    // trace_abort($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1148:9+6
    assume {:print "$at(176,47868,47874)"} true;
    assume {:print "$track_abort(42,0):", $t11} $t11 == $t11;

    // $t6 := move($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1148:9+6
    $t6 := $t11;

    // goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1148:9+6
    goto L3;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1154:5+1
    assume {:print "$at(176,48127,48128)"} true;
L2:

    // return $t9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1154:5+1
    assume {:print "$at(176,48127,48128)"} true;
    $ret0 := $t9;
    $ret1 := $t0;
    return;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1154:5+1
L3:

    // abort($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1154:5+1
    assume {:print "$at(176,48127,48128)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun fungible_asset::is_untransferable<0x1::fungible_asset::Metadata> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:314:5+137
procedure {:inline 1} $1_fungible_asset_is_untransferable'$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[metadata]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:314:5+1
    assume {:print "$at(176,13235,13236)"} true;
    assume {:print "$track_local(42,5,0):", $t0} $t0 == $t0;

    // $t1 := object::object_address<#0>($t0) on_abort goto L2 with $t2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:315:32+33
    assume {:print "$at(176,13332,13365)"} true;
    call $t1 := $1_object_object_address'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(176,13332,13365)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(42,5):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := exists<0x1::fungible_asset::Untransferable>($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:315:9+57
    $t3 := $ResourceExists($1_fungible_asset_Untransferable_$memory, $t1);

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:315:9+57
    assume {:print "$track_return(42,5,0):", $t3} $t3 == $t3;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:316:5+1
    assume {:print "$at(176,13371,13372)"} true;
L1:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:316:5+1
    assume {:print "$at(176,13371,13372)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:316:5+1
L2:

    // abort($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:316:5+1
    assume {:print "$at(176,13371,13372)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun fungible_asset::amount [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:622:5+68
procedure {:inline 1} $1_fungible_asset_amount(_$t0: $1_fungible_asset_FungibleAsset) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[fa]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:622:5+1
    assume {:print "$at(176,26203,26204)"} true;
    assume {:print "$track_local(42,16,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::fungible_asset::FungibleAsset>.amount($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:623:9+9
    assume {:print "$at(176,26256,26265)"} true;
    $t1 := $t0->$amount;

    // trace_return[0]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:623:9+9
    assume {:print "$track_return(42,16,0):", $t1} $t1 == $t1;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:624:5+1
    assume {:print "$at(176,26270,26271)"} true;
L1:

    // return $t1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:624:5+1
    assume {:print "$at(176,26270,26271)"} true;
    $ret0 := $t1;
    return;

}

// fun fungible_asset::balance<0x1::fungible_asset::FungibleStore> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:631:5+373
procedure {:inline 1} $1_fungible_asset_balance'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: $1_fungible_asset_FungibleStore;
    var $t6: $1_object_Object'$1_fungible_asset_Metadata';
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[store]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:631:5+1
    assume {:print "$at(176,26524,26525)"} true;
    assume {:print "$track_local(42,18,0):", $t0} $t0 == $t0;

    // $t2 := object::object_address<#0>($t0) on_abort goto L5 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1313:26+29
    assume {:print "$at(176,54868,54897)"} true;
    call $t2 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(176,54868,54897)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,18):", $t3} $t3 == $t3;
        goto L5;
    }

    // trace_local[store_addr]($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1313:26+29
    assume {:print "$track_local(42,18,1):", $t2} $t2 == $t2;

    // $t4 := exists<0x1::fungible_asset::FungibleStore>($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:17+33
    assume {:print "$at(176,54915,54948)"} true;
    $t4 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t2);

    // if ($t4) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1315:9+40
    assume {:print "$at(176,55004,55044)"} true;
L1:

    // $t5 := get_global<0x1::fungible_asset::FungibleStore>($t2) on_abort goto L5 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1315:9+40
    assume {:print "$at(176,55004,55044)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(176,55004,55044)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,18):", $t3} $t3 == $t3;
        goto L5;
    }

    // $t6 := get_field<0x1::fungible_asset::FungibleStore>.metadata($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:634:44+17
    assume {:print "$at(176,26763,26780)"} true;
    $t6 := $t5->$metadata;

    // $t7 := fungible_asset::has_balance_dispatch_function($t6) on_abort goto L5 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:634:14+48
    call $t7 := $1_fungible_asset_has_balance_dispatch_function($t6);
    if ($abort_flag) {
        assume {:print "$at(176,26733,26781)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,18):", $t3} $t3 == $t3;
        goto L5;
    }

    // if ($t7) goto L2 else goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:634:13+49
    if ($t7) { goto L2; } else { goto L3; }

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:637:9+19
    assume {:print "$at(176,26872,26891)"} true;
L3:

    // $t8 := fungible_asset::balance_impl<#0>($t0) on_abort goto L5 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:637:9+19
    assume {:print "$at(176,26872,26891)"} true;
    call $t8 := $1_fungible_asset_balance_impl'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(176,26872,26891)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,18):", $t3} $t3 == $t3;
        goto L5;
    }

    // trace_return[0]($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:631:128+250
    assume {:print "$at(176,26647,26897)"} true;
    assume {:print "$track_return(42,18,0):", $t8} $t8 == $t8;

    // goto L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:631:128+250
    goto L4;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:635:37+32
    assume {:print "$at(176,26819,26851)"} true;
L2:

    // $t9 := 28 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:635:37+32
    assume {:print "$at(176,26819,26851)"} true;
    $t9 := 28;
    assume $IsValid'u64'($t9);

    // $t10 := error::invalid_argument($t9) on_abort goto L5 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:635:13+57
    call $t10 := $1_error_invalid_argument($t9);
    if ($abort_flag) {
        assume {:print "$at(176,26795,26852)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,18):", $t3} $t3 == $t3;
        goto L5;
    }

    // trace_abort($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:633:9+6
    assume {:print "$at(176,26711,26717)"} true;
    assume {:print "$track_abort(42,18):", $t10} $t10 == $t10;

    // $t3 := move($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:633:9+6
    $t3 := $t10;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:633:9+6
    goto L5;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:69+25
    assume {:print "$at(176,54967,54992)"} true;
L0:

    // $t11 := 23 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:69+25
    assume {:print "$at(176,54967,54992)"} true;
    $t11 := 23;
    assume $IsValid'u64'($t11);

    // $t12 := error::not_found($t11) on_abort goto L5 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:52+43
    call $t12 := $1_error_not_found($t11);
    if ($abort_flag) {
        assume {:print "$at(176,54950,54993)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,18):", $t3} $t3 == $t3;
        goto L5;
    }

    // trace_abort($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    assume {:print "$at(176,54907,54913)"} true;
    assume {:print "$track_abort(42,18):", $t12} $t12 == $t12;

    // $t3 := move($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    $t3 := $t12;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    goto L5;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:638:5+1
    assume {:print "$at(176,26896,26897)"} true;
L4:

    // return $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:638:5+1
    assume {:print "$at(176,26896,26897)"} true;
    $ret0 := $t8;
    return;

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:638:5+1
L5:

    // abort($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:638:5+1
    assume {:print "$at(176,26896,26897)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::balance_impl<0x1::fungible_asset::FungibleStore> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:640:5+637
procedure {:inline 1} $1_fungible_asset_balance_impl'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: $1_fungible_asset_FungibleStore;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: bool;
    var $t16: $1_fungible_asset_ConcurrentFungibleBalance;
    var $t17: $1_aggregator_v2_Aggregator'u64';
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[store]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:640:5+1
    assume {:print "$at(176,26903,26904)"} true;
    assume {:print "$track_local(42,19,0):", $t0} $t0 == $t0;

    // $t6 := object::object_address<#0>($t0) on_abort goto L11 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:641:26+30
    assume {:print "$at(176,27028,27058)"} true;
    call $t6 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(176,27028,27058)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,19):", $t7} $t7 == $t7;
        goto L11;
    }

    // trace_local[store_addr]($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:641:26+30
    assume {:print "$track_local(42,19,1):", $t6} $t6 == $t6;

    // $t8 := exists<0x1::fungible_asset::FungibleStore>($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:601:9+28
    assume {:print "$at(176,25481,25509)"} true;
    $t8 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t6);

    // if ($t8) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:642:9+466
    assume {:print "$at(176,27068,27534)"} true;
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:643:55+6
    assume {:print "$at(176,27161,27167)"} true;
L1:

    // $t9 := object::object_address<#0>($t0) on_abort goto L11 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1313:26+29
    assume {:print "$at(176,54868,54897)"} true;
    call $t9 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(176,54868,54897)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,19):", $t7} $t7 == $t7;
        goto L11;
    }

    // trace_local[store]($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1313:26+29
    assume {:print "$track_local(42,19,2):", $t9} $t9 == $t9;

    // $t10 := exists<0x1::fungible_asset::FungibleStore>($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:17+33
    assume {:print "$at(176,54915,54948)"} true;
    $t10 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t9);

    // if ($t10) goto L3 else goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    if ($t10) { goto L3; } else { goto L2; }

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1315:9+40
    assume {:print "$at(176,55004,55044)"} true;
L3:

    // $t11 := get_global<0x1::fungible_asset::FungibleStore>($t9) on_abort goto L11 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1315:9+40
    assume {:print "$at(176,55004,55044)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t9)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(176,55004,55044)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,19):", $t7} $t7 == $t7;
        goto L11;
    }

    // $t12 := get_field<0x1::fungible_asset::FungibleStore>.balance($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:643:33+37
    assume {:print "$at(176,27139,27176)"} true;
    $t12 := $t11->$balance;

    // trace_local[store_balance]($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:643:33+37
    assume {:print "$track_local(42,19,3):", $t12} $t12 == $t12;

    // $t13 := 0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:644:34+1
    assume {:print "$at(176,27211,27212)"} true;
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := ==($t12, $t13) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:644:17+18
    $t14 := $IsEqual'u64'($t12, $t13);

    // if ($t14) goto L5 else goto L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:644:17+75
    if ($t14) { goto L5; } else { goto L4; }

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:606:16+41
    assume {:print "$at(176,25662,25703)"} true;
L5:

    // $t15 := exists<0x1::fungible_asset::ConcurrentFungibleBalance>($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:607:9+40
    assume {:print "$at(176,25736,25776)"} true;
    $t15 := $ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t6);

    // $t4 := $t15 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:607:9+40
    $t4 := $t15;

    // trace_local[$t4]($t15) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:607:9+40
    assume {:print "$track_local(42,19,4):", $t15} $t15 == $t15;

    // label L9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:644:13+303
    assume {:print "$at(176,27190,27493)"} true;
L9:

    // if ($t4) goto L7 else goto L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:644:13+303
    assume {:print "$at(176,27190,27493)"} true;
    if ($t4) { goto L7; } else { goto L6; }

    // label L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:645:40+52
    assume {:print "$at(176,27312,27364)"} true;
L7:

    // $t16 := get_global<0x1::fungible_asset::ConcurrentFungibleBalance>($t6) on_abort goto L11 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:645:40+52
    assume {:print "$at(176,27312,27364)"} true;
    if (!$ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t16 := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t6);
    }
    if ($abort_flag) {
        assume {:print "$at(176,27312,27364)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,19):", $t7} $t7 == $t7;
        goto L11;
    }

    // $t17 := get_field<0x1::fungible_asset::ConcurrentFungibleBalance>.balance($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:646:37+25
    assume {:print "$at(176,27402,27427)"} true;
    $t17 := $t16->$balance;

    // $t18 := aggregator_v2::read<u64>($t17) on_abort goto L11 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:646:17+46
    call $t18 := $1_aggregator_v2_read'u64'($t17);
    if ($abort_flag) {
        assume {:print "$at(176,27382,27428)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,19):", $t7} $t7 == $t7;
        goto L11;
    }

    // $t5 := $t18 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:646:17+46
    $t5 := $t18;

    // trace_local[$t17]($t18) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:646:17+46
    assume {:print "$track_local(42,19,5):", $t18} $t18 == $t18;

    // label L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:642:9+466
    assume {:print "$at(176,27068,27534)"} true;
L8:

    // trace_return[0]($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:642:9+466
    assume {:print "$at(176,27068,27534)"} true;
    assume {:print "$track_return(42,19,0):", $t5} $t5 == $t5;

    // goto L10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:642:9+466
    goto L10;

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:648:17+13
    assume {:print "$at(176,27466,27479)"} true;
L6:

    // $t5 := $t12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:648:17+13
    assume {:print "$at(176,27466,27479)"} true;
    $t5 := $t12;

    // trace_local[$t17]($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:648:17+13
    assume {:print "$track_local(42,19,5):", $t12} $t12 == $t12;

    // goto L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:648:17+13
    goto L8;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:644:17+75
    assume {:print "$at(176,27194,27269)"} true;
L4:

    // $t19 := false at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:644:17+75
    assume {:print "$at(176,27194,27269)"} true;
    $t19 := false;
    assume $IsValid'bool'($t19);

    // $t4 := $t19 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:644:17+75
    $t4 := $t19;

    // trace_local[$t4]($t19) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:644:17+75
    assume {:print "$track_local(42,19,4):", $t19} $t19 == $t19;

    // goto L9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:644:17+75
    goto L9;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:69+25
    assume {:print "$at(176,54967,54992)"} true;
L2:

    // $t20 := 23 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:69+25
    assume {:print "$at(176,54967,54992)"} true;
    $t20 := 23;
    assume $IsValid'u64'($t20);

    // $t21 := error::not_found($t20) on_abort goto L11 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:52+43
    call $t21 := $1_error_not_found($t20);
    if ($abort_flag) {
        assume {:print "$at(176,54950,54993)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,19):", $t7} $t7 == $t7;
        goto L11;
    }

    // trace_abort($t21) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    assume {:print "$at(176,54907,54913)"} true;
    assume {:print "$track_abort(42,19):", $t21} $t21 == $t21;

    // $t7 := move($t21) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    $t7 := $t21;

    // goto L11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    goto L11;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:651:13+1
    assume {:print "$at(176,27523,27524)"} true;
L0:

    // $t22 := 0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:651:13+1
    assume {:print "$at(176,27523,27524)"} true;
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t5 := $t22 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:651:13+1
    $t5 := $t22;

    // trace_local[$t17]($t22) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:651:13+1
    assume {:print "$track_local(42,19,5):", $t22} $t22 == $t22;

    // goto L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:651:13+1
    goto L8;

    // label L10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:653:5+1
    assume {:print "$at(176,27539,27540)"} true;
L10:

    // return $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:653:5+1
    assume {:print "$at(176,27539,27540)"} true;
    $ret0 := $t5;
    return;

    // label L11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:653:5+1
L11:

    // abort($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:653:5+1
    assume {:print "$at(176,27539,27540)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun fungible_asset::create_store<0x1::fungible_asset::Metadata> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:813:5+765
procedure {:inline 1} $1_fungible_asset_create_store'$1_fungible_asset_Metadata'(_$t0: $1_object_ConstructorRef, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t2: $signer;
    var $t3: $signer;
    var $t4: $signer;
    var $t5: int;
    var $t6: $1_object_Object'$1_fungible_asset_Metadata';
    var $t7: int;
    var $t8: bool;
    var $t9: $1_fungible_asset_FungibleStore;
    var $t10: bool;
    var $t11: bool;
    var $t12: $1_aggregator_v2_Aggregator'u64';
    var $t13: $1_fungible_asset_ConcurrentFungibleBalance;
    var $t14: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t0: $1_object_ConstructorRef;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[constructor_ref]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:813:5+1
    assume {:print "$at(176,34492,34493)"} true;
    assume {:print "$track_local(42,25,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:813:5+1
    assume {:print "$track_local(42,25,1):", $t1} $t1 == $t1;

    // $t4 := object::generate_signer($t0) on_abort goto L7 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:817:26+40
    assume {:print "$at(176,34652,34692)"} true;
    call $t4 := $1_object_generate_signer($t0);
    if ($abort_flag) {
        assume {:print "$at(176,34652,34692)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // trace_local[$t4]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:817:26+40
    assume {:print "$track_local(42,25,2):", $t4} $t4 == $t4;

    // trace_local[store_obj]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:817:25+41
    assume {:print "$track_local(42,25,3):", $t4} $t4 == $t4;

    // $t6 := object::convert<#0, 0x1::fungible_asset::Metadata>($t1) on_abort goto L7 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:819:23+25
    assume {:print "$at(176,34759,34784)"} true;
    call $t6 := $1_object_convert'$1_fungible_asset_Metadata_$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(176,34759,34784)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t7 := 0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:820:22+1
    assume {:print "$at(176,34807,34808)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := false at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:821:21+5
    assume {:print "$at(176,34830,34835)"} true;
    $t8 := false;
    assume $IsValid'bool'($t8);

    // $t9 := pack 0x1::fungible_asset::FungibleStore($t6, $t7, $t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:818:28+125
    assume {:print "$at(176,34721,34846)"} true;
    $t9 := $1_fungible_asset_FungibleStore($t6, $t7, $t8);

    // move_to<0x1::fungible_asset::FungibleStore>($t9, $t4) on_abort goto L7 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:818:9+145
    if ($ResourceExists($1_fungible_asset_FungibleStore_$memory, $t4->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_fungible_asset_FungibleStore_$memory := $ResourceUpdate($1_fungible_asset_FungibleStore_$memory, $t4->$addr, $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(176,34702,34847)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t10 := fungible_asset::is_untransferable<#0>($t1) on_abort goto L7 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:824:13+27
    assume {:print "$at(176,34862,34889)"} true;
    call $t10 := $1_fungible_asset_is_untransferable'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(176,34862,34889)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // if ($t10) goto L0 else goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:824:9+101
    if ($t10) { goto L0; } else { goto L2; }

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:825:13+43
    assume {:print "$at(176,34905,34948)"} true;
L0:

    // object::set_untransferable($t0) on_abort goto L7 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:825:13+43
    assume {:print "$at(176,34905,34948)"} true;
    call $1_object_set_untransferable($t0);
    if ($abort_flag) {
        assume {:print "$at(176,34905,34948)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:248:9+58
    assume {:print "$at(176,10276,10334)"} true;
L2:

    // $t11 := features::default_to_concurrent_fungible_balance_enabled() on_abort goto L7 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:248:9+58
    assume {:print "$at(176,10276,10334)"} true;
    call $t11 := $1_features_default_to_concurrent_fungible_balance_enabled();
    if ($abort_flag) {
        assume {:print "$at(176,10276,10334)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // if ($t11) goto L4 else goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:828:9+203
    assume {:print "$at(176,34970,35173)"} true;
    if ($t11) { goto L4; } else { goto L3; }

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:829:21+9
    assume {:print "$at(176,35038,35047)"} true;
L4:

    // $t12 := aggregator_v2::create_unbounded_aggregator<u64>() on_abort goto L7 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:830:26+44
    assume {:print "$at(176,35102,35146)"} true;
    call $t12 := $1_aggregator_v2_create_unbounded_aggregator'u64'();
    if ($abort_flag) {
        assume {:print "$at(176,35102,35146)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t13 := pack 0x1::fungible_asset::ConcurrentFungibleBalance($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:829:32+112
    assume {:print "$at(176,35049,35161)"} true;
    $t13 := $1_fungible_asset_ConcurrentFungibleBalance($t12);

    // move_to<0x1::fungible_asset::ConcurrentFungibleBalance>($t13, $t4) on_abort goto L7 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:829:13+132
    if ($ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t4->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_fungible_asset_ConcurrentFungibleBalance_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t4->$addr, $t13);
    }
    if ($abort_flag) {
        assume {:print "$at(176,35030,35162)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:834:9+67
    assume {:print "$at(176,35184,35251)"} true;
L5:

    // $t14 := object::object_from_constructor_ref<0x1::fungible_asset::FungibleStore>($t0) on_abort goto L7 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:834:9+67
    assume {:print "$at(176,35184,35251)"} true;
    call $t14 := $1_object_object_from_constructor_ref'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(176,35184,35251)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // trace_return[0]($t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:816:30+632
    assume {:print "$at(176,34625,35257)"} true;
    assume {:print "$track_return(42,25,0):", $t14} $t14 == $t14;

    // goto L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:816:30+632
    goto L6;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:828:9+203
    assume {:print "$at(176,34970,35173)"} true;
L3:

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:828:9+203
    assume {:print "$at(176,34970,35173)"} true;
    goto L5;

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:835:5+1
    assume {:print "$at(176,35256,35257)"} true;
L6:

    // return $t14 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:835:5+1
    assume {:print "$at(176,35256,35257)"} true;
    $ret0 := $t14;
    return;

    // label L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:835:5+1
L7:

    // abort($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:835:5+1
    assume {:print "$at(176,35256,35257)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::deposit_dispatch_function<0x1::fungible_asset::FungibleStore> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:694:5+458
procedure {:inline 1} $1_fungible_asset_deposit_dispatch_function'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore') returns ($ret0: $1_option_Option'$1_function_info_FunctionInfo')
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: $1_option_Option'$1_function_info_FunctionInfo';
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: $1_fungible_asset_FungibleStore;
    var $t8: $1_object_Object'$1_fungible_asset_Metadata';
    var $t9: int;
    var $t10: bool;
    var $t11: $1_fungible_asset_DispatchFunctionStore;
    var $t12: $1_option_Option'$1_function_info_FunctionInfo';
    var $t13: $1_option_Option'$1_function_info_FunctionInfo';
    var $t14: int;
    var $t15: int;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_option_Option'$1_function_info_FunctionInfo'': $1_option_Option'$1_function_info_FunctionInfo';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[store]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:694:5+1
    assume {:print "$at(176,29372,29373)"} true;
    assume {:print "$track_local(42,28,0):", $t0} $t0 == $t0;

    // $t4 := object::object_address<#0>($t0) on_abort goto L6 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1313:26+29
    assume {:print "$at(176,54868,54897)"} true;
    call $t4 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(176,54868,54897)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,28):", $t5} $t5 == $t5;
        goto L6;
    }

    // trace_local[store_addr]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1313:26+29
    assume {:print "$track_local(42,28,1):", $t4} $t4 == $t4;

    // $t6 := exists<0x1::fungible_asset::FungibleStore>($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:17+33
    assume {:print "$at(176,54915,54948)"} true;
    $t6 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t4);

    // if ($t6) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1315:9+40
    assume {:print "$at(176,55004,55044)"} true;
L1:

    // $t7 := get_global<0x1::fungible_asset::FungibleStore>($t4) on_abort goto L6 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1315:9+40
    assume {:print "$at(176,55004,55044)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t4);
    }
    if ($abort_flag) {
        assume {:print "$at(176,55004,55044)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,28):", $t5} $t5 == $t5;
        goto L6;
    }

    // $t8 := get_field<0x1::fungible_asset::FungibleStore>.metadata($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:696:52+18
    assume {:print "$at(176,29610,29628)"} true;
    $t8 := $t7->$metadata;

    // $t9 := object::object_address<0x1::fungible_asset::Metadata>($t8) on_abort goto L6 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:696:29+42
    call $t9 := $1_object_object_address'$1_fungible_asset_Metadata'($t8);
    if ($abort_flag) {
        assume {:print "$at(176,29587,29629)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,28):", $t5} $t5 == $t5;
        goto L6;
    }

    // trace_local[metadata_addr]($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:696:29+42
    assume {:print "$track_local(42,28,2):", $t9} $t9 == $t9;

    // $t10 := exists<0x1::fungible_asset::DispatchFunctionStore>($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:697:12+44
    assume {:print "$at(176,29642,29686)"} true;
    $t10 := $ResourceExists($1_fungible_asset_DispatchFunctionStore_$memory, $t9);

    // if ($t10) goto L3 else goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:697:9+185
    if ($t10) { goto L3; } else { goto L2; }

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:698:13+51
    assume {:print "$at(176,29702,29753)"} true;
L3:

    // $t11 := get_global<0x1::fungible_asset::DispatchFunctionStore>($t9) on_abort goto L6 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:698:13+51
    assume {:print "$at(176,29702,29753)"} true;
    if (!$ResourceExists($1_fungible_asset_DispatchFunctionStore_$memory, $t9)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $ResourceValue($1_fungible_asset_DispatchFunctionStore_$memory, $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(176,29702,29753)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,28):", $t5} $t5 == $t5;
        goto L6;
    }

    // $t12 := get_field<0x1::fungible_asset::DispatchFunctionStore>.deposit_function($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:698:13+68
    $t12 := $t11->$deposit_function;

    // $t3 := $t12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:698:13+68
    $t3 := $t12;

    // trace_local[return]($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:698:13+68
    assume {:print "$track_local(42,28,3):", $t12} $t12 == $t12;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:697:9+185
    assume {:print "$at(176,29639,29824)"} true;
L4:

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:697:9+185
    assume {:print "$at(176,29639,29824)"} true;
    assume {:print "$track_return(42,28,0):", $t3} $t3 == $t3;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:697:9+185
    goto L5;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:700:13+14
    assume {:print "$at(176,29800,29814)"} true;
L2:

    // $t13 := opaque begin: option::none<0x1::function_info::FunctionInfo>() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:700:13+14
    assume {:print "$at(176,29800,29814)"} true;

    // assume And(WellFormed($t13), Le(Len<0x1::function_info::FunctionInfo>(select option::Option.vec($t13)), 1)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:700:13+14
    assume ($IsValid'$1_option_Option'$1_function_info_FunctionInfo''($t13) && (LenVec($t13->$vec) <= 1));

    // assume Eq<0x1::option::Option<0x1::function_info::FunctionInfo>>($t13, option::spec_none<0x1::function_info::FunctionInfo>()) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:700:13+14
    assume $IsEqual'$1_option_Option'$1_function_info_FunctionInfo''($t13, $1_option_spec_none'$1_function_info_FunctionInfo'());

    // $t13 := opaque end: option::none<0x1::function_info::FunctionInfo>() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:700:13+14

    // $t3 := $t13 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:700:13+14
    $t3 := $t13;

    // trace_local[return]($t13) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:700:13+14
    assume {:print "$track_local(42,28,3):", $t13} $t13 == $t13;

    // goto L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:700:13+14
    goto L4;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:69+25
    assume {:print "$at(176,54967,54992)"} true;
L0:

    // $t14 := 23 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:69+25
    assume {:print "$at(176,54967,54992)"} true;
    $t14 := 23;
    assume $IsValid'u64'($t14);

    // $t15 := error::not_found($t14) on_abort goto L6 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:52+43
    call $t15 := $1_error_not_found($t14);
    if ($abort_flag) {
        assume {:print "$at(176,54950,54993)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,28):", $t5} $t5 == $t5;
        goto L6;
    }

    // trace_abort($t15) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    assume {:print "$at(176,54907,54913)"} true;
    assume {:print "$track_abort(42,28):", $t15} $t15 == $t15;

    // $t5 := move($t15) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    $t5 := $t15;

    // goto L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    goto L6;

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:702:5+1
    assume {:print "$at(176,29829,29830)"} true;
L5:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:702:5+1
    assume {:print "$at(176,29829,29830)"} true;
    $ret0 := $t3;
    return;

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:702:5+1
L6:

    // abort($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:702:5+1
    assume {:print "$at(176,29829,29830)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::deposit_sanity_check<0x1::fungible_asset::FungibleStore> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:927:5+474
procedure {:inline 1} $1_fungible_asset_deposit_sanity_check'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore', _$t1: bool) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $1_fungible_asset_FungibleStore;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: $1_fungible_asset_FungibleStore;
    var $t9: bool;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: $1_object_Object'$1_fungible_asset_Metadata';
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t1: bool;
    var $temp_0'$1_fungible_asset_FungibleStore': $1_fungible_asset_FungibleStore;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[store]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:927:5+1
    assume {:print "$at(176,39141,39142)"} true;
    assume {:print "$track_local(42,29,0):", $t0} $t0 == $t0;

    // trace_local[abort_on_dispatch]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:927:5+1
    assume {:print "$track_local(42,29,1):", $t1} $t1 == $t1;

    // $t5 := object::object_address<#0>($t0) on_abort goto L10 with $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1313:26+29
    assume {:print "$at(176,54868,54897)"} true;
    call $t5 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(176,54868,54897)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(42,29):", $t6} $t6 == $t6;
        goto L10;
    }

    // trace_local[store_addr]($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1313:26+29
    assume {:print "$track_local(42,29,2):", $t5} $t5 == $t5;

    // $t7 := exists<0x1::fungible_asset::FungibleStore>($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:17+33
    assume {:print "$at(176,54915,54948)"} true;
    $t7 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t5);

    // if ($t7) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1315:9+40
    assume {:print "$at(176,55004,55044)"} true;
L1:

    // $t8 := get_global<0x1::fungible_asset::FungibleStore>($t5) on_abort goto L10 with $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1315:9+40
    assume {:print "$at(176,55004,55044)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t8 := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t5);
    }
    if ($abort_flag) {
        assume {:print "$at(176,55004,55044)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(42,29):", $t6} $t6 == $t6;
        goto L10;
    }

    // trace_local[fa_store]($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1315:9+40
    assume {:print "$track_local(42,29,3):", $t8} $t8 == $t8;

    // if ($t1) goto L2 else goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:933:13+18
    assume {:print "$at(176,39377,39395)"} true;
    if ($t1) { goto L2; } else { goto L3; }

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:933:13+71
L3:

    // $t9 := true at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:933:13+71
    assume {:print "$at(176,39377,39448)"} true;
    $t9 := true;
    assume $IsValid'bool'($t9);

    // $t4 := $t9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:933:13+71
    $t4 := $t9;

    // trace_local[$t6]($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:933:13+71
    assume {:print "$track_local(42,29,4):", $t9} $t9 == $t9;

    // label L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:932:9+6
    assume {:print "$at(176,39356,39362)"} true;
L8:

    // if ($t4) goto L5 else goto L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:932:9+6
    assume {:print "$at(176,39356,39362)"} true;
    if ($t4) { goto L5; } else { goto L4; }

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:936:18+15
    assume {:print "$at(176,39548,39563)"} true;
L5:

    // $t10 := get_field<0x1::fungible_asset::FungibleStore>.frozen($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:936:18+15
    assume {:print "$at(176,39548,39563)"} true;
    $t10 := $t8->$frozen;

    // if ($t10) goto L6 else goto L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:936:17+16
    if ($t10) { goto L6; } else { goto L7; }

    // label L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:930:53+323
    assume {:print "$at(176,39292,39615)"} true;
L7:

    // goto L9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:930:53+323
    assume {:print "$at(176,39292,39615)"} true;
    goto L9;

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:936:60+16
    assume {:print "$at(176,39590,39606)"} true;
L6:

    // $t11 := 3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:936:60+16
    assume {:print "$at(176,39590,39606)"} true;
    $t11 := 3;
    assume $IsValid'u64'($t11);

    // $t12 := error::permission_denied($t11) on_abort goto L10 with $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:936:35+42
    call $t12 := $1_error_permission_denied($t11);
    if ($abort_flag) {
        assume {:print "$at(176,39565,39607)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(42,29):", $t6} $t6 == $t6;
        goto L10;
    }

    // trace_abort($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:936:9+6
    assume {:print "$at(176,39539,39545)"} true;
    assume {:print "$track_abort(42,29):", $t12} $t12 == $t12;

    // $t6 := move($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:936:9+6
    $t6 := $t12;

    // goto L10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:936:9+6
    goto L10;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:932:9+6
    assume {:print "$at(176,39356,39362)"} true;
L4:

    // $t13 := 28 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:934:37+32
    assume {:print "$at(176,39486,39518)"} true;
    $t13 := 28;
    assume $IsValid'u64'($t13);

    // $t14 := error::invalid_argument($t13) on_abort goto L10 with $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:934:13+57
    call $t14 := $1_error_invalid_argument($t13);
    if ($abort_flag) {
        assume {:print "$at(176,39462,39519)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(42,29):", $t6} $t6 == $t6;
        goto L10;
    }

    // trace_abort($t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:932:9+6
    assume {:print "$at(176,39356,39362)"} true;
    assume {:print "$track_abort(42,29):", $t14} $t14 == $t14;

    // $t6 := move($t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:932:9+6
    $t6 := $t14;

    // goto L10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:932:9+6
    goto L10;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:933:66+17
    assume {:print "$at(176,39430,39447)"} true;
L2:

    // $t15 := get_field<0x1::fungible_asset::FungibleStore>.metadata($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:933:66+17
    assume {:print "$at(176,39430,39447)"} true;
    $t15 := $t8->$metadata;

    // $t16 := fungible_asset::has_deposit_dispatch_function($t15) on_abort goto L10 with $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:933:36+48
    call $t16 := $1_fungible_asset_has_deposit_dispatch_function($t15);
    if ($abort_flag) {
        assume {:print "$at(176,39400,39448)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(42,29):", $t6} $t6 == $t6;
        goto L10;
    }

    // $t17 := !($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:933:35+49
    call $t17 := $Not($t16);

    // $t4 := $t17 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:933:35+49
    $t4 := $t17;

    // trace_local[$t6]($t17) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:933:35+49
    assume {:print "$track_local(42,29,4):", $t17} $t17 == $t17;

    // goto L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:933:35+49
    goto L8;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:69+25
    assume {:print "$at(176,54967,54992)"} true;
L0:

    // $t18 := 23 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:69+25
    assume {:print "$at(176,54967,54992)"} true;
    $t18 := 23;
    assume $IsValid'u64'($t18);

    // $t19 := error::not_found($t18) on_abort goto L10 with $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:52+43
    call $t19 := $1_error_not_found($t18);
    if ($abort_flag) {
        assume {:print "$at(176,54950,54993)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(42,29):", $t6} $t6 == $t6;
        goto L10;
    }

    // trace_abort($t19) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    assume {:print "$at(176,54907,54913)"} true;
    assume {:print "$track_abort(42,29):", $t19} $t19 == $t19;

    // $t6 := move($t19) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    $t6 := $t19;

    // goto L10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    goto L10;

    // label L9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:937:5+1
    assume {:print "$at(176,39614,39615)"} true;
L9:

    // return () at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:937:5+1
    assume {:print "$at(176,39614,39615)"} true;
    return;

    // label L10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:937:5+1
L10:

    // abort($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:937:5+1
    assume {:print "$at(176,39614,39615)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun fungible_asset::deposit_with_ref<0x1::fungible_asset::FungibleStore> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1051:5+390
procedure {:inline 1} $1_fungible_asset_deposit_with_ref'$1_fungible_asset_FungibleStore'(_$t0: $1_fungible_asset_TransferRef, _$t1: $1_object_Object'$1_fungible_asset_FungibleStore', _$t2: $1_fungible_asset_FungibleAsset) returns ()
{
    // declare local variables
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: $1_object_Object'$1_fungible_asset_Metadata';
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t0: $1_fungible_asset_TransferRef;
    var $t1: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t2: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_TransferRef': $1_fungible_asset_TransferRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1051:5+1
    assume {:print "$at(176,43915,43916)"} true;
    assume {:print "$track_local(42,30,0):", $t0} $t0 == $t0;

    // trace_local[store]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1051:5+1
    assume {:print "$track_local(42,30,1):", $t1} $t1 == $t1;

    // trace_local[fa]($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1051:5+1
    assume {:print "$track_local(42,30,2):", $t2} $t2 == $t2;

    // $t3 := get_field<0x1::fungible_asset::TransferRef>.metadata($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1057:13+12
    assume {:print "$at(176,44118,44130)"} true;
    $t3 := $t0->$metadata;

    // $t4 := get_field<0x1::fungible_asset::FungibleAsset>.metadata($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1057:29+11
    $t4 := $t2->$metadata;

    // $t5 := ==($t3, $t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1057:13+27
    $t5 := $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t3, $t4);

    // if ($t5) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1056:9+6
    assume {:print "$at(176,44097,44103)"} true;
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1060:50+6
    assume {:print "$at(176,44286,44292)"} true;
L1:

    // $t6 := object::object_address<#0>($t1) on_abort goto L3 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1060:27+30
    assume {:print "$at(176,44263,44293)"} true;
    call $t6 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t1);
    if ($abort_flag) {
        assume {:print "$at(176,44263,44293)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,30):", $t7} $t7 == $t7;
        goto L3;
    }

    // fungible_asset::unchecked_deposit($t6, $t2) on_abort goto L3 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1060:9+53
    call $1_fungible_asset_unchecked_deposit($t6, $t2);
    if ($abort_flag) {
        assume {:print "$at(176,44245,44298)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,30):", $t7} $t7 == $t7;
        goto L3;
    }

    // goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1055:57+218
    assume {:print "$at(176,44087,44305)"} true;
    goto L2;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1058:37+41
    assume {:print "$at(176,44183,44224)"} true;
L0:

    // $t8 := 2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1058:37+41
    assume {:print "$at(176,44183,44224)"} true;
    $t8 := 2;
    assume $IsValid'u64'($t8);

    // $t9 := error::invalid_argument($t8) on_abort goto L3 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1058:13+66
    call $t9 := $1_error_invalid_argument($t8);
    if ($abort_flag) {
        assume {:print "$at(176,44159,44225)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,30):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_abort($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1056:9+6
    assume {:print "$at(176,44097,44103)"} true;
    assume {:print "$track_abort(42,30):", $t9} $t9 == $t9;

    // $t7 := move($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1056:9+6
    $t7 := $t9;

    // goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1056:9+6
    goto L3;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1061:5+1
    assume {:print "$at(176,44304,44305)"} true;
L2:

    // return () at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1061:5+1
    assume {:print "$at(176,44304,44305)"} true;
    return;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1061:5+1
L3:

    // abort($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1061:5+1
    assume {:print "$at(176,44304,44305)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun fungible_asset::has_balance_dispatch_function [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:734:5+471
procedure {:inline 1} $1_fungible_asset_has_balance_dispatch_function(_$t0: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: bool;
    var $t9: $1_fungible_asset_DispatchFunctionStore;
    var $t10: $1_option_Option'$1_function_info_FunctionInfo';
    var $t11: bool;
    var $t12: bool;
    var $t13: bool;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[metadata]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:734:5+1
    assume {:print "$at(176,31241,31242)"} true;
    assume {:print "$track_local(42,42,0):", $t0} $t0 == $t0;

    // $t4 := object::object_address<0x1::fungible_asset::Metadata>($t0) on_abort goto L7 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:735:29+33
    assume {:print "$at(176,31370,31403)"} true;
    call $t4 := $1_object_object_address'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(176,31370,31403)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,42):", $t5} $t5 == $t5;
        goto L7;
    }

    // trace_local[metadata_addr]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:735:29+33
    assume {:print "$track_local(42,42,1):", $t4} $t4 == $t4;

    // $t6 := 0xa at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:30+21
    assume {:print "$at(176,31482,31503)"} true;
    $t6 := 10;
    assume $IsValid'address'($t6);

    // $t7 := !=($t4, $t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:13+38
    $t7 := !$IsEqual'address'($t4, $t6);

    // if ($t7) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:13+86
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:55+44
L1:

    // $t8 := exists<0x1::fungible_asset::DispatchFunctionStore>($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:55+44
    assume {:print "$at(176,31507,31551)"} true;
    $t8 := $ResourceExists($1_fungible_asset_DispatchFunctionStore_$memory, $t4);

    // $t2 := $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:55+44
    $t2 := $t8;

    // trace_local[$t5]($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:55+44
    assume {:print "$track_local(42,42,2):", $t8} $t8 == $t8;

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:9+245
L5:

    // if ($t2) goto L3 else goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:9+245
    assume {:print "$at(176,31461,31706)"} true;
    if ($t2) { goto L3; } else { goto L2; }

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:738:30+51
    assume {:print "$at(176,31584,31635)"} true;
L3:

    // $t9 := get_global<0x1::fungible_asset::DispatchFunctionStore>($t4) on_abort goto L7 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:738:30+51
    assume {:print "$at(176,31584,31635)"} true;
    if (!$ResourceExists($1_fungible_asset_DispatchFunctionStore_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $ResourceValue($1_fungible_asset_DispatchFunctionStore_$memory, $t4);
    }
    if ($abort_flag) {
        assume {:print "$at(176,31584,31635)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,42):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t10 := get_field<0x1::fungible_asset::DispatchFunctionStore>.derived_balance_function($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:738:29+77
    $t10 := $t9->$derived_balance_function;

    // $t11 := opaque begin: option::is_some<0x1::function_info::FunctionInfo>($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:738:13+94

    // assume WellFormed($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:738:13+94
    assume $IsValid'bool'($t11);

    // assume Eq<bool>($t11, option::spec_is_some<0x1::function_info::FunctionInfo>($t10)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:738:13+94
    assume $IsEqual'bool'($t11, $1_option_spec_is_some'$1_function_info_FunctionInfo'($t10));

    // $t11 := opaque end: option::is_some<0x1::function_info::FunctionInfo>($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:738:13+94

    // $t3 := $t11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:738:13+94
    $t3 := $t11;

    // trace_local[return]($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:738:13+94
    assume {:print "$track_local(42,42,3):", $t11} $t11 == $t11;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:9+245
    assume {:print "$at(176,31461,31706)"} true;
L4:

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:9+245
    assume {:print "$at(176,31461,31706)"} true;
    assume {:print "$track_return(42,42,0):", $t3} $t3 == $t3;

    // goto L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:9+245
    goto L6;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:740:13+5
    assume {:print "$at(176,31691,31696)"} true;
L2:

    // $t12 := false at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:740:13+5
    assume {:print "$at(176,31691,31696)"} true;
    $t12 := false;
    assume $IsValid'bool'($t12);

    // $t3 := $t12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:740:13+5
    $t3 := $t12;

    // trace_local[return]($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:740:13+5
    assume {:print "$track_local(42,42,3):", $t12} $t12 == $t12;

    // goto L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:740:13+5
    goto L4;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:13+86
    assume {:print "$at(176,31465,31551)"} true;
L0:

    // $t13 := false at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:13+86
    assume {:print "$at(176,31465,31551)"} true;
    $t13 := false;
    assume $IsValid'bool'($t13);

    // $t2 := $t13 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:13+86
    $t2 := $t13;

    // trace_local[$t5]($t13) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:13+86
    assume {:print "$track_local(42,42,2):", $t13} $t13 == $t13;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:737:13+86
    goto L5;

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:742:5+1
    assume {:print "$at(176,31711,31712)"} true;
L6:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:742:5+1
    assume {:print "$at(176,31711,31712)"} true;
    $ret0 := $t3;
    return;

    // label L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:742:5+1
L7:

    // abort($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:742:5+1
    assume {:print "$at(176,31711,31712)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::has_deposit_dispatch_function [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:704:5+462
procedure {:inline 1} $1_fungible_asset_has_deposit_dispatch_function(_$t0: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: bool;
    var $t9: $1_fungible_asset_DispatchFunctionStore;
    var $t10: $1_option_Option'$1_function_info_FunctionInfo';
    var $t11: bool;
    var $t12: bool;
    var $t13: bool;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[metadata]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:704:5+1
    assume {:print "$at(176,29836,29837)"} true;
    assume {:print "$track_local(42,43,0):", $t0} $t0 == $t0;

    // $t4 := object::object_address<0x1::fungible_asset::Metadata>($t0) on_abort goto L7 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:705:29+33
    assume {:print "$at(176,29965,29998)"} true;
    call $t4 := $1_object_object_address'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(176,29965,29998)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,43):", $t5} $t5 == $t5;
        goto L7;
    }

    // trace_local[metadata_addr]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:705:29+33
    assume {:print "$track_local(42,43,1):", $t4} $t4 == $t4;

    // $t6 := 0xa at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:29+21
    assume {:print "$at(176,30076,30097)"} true;
    $t6 := 10;
    assume $IsValid'address'($t6);

    // $t7 := !=($t4, $t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:12+38
    $t7 := !$IsEqual'address'($t4, $t6);

    // if ($t7) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:12+86
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:54+44
L1:

    // $t8 := exists<0x1::fungible_asset::DispatchFunctionStore>($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:54+44
    assume {:print "$at(176,30101,30145)"} true;
    $t8 := $ResourceExists($1_fungible_asset_DispatchFunctionStore_$memory, $t4);

    // $t2 := $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:54+44
    $t2 := $t8;

    // trace_local[$t5]($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:54+44
    assume {:print "$track_local(42,43,2):", $t8} $t8 == $t8;

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:9+236
L5:

    // if ($t2) goto L3 else goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:9+236
    assume {:print "$at(176,30056,30292)"} true;
    if ($t2) { goto L3; } else { goto L2; }

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:708:30+51
    assume {:print "$at(176,30178,30229)"} true;
L3:

    // $t9 := get_global<0x1::fungible_asset::DispatchFunctionStore>($t4) on_abort goto L7 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:708:30+51
    assume {:print "$at(176,30178,30229)"} true;
    if (!$ResourceExists($1_fungible_asset_DispatchFunctionStore_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $ResourceValue($1_fungible_asset_DispatchFunctionStore_$memory, $t4);
    }
    if ($abort_flag) {
        assume {:print "$at(176,30178,30229)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,43):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t10 := get_field<0x1::fungible_asset::DispatchFunctionStore>.deposit_function($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:708:29+69
    $t10 := $t9->$deposit_function;

    // $t11 := opaque begin: option::is_some<0x1::function_info::FunctionInfo>($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:708:13+86

    // assume WellFormed($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:708:13+86
    assume $IsValid'bool'($t11);

    // assume Eq<bool>($t11, option::spec_is_some<0x1::function_info::FunctionInfo>($t10)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:708:13+86
    assume $IsEqual'bool'($t11, $1_option_spec_is_some'$1_function_info_FunctionInfo'($t10));

    // $t11 := opaque end: option::is_some<0x1::function_info::FunctionInfo>($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:708:13+86

    // $t3 := $t11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:708:13+86
    $t3 := $t11;

    // trace_local[return]($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:708:13+86
    assume {:print "$track_local(42,43,3):", $t11} $t11 == $t11;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:9+236
    assume {:print "$at(176,30056,30292)"} true;
L4:

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:9+236
    assume {:print "$at(176,30056,30292)"} true;
    assume {:print "$track_return(42,43,0):", $t3} $t3 == $t3;

    // goto L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:9+236
    goto L6;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:710:13+5
    assume {:print "$at(176,30277,30282)"} true;
L2:

    // $t12 := false at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:710:13+5
    assume {:print "$at(176,30277,30282)"} true;
    $t12 := false;
    assume $IsValid'bool'($t12);

    // $t3 := $t12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:710:13+5
    $t3 := $t12;

    // trace_local[return]($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:710:13+5
    assume {:print "$track_local(42,43,3):", $t12} $t12 == $t12;

    // goto L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:710:13+5
    goto L4;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:12+86
    assume {:print "$at(176,30059,30145)"} true;
L0:

    // $t13 := false at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:12+86
    assume {:print "$at(176,30059,30145)"} true;
    $t13 := false;
    assume $IsValid'bool'($t13);

    // $t2 := $t13 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:12+86
    $t2 := $t13;

    // trace_local[$t5]($t13) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:12+86
    assume {:print "$track_local(42,43,2):", $t13} $t13 == $t13;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:707:12+86
    goto L5;

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:712:5+1
    assume {:print "$at(176,30297,30298)"} true;
L6:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:712:5+1
    assume {:print "$at(176,30297,30298)"} true;
    $ret0 := $t3;
    return;

    // label L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:712:5+1
L7:

    // abort($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:712:5+1
    assume {:print "$at(176,30297,30298)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::increase_supply<0x1::fungible_asset::Metadata> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1244:5+1110
procedure {:inline 1} $1_fungible_asset_increase_supply'$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata', _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation ($1_fungible_asset_Supply);
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: $Mutation ($1_fungible_asset_ConcurrentSupply);
    var $t10: $Mutation ($1_aggregator_v2_Aggregator'u128');
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: $Mutation ($1_fungible_asset_Supply);
    var $t17: $1_option_Option'u128';
    var $t18: bool;
    var $t19: $Mutation ($1_option_Option'u128');
    var $t20: $Mutation (int);
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: $Mutation (int);
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $t1: int;
    var $temp_0'$1_fungible_asset_Supply': $1_fungible_asset_Supply;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[metadata]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1244:5+1
    assume {:print "$at(176,52069,52070)"} true;
    assume {:print "$track_local(42,46,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1244:5+1
    assume {:print "$track_local(42,46,1):", $t1} $t1 == $t1;

    // $t4 := 0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1245:23+1
    assume {:print "$at(176,52190,52191)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := ==($t1, $t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1245:13+11
    $t5 := $IsEqual'u64'($t1, $t4);

    // if ($t5) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1245:9+47
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1246:13+6
    assume {:print "$at(176,52207,52213)"} true;
L1:

    // goto L14 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1246:13+6
    assume {:print "$at(176,52207,52213)"} true;
    goto L14;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1248:32+32
    assume {:print "$at(176,52256,52288)"} true;
L0:

    // $t6 := object::object_address<#0>($t0) on_abort goto L15 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1248:32+32
    assume {:print "$at(176,52256,52288)"} true;
    call $t6 := $1_object_object_address'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(176,52256,52288)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_local[metadata_address]($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1248:32+32
    assume {:print "$track_local(42,46,2):", $t6} $t6 == $t6;

    // $t8 := exists<0x1::fungible_asset::ConcurrentSupply>($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1250:13+42
    assume {:print "$at(176,52303,52345)"} true;
    $t8 := $ResourceExists($1_fungible_asset_ConcurrentSupply_$memory, $t6);

    // if ($t8) goto L3 else goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1250:9+874
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1251:26+53
    assume {:print "$at(176,52374,52427)"} true;
L3:

    // $t9 := borrow_global<0x1::fungible_asset::ConcurrentSupply>($t6) on_abort goto L15 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1251:26+53
    assume {:print "$at(176,52374,52427)"} true;
    if (!$ResourceExists($1_fungible_asset_ConcurrentSupply_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(176,52374,52427)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t10 := borrow_field<0x1::fungible_asset::ConcurrentSupply>.current($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1253:40+19
    assume {:print "$at(176,52489,52508)"} true;
    $t10 := $ChildMutation($t9, 0, $Dereference($t9)->$current);

    // $t11 := (u128)($t1) on_abort goto L15 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1253:61+16
    call $t11 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(176,52510,52526)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t12 := aggregator_v2::try_add<u128>($t10, $t11) on_abort goto L15 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1253:17+61
    call $t12,$t10 := $1_aggregator_v2_try_add'u128'($t10, $t11);
    if ($abort_flag) {
        assume {:print "$at(176,52466,52527)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // write_back[Reference($t9).current (0x1::aggregator_v2::Aggregator<u128>)]($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1253:17+61
    $t9 := $UpdateMutation($t9, $Update'$1_fungible_asset_ConcurrentSupply'_current($Dereference($t9), $Dereference($t10)));

    // write_back[0x1::fungible_asset::ConcurrentSupply@]($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1253:17+61
    $1_fungible_asset_ConcurrentSupply_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentSupply_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // if ($t12) goto L5 else goto L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1252:13+6
    assume {:print "$at(176,52441,52447)"} true;
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1252:13+6
L5:

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1244:102+1013
    assume {:print "$at(176,52166,53179)"} true;
L6:

    // goto L14 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1244:102+1013
    assume {:print "$at(176,52166,53179)"} true;
    goto L14;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1254:37+20
    assume {:print "$at(176,52565,52585)"} true;
L4:

    // $t13 := 5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1254:37+20
    assume {:print "$at(176,52565,52585)"} true;
    $t13 := 5;
    assume $IsValid'u64'($t13);

    // $t14 := error::out_of_range($t13) on_abort goto L15 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1254:17+41
    call $t14 := $1_error_out_of_range($t13);
    if ($abort_flag) {
        assume {:print "$at(176,52545,52586)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_abort($t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1252:13+6
    assume {:print "$at(176,52441,52447)"} true;
    assume {:print "$track_abort(42,46):", $t14} $t14 == $t14;

    // $t7 := move($t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1252:13+6
    $t7 := $t14;

    // goto L15 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1252:13+6
    goto L15;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1256:20+32
    assume {:print "$at(176,52621,52653)"} true;
L2:

    // $t15 := exists<0x1::fungible_asset::Supply>($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1256:20+32
    assume {:print "$at(176,52621,52653)"} true;
    $t15 := $ResourceExists($1_fungible_asset_Supply_$memory, $t6);

    // if ($t15) goto L8 else goto L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1256:16+556
    if ($t15) { goto L8; } else { goto L7; }

    // label L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1257:26+43
    assume {:print "$at(176,52682,52725)"} true;
L8:

    // $t16 := borrow_global<0x1::fungible_asset::Supply>($t6) on_abort goto L15 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1257:26+43
    assume {:print "$at(176,52682,52725)"} true;
    if (!$ResourceExists($1_fungible_asset_Supply_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t16 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_fungible_asset_Supply_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(176,52682,52725)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_local[supply]($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1257:26+43
    $temp_0'$1_fungible_asset_Supply' := $Dereference($t16);
    assume {:print "$track_local(42,46,3):", $temp_0'$1_fungible_asset_Supply'} $temp_0'$1_fungible_asset_Supply' == $temp_0'$1_fungible_asset_Supply';

    // $t17 := get_field<0x1::fungible_asset::Supply>.maximum($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1258:33+15
    assume {:print "$at(176,52759,52774)"} true;
    $t17 := $Dereference($t16)->$maximum;

    // $t18 := opaque begin: option::is_some<u128>($t17) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1258:17+32

    // assume WellFormed($t18) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1258:17+32
    assume $IsValid'bool'($t18);

    // assume Eq<bool>($t18, option::spec_is_some<u128>($t17)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1258:17+32
    assume $IsEqual'bool'($t18, $1_option_spec_is_some'u128'($t17));

    // $t18 := opaque end: option::is_some<u128>($t17) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1258:17+32

    // if ($t18) goto L9 else goto L11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1258:13+288
    if ($t18) { goto L9; } else { goto L11; }

    // label L9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1259:47+19
    assume {:print "$at(176,52825,52844)"} true;
L9:

    // $t19 := borrow_field<0x1::fungible_asset::Supply>.maximum($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1259:47+19
    assume {:print "$at(176,52825,52844)"} true;
    $t19 := $ChildMutation($t16, 1, $Dereference($t16)->$maximum);

    // $t20 := option::borrow_mut<u128>($t19) on_abort goto L15 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1259:28+39
    call $t20,$t19 := $1_option_borrow_mut'u128'($t19);
    if ($abort_flag) {
        assume {:print "$at(176,52806,52845)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t21 := read_ref($t20) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1259:27+40
    $t21 := $Dereference($t20);

    // write_back[Reference($t16).maximum (0x1::option::Option<u128>)]($t19) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1259:27+40
    $t16 := $UpdateMutation($t16, $Update'$1_fungible_asset_Supply'_maximum($Dereference($t16), $Dereference($t19)));

    // $t22 := get_field<0x1::fungible_asset::Supply>.current($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1261:27+14
    assume {:print "$at(176,52898,52912)"} true;
    $t22 := $Dereference($t16)->$current;

    // $t23 := -($t21, $t22) on_abort goto L15 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1261:21+20
    call $t23 := $Sub($t21, $t22);
    if ($abort_flag) {
        assume {:print "$at(176,52892,52912)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t24 := (u128)($t1) on_abort goto L15 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1261:45+16
    call $t24 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(176,52916,52932)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t25 := >=($t23, $t24) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1261:21+40
    call $t25 := $Ge($t23, $t24);

    // if ($t25) goto L13 else goto L12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1260:17+6
    assume {:print "$at(176,52863,52869)"} true;
    if ($t25) { goto L13; } else { goto L12; }

    // label L13 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1260:17+6
L13:

    // label L11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1265:30+14
    assume {:print "$at(176,53058,53072)"} true;
L11:

    // $t26 := get_field<0x1::fungible_asset::Supply>.current($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1265:30+14
    assume {:print "$at(176,53058,53072)"} true;
    $t26 := $Dereference($t16)->$current;

    // $t27 := (u128)($t1) on_abort goto L15 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1265:47+16
    call $t27 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(176,53075,53091)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t28 := +($t26, $t27) on_abort goto L15 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1265:30+33
    call $t28 := $AddU128($t26, $t27);
    if ($abort_flag) {
        assume {:print "$at(176,53058,53091)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t29 := borrow_field<0x1::fungible_asset::Supply>.current($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1265:13+14
    $t29 := $ChildMutation($t16, 0, $Dereference($t16)->$current);

    // write_ref($t29, $t28) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1265:13+50
    $t29 := $UpdateMutation($t29, $t28);

    // write_back[Reference($t16).current (u128)]($t29) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1265:13+50
    $t16 := $UpdateMutation($t16, $Update'$1_fungible_asset_Supply'_current($Dereference($t16), $Dereference($t29)));

    // pack_ref_deep($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1265:13+50

    // write_back[0x1::fungible_asset::Supply@]($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1265:13+50
    $1_fungible_asset_Supply_$memory := $ResourceUpdate($1_fungible_asset_Supply_$memory, $GlobalLocationAddress($t16),
        $Dereference($t16));

    // goto L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1265:13+50
    goto L6;

    // label L12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1260:17+6
    assume {:print "$at(176,52863,52869)"} true;
L12:

    // pack_ref_deep($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1260:17+6
    assume {:print "$at(176,52863,52869)"} true;

    // write_back[0x1::fungible_asset::Supply@]($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1260:17+6
    $1_fungible_asset_Supply_$memory := $ResourceUpdate($1_fungible_asset_Supply_$memory, $GlobalLocationAddress($t16),
        $Dereference($t16));

    // drop($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1260:17+6

    // $t30 := 5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1262:41+20
    assume {:print "$at(176,52974,52994)"} true;
    $t30 := 5;
    assume $IsValid'u64'($t30);

    // $t31 := error::out_of_range($t30) on_abort goto L15 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1262:21+41
    call $t31 := $1_error_out_of_range($t30);
    if ($abort_flag) {
        assume {:print "$at(176,52954,52995)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_abort($t31) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1260:17+6
    assume {:print "$at(176,52863,52869)"} true;
    assume {:print "$track_abort(42,46):", $t31} $t31 == $t31;

    // $t7 := move($t31) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1260:17+6
    $t7 := $t31;

    // goto L15 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1260:17+6
    goto L15;

    // label L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1267:36+17
    assume {:print "$at(176,53145,53162)"} true;
L7:

    // $t32 := 21 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1267:36+17
    assume {:print "$at(176,53145,53162)"} true;
    $t32 := 21;
    assume $IsValid'u64'($t32);

    // $t33 := error::not_found($t32) on_abort goto L15 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1267:19+35
    call $t33 := $1_error_not_found($t32);
    if ($abort_flag) {
        assume {:print "$at(176,53128,53163)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_abort($t33) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1267:13+41
    assume {:print "$at(176,53122,53163)"} true;
    assume {:print "$track_abort(42,46):", $t33} $t33 == $t33;

    // $t7 := move($t33) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1267:13+41
    $t7 := $t33;

    // goto L15 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1267:13+41
    goto L15;

    // label L14 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1269:5+1
    assume {:print "$at(176,53178,53179)"} true;
L14:

    // return () at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1269:5+1
    assume {:print "$at(176,53178,53179)"} true;
    return;

    // label L15 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1269:5+1
L15:

    // abort($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1269:5+1
    assume {:print "$at(176,53178,53179)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun fungible_asset::is_frozen<0x1::fungible_asset::FungibleStore> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:681:5+231
procedure {:inline 1} $1_fungible_asset_is_frozen'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore') returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: $1_fungible_asset_FungibleStore;
    var $t7: bool;
    var $t8: bool;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[store]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:681:5+1
    assume {:print "$at(176,28781,28782)"} true;
    assume {:print "$track_local(42,49,0):", $t0} $t0 == $t0;

    // $t3 := object::object_address<#0>($t0) on_abort goto L4 with $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:682:26+30
    assume {:print "$at(176,28884,28914)"} true;
    call $t3 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(176,28884,28914)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(42,49):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_local[store_addr]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:682:26+30
    assume {:print "$track_local(42,49,1):", $t3} $t3 == $t3;

    // $t5 := exists<0x1::fungible_asset::FungibleStore>($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:601:9+28
    assume {:print "$at(176,25481,25509)"} true;
    $t5 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t3);

    // if ($t5) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:683:9+82
    assume {:print "$at(176,28924,29006)"} true;
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:683:44+40
L1:

    // $t6 := get_global<0x1::fungible_asset::FungibleStore>($t3) on_abort goto L4 with $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:683:44+40
    assume {:print "$at(176,28959,28999)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t3);
    }
    if ($abort_flag) {
        assume {:print "$at(176,28959,28999)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(42,49):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t7 := get_field<0x1::fungible_asset::FungibleStore>.frozen($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:683:44+47
    $t7 := $t6->$frozen;

    // $t2 := $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:683:44+47
    $t2 := $t7;

    // trace_local[$t4]($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:683:44+47
    assume {:print "$track_local(42,49,2):", $t7} $t7 == $t7;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:683:9+82
L2:

    // trace_return[0]($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:683:9+82
    assume {:print "$at(176,28924,29006)"} true;
    assume {:print "$track_return(42,49,0):", $t2} $t2 == $t2;

    // goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:683:9+82
    goto L3;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:683:9+82
L0:

    // $t8 := false at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:683:9+82
    assume {:print "$at(176,28924,29006)"} true;
    $t8 := false;
    assume $IsValid'bool'($t8);

    // $t2 := $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:683:9+82
    $t2 := $t8;

    // trace_local[$t4]($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:683:9+82
    assume {:print "$track_local(42,49,2):", $t8} $t8 == $t8;

    // goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:683:9+82
    goto L2;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:684:5+1
    assume {:print "$at(176,29011,29012)"} true;
L3:

    // return $t2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:684:5+1
    assume {:print "$at(176,29011,29012)"} true;
    $ret0 := $t2;
    return;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:684:5+1
L4:

    // abort($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:684:5+1
    assume {:print "$at(176,29011,29012)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun fungible_asset::mint [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:949:5+177
procedure {:inline 1} $1_fungible_asset_mint(_$t0: $1_fungible_asset_MintRef, _$t1: int) returns ($ret0: $1_fungible_asset_FungibleAsset)
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: $1_fungible_asset_FungibleAsset;
    var $t4: int;
    var $t0: $1_fungible_asset_MintRef;
    var $t1: int;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_MintRef': $1_fungible_asset_MintRef;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:949:5+1
    assume {:print "$at(176,40217,40218)"} true;
    assume {:print "$track_local(42,53,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:949:5+1
    assume {:print "$track_local(42,53,1):", $t1} $t1 == $t1;

    // $t2 := get_field<0x1::fungible_asset::MintRef>.metadata($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:950:24+12
    assume {:print "$at(176,40335,40347)"} true;
    $t2 := $t0->$metadata;

    // $t3 := fungible_asset::mint_internal($t2, $t1) on_abort goto L2 with $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:951:9+31
    assume {:print "$at(176,40357,40388)"} true;
    call $t3 := $1_fungible_asset_mint_internal($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(176,40357,40388)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(42,53):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:951:9+31
    assume {:print "$track_return(42,53,0):", $t3} $t3 == $t3;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:952:5+1
    assume {:print "$at(176,40393,40394)"} true;
L1:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:952:5+1
    assume {:print "$at(176,40393,40394)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:952:5+1
L2:

    // abort($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:952:5+1
    assume {:print "$at(176,40393,40394)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun fungible_asset::mint_internal [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:955:5+271
procedure {:inline 1} $1_fungible_asset_mint_internal(_$t0: $1_object_Object'$1_fungible_asset_Metadata', _$t1: int) returns ($ret0: $1_fungible_asset_FungibleAsset)
{
    // declare local variables
    var $t2: int;
    var $t3: $1_fungible_asset_FungibleAsset;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $t1: int;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[metadata]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:955:5+1
    assume {:print "$at(176,40455,40456)"} true;
    assume {:print "$track_local(42,54,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:955:5+1
    assume {:print "$track_local(42,54,1):", $t1} $t1 == $t1;

    // fungible_asset::increase_supply<0x1::fungible_asset::Metadata>($t0, $t1) on_abort goto L2 with $t2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:959:9+34
    assume {:print "$at(176,40610,40644)"} true;
    call $1_fungible_asset_increase_supply'$1_fungible_asset_Metadata'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(176,40610,40644)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(42,54):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack 0x1::fungible_asset::FungibleAsset($t0, $t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:960:9+66
    assume {:print "$at(176,40654,40720)"} true;
    $t3 := $1_fungible_asset_FungibleAsset($t0, $t1);

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:958:56+126
    assume {:print "$at(176,40600,40726)"} true;
    assume {:print "$track_return(42,54,0):", $t3} $t3 == $t3;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:964:5+1
    assume {:print "$at(176,40725,40726)"} true;
L1:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:964:5+1
    assume {:print "$at(176,40725,40726)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:964:5+1
L2:

    // abort($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:964:5+1
    assume {:print "$at(176,40725,40726)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun fungible_asset::set_frozen_flag<0x1::fungible_asset::FungibleStore> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:974:5+345
procedure {:inline 1} $1_fungible_asset_set_frozen_flag'$1_fungible_asset_FungibleStore'(_$t0: $1_fungible_asset_TransferRef, _$t1: $1_object_Object'$1_fungible_asset_FungibleStore', _$t2: bool) returns ()
{
    // declare local variables
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: $1_object_Object'$1_fungible_asset_Metadata';
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t0: $1_fungible_asset_TransferRef;
    var $t1: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t2: bool;
    var $temp_0'$1_fungible_asset_TransferRef': $1_fungible_asset_TransferRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:974:5+1
    assume {:print "$at(176,41212,41213)"} true;
    assume {:print "$track_local(42,63,0):", $t0} $t0 == $t0;

    // trace_local[store]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:974:5+1
    assume {:print "$track_local(42,63,1):", $t1} $t1 == $t1;

    // trace_local[frozen]($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:974:5+1
    assume {:print "$track_local(42,63,2):", $t2} $t2 == $t2;

    // $t3 := get_field<0x1::fungible_asset::TransferRef>.metadata($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:980:13+12
    assume {:print "$at(176,41383,41395)"} true;
    $t3 := $t0->$metadata;

    // $t4 := fungible_asset::store_metadata<#0>($t1) on_abort goto L3 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:980:29+21
    call $t4 := $1_fungible_asset_store_metadata'$1_fungible_asset_FungibleStore'($t1);
    if ($abort_flag) {
        assume {:print "$at(176,41399,41420)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,63):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t6 := ==($t3, $t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:980:13+37
    $t6 := $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t3, $t4);

    // if ($t6) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:979:9+6
    assume {:print "$at(176,41362,41368)"} true;
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:983:34+5
    assume {:print "$at(176,41537,41542)"} true;
L1:

    // fungible_asset::set_frozen_flag_internal<#0>($t1, $t2) on_abort goto L3 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:983:9+39
    assume {:print "$at(176,41512,41551)"} true;
    call $1_fungible_asset_set_frozen_flag_internal'$1_fungible_asset_FungibleStore'($t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(176,41512,41551)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,63):", $t5} $t5 == $t5;
        goto L3;
    }

    // goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:978:30+205
    assume {:print "$at(176,41352,41557)"} true;
    goto L2;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:981:37+32
    assume {:print "$at(176,41458,41490)"} true;
L0:

    // $t7 := 9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:981:37+32
    assume {:print "$at(176,41458,41490)"} true;
    $t7 := 9;
    assume $IsValid'u64'($t7);

    // $t8 := error::invalid_argument($t7) on_abort goto L3 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:981:13+57
    call $t8 := $1_error_invalid_argument($t7);
    if ($abort_flag) {
        assume {:print "$at(176,41434,41491)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,63):", $t5} $t5 == $t5;
        goto L3;
    }

    // trace_abort($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:979:9+6
    assume {:print "$at(176,41362,41368)"} true;
    assume {:print "$track_abort(42,63):", $t8} $t8 == $t8;

    // $t5 := move($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:979:9+6
    $t5 := $t8;

    // goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:979:9+6
    goto L3;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:984:5+1
    assume {:print "$at(176,41556,41557)"} true;
L2:

    // return () at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:984:5+1
    assume {:print "$at(176,41556,41557)"} true;
    return;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:984:5+1
L3:

    // abort($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:984:5+1
    assume {:print "$at(176,41556,41557)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::set_frozen_flag_internal<0x1::fungible_asset::FungibleStore> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:986:5+323
procedure {:inline 1} $1_fungible_asset_set_frozen_flag_internal'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore', _$t1: bool) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation (bool);
    var $t4: int;
    var $t5: int;
    var $t6: $Mutation ($1_fungible_asset_FungibleStore);
    var $t7: $Mutation (bool);
    var $t8: $1_fungible_asset_Frozen;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t1: bool;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[store]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:986:5+1
    assume {:print "$at(176,41563,41564)"} true;
    assume {:print "$track_local(42,64,0):", $t0} $t0 == $t0;

    // trace_local[frozen]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:986:5+1
    assume {:print "$track_local(42,64,1):", $t1} $t1 == $t1;

    // $t4 := object::object_address<#0>($t0) on_abort goto L2 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:990:26+30
    assume {:print "$at(176,41719,41749)"} true;
    call $t4 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(176,41719,41749)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,64):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[store_addr]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:990:26+30
    assume {:print "$track_local(42,64,2):", $t4} $t4 == $t4;

    // $t6 := borrow_global<0x1::fungible_asset::FungibleStore>($t4) on_abort goto L2 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:991:9+44
    assume {:print "$at(176,41759,41803)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $Mutation($Global($t4), EmptyVec(), $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t4));
    }
    if ($abort_flag) {
        assume {:print "$at(176,41759,41803)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(42,64):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t7 := borrow_field<0x1::fungible_asset::FungibleStore>.frozen($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:991:9+51
    $t7 := $ChildMutation($t6, 2, $Dereference($t6)->$frozen);

    // trace_local[$t4]($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:991:9+60
    $temp_0'bool' := $Dereference($t7);
    assume {:print "$track_local(42,64,3):", $temp_0'bool'} $temp_0'bool' == $temp_0'bool';

    // write_ref($t7, $t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:991:9+60
    $t7 := $UpdateMutation($t7, $t1);

    // write_back[Reference($t6).frozen (bool)]($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:991:9+60
    $t6 := $UpdateMutation($t6, $Update'$1_fungible_asset_FungibleStore'_frozen($Dereference($t6), $Dereference($t7)));

    // write_back[0x1::fungible_asset::FungibleStore@]($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:991:9+60
    $1_fungible_asset_FungibleStore_$memory := $ResourceUpdate($1_fungible_asset_FungibleStore_$memory, $GlobalLocationAddress($t6),
        $Dereference($t6));

    // $t8 := pack 0x1::fungible_asset::Frozen($t4, $t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:993:21+36
    assume {:print "$at(176,41842,41878)"} true;
    $t8 := $1_fungible_asset_Frozen($t4, $t1);

    // opaque begin: event::emit<0x1::fungible_asset::Frozen>($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:993:9+49

    // opaque end: event::emit<0x1::fungible_asset::Frozen>($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:993:9+49

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:994:5+1
    assume {:print "$at(176,41885,41886)"} true;
L1:

    // return () at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:994:5+1
    assume {:print "$at(176,41885,41886)"} true;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:994:5+1
L2:

    // abort($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:994:5+1
    assume {:print "$at(176,41885,41886)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::store_exists [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:595:5+88
procedure {:inline 1} $1_fungible_asset_store_exists(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[store]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:595:5+1
    assume {:print "$at(176,25255,25256)"} true;
    assume {:print "$track_local(42,65,0):", $t0} $t0 == $t0;

    // $t1 := exists<0x1::fungible_asset::FungibleStore>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:601:9+28
    assume {:print "$at(176,25481,25509)"} true;
    $t1 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t0);

    // trace_return[0]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:601:9+28
    assume {:print "$track_return(42,65,0):", $t1} $t1 == $t1;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:597:5+1
    assume {:print "$at(176,25342,25343)"} true;
L1:

    // return $t1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:597:5+1
    assume {:print "$at(176,25342,25343)"} true;
    $ret0 := $t1;
    return;

}

// fun fungible_asset::store_metadata<0x1::fungible_asset::FungibleStore> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:617:5+147
procedure {:inline 1} $1_fungible_asset_store_metadata'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore') returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: $1_fungible_asset_FungibleStore;
    var $t6: $1_object_Object'$1_fungible_asset_Metadata';
    var $t7: int;
    var $t8: int;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[store]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:617:5+1
    assume {:print "$at(176,25995,25996)"} true;
    assume {:print "$track_local(42,66,0):", $t0} $t0 == $t0;

    // $t2 := object::object_address<#0>($t0) on_abort goto L3 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1313:26+29
    assume {:print "$at(176,54868,54897)"} true;
    call $t2 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(176,54868,54897)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,66):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_local[store_addr]($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1313:26+29
    assume {:print "$track_local(42,66,1):", $t2} $t2 == $t2;

    // $t4 := exists<0x1::fungible_asset::FungibleStore>($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:17+33
    assume {:print "$at(176,54915,54948)"} true;
    $t4 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t2);

    // if ($t4) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1315:9+40
    assume {:print "$at(176,55004,55044)"} true;
L1:

    // $t5 := get_global<0x1::fungible_asset::FungibleStore>($t2) on_abort goto L3 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1315:9+40
    assume {:print "$at(176,55004,55044)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(176,55004,55044)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,66):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t6 := get_field<0x1::fungible_asset::FungibleStore>.metadata($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:618:9+38
    assume {:print "$at(176,26098,26136)"} true;
    $t6 := $t5->$metadata;

    // trace_return[0]($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:618:9+38
    assume {:print "$track_return(42,66,0):", $t6} $t6 == $t6;

    // goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:618:9+38
    goto L2;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:69+25
    assume {:print "$at(176,54967,54992)"} true;
L0:

    // $t7 := 23 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:69+25
    assume {:print "$at(176,54967,54992)"} true;
    $t7 := 23;
    assume $IsValid'u64'($t7);

    // $t8 := error::not_found($t7) on_abort goto L3 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:52+43
    call $t8 := $1_error_not_found($t7);
    if ($abort_flag) {
        assume {:print "$at(176,54950,54993)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,66):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_abort($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    assume {:print "$at(176,54907,54913)"} true;
    assume {:print "$track_abort(42,66):", $t8} $t8 == $t8;

    // $t3 := move($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    $t3 := $t8;

    // goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1314:9+6
    goto L3;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:619:5+1
    assume {:print "$at(176,26141,26142)"} true;
L2:

    // return $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:619:5+1
    assume {:print "$at(176,26141,26142)"} true;
    $ret0 := $t6;
    return;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:619:5+1
L3:

    // abort($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:619:5+1
    assume {:print "$at(176,26141,26142)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::unchecked_deposit [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1190:5+335
procedure {:inline 1} $1_fungible_asset_unchecked_deposit(_$t0: int, _$t1: $1_fungible_asset_FungibleAsset) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $1_object_Object'$1_fungible_asset_Metadata';
    var $t5: $Mutation ($1_fungible_asset_FungibleStore);
    var $t6: bool;
    var $t7: int;
    var $t8: $1_object_Object'$1_fungible_asset_Metadata';
    var $t9: int;
    var $t10: bool;
    var $t11: $Mutation ($1_fungible_asset_FungibleStore);
    var $t12: int;
    var $t13: $1_object_Object'$1_fungible_asset_Metadata';
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: $Mutation ($1_fungible_asset_ConcurrentFungibleBalance);
    var $t22: $Mutation ($1_aggregator_v2_Aggregator'u64');
    var $t23: int;
    var $t24: bool;
    var $t25: $1_fungible_asset_Deposit;
    var $t26: int;
    var $t27: int;
    var $t28: $Mutation (int);
    var $t29: bool;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t0: int;
    var $t1: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleStore': $1_fungible_asset_FungibleStore;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[store_addr]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1190:5+1
    assume {:print "$at(176,49862,49863)"} true;
    assume {:print "$track_local(42,71,0):", $t0} $t0 == $t0;

    // trace_local[fa]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1190:5+1
    assume {:print "$track_local(42,71,1):", $t1} $t1 == $t1;

    // trace_local[store_addr]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1170:16+39
    assume {:print "$at(176,48957,48996)"} true;
    assume {:print "$track_local(42,71,2):", $t0} $t0 == $t0;

    // ($t8, $t9) := unpack 0x1::fungible_asset::FungibleAsset($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1174:13+34
    assume {:print "$at(176,49128,49162)"} true;
    $t8 := $t1->$metadata;
    $t9 := $t1->$amount;

    // trace_local[amount]($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1174:13+34
    assume {:print "$track_local(42,71,3):", $t9} $t9 == $t9;

    // trace_local[metadata]($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1174:13+34
    assume {:print "$track_local(42,71,4):", $t8} $t8 == $t8;

    // $t10 := exists<0x1::fungible_asset::FungibleStore>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1175:17+33
    assume {:print "$at(176,49185,49218)"} true;
    $t10 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t0);

    // if ($t10) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1175:9+6
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1176:21+44
    assume {:print "$at(176,49286,49330)"} true;
L1:

    // $t11 := borrow_global<0x1::fungible_asset::FungibleStore>($t0) on_abort goto L16 with $t12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1176:21+44
    assume {:print "$at(176,49286,49330)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(176,49286,49330)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(42,71):", $t12} $t12 == $t12;
        goto L16;
    }

    // trace_local[store]($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1176:21+44
    $temp_0'$1_fungible_asset_FungibleStore' := $Dereference($t11);
    assume {:print "$track_local(42,71,5):", $temp_0'$1_fungible_asset_FungibleStore'} $temp_0'$1_fungible_asset_FungibleStore' == $temp_0'$1_fungible_asset_FungibleStore';

    // $t13 := get_field<0x1::fungible_asset::FungibleStore>.metadata($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1177:29+14
    assume {:print "$at(176,49360,49374)"} true;
    $t13 := $Dereference($t11)->$metadata;

    // $t14 := ==($t8, $t13) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1177:17+26
    $t14 := $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t8, $t13);

    // if ($t14) goto L3 else goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1177:9+6
    if ($t14) { goto L3; } else { goto L2; }

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1179:13+6
    assume {:print "$at(176,49451,49457)"} true;
L3:

    // $t15 := 0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1179:23+1
    assume {:print "$at(176,49461,49462)"} true;
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // $t16 := !=($t9, $t15) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1179:13+11
    $t16 := !$IsEqual'u64'($t9, $t15);

    // if ($t16) goto L5 else goto L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1179:9+387
    if ($t16) { goto L5; } else { goto L4; }

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1180:17+13
    assume {:print "$at(176,49482,49495)"} true;
L5:

    // $t17 := get_field<0x1::fungible_asset::FungibleStore>.balance($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1180:17+13
    assume {:print "$at(176,49482,49495)"} true;
    $t17 := $Dereference($t11)->$balance;

    // $t18 := 0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1180:34+1
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // $t19 := ==($t17, $t18) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1180:17+18
    $t19 := $IsEqual'u64'($t17, $t18);

    // if ($t19) goto L7 else goto L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1180:17+75
    if ($t19) { goto L7; } else { goto L6; }

    // label L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:606:16+41
    assume {:print "$at(176,25662,25703)"} true;
L7:

    // $t20 := exists<0x1::fungible_asset::ConcurrentFungibleBalance>($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:607:9+40
    assume {:print "$at(176,25736,25776)"} true;
    $t20 := $ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0);

    // $t6 := $t20 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:607:9+40
    $t6 := $t20;

    // trace_local[$t7]($t20) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:607:9+40
    assume {:print "$track_local(42,71,6):", $t20} $t20 == $t20;

    // label L14 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1180:13+345
    assume {:print "$at(176,49478,49823)"} true;
L14:

    // if ($t6) goto L9 else goto L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1180:13+345
    assume {:print "$at(176,49478,49823)"} true;
    if ($t6) { goto L9; } else { goto L8; }

    // label L9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1180:94+187
L9:

    // drop($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1180:94+187
    assume {:print "$at(176,49559,49746)"} true;

    // $t21 := borrow_global<0x1::fungible_asset::ConcurrentFungibleBalance>($t0) on_abort goto L16 with $t12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1181:40+56
    assume {:print "$at(176,49600,49656)"} true;
    if (!$ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t21 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(176,49600,49656)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(42,71):", $t12} $t12 == $t12;
        goto L16;
    }

    // $t22 := borrow_field<0x1::fungible_asset::ConcurrentFungibleBalance>.balance($t21) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1182:36+29
    assume {:print "$at(176,49693,49722)"} true;
    $t22 := $ChildMutation($t21, 0, $Dereference($t21)->$balance);

    // aggregator_v2::add<u64>($t22, $t9) on_abort goto L16 with $t12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1182:17+57
    call $t22 := $1_aggregator_v2_add'u64'($t22, $t9);
    if ($abort_flag) {
        assume {:print "$at(176,49674,49731)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(42,71):", $t12} $t12 == $t12;
        goto L16;
    }

    // write_back[Reference($t21).balance (0x1::aggregator_v2::Aggregator<u64>)]($t22) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1182:17+57
    $t21 := $UpdateMutation($t21, $Update'$1_fungible_asset_ConcurrentFungibleBalance'_balance($Dereference($t21), $Dereference($t22)));

    // write_back[0x1::fungible_asset::ConcurrentFungibleBalance@]($t21) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1182:17+57
    $1_fungible_asset_ConcurrentFungibleBalance_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentFungibleBalance_$memory, $GlobalLocationAddress($t21),
        $Dereference($t21));

    // label L13 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1187:9+6
    assume {:print "$at(176,49844,49850)"} true;
L13:

    // trace_local[$t18]($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1187:9+6
    assume {:print "$at(176,49844,49850)"} true;
    assume {:print "$track_local(42,71,7):", $t9} $t9 == $t9;

    // $t23 := 0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1195:23+1
    assume {:print "$at(176,50113,50114)"} true;
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := !=($t9, $t23) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1195:13+11
    $t24 := !$IsEqual'u64'($t9, $t23);

    // if ($t24) goto L10 else goto L12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1195:9+92
    if ($t24) { goto L10; } else { goto L12; }

    // label L10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1196:42+10
    assume {:print "$at(176,50159,50169)"} true;
L10:

    // $t25 := pack 0x1::fungible_asset::Deposit($t0, $t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1196:25+37
    assume {:print "$at(176,50142,50179)"} true;
    $t25 := $1_fungible_asset_Deposit($t0, $t9);

    // opaque begin: event::emit<0x1::fungible_asset::Deposit>($t25) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1196:13+50

    // opaque end: event::emit<0x1::fungible_asset::Deposit>($t25) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1196:13+50

    // label L12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1195:9+92
    assume {:print "$at(176,50099,50191)"} true;
L12:

    // goto L15 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1195:9+92
    assume {:print "$at(176,50099,50191)"} true;
    goto L15;

    // label L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1184:33+13
    assume {:print "$at(176,49786,49799)"} true;
L8:

    // $t26 := get_field<0x1::fungible_asset::FungibleStore>.balance($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1184:33+13
    assume {:print "$at(176,49786,49799)"} true;
    $t26 := $Dereference($t11)->$balance;

    // $t27 := +($t26, $t9) on_abort goto L16 with $t12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1184:33+22
    call $t27 := $AddU64($t26, $t9);
    if ($abort_flag) {
        assume {:print "$at(176,49786,49808)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(42,71):", $t12} $t12 == $t12;
        goto L16;
    }

    // $t28 := borrow_field<0x1::fungible_asset::FungibleStore>.balance($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1184:17+13
    $t28 := $ChildMutation($t11, 1, $Dereference($t11)->$balance);

    // write_ref($t28, $t27) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1184:17+38
    $t28 := $UpdateMutation($t28, $t27);

    // write_back[Reference($t11).balance (u64)]($t28) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1184:17+38
    $t11 := $UpdateMutation($t11, $Update'$1_fungible_asset_FungibleStore'_balance($Dereference($t11), $Dereference($t28)));

    // write_back[0x1::fungible_asset::FungibleStore@]($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1184:17+38
    $1_fungible_asset_FungibleStore_$memory := $ResourceUpdate($1_fungible_asset_FungibleStore_$memory, $GlobalLocationAddress($t11),
        $Dereference($t11));

    // goto L13 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1184:17+38
    goto L13;

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1180:17+75
    assume {:print "$at(176,49482,49557)"} true;
L6:

    // $t29 := false at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1180:17+75
    assume {:print "$at(176,49482,49557)"} true;
    $t29 := false;
    assume $IsValid'bool'($t29);

    // $t6 := $t29 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1180:17+75
    $t6 := $t29;

    // trace_local[$t7]($t29) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1180:17+75
    assume {:print "$track_local(42,71,6):", $t29} $t29 == $t29;

    // goto L14 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1180:17+75
    goto L14;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1179:9+387
    assume {:print "$at(176,49447,49834)"} true;
L4:

    // drop($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1179:9+387
    assume {:print "$at(176,49447,49834)"} true;

    // goto L13 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1179:9+387
    goto L13;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1177:9+6
    assume {:print "$at(176,49340,49346)"} true;
L2:

    // drop($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1177:9+6
    assume {:print "$at(176,49340,49346)"} true;

    // $t30 := 11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1177:69+34
    $t30 := 11;
    assume $IsValid'u64'($t30);

    // $t31 := error::invalid_argument($t30) on_abort goto L16 with $t12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1177:45+59
    call $t31 := $1_error_invalid_argument($t30);
    if ($abort_flag) {
        assume {:print "$at(176,49376,49435)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(42,71):", $t12} $t12 == $t12;
        goto L16;
    }

    // trace_abort($t31) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1177:9+6
    assume {:print "$at(176,49340,49346)"} true;
    assume {:print "$track_abort(42,71):", $t31} $t31 == $t31;

    // $t12 := move($t31) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1177:9+6
    $t12 := $t31;

    // goto L16 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1177:9+6
    goto L16;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1175:69+25
    assume {:print "$at(176,49237,49262)"} true;
L0:

    // $t32 := 23 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1175:69+25
    assume {:print "$at(176,49237,49262)"} true;
    $t32 := 23;
    assume $IsValid'u64'($t32);

    // $t33 := error::not_found($t32) on_abort goto L16 with $t12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1175:52+43
    call $t33 := $1_error_not_found($t32);
    if ($abort_flag) {
        assume {:print "$at(176,49220,49263)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(42,71):", $t12} $t12 == $t12;
        goto L16;
    }

    // trace_abort($t33) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1175:9+6
    assume {:print "$at(176,49177,49183)"} true;
    assume {:print "$track_abort(42,71):", $t33} $t33 == $t33;

    // $t12 := move($t33) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1175:9+6
    $t12 := $t33;

    // goto L16 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1175:9+6
    goto L16;

    // label L15 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1198:5+1
    assume {:print "$at(176,50196,50197)"} true;
L15:

    // return () at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1198:5+1
    assume {:print "$at(176,50196,50197)"} true;
    return;

    // label L16 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1198:5+1
L16:

    // abort($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/fungible_asset.move:1198:5+1
    assume {:print "$at(176,50196,50197)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// struct dispatchable_fungible_asset::TransferRefStore at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:36:5+73
datatype $1_dispatchable_fungible_asset_TransferRefStore {
    $1_dispatchable_fungible_asset_TransferRefStore($transfer_ref: $1_fungible_asset_TransferRef)
}
function {:inline} $Update'$1_dispatchable_fungible_asset_TransferRefStore'_transfer_ref(s: $1_dispatchable_fungible_asset_TransferRefStore, x: $1_fungible_asset_TransferRef): $1_dispatchable_fungible_asset_TransferRefStore {
    $1_dispatchable_fungible_asset_TransferRefStore(x)
}
function $IsValid'$1_dispatchable_fungible_asset_TransferRefStore'(s: $1_dispatchable_fungible_asset_TransferRefStore): bool {
    $IsValid'$1_fungible_asset_TransferRef'(s->$transfer_ref)
}
function {:inline} $IsEqual'$1_dispatchable_fungible_asset_TransferRefStore'(s1: $1_dispatchable_fungible_asset_TransferRefStore, s2: $1_dispatchable_fungible_asset_TransferRefStore): bool {
    s1 == s2
}
var $1_dispatchable_fungible_asset_TransferRefStore_$memory: $Memory $1_dispatchable_fungible_asset_TransferRefStore;

// fun dispatchable_fungible_asset::deposit<0x1::fungible_asset::FungibleStore> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:107:5+795
procedure {:inline 1} $1_dispatchable_fungible_asset_deposit'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore', _$t1: $1_fungible_asset_FungibleAsset) returns ()
{
    // declare local variables
    var $t2: $1_option_Option'$1_function_info_FunctionInfo';
    var $t3: $1_function_info_FunctionInfo;
    var $t4: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t5: $1_fungible_asset_FungibleAsset;
    var $t6: $1_object_Object'$1_fungible_asset_Metadata';
    var $t7: int;
    var $t8: $1_fungible_asset_TransferRef;
    var $t9: bool;
    var $t10: int;
    var $t11: $1_option_Option'$1_function_info_FunctionInfo';
    var $t12: bool;
    var $t13: bool;
    var $t14: $1_function_info_FunctionInfo;
    var $t15: bool;
    var $t16: bool;
    var $t17: $1_object_Object'$1_fungible_asset_Metadata';
    var $t18: int;
    var $t19: bool;
    var $t20: $1_dispatchable_fungible_asset_TransferRefStore;
    var $t21: $1_fungible_asset_TransferRef;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t1: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_function_info_FunctionInfo': $1_function_info_FunctionInfo;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_TransferRef': $1_fungible_asset_TransferRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_option_Option'$1_function_info_FunctionInfo'': $1_option_Option'$1_function_info_FunctionInfo';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[store]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:107:5+1
    assume {:print "$at(168,4424,4425)"} true;
    assume {:print "$track_local(43,1,0):", $t0} $t0 == $t0;

    // trace_local[fa]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:107:5+1
    assume {:print "$track_local(43,1,1):", $t1} $t1 == $t1;

    // $t9 := false at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:108:53+5
    assume {:print "$at(168,4568,4573)"} true;
    $t9 := false;
    assume $IsValid'bool'($t9);

    // fungible_asset::deposit_sanity_check<#0>($t0, $t9) on_abort goto L8 with $t10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:108:9+50
    call $1_fungible_asset_deposit_sanity_check'$1_fungible_asset_FungibleStore'($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(168,4524,4574)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(43,1):", $t10} $t10 == $t10;
        goto L8;
    }

    // $t11 := fungible_asset::deposit_dispatch_function<#0>($t0) on_abort goto L8 with $t10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:109:24+48
    assume {:print "$at(168,4599,4647)"} true;
    call $t11 := $1_fungible_asset_deposit_dispatch_function'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(168,4599,4647)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(43,1):", $t10} $t10 == $t10;
        goto L8;
    }

    // trace_local[func_opt]($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:109:24+48
    assume {:print "$track_local(43,1,2):", $t11} $t11 == $t11;

    // $t12 := opaque begin: option::is_some<0x1::function_info::FunctionInfo>($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:110:13+26
    assume {:print "$at(168,4661,4687)"} true;

    // assume WellFormed($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:110:13+26
    assume $IsValid'bool'($t12);

    // assume Eq<bool>($t12, option::spec_is_some<0x1::function_info::FunctionInfo>($t11)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:110:13+26
    assume $IsEqual'bool'($t12, $1_option_spec_is_some'$1_function_info_FunctionInfo'($t11));

    // $t12 := opaque end: option::is_some<0x1::function_info::FunctionInfo>($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:110:13+26

    // if ($t12) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:110:9+556
    if ($t12) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:112:17+47
    assume {:print "$at(168,4728,4775)"} true;
L1:

    // $t13 := features::dispatchable_fungible_asset_enabled() on_abort goto L8 with $t10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:112:17+47
    assume {:print "$at(168,4728,4775)"} true;
    call $t13 := $1_features_dispatchable_fungible_asset_enabled();
    if ($abort_flag) {
        assume {:print "$at(168,4728,4775)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(43,1):", $t10} $t10 == $t10;
        goto L8;
    }

    // if ($t13) goto L3 else goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:111:13+6
    assume {:print "$at(168,4703,4709)"} true;
    if ($t13) { goto L3; } else { goto L2; }

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:115:39+9
    assume {:print "$at(168,4877,4886)"} true;
L3:

    // $t14 := opaque begin: option::borrow<0x1::function_info::FunctionInfo>($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:115:24+25
    assume {:print "$at(168,4862,4887)"} true;

    // assume Identical($t15, option::spec_is_none<0x1::function_info::FunctionInfo>($t11)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:115:24+25
    assume ($t15 == $1_option_spec_is_none'$1_function_info_FunctionInfo'($t11));

    // if ($t15) goto L10 else goto L9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:115:24+25
    if ($t15) { goto L10; } else { goto L9; }

    // label L10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:115:24+25
L10:

    // assume And(option::spec_is_none<0x1::function_info::FunctionInfo>($t11), Eq(262145, $t10)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:115:24+25
    assume {:print "$at(168,4862,4887)"} true;
    assume ($1_option_spec_is_none'$1_function_info_FunctionInfo'($t11) && $IsEqual'num'(262145, $t10));

    // trace_abort($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:115:24+25
    assume {:print "$at(168,4862,4887)"} true;
    assume {:print "$track_abort(43,1):", $t10} $t10 == $t10;

    // goto L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:115:24+25
    goto L8;

    // label L9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:115:24+25
L9:

    // assume WellFormed($t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:115:24+25
    assume {:print "$at(168,4862,4887)"} true;
    assume $IsValid'$1_function_info_FunctionInfo'($t14);

    // assume Eq<0x1::function_info::FunctionInfo>($t14, option::spec_borrow<0x1::function_info::FunctionInfo>($t11)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:115:24+25
    assume $IsEqual'$1_function_info_FunctionInfo'($t14, $1_option_spec_borrow'$1_function_info_FunctionInfo'($t11));

    // $t14 := opaque end: option::borrow<0x1::function_info::FunctionInfo>($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:115:24+25

    // trace_local[func]($t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:115:24+25
    assume {:print "$track_local(43,1,3):", $t14} $t14 == $t14;

    // opaque begin: function_info::load_module_from_function($t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:116:13+46
    assume {:print "$at(168,4901,4947)"} true;

    // $t16 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:116:13+46
    havoc $t16;

    // if ($t16) goto L12 else goto L11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:116:13+46
    if ($t16) { goto L12; } else { goto L11; }

    // label L12 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:116:13+46
L12:

    // trace_abort($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:116:13+46
    assume {:print "$at(168,4901,4947)"} true;
    assume {:print "$track_abort(43,1):", $t10} $t10 == $t10;

    // goto L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:116:13+46
    goto L8;

    // label L11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:116:13+46
L11:

    // opaque end: function_info::load_module_from_function($t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:116:13+46
    assume {:print "$at(168,4901,4947)"} true;

    // trace_local[$t2]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:118:17+5
    assume {:print "$at(168,4999,5004)"} true;
    assume {:print "$track_local(43,1,4):", $t0} $t0 == $t0;

    // trace_local[$t13]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:119:17+2
    assume {:print "$at(168,5022,5024)"} true;
    assume {:print "$track_local(43,1,5):", $t1} $t1 == $t1;

    // $t17 := fungible_asset::store_metadata<#0>($t0) on_abort goto L8 with $t10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:216:14+40
    assume {:print "$at(168,8928,8968)"} true;
    call $t17 := $1_fungible_asset_store_metadata'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(168,8928,8968)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(43,1):", $t10} $t10 == $t10;
        goto L8;
    }

    // trace_local[$t18]($t17) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:216:14+40
    assume {:print "$track_local(43,1,6):", $t17} $t17 == $t17;

    // $t18 := object::object_address<0x1::fungible_asset::Metadata>($t17) on_abort goto L8 with $t10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:215:29+87
    assume {:print "$at(168,8891,8978)"} true;
    call $t18 := $1_object_object_address'$1_fungible_asset_Metadata'($t17);
    if ($abort_flag) {
        assume {:print "$at(168,8891,8978)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(43,1):", $t10} $t10 == $t10;
        goto L8;
    }

    // trace_local[metadata_addr]($t18) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:215:29+87
    assume {:print "$track_local(43,1,7):", $t18} $t18 == $t18;

    // $t19 := exists<0x1::dispatchable_fungible_asset::TransferRefStore>($t18) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:219:13+39
    assume {:print "$at(168,9009,9048)"} true;
    $t19 := $ResourceExists($1_dispatchable_fungible_asset_TransferRefStore_$memory, $t18);

    // if ($t19) goto L5 else goto L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:218:9+6
    assume {:print "$at(168,8988,8994)"} true;
    if ($t19) { goto L5; } else { goto L4; }

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:222:10+46
    assume {:print "$at(168,9117,9163)"} true;
L5:

    // $t20 := get_global<0x1::dispatchable_fungible_asset::TransferRefStore>($t18) on_abort goto L8 with $t10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:222:10+46
    assume {:print "$at(168,9117,9163)"} true;
    if (!$ResourceExists($1_dispatchable_fungible_asset_TransferRefStore_$memory, $t18)) {
        call $ExecFailureAbort();
    } else {
        $t20 := $ResourceValue($1_dispatchable_fungible_asset_TransferRefStore_$memory, $t18);
    }
    if ($abort_flag) {
        assume {:print "$at(168,9117,9163)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(43,1):", $t10} $t10 == $t10;
        goto L8;
    }

    // $t21 := get_field<0x1::dispatchable_fungible_asset::TransferRefStore>.transfer_ref($t20) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:222:9+60
    $t21 := $t20->$transfer_ref;

    // trace_local[$t14]($t21) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:117:13+143
    assume {:print "$at(168,4961,5104)"} true;
    assume {:print "$track_local(43,1,8):", $t21} $t21 == $t21;

    // opaque begin: dispatchable_fungible_asset::dispatchable_deposit<#0>($t0, $t1, $t21, $t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:117:13+143

    // $t22 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:117:13+143
    havoc $t22;

    // if ($t22) goto L14 else goto L13 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:117:13+143
    if ($t22) { goto L14; } else { goto L13; }

    // label L14 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:117:13+143
L14:

    // trace_abort($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:117:13+143
    assume {:print "$at(168,4961,5104)"} true;
    assume {:print "$track_abort(43,1):", $t10} $t10 == $t10;

    // goto L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:117:13+143
    goto L8;

    // label L13 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:117:13+143
L13:

    // opaque end: dispatchable_fungible_asset::dispatchable_deposit<#0>($t0, $t1, $t21, $t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:117:13+143
    assume {:print "$at(168,4961,5104)"} true;

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:107:95+705
    assume {:print "$at(168,4514,5219)"} true;
L6:

    // goto L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:107:95+705
    assume {:print "$at(168,4514,5219)"} true;
    goto L7;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:218:9+6
    assume {:print "$at(168,8988,8994)"} true;
L4:

    // $t23 := 1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:220:30+16
    assume {:print "$at(168,9079,9095)"} true;
    $t23 := 1;
    assume $IsValid'u64'($t23);

    // $t24 := error::not_found($t23) on_abort goto L8 with $t10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:220:13+34
    call $t24 := $1_error_not_found($t23);
    if ($abort_flag) {
        assume {:print "$at(168,9062,9096)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(43,1):", $t10} $t10 == $t10;
        goto L8;
    }

    // trace_abort($t24) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:218:9+6
    assume {:print "$at(168,8988,8994)"} true;
    assume {:print "$track_abort(43,1):", $t24} $t24 == $t24;

    // $t10 := move($t24) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:218:9+6
    $t10 := $t24;

    // goto L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:218:9+6
    goto L8;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:113:32+14
    assume {:print "$at(168,4808,4822)"} true;
L2:

    // $t25 := 3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:113:32+14
    assume {:print "$at(168,4808,4822)"} true;
    $t25 := 3;
    assume $IsValid'u64'($t25);

    // $t26 := error::aborted($t25) on_abort goto L8 with $t10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:113:17+30
    call $t26 := $1_error_aborted($t25);
    if ($abort_flag) {
        assume {:print "$at(168,4793,4823)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(43,1):", $t10} $t10 == $t10;
        goto L8;
    }

    // trace_abort($t26) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:111:13+6
    assume {:print "$at(168,4703,4709)"} true;
    assume {:print "$track_abort(43,1):", $t26} $t26 == $t26;

    // $t10 := move($t26) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:111:13+6
    $t10 := $t26;

    // goto L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:111:13+6
    goto L8;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:124:70+6
    assume {:print "$at(168,5191,5197)"} true;
L0:

    // $t27 := object::object_address<#0>($t0) on_abort goto L8 with $t10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:124:47+30
    assume {:print "$at(168,5168,5198)"} true;
    call $t27 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(168,5168,5198)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(43,1):", $t10} $t10 == $t10;
        goto L8;
    }

    // fungible_asset::unchecked_deposit($t27, $t1) on_abort goto L8 with $t10 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:124:13+69
    call $1_fungible_asset_unchecked_deposit($t27, $t1);
    if ($abort_flag) {
        assume {:print "$at(168,5134,5203)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(43,1):", $t10} $t10 == $t10;
        goto L8;
    }

    // goto L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:124:13+69
    goto L6;

    // label L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:126:5+1
    assume {:print "$at(168,5218,5219)"} true;
L7:

    // return () at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:126:5+1
    assume {:print "$at(168,5218,5219)"} true;
    return;

    // label L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:126:5+1
L8:

    // abort($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/dispatchable_fungible_asset.move:126:5+1
    assume {:print "$at(168,5218,5219)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// struct primary_fungible_store::DeriveRefPod at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:30:5+75
datatype $1_primary_fungible_store_DeriveRefPod {
    $1_primary_fungible_store_DeriveRefPod($metadata_derive_ref: $1_object_DeriveRef)
}
function {:inline} $Update'$1_primary_fungible_store_DeriveRefPod'_metadata_derive_ref(s: $1_primary_fungible_store_DeriveRefPod, x: $1_object_DeriveRef): $1_primary_fungible_store_DeriveRefPod {
    $1_primary_fungible_store_DeriveRefPod(x)
}
function $IsValid'$1_primary_fungible_store_DeriveRefPod'(s: $1_primary_fungible_store_DeriveRefPod): bool {
    $IsValid'$1_object_DeriveRef'(s->$metadata_derive_ref)
}
function {:inline} $IsEqual'$1_primary_fungible_store_DeriveRefPod'(s1: $1_primary_fungible_store_DeriveRefPod, s2: $1_primary_fungible_store_DeriveRefPod): bool {
    s1 == s2
}
var $1_primary_fungible_store_DeriveRefPod_$memory: $Memory $1_primary_fungible_store_DeriveRefPod;

// fun primary_fungible_store::create_primary_store<0x1::fungible_asset::Metadata> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:75:5+746
procedure {:inline 1} $1_primary_fungible_store_create_primary_store'$1_fungible_asset_Metadata'(_$t0: int, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t2: int;
    var $t3: $1_object_DeriveRef;
    var $t4: $1_object_ConstructorRef;
    var $t5: $1_object_ConstructorRef;
    var $t6: $1_object_TransferRef;
    var $t7: int;
    var $t8: int;
    var $t9: $1_object_Object'$1_fungible_asset_Metadata';
    var $t10: $1_primary_fungible_store_DeriveRefPod;
    var $t11: $1_object_DeriveRef;
    var $t12: int;
    var $t13: $1_object_ConstructorRef;
    var $t14: $1_object_TransferRef;
    var $t15: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t0: int;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_DeriveRef': $1_object_DeriveRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_TransferRef': $1_object_TransferRef;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner_addr]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:75:5+1
    assume {:print "$at(197,3507,3508)"} true;
    assume {:print "$track_local(44,14,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:75:5+1
    assume {:print "$track_local(44,14,1):", $t1} $t1 == $t1;

    // $t7 := object::object_address<#0>($t1) on_abort goto L2 with $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:79:29+33
    assume {:print "$at(197,3687,3720)"} true;
    call $t7 := $1_object_object_address'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(197,3687,3720)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(44,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[metadata_addr]($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:79:29+33
    assume {:print "$track_local(44,14,2):", $t7} $t7 == $t7;

    // $t9 := object::address_to_object<0x1::fungible_asset::Metadata>($t7) on_abort goto L2 with $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:80:9+50
    assume {:print "$at(197,3730,3780)"} true;
    call $t9 := $1_object_address_to_object'$1_fungible_asset_Metadata'($t7);
    if ($abort_flag) {
        assume {:print "$at(197,3730,3780)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(44,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // drop($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:80:9+50

    // $t10 := get_global<0x1::primary_fungible_store::DeriveRefPod>($t7) on_abort goto L2 with $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:81:27+42
    assume {:print "$at(197,3808,3850)"} true;
    if (!$ResourceExists($1_primary_fungible_store_DeriveRefPod_$memory, $t7)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(197,3808,3850)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(44,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t11 := get_field<0x1::primary_fungible_store::DeriveRefPod>.metadata_derive_ref($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:81:26+63
    $t11 := $t10->$metadata_derive_ref;

    // trace_local[derive_ref]($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:81:26+63
    assume {:print "$track_local(44,14,3):", $t11} $t11 == $t11;

    // assume Identical($t12, object::spec_create_user_derived_object_address($t0, select object::DeriveRef.self<0x1::object::DeriveRef>($t11))) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/object.spec.move:184:9+89
    assume {:print "$at(193,7837,7926)"} true;
    assume ($t12 == $1_object_spec_create_user_derived_object_address($t0, $t11->$self));

    // $t13 := object::create_user_derived_object($t0, $t11) on_abort goto L2 with $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:82:32+58
    assume {:print "$at(197,3903,3961)"} true;
    call $t13 := $1_object_create_user_derived_object($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(197,3903,3961)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(44,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[$t9]($t13) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:82:32+58
    assume {:print "$track_local(44,14,4):", $t13} $t13 == $t13;

    // trace_local[constructor_ref]($t13) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:82:31+59
    assume {:print "$track_local(44,14,5):", $t13} $t13 == $t13;

    // $t14 := object::generate_transfer_ref($t13) on_abort goto L2 with $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:84:29+46
    assume {:print "$at(197,4079,4125)"} true;
    call $t14 := $1_object_generate_transfer_ref($t13);
    if ($abort_flag) {
        assume {:print "$at(197,4079,4125)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(44,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[$t12]($t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:84:29+46
    assume {:print "$track_local(44,14,6):", $t14} $t14 == $t14;

    // object::disable_ungated_transfer($t14) on_abort goto L2 with $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:85:9+46
    assume {:print "$at(197,4135,4181)"} true;
    call $1_object_disable_ungated_transfer($t14);
    if ($abort_flag) {
        assume {:print "$at(197,4135,4181)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(44,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t15 := fungible_asset::create_store<#0>($t13, $t1) on_abort goto L2 with $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:87:9+55
    assume {:print "$at(197,4192,4247)"} true;
    call $t15 := $1_fungible_asset_create_store'$1_fungible_asset_Metadata'($t13, $t1);
    if ($abort_flag) {
        assume {:print "$at(197,4192,4247)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(44,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_return[0]($t15) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:78:52+596
    assume {:print "$at(197,3657,4253)"} true;
    assume {:print "$track_return(44,14,0):", $t15} $t15 == $t15;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:88:5+1
    assume {:print "$at(197,4252,4253)"} true;
L1:

    // return $t15 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:88:5+1
    assume {:print "$at(197,4252,4253)"} true;
    $ret0 := $t15;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:88:5+1
L2:

    // abort($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:88:5+1
    assume {:print "$at(197,4252,4253)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun primary_fungible_store::ensure_primary_store_exists<0x1::fungible_asset::Metadata> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:62:5+407
procedure {:inline 1} $1_primary_fungible_store_ensure_primary_store_exists'$1_fungible_asset_Metadata'(_$t0: int, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t2: int;
    var $t3: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t8: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t0: int;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:62:5+1
    assume {:print "$at(197,3010,3011)"} true;
    assume {:print "$track_local(44,17,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:62:5+1
    assume {:print "$track_local(44,17,1):", $t1} $t1 == $t1;

    // $t4 := primary_fungible_store::primary_store_address<#0>($t0, $t1) on_abort goto L4 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:66:26+38
    assume {:print "$at(197,3189,3227)"} true;
    call $t4 := $1_primary_fungible_store_primary_store_address'$1_fungible_asset_Metadata'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(197,3189,3227)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(44,17):", $t5} $t5 == $t5;
        goto L4;
    }

    // trace_local[$t4]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:66:26+38
    assume {:print "$track_local(44,17,2):", $t4} $t4 == $t4;

    // $t6 := fungible_asset::store_exists($t4) on_abort goto L4 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:67:13+40
    assume {:print "$at(197,3241,3281)"} true;
    call $t6 := $1_fungible_asset_store_exists($t4);
    if ($abort_flag) {
        assume {:print "$at(197,3241,3281)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(44,17):", $t5} $t5 == $t5;
        goto L4;
    }

    // if ($t6) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:67:9+174
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:68:13+37
    assume {:print "$at(197,3297,3334)"} true;
L1:

    // $t7 := object::address_to_object<0x1::fungible_asset::FungibleStore>($t4) on_abort goto L4 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:68:13+37
    assume {:print "$at(197,3297,3334)"} true;
    call $t7 := $1_object_address_to_object'$1_fungible_asset_FungibleStore'($t4);
    if ($abort_flag) {
        assume {:print "$at(197,3297,3334)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(44,17):", $t5} $t5 == $t5;
        goto L4;
    }

    // $t3 := $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:68:13+37
    $t3 := $t7;

    // trace_local[return]($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:68:13+37
    assume {:print "$track_local(44,17,3):", $t7} $t7 == $t7;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:67:9+174
    assume {:print "$at(197,3237,3411)"} true;
L2:

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:67:9+174
    assume {:print "$at(197,3237,3411)"} true;
    assume {:print "$track_return(44,17,0):", $t3} $t3 == $t3;

    // goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:67:9+174
    goto L3;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:70:34+5
    assume {:print "$at(197,3385,3390)"} true;
L0:

    // $t8 := primary_fungible_store::create_primary_store<#0>($t0, $t1) on_abort goto L4 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:70:13+37
    assume {:print "$at(197,3364,3401)"} true;
    call $t8 := $1_primary_fungible_store_create_primary_store'$1_fungible_asset_Metadata'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(197,3364,3401)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(44,17):", $t5} $t5 == $t5;
        goto L4;
    }

    // $t3 := $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:70:13+37
    $t3 := $t8;

    // trace_local[return]($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:70:13+37
    assume {:print "$track_local(44,17,3):", $t8} $t8 == $t8;

    // goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:70:13+37
    goto L2;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:72:5+1
    assume {:print "$at(197,3416,3417)"} true;
L3:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:72:5+1
    assume {:print "$at(197,3416,3417)"} true;
    $ret0 := $t3;
    return;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:72:5+1
L4:

    // abort($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:72:5+1
    assume {:print "$at(197,3416,3417)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun primary_fungible_store::primary_store<0x1::fungible_asset::Metadata> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:99:5+216
procedure {:inline 1} $1_primary_fungible_store_primary_store'$1_fungible_asset_Metadata'(_$t0: int, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t0: int;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:99:5+1
    assume {:print "$at(197,4647,4648)"} true;
    assume {:print "$track_local(44,20,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:99:5+1
    assume {:print "$track_local(44,20,1):", $t1} $t1 == $t1;

    // $t2 := primary_fungible_store::primary_store_address<#0>($t0, $t1) on_abort goto L2 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:100:21+38
    assume {:print "$at(197,4762,4800)"} true;
    call $t2 := $1_primary_fungible_store_primary_store_address'$1_fungible_asset_Metadata'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(197,4762,4800)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(44,20):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := object::address_to_object<0x1::fungible_asset::FungibleStore>($t2) on_abort goto L2 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:101:9+47
    assume {:print "$at(197,4810,4857)"} true;
    call $t4 := $1_object_address_to_object'$1_fungible_asset_FungibleStore'($t2);
    if ($abort_flag) {
        assume {:print "$at(197,4810,4857)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(44,20):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:101:9+47
    assume {:print "$track_return(44,20,0):", $t4} $t4 == $t4;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:102:5+1
    assume {:print "$at(197,4862,4863)"} true;
L1:

    // return $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:102:5+1
    assume {:print "$at(197,4862,4863)"} true;
    $ret0 := $t4;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:102:5+1
L2:

    // abort($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:102:5+1
    assume {:print "$at(197,4862,4863)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun primary_fungible_store::primary_store_address<0x1::fungible_asset::Metadata> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:92:5+230
procedure {:inline 1} $1_primary_fungible_store_primary_store_address'$1_fungible_asset_Metadata'(_$t0: int, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t0: int;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:92:5+1
    assume {:print "$at(197,4339,4340)"} true;
    assume {:print "$track_local(44,21,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:92:5+1
    assume {:print "$track_local(44,21,1):", $t1} $t1 == $t1;

    // $t3 := object::object_address<#0>($t1) on_abort goto L2 with $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:93:29+33
    assume {:print "$at(197,4456,4489)"} true;
    call $t3 := $1_object_object_address'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(197,4456,4489)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(44,21):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[metadata_addr]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:93:29+33
    assume {:print "$track_local(44,21,2):", $t3} $t3 == $t3;

    // $t5 := opaque begin: object::create_user_derived_object_address($t0, $t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:94:9+64
    assume {:print "$at(197,4499,4563)"} true;

    // $t6 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:94:9+64
    havoc $t6;

    // if ($t6) goto L4 else goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:94:9+64
    if ($t6) { goto L4; } else { goto L3; }

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:94:9+64
L4:

    // trace_abort($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:94:9+64
    assume {:print "$at(197,4499,4563)"} true;
    assume {:print "$track_abort(44,21):", $t4} $t4 == $t4;

    // goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:94:9+64
    goto L2;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:94:9+64
L3:

    // assume WellFormed($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:94:9+64
    assume {:print "$at(197,4499,4563)"} true;
    assume $IsValid'address'($t5);

    // assume Eq<address>($t5, object::spec_create_user_derived_object_address($t0, $t3)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:94:9+64
    assume $IsEqual'address'($t5, $1_object_spec_create_user_derived_object_address($t0, $t3));

    // $t5 := opaque end: object::create_user_derived_object_address($t0, $t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:94:9+64

    // trace_return[0]($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:94:9+64
    assume {:print "$track_return(44,21,0):", $t5} $t5 == $t5;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:95:5+1
    assume {:print "$at(197,4568,4569)"} true;
L1:

    // return $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:95:5+1
    assume {:print "$at(197,4568,4569)"} true;
    $ret0 := $t5;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:95:5+1
L2:

    // abort($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/primary_fungible_store.move:95:5+1
    assume {:print "$at(197,4568,4569)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/hash.spec.move:7:9+50
function  $1_aptos_hash_spec_keccak256(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_keccak256(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/hash.spec.move:12:9+58
function  $1_aptos_hash_spec_sha2_512_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_sha2_512_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/hash.spec.move:17:9+58
function  $1_aptos_hash_spec_sha3_512_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_sha3_512_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/hash.spec.move:22:9+59
function  $1_aptos_hash_spec_ripemd160_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_ripemd160_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/hash.spec.move:27:9+61
function  $1_aptos_hash_spec_blake2b_256_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_blake2b_256_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/reconfiguration.move:161:5+155
function {:inline} $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory: $Memory $1_reconfiguration_Configuration): int {
    $ResourceValue($1_reconfiguration_Configuration_$memory, 1)->$last_reconfiguration_time
}

// struct reconfiguration::Configuration at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/reconfiguration.move:43:5+306
datatype $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration($epoch: int, $last_reconfiguration_time: int, $events: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent')
}
function {:inline} $Update'$1_reconfiguration_Configuration'_epoch(s: $1_reconfiguration_Configuration, x: int): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(x, s->$last_reconfiguration_time, s->$events)
}
function {:inline} $Update'$1_reconfiguration_Configuration'_last_reconfiguration_time(s: $1_reconfiguration_Configuration, x: int): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(s->$epoch, x, s->$events)
}
function {:inline} $Update'$1_reconfiguration_Configuration'_events(s: $1_reconfiguration_Configuration, x: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(s->$epoch, s->$last_reconfiguration_time, x)
}
function $IsValid'$1_reconfiguration_Configuration'(s: $1_reconfiguration_Configuration): bool {
    $IsValid'u64'(s->$epoch)
      && $IsValid'u64'(s->$last_reconfiguration_time)
      && $IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s->$events)
}
function {:inline} $IsEqual'$1_reconfiguration_Configuration'(s1: $1_reconfiguration_Configuration, s2: $1_reconfiguration_Configuration): bool {
    s1 == s2
}
var $1_reconfiguration_Configuration_$memory: $Memory $1_reconfiguration_Configuration;

// struct reconfiguration::NewEpochEvent at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/reconfiguration.move:30:5+64
datatype $1_reconfiguration_NewEpochEvent {
    $1_reconfiguration_NewEpochEvent($epoch: int)
}
function {:inline} $Update'$1_reconfiguration_NewEpochEvent'_epoch(s: $1_reconfiguration_NewEpochEvent, x: int): $1_reconfiguration_NewEpochEvent {
    $1_reconfiguration_NewEpochEvent(x)
}
function $IsValid'$1_reconfiguration_NewEpochEvent'(s: $1_reconfiguration_NewEpochEvent): bool {
    $IsValid'u64'(s->$epoch)
}
function {:inline} $IsEqual'$1_reconfiguration_NewEpochEvent'(s1: $1_reconfiguration_NewEpochEvent, s2: $1_reconfiguration_NewEpochEvent): bool {
    s1 == s2
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:30:10+72
function  $1_comparator_spec_compare_u8_vector(left: Vec (int), right: Vec (int)): $1_comparator_Result;
axiom (forall left: Vec (int), right: Vec (int) ::
(var $$res := $1_comparator_spec_compare_u8_vector(left, right);
$IsValid'$1_comparator_Result'($$res)));

// struct comparator::Result at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:10:5+49
datatype $1_comparator_Result {
    $1_comparator_Result($inner: int)
}
function {:inline} $Update'$1_comparator_Result'_inner(s: $1_comparator_Result, x: int): $1_comparator_Result {
    $1_comparator_Result(x)
}
function $IsValid'$1_comparator_Result'(s: $1_comparator_Result): bool {
    $IsValid'u8'(s->$inner)
}
function {:inline} $IsEqual'$1_comparator_Result'(s1: $1_comparator_Result, s2: $1_comparator_Result): bool {
    s1 == s2
}

// fun comparator::compare<address> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:30:5+204
procedure {:inline 1} $1_comparator_compare'address'(_$t0: int, _$t1: int) returns ($ret0: $1_comparator_Result)
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $t5: Vec (int);
    var $t6: Vec (int);
    var $t7: int;
    var $t8: Vec (int);
    var $t9: int;
    var $t10: int;
    var $t11: $1_comparator_Result;
    var $t0: int;
    var $t1: int;
    var $temp_0'$1_comparator_Result': $1_comparator_Result;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t4, bcs::$to_bytes<#0>($t0)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:25:9+37
    assume {:print "$at(52,640,677)"} true;
    assume ($t4 == $1_bcs_$to_bytes'address'($t0));

    // assume Identical($t5, bcs::$to_bytes<#0>($t1)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:26:9+39
    assume {:print "$at(52,686,725)"} true;
    assume ($t5 == $1_bcs_$to_bytes'address'($t1));

    // trace_local[left]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:30:5+1
    assume {:print "$at(51,820,821)"} true;
    assume {:print "$track_local(72,0,0):", $t0} $t0 == $t0;

    // trace_local[right]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:30:5+1
    assume {:print "$track_local(72,0,1):", $t1} $t1 == $t1;

    // $t6 := bcs::to_bytes<#0>($t0) on_abort goto L2 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:31:26+19
    assume {:print "$at(51,898,917)"} true;
    call $t6 := $1_bcs_to_bytes'address'($t0);
    if ($abort_flag) {
        assume {:print "$at(51,898,917)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(72,0):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t8 := bcs::to_bytes<#0>($t1) on_abort goto L2 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:32:27+20
    assume {:print "$at(51,945,965)"} true;
    call $t8 := $1_bcs_to_bytes'address'($t1);
    if ($abort_flag) {
        assume {:print "$at(51,945,965)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(72,0):", $t7} $t7 == $t7;
        goto L2;
    }

    // assume Identical($t9, Len<u8>($t6)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:37:9+28
    assume {:print "$at(52,1049,1077)"} true;
    assume ($t9 == LenVec($t6));

    // assume Identical($t10, Len<u8>($t8)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:38:9+30
    assume {:print "$at(52,1086,1116)"} true;
    assume ($t10 == LenVec($t8));

    // $t11 := opaque begin: comparator::compare_u8_vector($t6, $t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:34:9+42
    assume {:print "$at(51,976,1018)"} true;

    // assume And(WellFormed($t11), Or(Or(Eq<u8>(select comparator::Result.inner($t11), 0), Eq<u8>(select comparator::Result.inner($t11), 1)), Eq<u8>(select comparator::Result.inner($t11), 2))) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:34:9+42
    assume ($IsValid'$1_comparator_Result'($t11) && (($IsEqual'u8'($t11->$inner, 0) || $IsEqual'u8'($t11->$inner, 1)) || $IsEqual'u8'($t11->$inner, 2)));

    // assume Implies(Eq<u8>(select comparator::Result.inner<0x1::comparator::Result>($t11), 0), And(Eq<num>($t9, $t10), forall i: u64: TypeDomain<u64>() where Lt(i, $t9): Eq<u8>(Index($t6, i), Index($t8, i)))) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:34:9+42
    assume ($IsEqual'u8'($t11->$inner, 0) ==> ($IsEqual'num'($t9, $t10) && (forall i: int :: $IsValid'u64'(i) ==> ((i < $t9))  ==> ($IsEqual'u8'(ReadVec($t6, i), ReadVec($t8, i))))));

    // assume Implies(Eq<u8>(select comparator::Result.inner<0x1::comparator::Result>($t11), 1), Or(exists i: u64: TypeDomain<u64>() where Lt(i, $t9): And(And(Lt(i, $t10), Lt(Index($t6, i), Index($t8, i))), forall j: u64: TypeDomain<u64>() where Lt(j, i): Eq<u8>(Index($t6, j), Index($t8, j))), Lt($t9, $t10))) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:34:9+42
    assume ($IsEqual'u8'($t11->$inner, 1) ==> ((exists i: int :: $IsValid'u64'(i) && ((i < $t9))  && ((((i < $t10) && (ReadVec($t6, i) < ReadVec($t8, i))) && (forall j: int :: $IsValid'u64'(j) ==> ((j < i))  ==> ($IsEqual'u8'(ReadVec($t6, j), ReadVec($t8, j))))))) || ($t9 < $t10)));

    // assume Implies(Eq<u8>(select comparator::Result.inner<0x1::comparator::Result>($t11), 2), Or(exists i: u64: TypeDomain<u64>() where Lt(i, $t9): And(And(Lt(i, $t10), Gt(Index($t6, i), Index($t8, i))), forall j: u64: TypeDomain<u64>() where Lt(j, i): Eq<u8>(Index($t6, j), Index($t8, j))), Gt($t9, $t10))) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:34:9+42
    assume ($IsEqual'u8'($t11->$inner, 2) ==> ((exists i: int :: $IsValid'u64'(i) && ((i < $t9))  && ((((i < $t10) && (ReadVec($t6, i) > ReadVec($t8, i))) && (forall j: int :: $IsValid'u64'(j) ==> ((j < i))  ==> ($IsEqual'u8'(ReadVec($t6, j), ReadVec($t8, j))))))) || ($t9 > $t10)));

    // assume Eq<0x1::comparator::Result>($t11, comparator::spec_compare_u8_vector($t6, $t8)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:34:9+42
    assume $IsEqual'$1_comparator_Result'($t11, $1_comparator_spec_compare_u8_vector($t6, $t8));

    // $t11 := opaque end: comparator::compare_u8_vector($t6, $t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:34:9+42

    // trace_return[0]($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:34:9+42
    assume {:print "$track_return(72,0,0):", $t11} $t11 == $t11;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:35:5+1
    assume {:print "$at(51,1023,1024)"} true;
L1:

    // return $t11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:35:5+1
    assume {:print "$at(51,1023,1024)"} true;
    $ret0 := $t11;
    return;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:35:5+1
L2:

    // abort($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:35:5+1
    assume {:print "$at(51,1023,1024)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun comparator::is_equal [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:14:5+76
procedure {:inline 1} $1_comparator_is_equal(_$t0: $1_comparator_Result) returns ($ret0: bool)
{
    // declare local variables
    var $t1: $1_comparator_Result;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t0: $1_comparator_Result;
    var $temp_0'$1_comparator_Result': $1_comparator_Result;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:8:9+15
    assume {:print "$at(52,202,217)"} true;
    assume ($t1 == $t0);

    // trace_local[self]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:14:5+1
    assume {:print "$at(51,262,263)"} true;
    assume {:print "$track_local(72,2,0):", $t0} $t0 == $t0;

    // $t2 := get_field<0x1::comparator::Result>.inner($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:15:9+10
    assume {:print "$at(51,313,323)"} true;
    $t2 := $t0->$inner;

    // $t3 := 0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:15:23+5
    $t3 := 0;
    assume $IsValid'u8'($t3);

    // $t4 := ==($t2, $t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:15:9+19
    $t4 := $IsEqual'u8'($t2, $t3);

    // trace_return[0]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:15:9+19
    assume {:print "$track_return(72,2,0):", $t4} $t4 == $t4;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:16:5+1
    assume {:print "$at(51,337,338)"} true;
L1:

    // return $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:16:5+1
    assume {:print "$at(51,337,338)"} true;
    $ret0 := $t4;
    return;

}

// fun comparator::is_smaller_than [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:18:5+85
procedure {:inline 1} $1_comparator_is_smaller_than(_$t0: $1_comparator_Result) returns ($ret0: bool)
{
    // declare local variables
    var $t1: $1_comparator_Result;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t0: $1_comparator_Result;
    var $temp_0'$1_comparator_Result': $1_comparator_Result;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, $t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:14:9+15
    assume {:print "$at(52,354,369)"} true;
    assume ($t1 == $t0);

    // trace_local[self]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:18:5+1
    assume {:print "$at(51,344,345)"} true;
    assume {:print "$track_local(72,4,0):", $t0} $t0 == $t0;

    // $t2 := get_field<0x1::comparator::Result>.inner($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:19:9+10
    assume {:print "$at(51,402,412)"} true;
    $t2 := $t0->$inner;

    // $t3 := 1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:19:23+7
    $t3 := 1;
    assume $IsValid'u8'($t3);

    // $t4 := ==($t2, $t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:19:9+21
    $t4 := $IsEqual'u8'($t2, $t3);

    // trace_return[0]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:19:9+21
    assume {:print "$track_return(72,4,0):", $t4} $t4 == $t4;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:20:5+1
    assume {:print "$at(51,428,429)"} true;
L1:

    // return $t4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.move:20:5+1
    assume {:print "$at(51,428,429)"} true;
    $ret0 := $t4;
    return;

}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.spec.move:131:10+102
function {:inline} $1_big_vector_spec_table_len'u64_vec'address''(t: Table int (Vec (int))): int {
    $1_table_with_length_spec_len'u64_vec'address''(t)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.spec.move:131:10+102
function {:inline} $1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(t: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))): int {
    $1_table_with_length_spec_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(t)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.spec.move:135:10+122
function {:inline} $1_big_vector_spec_table_contains'u64_vec'address''(t: Table int (Vec (int)), k: int): bool {
    $1_table_with_length_spec_contains'u64_vec'address''(t, k)
}

// spec fun at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.spec.move:135:10+122
function {:inline} $1_big_vector_spec_table_contains'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(t: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), k: int): bool {
    $1_table_with_length_spec_contains'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(t, k)
}

// struct big_vector::BigVector<address> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:18:5+136
datatype $1_big_vector_BigVector'address' {
    $1_big_vector_BigVector'address'($buckets: Table int (Vec (int)), $end_index: int, $bucket_size: int)
}
function {:inline} $Update'$1_big_vector_BigVector'address''_buckets(s: $1_big_vector_BigVector'address', x: Table int (Vec (int))): $1_big_vector_BigVector'address' {
    $1_big_vector_BigVector'address'(x, s->$end_index, s->$bucket_size)
}
function {:inline} $Update'$1_big_vector_BigVector'address''_end_index(s: $1_big_vector_BigVector'address', x: int): $1_big_vector_BigVector'address' {
    $1_big_vector_BigVector'address'(s->$buckets, x, s->$bucket_size)
}
function {:inline} $Update'$1_big_vector_BigVector'address''_bucket_size(s: $1_big_vector_BigVector'address', x: int): $1_big_vector_BigVector'address' {
    $1_big_vector_BigVector'address'(s->$buckets, s->$end_index, x)
}
function $IsValid'$1_big_vector_BigVector'address''(s: $1_big_vector_BigVector'address'): bool {
    $IsValid'$1_table_with_length_TableWithLength'u64_vec'address'''(s->$buckets)
      && $IsValid'u64'(s->$end_index)
      && $IsValid'u64'(s->$bucket_size)
}
function {:inline} $IsEqual'$1_big_vector_BigVector'address''(s1: $1_big_vector_BigVector'address', s2: $1_big_vector_BigVector'address'): bool {
    s1 == s2
}

// struct big_vector::BigVector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:18:5+136
datatype $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'' {
    $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''($buckets: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')), $end_index: int, $bucket_size: int)
}
function {:inline} $Update'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''_buckets(s: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'', x: Table int (Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'))): $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'' {
    $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(x, s->$end_index, s->$bucket_size)
}
function {:inline} $Update'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''_end_index(s: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'', x: int): $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'' {
    $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(s->$buckets, x, s->$bucket_size)
}
function {:inline} $Update'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''_bucket_size(s: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'', x: int): $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'' {
    $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(s->$buckets, s->$end_index, x)
}
function $IsValid'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(s: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''): bool {
    $IsValid'$1_table_with_length_TableWithLength'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(s->$buckets)
      && $IsValid'u64'(s->$end_index)
      && $IsValid'u64'(s->$bucket_size)
}
function {:inline} $IsEqual'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(s1: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'', s2: $1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''): bool {
    s1 == s2
}

// fun big_vector::borrow<address> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:65:5+252
procedure {:inline 1} $1_big_vector_borrow'address'(_$t0: $1_big_vector_BigVector'address', _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: Table int (Vec (int));
    var $t6: int;
    var $t7: int;
    var $t8: Vec (int);
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: $1_big_vector_BigVector'address';
    var $t1: int;
    var $temp_0'$1_big_vector_BigVector'address'': $1_big_vector_BigVector'address';
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:65:5+1
    assume {:print "$at(75,2297,2298)"} true;
    assume {:print "$track_local(83,4,0):", $t0} $t0 == $t0;

    // trace_local[i]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:65:5+1
    assume {:print "$track_local(83,4,1):", $t1} $t1 == $t1;

    // $t2 := big_vector::length<#0>($t0) on_abort goto L3 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:66:21+12
    assume {:print "$at(75,2373,2385)"} true;
    call $t2 := $1_big_vector_length'address'($t0);
    if ($abort_flag) {
        assume {:print "$at(75,2373,2385)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(83,4):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := <($t1, $t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:66:17+16
    call $t4 := $Lt($t1, $t2);

    // if ($t4) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:66:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:67:50+13
    assume {:print "$at(75,2484,2497)"} true;
L1:

    // $t5 := get_field<0x1::big_vector::BigVector<#0>>.buckets($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:67:50+13
    assume {:print "$at(75,2484,2497)"} true;
    $t5 := $t0->$buckets;

    // $t6 := get_field<0x1::big_vector::BigVector<#0>>.bucket_size($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:67:69+16
    $t6 := $t0->$bucket_size;

    // $t7 := /($t1, $t6) on_abort goto L3 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:67:65+20
    call $t7 := $Div($t1, $t6);
    if ($abort_flag) {
        assume {:print "$at(75,2499,2519)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(83,4):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t8 := table_with_length::borrow<u64, vector<#0>>($t5, $t7) on_abort goto L3 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:67:24+62
    call $t8 := $1_table_with_length_borrow'u64_vec'address''($t5, $t7);
    if ($abort_flag) {
        assume {:print "$at(75,2458,2520)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(83,4):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t9 := get_field<0x1::big_vector::BigVector<#0>>.bucket_size($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:67:92+16
    $t9 := $t0->$bucket_size;

    // $t10 := %($t1, $t9) on_abort goto L3 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:67:88+20
    call $t10 := $Mod($t1, $t9);
    if ($abort_flag) {
        assume {:print "$at(75,2522,2542)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(83,4):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t11 := vector::borrow<#0>($t8, $t10) on_abort goto L3 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:67:9+100
    call $t11 := $1_vector_borrow'address'($t8, $t10);
    if ($abort_flag) {
        assume {:print "$at(75,2443,2543)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(83,4):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_return[0]($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:65:59+198
    assume {:print "$at(75,2351,2549)"} true;
    assume {:print "$track_return(83,4,0):", $t11} $t11 == $t11;

    // goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:65:59+198
    goto L2;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:66:9+6
    assume {:print "$at(75,2361,2367)"} true;
L0:

    // $t12 := 1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:66:59+20
    assume {:print "$at(75,2411,2431)"} true;
    $t12 := 1;
    assume $IsValid'u64'($t12);

    // $t13 := error::invalid_argument($t12) on_abort goto L3 with $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:66:35+45
    call $t13 := $1_error_invalid_argument($t12);
    if ($abort_flag) {
        assume {:print "$at(75,2387,2432)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(83,4):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_abort($t13) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:66:9+6
    assume {:print "$at(75,2361,2367)"} true;
    assume {:print "$track_abort(83,4):", $t13} $t13 == $t13;

    // $t3 := move($t13) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:66:9+6
    $t3 := $t13;

    // goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:66:9+6
    goto L3;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:68:5+1
    assume {:print "$at(75,2548,2549)"} true;
L2:

    // return $t11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:68:5+1
    assume {:print "$at(75,2548,2549)"} true;
    $ret0 := $t11;
    return;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:68:5+1
L3:

    // abort($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:68:5+1
    assume {:print "$at(75,2548,2549)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun big_vector::length<address> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:294:5+77
procedure {:inline 1} $1_big_vector_length'address'(_$t0: $1_big_vector_BigVector'address') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_big_vector_BigVector'address';
    var $temp_0'$1_big_vector_BigVector'address'': $1_big_vector_BigVector'address';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:294:5+1
    assume {:print "$at(75,13521,13522)"} true;
    assume {:print "$track_local(83,10,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::big_vector::BigVector<#0>>.end_index($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:295:9+14
    assume {:print "$at(75,13578,13592)"} true;
    $t1 := $t0->$end_index;

    // trace_return[0]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:295:9+14
    assume {:print "$track_return(83,10,0):", $t1} $t1 == $t1;

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:296:5+1
    assume {:print "$at(75,13597,13598)"} true;
L1:

    // return $t1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.move:296:5+1
    assume {:print "$at(75,13597,13598)"} true;
    $ret0 := $t1;
    return;

}

// struct smart_vector::SmartVector<address> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:23:5+181
datatype $1_smart_vector_SmartVector'address' {
    $1_smart_vector_SmartVector'address'($inline_vec: Vec (int), $big_vec: $1_option_Option'$1_big_vector_BigVector'address'', $inline_capacity: $1_option_Option'u64', $bucket_size: $1_option_Option'u64')
}
function {:inline} $Update'$1_smart_vector_SmartVector'address''_inline_vec(s: $1_smart_vector_SmartVector'address', x: Vec (int)): $1_smart_vector_SmartVector'address' {
    $1_smart_vector_SmartVector'address'(x, s->$big_vec, s->$inline_capacity, s->$bucket_size)
}
function {:inline} $Update'$1_smart_vector_SmartVector'address''_big_vec(s: $1_smart_vector_SmartVector'address', x: $1_option_Option'$1_big_vector_BigVector'address''): $1_smart_vector_SmartVector'address' {
    $1_smart_vector_SmartVector'address'(s->$inline_vec, x, s->$inline_capacity, s->$bucket_size)
}
function {:inline} $Update'$1_smart_vector_SmartVector'address''_inline_capacity(s: $1_smart_vector_SmartVector'address', x: $1_option_Option'u64'): $1_smart_vector_SmartVector'address' {
    $1_smart_vector_SmartVector'address'(s->$inline_vec, s->$big_vec, x, s->$bucket_size)
}
function {:inline} $Update'$1_smart_vector_SmartVector'address''_bucket_size(s: $1_smart_vector_SmartVector'address', x: $1_option_Option'u64'): $1_smart_vector_SmartVector'address' {
    $1_smart_vector_SmartVector'address'(s->$inline_vec, s->$big_vec, s->$inline_capacity, x)
}
function $IsValid'$1_smart_vector_SmartVector'address''(s: $1_smart_vector_SmartVector'address'): bool {
    $IsValid'vec'address''(s->$inline_vec)
      && $IsValid'$1_option_Option'$1_big_vector_BigVector'address'''(s->$big_vec)
      && $IsValid'$1_option_Option'u64''(s->$inline_capacity)
      && $IsValid'$1_option_Option'u64''(s->$bucket_size)
}
function {:inline} $IsEqual'$1_smart_vector_SmartVector'address''(s1: $1_smart_vector_SmartVector'address', s2: $1_smart_vector_SmartVector'address'): bool {
    $IsEqual'vec'address''(s1->$inline_vec, s2->$inline_vec)
    && $IsEqual'$1_option_Option'$1_big_vector_BigVector'address'''(s1->$big_vec, s2->$big_vec)
    && $IsEqual'$1_option_Option'u64''(s1->$inline_capacity, s2->$inline_capacity)
    && $IsEqual'$1_option_Option'u64''(s1->$bucket_size, s2->$bucket_size)}

// struct smart_vector::SmartVector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>> at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:23:5+181
datatype $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'' {
    $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''($inline_vec: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3'), $big_vec: $1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''', $inline_capacity: $1_option_Option'u64', $bucket_size: $1_option_Option'u64')
}
function {:inline} $Update'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''_inline_vec(s: $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'', x: Vec ($1_object_Object'$bb_pool_v3_LiquidityPoolV3')): $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'' {
    $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(x, s->$big_vec, s->$inline_capacity, s->$bucket_size)
}
function {:inline} $Update'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''_big_vec(s: $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'', x: $1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''): $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'' {
    $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(s->$inline_vec, x, s->$inline_capacity, s->$bucket_size)
}
function {:inline} $Update'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''_inline_capacity(s: $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'', x: $1_option_Option'u64'): $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'' {
    $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(s->$inline_vec, s->$big_vec, x, s->$bucket_size)
}
function {:inline} $Update'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''_bucket_size(s: $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'', x: $1_option_Option'u64'): $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'' {
    $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''(s->$inline_vec, s->$big_vec, s->$inline_capacity, x)
}
function $IsValid'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(s: $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''): bool {
    $IsValid'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(s->$inline_vec)
      && $IsValid'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(s->$big_vec)
      && $IsValid'$1_option_Option'u64''(s->$inline_capacity)
      && $IsValid'$1_option_Option'u64''(s->$bucket_size)
}
function {:inline} $IsEqual'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(s1: $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'', s2: $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''): bool {
    $IsEqual'vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(s1->$inline_vec, s2->$inline_vec)
    && $IsEqual'$1_option_Option'$1_big_vector_BigVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''''(s1->$big_vec, s2->$big_vec)
    && $IsEqual'$1_option_Option'u64''(s1->$inline_capacity, s2->$inline_capacity)
    && $IsEqual'$1_option_Option'u64''(s1->$bucket_size, s2->$bucket_size)}

// fun smart_vector::borrow<address> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:95:5+387
procedure {:inline 1} $1_smart_vector_borrow'address'(_$t0: $1_smart_vector_SmartVector'address', _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: Vec (int);
    var $t8: int;
    var $t9: bool;
    var $t10: Vec (int);
    var $t11: int;
    var $t12: $1_option_Option'$1_big_vector_BigVector'address'';
    var $t13: $1_big_vector_BigVector'address';
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t0: $1_smart_vector_SmartVector'address';
    var $t1: int;
    var $temp_0'$1_smart_vector_SmartVector'address'': $1_smart_vector_SmartVector'address';
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:95:5+1
    assume {:print "$at(79,3575,3576)"} true;
    assume {:print "$track_local(96,5,0):", $t0} $t0 == $t0;

    // trace_local[i]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:95:5+1
    assume {:print "$track_local(96,5,1):", $t1} $t1 == $t1;

    // $t4 := smart_vector::length<#0>($t0) on_abort goto L6 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:96:21+12
    assume {:print "$at(79,3653,3665)"} true;
    call $t4 := $1_smart_vector_length'address'($t0);
    if ($abort_flag) {
        assume {:print "$at(79,3653,3665)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(96,5):", $t5} $t5 == $t5;
        goto L6;
    }

    // $t6 := <($t1, $t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:96:17+16
    call $t6 := $Lt($t1, $t4);

    // if ($t6) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:96:9+6
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:97:41+16
    assume {:print "$at(79,3755,3771)"} true;
L1:

    // $t7 := get_field<0x1::smart_vector::SmartVector<#0>>.inline_vec($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:97:41+16
    assume {:print "$at(79,3755,3771)"} true;
    $t7 := $t0->$inline_vec;

    // $t8 := vector::length<#0>($t7) on_abort goto L6 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:97:26+32
    call $t8 := $1_vector_length'address'($t7);
    if ($abort_flag) {
        assume {:print "$at(79,3740,3772)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(96,5):", $t5} $t5 == $t5;
        goto L6;
    }

    // trace_local[$t4]($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:97:26+32
    assume {:print "$track_local(96,5,2):", $t8} $t8 == $t8;

    // $t9 := <($t1, $t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:98:13+14
    assume {:print "$at(79,3786,3800)"} true;
    call $t9 := $Lt($t1, $t8);

    // if ($t9) goto L3 else goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:98:9+174
    if ($t9) { goto L3; } else { goto L2; }

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:99:28+16
    assume {:print "$at(79,3831,3847)"} true;
L3:

    // $t10 := get_field<0x1::smart_vector::SmartVector<#0>>.inline_vec($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:99:28+16
    assume {:print "$at(79,3831,3847)"} true;
    $t10 := $t0->$inline_vec;

    // $t11 := vector::borrow<#0>($t10, $t1) on_abort goto L6 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:99:13+35
    call $t11 := $1_vector_borrow'address'($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(79,3816,3851)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(96,5):", $t5} $t5 == $t5;
        goto L6;
    }

    // $t3 := $t11 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:99:13+35
    $t3 := $t11;

    // trace_local[return]($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:99:13+35
    assume {:print "$track_local(96,5,3):", $t11} $t11 == $t11;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:95:61+331
    assume {:print "$at(79,3631,3962)"} true;
L4:

    // trace_return[0]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:95:61+331
    assume {:print "$at(79,3631,3962)"} true;
    assume {:print "$track_return(96,5,0):", $t3} $t3 == $t3;

    // goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:95:61+331
    goto L5;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:47+13
    assume {:print "$at(79,3915,3928)"} true;
L2:

    // $t12 := get_field<0x1::smart_vector::SmartVector<#0>>.big_vec($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:47+13
    assume {:print "$at(79,3915,3928)"} true;
    $t12 := $t0->$big_vec;

    // $t13 := opaque begin: option::borrow<0x1::big_vector::BigVector<#0>>($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:32+29

    // assume Identical($t14, option::spec_is_none<0x1::big_vector::BigVector<#0>>($t12)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:32+29
    assume ($t14 == $1_option_spec_is_none'$1_big_vector_BigVector'address''($t12));

    // if ($t14) goto L8 else goto L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:32+29
    if ($t14) { goto L8; } else { goto L7; }

    // label L8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:32+29
L8:

    // assume And(option::spec_is_none<0x1::big_vector::BigVector<#0>>($t12), Eq(262145, $t5)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:32+29
    assume {:print "$at(79,3900,3929)"} true;
    assume ($1_option_spec_is_none'$1_big_vector_BigVector'address''($t12) && $IsEqual'num'(262145, $t5));

    // trace_abort($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:32+29
    assume {:print "$at(79,3900,3929)"} true;
    assume {:print "$track_abort(96,5):", $t5} $t5 == $t5;

    // goto L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:32+29
    goto L6;

    // label L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:32+29
L7:

    // assume And(WellFormed($t13), And(And(And(And(And(And(And(And(And(And(And(Neq<u64>(select big_vector::BigVector.bucket_size($t13), 0), Implies(Eq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13)), 0), Eq<u64>(select big_vector::BigVector.end_index($t13), 0))), Implies(Eq<u64>(select big_vector::BigVector.end_index($t13), 0), Eq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13)), 0))), Le(select big_vector::BigVector.end_index($t13), Mul(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13)), select big_vector::BigVector.bucket_size($t13)))), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13)), 0), forall i: num: Range(0, Sub(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13)), 1)): Eq<num>(Len<#0>(table_with_length::spec_get<u64, vector<#0>>(select big_vector::BigVector.buckets($t13), i)), select big_vector::BigVector.bucket_size($t13)))), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13)), 0), Le(Len<#0>(table_with_length::spec_get<u64, vector<#0>>(select big_vector::BigVector.buckets($t13), Sub(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13)), 1))), select big_vector::BigVector.bucket_size($t13)))), forall i: num: Range(0, big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13))): big_vector::spec_table_contains<u64, vector<#0>>(select big_vector::BigVector.buckets($t13), i)), Eq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13)), Div(Sub(Add(select big_vector::BigVector.end_index($t13), select big_vector::BigVector.bucket_size($t13)), 1), select big_vector::BigVector.bucket_size($t13)))), Or(And(Eq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13)), 0), Eq<u64>(select big_vector::BigVector.end_index($t13), 0)), And(Neq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13)), 0), Eq<num>(Add(Mul(Sub(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13)), 1), select big_vector::BigVector.bucket_size($t13)), Len<#0>(table_with_length::spec_get<u64, vector<#0>>(select big_vector::BigVector.buckets($t13), Sub(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13)), 1)))), select big_vector::BigVector.end_index($t13))))), forall i: u64: TypeDomain<u64>() where Ge(i, big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13))): Not(big_vector::spec_table_contains<u64, vector<#0>>(select big_vector::BigVector.buckets($t13), i))), forall i: u64: TypeDomain<u64>() where Lt(i, big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13))): big_vector::spec_table_contains<u64, vector<#0>>(select big_vector::BigVector.buckets($t13), i)), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13)), 0), Gt(Len<#0>(table_with_length::spec_get<u64, vector<#0>>(select big_vector::BigVector.buckets($t13), Sub(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t13)), 1))), 0)))) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:32+29
    assume {:print "$at(79,3900,3929)"} true;
    assume ($IsValid'$1_big_vector_BigVector'address''($t13) && (((((((((((!$IsEqual'u64'($t13->$bucket_size, 0) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets), 0) ==> $IsEqual'u64'($t13->$end_index, 0))) && ($IsEqual'u64'($t13->$end_index, 0) ==> $IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets), 0))) && ($t13->$end_index <= ($1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets) * $t13->$bucket_size))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets), 0) || (var $range_0 := $Range(0, ($1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets) - 1)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($IsEqual'num'(LenVec($1_table_with_length_spec_get'u64_vec'address''($t13->$buckets, i)), $t13->$bucket_size))))))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets), 0) || (LenVec($1_table_with_length_spec_get'u64_vec'address''($t13->$buckets, ($1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets) - 1))) <= $t13->$bucket_size))) && (var $range_2 := $Range(0, $1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets)); (forall $i_3: int :: $InRange($range_2, $i_3) ==> (var i := $i_3;
    ($1_big_vector_spec_table_contains'u64_vec'address''($t13->$buckets, i)))))) && $IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets), ((($t13->$end_index + $t13->$bucket_size) - 1) div $t13->$bucket_size))) && (($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets), 0) && $IsEqual'u64'($t13->$end_index, 0)) || (!$IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets), 0) && $IsEqual'num'(((($1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets) - 1) * $t13->$bucket_size) + LenVec($1_table_with_length_spec_get'u64_vec'address''($t13->$buckets, ($1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets) - 1)))), $t13->$end_index)))) && (forall i: int :: $IsValid'u64'(i) ==> ((i >= $1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets)))  ==> (!$1_big_vector_spec_table_contains'u64_vec'address''($t13->$buckets, i)))) && (forall i: int :: $IsValid'u64'(i) ==> ((i < $1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets)))  ==> ($1_big_vector_spec_table_contains'u64_vec'address''($t13->$buckets, i)))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets), 0) || (LenVec($1_table_with_length_spec_get'u64_vec'address''($t13->$buckets, ($1_big_vector_spec_table_len'u64_vec'address''($t13->$buckets) - 1))) > 0))));

    // assume Eq<0x1::big_vector::BigVector<#0>>($t13, option::spec_borrow<0x1::big_vector::BigVector<#0>>($t12)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:32+29
    assume $IsEqual'$1_big_vector_BigVector'address''($t13, $1_option_spec_borrow'$1_big_vector_BigVector'address''($t12));

    // $t13 := opaque end: option::borrow<0x1::big_vector::BigVector<#0>>($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:32+29

    // $t15 := -($t1, $t8) on_abort goto L6 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:63+14
    call $t15 := $Sub($t1, $t8);
    if ($abort_flag) {
        assume {:print "$at(79,3931,3945)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(96,5):", $t5} $t5 == $t5;
        goto L6;
    }

    // $t16 := big_vector::borrow<#0>($t13, $t15) on_abort goto L6 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:13+65
    call $t16 := $1_big_vector_borrow'address'($t13, $t15);
    if ($abort_flag) {
        assume {:print "$at(79,3881,3946)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(96,5):", $t5} $t5 == $t5;
        goto L6;
    }

    // $t3 := $t16 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:13+65
    $t3 := $t16;

    // trace_local[return]($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:13+65
    assume {:print "$track_local(96,5,3):", $t16} $t16 == $t16;

    // goto L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:101:13+65
    goto L4;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:96:9+6
    assume {:print "$at(79,3641,3647)"} true;
L0:

    // $t17 := 1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:96:59+20
    assume {:print "$at(79,3691,3711)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // $t18 := error::invalid_argument($t17) on_abort goto L6 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:96:35+45
    call $t18 := $1_error_invalid_argument($t17);
    if ($abort_flag) {
        assume {:print "$at(79,3667,3712)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(96,5):", $t5} $t5 == $t5;
        goto L6;
    }

    // trace_abort($t18) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:96:9+6
    assume {:print "$at(79,3641,3647)"} true;
    assume {:print "$track_abort(96,5):", $t18} $t18 == $t18;

    // $t5 := move($t18) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:96:9+6
    $t5 := $t18;

    // goto L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:96:9+6
    goto L6;

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:103:5+1
    assume {:print "$at(79,3961,3962)"} true;
L5:

    // return $t3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:103:5+1
    assume {:print "$at(79,3961,3962)"} true;
    $ret0 := $t3;
    return;

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:103:5+1
L6:

    // abort($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:103:5+1
    assume {:print "$at(79,3961,3962)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun smart_vector::length<address> [baseline] at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:334:5+240
procedure {:inline 1} $1_smart_vector_length'address'(_$t0: $1_smart_vector_SmartVector'address') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $t6: $1_option_Option'$1_big_vector_BigVector'address'';
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: $1_option_Option'$1_big_vector_BigVector'address'';
    var $t11: $1_big_vector_BigVector'address';
    var $t12: bool;
    var $t13: int;
    var $t0: $1_smart_vector_SmartVector'address';
    var $temp_0'$1_smart_vector_SmartVector'address'': $1_smart_vector_SmartVector'address';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:334:5+1
    assume {:print "$at(79,14265,14266)"} true;
    assume {:print "$track_local(96,11,0):", $t0} $t0 == $t0;

    // $t3 := get_field<0x1::smart_vector::SmartVector<#0>>.inline_vec($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:335:24+16
    assume {:print "$at(79,14339,14355)"} true;
    $t3 := $t0->$inline_vec;

    // $t4 := vector::length<#0>($t3) on_abort goto L4 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:335:9+32
    call $t4 := $1_vector_length'address'($t3);
    if ($abort_flag) {
        assume {:print "$at(79,14324,14356)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(96,11):", $t5} $t5 == $t5;
        goto L4;
    }

    // trace_local[$t2]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:335:9+32
    assume {:print "$track_local(96,11,1):", $t4} $t4 == $t4;

    // $t6 := get_field<0x1::smart_vector::SmartVector<#0>>.big_vec($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:335:64+13
    $t6 := $t0->$big_vec;

    // $t7 := opaque begin: option::is_none<0x1::big_vector::BigVector<#0>>($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:335:48+30

    // assume WellFormed($t7) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:335:48+30
    assume $IsValid'bool'($t7);

    // assume Eq<bool>($t7, option::spec_is_none<0x1::big_vector::BigVector<#0>>($t6)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:335:48+30
    assume $IsEqual'bool'($t7, $1_option_spec_is_none'$1_big_vector_BigVector'address''($t6));

    // $t7 := opaque end: option::is_none<0x1::big_vector::BigVector<#0>>($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:335:48+30

    // if ($t7) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:335:44+140
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:336:13+1
    assume {:print "$at(79,14409,14410)"} true;
L1:

    // $t8 := 0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:336:13+1
    assume {:print "$at(79,14409,14410)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t2 := $t8 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:336:13+1
    $t2 := $t8;

    // trace_local[$t4]($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:336:13+1
    assume {:print "$track_local(96,11,2):", $t8} $t8 == $t8;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:335:9+175
    assume {:print "$at(79,14324,14499)"} true;
L2:

    // $t9 := +($t4, $t2) on_abort goto L4 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:335:9+175
    assume {:print "$at(79,14324,14499)"} true;
    call $t9 := $AddU64($t4, $t2);
    if ($abort_flag) {
        assume {:print "$at(79,14324,14499)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(96,11):", $t5} $t5 == $t5;
        goto L4;
    }

    // trace_return[0]($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:335:9+175
    assume {:print "$track_return(96,11,0):", $t9} $t9 == $t9;

    // goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:335:9+175
    goto L3;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:47+13
    assume {:print "$at(79,14474,14487)"} true;
L0:

    // $t10 := get_field<0x1::smart_vector::SmartVector<#0>>.big_vec($t0) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:47+13
    assume {:print "$at(79,14474,14487)"} true;
    $t10 := $t0->$big_vec;

    // $t11 := opaque begin: option::borrow<0x1::big_vector::BigVector<#0>>($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:32+29

    // assume Identical($t12, option::spec_is_none<0x1::big_vector::BigVector<#0>>($t10)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:32+29
    assume ($t12 == $1_option_spec_is_none'$1_big_vector_BigVector'address''($t10));

    // if ($t12) goto L6 else goto L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:32+29
    if ($t12) { goto L6; } else { goto L5; }

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:32+29
L6:

    // assume And(option::spec_is_none<0x1::big_vector::BigVector<#0>>($t10), Eq(262145, $t5)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:32+29
    assume {:print "$at(79,14459,14488)"} true;
    assume ($1_option_spec_is_none'$1_big_vector_BigVector'address''($t10) && $IsEqual'num'(262145, $t5));

    // trace_abort($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:32+29
    assume {:print "$at(79,14459,14488)"} true;
    assume {:print "$track_abort(96,11):", $t5} $t5 == $t5;

    // goto L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:32+29
    goto L4;

    // label L5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:32+29
L5:

    // assume And(WellFormed($t11), And(And(And(And(And(And(And(And(And(And(And(Neq<u64>(select big_vector::BigVector.bucket_size($t11), 0), Implies(Eq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11)), 0), Eq<u64>(select big_vector::BigVector.end_index($t11), 0))), Implies(Eq<u64>(select big_vector::BigVector.end_index($t11), 0), Eq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11)), 0))), Le(select big_vector::BigVector.end_index($t11), Mul(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11)), select big_vector::BigVector.bucket_size($t11)))), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11)), 0), forall i: num: Range(0, Sub(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11)), 1)): Eq<num>(Len<#0>(table_with_length::spec_get<u64, vector<#0>>(select big_vector::BigVector.buckets($t11), i)), select big_vector::BigVector.bucket_size($t11)))), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11)), 0), Le(Len<#0>(table_with_length::spec_get<u64, vector<#0>>(select big_vector::BigVector.buckets($t11), Sub(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11)), 1))), select big_vector::BigVector.bucket_size($t11)))), forall i: num: Range(0, big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11))): big_vector::spec_table_contains<u64, vector<#0>>(select big_vector::BigVector.buckets($t11), i)), Eq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11)), Div(Sub(Add(select big_vector::BigVector.end_index($t11), select big_vector::BigVector.bucket_size($t11)), 1), select big_vector::BigVector.bucket_size($t11)))), Or(And(Eq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11)), 0), Eq<u64>(select big_vector::BigVector.end_index($t11), 0)), And(Neq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11)), 0), Eq<num>(Add(Mul(Sub(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11)), 1), select big_vector::BigVector.bucket_size($t11)), Len<#0>(table_with_length::spec_get<u64, vector<#0>>(select big_vector::BigVector.buckets($t11), Sub(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11)), 1)))), select big_vector::BigVector.end_index($t11))))), forall i: u64: TypeDomain<u64>() where Ge(i, big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11))): Not(big_vector::spec_table_contains<u64, vector<#0>>(select big_vector::BigVector.buckets($t11), i))), forall i: u64: TypeDomain<u64>() where Lt(i, big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11))): big_vector::spec_table_contains<u64, vector<#0>>(select big_vector::BigVector.buckets($t11), i)), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11)), 0), Gt(Len<#0>(table_with_length::spec_get<u64, vector<#0>>(select big_vector::BigVector.buckets($t11), Sub(big_vector::spec_table_len<u64, vector<#0>>(select big_vector::BigVector.buckets($t11)), 1))), 0)))) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:32+29
    assume {:print "$at(79,14459,14488)"} true;
    assume ($IsValid'$1_big_vector_BigVector'address''($t11) && (((((((((((!$IsEqual'u64'($t11->$bucket_size, 0) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets), 0) ==> $IsEqual'u64'($t11->$end_index, 0))) && ($IsEqual'u64'($t11->$end_index, 0) ==> $IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets), 0))) && ($t11->$end_index <= ($1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets) * $t11->$bucket_size))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets), 0) || (var $range_0 := $Range(0, ($1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets) - 1)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($IsEqual'num'(LenVec($1_table_with_length_spec_get'u64_vec'address''($t11->$buckets, i)), $t11->$bucket_size))))))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets), 0) || (LenVec($1_table_with_length_spec_get'u64_vec'address''($t11->$buckets, ($1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets) - 1))) <= $t11->$bucket_size))) && (var $range_2 := $Range(0, $1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets)); (forall $i_3: int :: $InRange($range_2, $i_3) ==> (var i := $i_3;
    ($1_big_vector_spec_table_contains'u64_vec'address''($t11->$buckets, i)))))) && $IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets), ((($t11->$end_index + $t11->$bucket_size) - 1) div $t11->$bucket_size))) && (($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets), 0) && $IsEqual'u64'($t11->$end_index, 0)) || (!$IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets), 0) && $IsEqual'num'(((($1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets) - 1) * $t11->$bucket_size) + LenVec($1_table_with_length_spec_get'u64_vec'address''($t11->$buckets, ($1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets) - 1)))), $t11->$end_index)))) && (forall i: int :: $IsValid'u64'(i) ==> ((i >= $1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets)))  ==> (!$1_big_vector_spec_table_contains'u64_vec'address''($t11->$buckets, i)))) && (forall i: int :: $IsValid'u64'(i) ==> ((i < $1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets)))  ==> ($1_big_vector_spec_table_contains'u64_vec'address''($t11->$buckets, i)))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets), 0) || (LenVec($1_table_with_length_spec_get'u64_vec'address''($t11->$buckets, ($1_big_vector_spec_table_len'u64_vec'address''($t11->$buckets) - 1))) > 0))));

    // assume Eq<0x1::big_vector::BigVector<#0>>($t11, option::spec_borrow<0x1::big_vector::BigVector<#0>>($t10)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:32+29
    assume $IsEqual'$1_big_vector_BigVector'address''($t11, $1_option_spec_borrow'$1_big_vector_BigVector'address''($t10));

    // $t11 := opaque end: option::borrow<0x1::big_vector::BigVector<#0>>($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:32+29

    // $t13 := big_vector::length<#0>($t11) on_abort goto L4 with $t5 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:13+49
    call $t13 := $1_big_vector_length'address'($t11);
    if ($abort_flag) {
        assume {:print "$at(79,14440,14489)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(96,11):", $t5} $t5 == $t5;
        goto L4;
    }

    // $t2 := $t13 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:13+49
    $t2 := $t13;

    // trace_local[$t4]($t13) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:13+49
    assume {:print "$track_local(96,11,2):", $t13} $t13 == $t13;

    // goto L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:338:13+49
    goto L2;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:340:5+1
    assume {:print "$at(79,14504,14505)"} true;
L3:

    // return $t9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:340:5+1
    assume {:print "$at(79,14504,14505)"} true;
    $ret0 := $t9;
    return;

    // label L4 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:340:5+1
L4:

    // abort($t5) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:340:5+1
    assume {:print "$at(79,14504,14505)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun utils::is_sorted [baseline] at ./sources/v3/utils.move:10:5+414
procedure {:inline 1} $bb_utils_is_sorted(_$t0: $1_object_Object'$1_fungible_asset_Metadata', _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $1_comparator_Result;
    var $t5: $1_comparator_Result;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: Vec (int);
    var $t10: Vec (int);
    var $t11: $1_comparator_Result;
    var $t12: $1_comparator_Result;
    var $t13: bool;
    var $t14: Vec (int);
    var $t15: Vec (int);
    var $t16: $1_comparator_Result;
    var $t17: $1_comparator_Result;
    var $t18: bool;
    var $t19: int;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_comparator_Result': $1_comparator_Result;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[token_1]($t0) at ./sources/v3/utils.move:10:5+1
    assume {:print "$at(27,265,266)"} true;
    assume {:print "$track_local(97,0,0):", $t0} $t0 == $t0;

    // trace_local[token_2]($t1) at ./sources/v3/utils.move:10:5+1
    assume {:print "$track_local(97,0,1):", $t1} $t1 == $t1;

    // $t6 := object::object_address<0x1::fungible_asset::Metadata>($t0) on_abort goto L3 with $t7 at ./sources/v3/utils.move:11:28+32
    assume {:print "$at(27,375,407)"} true;
    call $t6 := $1_object_object_address'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(27,375,407)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(97,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[token_1_addr]($t6) at ./sources/v3/utils.move:11:28+32
    assume {:print "$track_local(97,0,2):", $t6} $t6 == $t6;

    // $t8 := object::object_address<0x1::fungible_asset::Metadata>($t1) on_abort goto L3 with $t7 at ./sources/v3/utils.move:12:28+32
    assume {:print "$at(27,436,468)"} true;
    call $t8 := $1_object_object_address'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(27,436,468)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(97,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[token_2_addr]($t8) at ./sources/v3/utils.move:12:28+32
    assume {:print "$track_local(97,0,3):", $t8} $t8 == $t8;

    // assume Identical($t9, bcs::$to_bytes<address>($t6)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:25:9+37
    assume {:print "$at(52,640,677)"} true;
    assume ($t9 == $1_bcs_$to_bytes'address'($t6));

    // assume Identical($t10, bcs::$to_bytes<address>($t8)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:26:9+39
    assume {:print "$at(52,686,725)"} true;
    assume ($t10 == $1_bcs_$to_bytes'address'($t8));

    // $t11 := comparator::compare<address>($t6, $t8) on_abort goto L3 with $t7 at ./sources/v3/utils.move:13:22+49
    assume {:print "$at(27,491,540)"} true;
    call $t11 := $1_comparator_compare'address'($t6, $t8);
    if ($abort_flag) {
        assume {:print "$at(27,491,540)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(97,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[result]($t11) at ./sources/v3/utils.move:13:22+49
    assume {:print "$track_local(97,0,4):", $t11} $t11 == $t11;

    // assume Identical($t12, $t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:8:9+15
    assume {:print "$at(52,202,217)"} true;
    assume ($t12 == $t11);

    // $t13 := comparator::is_equal($t11) on_abort goto L3 with $t7 at ./sources/v3/utils.move:14:18+17
    assume {:print "$at(27,559,576)"} true;
    call $t13 := $1_comparator_is_equal($t11);
    if ($abort_flag) {
        assume {:print "$at(27,559,576)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(97,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // if ($t13) goto L0 else goto L1 at ./sources/v3/utils.move:14:17+18
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at ./sources/v3/utils.move:15:29+13
    assume {:print "$at(27,626,639)"} true;
L1:

    // assume Identical($t14, bcs::$to_bytes<address>($t6)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:25:9+37
    assume {:print "$at(52,640,677)"} true;
    assume ($t14 == $1_bcs_$to_bytes'address'($t6));

    // assume Identical($t15, bcs::$to_bytes<address>($t8)) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:26:9+39
    assume {:print "$at(52,686,725)"} true;
    assume ($t15 == $1_bcs_$to_bytes'address'($t8));

    // $t16 := comparator::compare<address>($t6, $t8) on_abort goto L3 with $t7 at ./sources/v3/utils.move:15:9+49
    assume {:print "$at(27,606,655)"} true;
    call $t16 := $1_comparator_compare'address'($t6, $t8);
    if ($abort_flag) {
        assume {:print "$at(27,606,655)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(97,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[$t15]($t16) at ./sources/v3/utils.move:15:9+49
    assume {:print "$track_local(97,0,5):", $t16} $t16 == $t16;

    // assume Identical($t17, $t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/comparator.spec.move:14:9+15
    assume {:print "$at(52,354,369)"} true;
    assume ($t17 == $t16);

    // $t18 := comparator::is_smaller_than($t16) on_abort goto L3 with $t7 at ./sources/v3/utils.move:15:9+67
    assume {:print "$at(27,606,673)"} true;
    call $t18 := $1_comparator_is_smaller_than($t16);
    if ($abort_flag) {
        assume {:print "$at(27,606,673)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(97,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_return[0]($t18) at ./sources/v3/utils.move:10:86+333
    assume {:print "$at(27,346,679)"} true;
    assume {:print "$track_return(97,0,0):", $t18} $t18 == $t18;

    // goto L2 at ./sources/v3/utils.move:10:86+333
    goto L2;

    // label L0 at ./sources/v3/utils.move:14:37+17
    assume {:print "$at(27,578,595)"} true;
L0:

    // $t19 := 70001 at ./sources/v3/utils.move:14:37+17
    assume {:print "$at(27,578,595)"} true;
    $t19 := 70001;
    assume $IsValid'u64'($t19);

    // trace_abort($t19) at ./sources/v3/utils.move:14:9+6
    assume {:print "$at(27,550,556)"} true;
    assume {:print "$track_abort(97,0):", $t19} $t19 == $t19;

    // $t7 := move($t19) at ./sources/v3/utils.move:14:9+6
    $t7 := $t19;

    // goto L3 at ./sources/v3/utils.move:14:9+6
    goto L3;

    // label L2 at ./sources/v3/utils.move:16:5+1
    assume {:print "$at(27,678,679)"} true;
L2:

    // return $t18 at ./sources/v3/utils.move:16:5+1
    assume {:print "$at(27,678,679)"} true;
    $ret0 := $t18;
    return;

    // label L3 at ./sources/v3/utils.move:16:5+1
L3:

    // abort($t7) at ./sources/v3/utils.move:16:5+1
    assume {:print "$at(27,678,679)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// struct i32::I32 at ./sources/math/i32.move:14:5+58
datatype $bb_i32_I32 {
    $bb_i32_I32($bits: bv32)
}
function {:inline} $Update'$bb_i32_I32'_bits(s: $bb_i32_I32, x: bv32): $bb_i32_I32 {
    $bb_i32_I32(x)
}
function $IsValid'$bb_i32_I32'(s: $bb_i32_I32): bool {
    $IsValid'bv32'(s->$bits)
}
function {:inline} $IsEqual'$bb_i32_I32'(s1: $bb_i32_I32, s2: $bb_i32_I32): bool {
    s1 == s2
}

// fun i32::from [baseline] at ./sources/math/i32.move:35:5+125
procedure {:inline 1} $bb_i32_from(_$t0: bv32) returns ($ret0: $bb_i32_I32)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: $bb_i32_I32;
    var $t4: int;
    var $t0: bv32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bv32': bv32;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i32.move:35:5+1
    assume {:print "$at(8,577,578)"} true;
    assume {:print "$track_local(98,0,0):", $t0} $t0 == $t0;

    // $t1 := 2147483647 at ./sources/math/i32.move:36:22+10
    assume {:print "$at(8,629,639)"} true;
    $t1 := 2147483647;
    assume $IsValid'u32'($t1);

    // $t2 := <=($t0, $t1) at ./sources/math/i32.move:36:17+15
    call $t2 := $LeBv32($t0, $int2bv.32($t1));

    // if ($t2) goto L1 else goto L0 at ./sources/math/i32.move:36:9+6
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i32.move:37:9+35
    assume {:print "$at(8,661,696)"} true;
L1:

    // $t3 := pack 0xbb::i32::I32($t0) at ./sources/math/i32.move:37:9+35
    assume {:print "$at(8,661,696)"} true;
    $t3 := $bb_i32_I32($t0);

    // trace_return[0]($t3) at ./sources/math/i32.move:35:34+96
    assume {:print "$at(8,606,702)"} true;
    assume {:print "$track_return(98,0,0):", $t3} $t3 == $t3;

    // goto L2 at ./sources/math/i32.move:35:34+96
    goto L2;

    // label L0 at ./sources/math/i32.move:36:34+9
    assume {:print "$at(8,641,650)"} true;
L0:

    // $t4 := 0 at ./sources/math/i32.move:36:34+9
    assume {:print "$at(8,641,650)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at ./sources/math/i32.move:36:9+6
    assume {:print "$at(8,616,622)"} true;
    assume {:print "$track_abort(98,0):", $t4} $t4 == $t4;

    // goto L3 at ./sources/math/i32.move:36:9+6
    goto L3;

    // label L2 at ./sources/math/i32.move:40:5+1
    assume {:print "$at(8,701,702)"} true;
L2:

    // return $t3 at ./sources/math/i32.move:40:5+1
    assume {:print "$at(8,701,702)"} true;
    $ret0 := $t3;
    return;

    // label L3 at ./sources/math/i32.move:40:5+1
L3:

    // abort($t4) at ./sources/math/i32.move:40:5+1
    assume {:print "$at(8,701,702)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun i32::add [baseline] at ./sources/math/i32.move:84:5+286
procedure {:inline 1} $bb_i32_add(_$t0: $bb_i32_I32, _$t1: $bb_i32_I32) returns ($ret0: $bb_i32_I32)
{
    // declare local variables
    var $t2: $bb_i32_I32;
    var $t3: $bb_i32_I32;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bv8;
    var $t8: int;
    var $t9: bv8;
    var $t10: bv8;
    var $t11: int;
    var $t12: bv8;
    var $t13: int;
    var $t14: bv8;
    var $t15: bv8;
    var $t16: int;
    var $t17: bv8;
    var $t18: bv8;
    var $t19: bv8;
    var $t20: bool;
    var $t21: int;
    var $t0: $bb_i32_I32;
    var $t1: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/i32.move:84:5+1
    assume {:print "$at(8,1652,1653)"} true;
    assume {:print "$track_local(98,1,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/i32.move:84:5+1
    assume {:print "$track_local(98,1,1):", $t1} $t1 == $t1;

    // $t3 := i32::wrapping_add($t0, $t1) on_abort goto L3 with $t4 at ./sources/math/i32.move:85:19+24
    assume {:print "$at(8,1714,1738)"} true;
    call $t3 := $bb_i32_wrapping_add($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,1714,1738)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_local[$t4]($t3) at ./sources/math/i32.move:85:19+24
    assume {:print "$track_local(98,1,2):", $t3} $t3 == $t3;

    // $t5 := i32::sign($t0) on_abort goto L3 with $t4 at ./sources/math/i32.move:86:25+10
    assume {:print "$at(8,1764,1774)"} true;
    call $t5 := $bb_i32_sign($t0);
    if ($abort_flag) {
        assume {:print "$at(8,1764,1774)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t6 := i32::sign($t1) on_abort goto L3 with $t4 at ./sources/math/i32.move:86:38+10
    call $t6 := $bb_i32_sign($t1);
    if ($abort_flag) {
        assume {:print "$at(8,1777,1787)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t7 := &($t5, $t6) at ./sources/math/i32.move:86:25+23
    call $t7 := $AndBv8($int2bv.8($t5), $int2bv.8($t6));

    // $t8 := i32::sign($t3) on_abort goto L3 with $t4 at ./sources/math/i32.move:86:58+9
    call $t8 := $bb_i32_sign($t3);
    if ($abort_flag) {
        assume {:print "$at(8,1797,1806)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t9 := i32::u8_neg($t8) on_abort goto L3 with $t4 at ./sources/math/i32.move:86:51+17
    call $t9 := $bb_i32_u8_neg($t8);
    if ($abort_flag) {
        assume {:print "$at(8,1790,1807)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t10 := &($t7, $t9) at ./sources/math/i32.move:86:24+45
    call $t10 := $AndBv8($t7, $t9);

    // $t11 := i32::sign($t0) on_abort goto L3 with $t4 at ./sources/math/i32.move:87:21+10
    assume {:print "$at(8,1831,1841)"} true;
    call $t11 := $bb_i32_sign($t0);
    if ($abort_flag) {
        assume {:print "$at(8,1831,1841)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t12 := i32::u8_neg($t11) on_abort goto L3 with $t4 at ./sources/math/i32.move:87:14+18
    call $t12 := $bb_i32_u8_neg($t11);
    if ($abort_flag) {
        assume {:print "$at(8,1824,1842)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t13 := i32::sign($t1) on_abort goto L3 with $t4 at ./sources/math/i32.move:87:42+10
    call $t13 := $bb_i32_sign($t1);
    if ($abort_flag) {
        assume {:print "$at(8,1852,1862)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t14 := i32::u8_neg($t13) on_abort goto L3 with $t4 at ./sources/math/i32.move:87:35+18
    call $t14 := $bb_i32_u8_neg($t13);
    if ($abort_flag) {
        assume {:print "$at(8,1845,1863)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t15 := &($t12, $t14) at ./sources/math/i32.move:87:14+39
    call $t15 := $AndBv8($t12, $t14);

    // $t16 := i32::sign($t3) on_abort goto L3 with $t4 at ./sources/math/i32.move:87:56+9
    call $t16 := $bb_i32_sign($t3);
    if ($abort_flag) {
        assume {:print "$at(8,1866,1875)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t17 := &($t15, $t16) at ./sources/math/i32.move:87:13+53
    call $t17 := $AndBv8($t15, $int2bv.8($t16));

    // $t18 := +($t10, $t17) on_abort goto L3 with $t4 at ./sources/math/i32.move:86:24+113
    assume {:print "$at(8,1763,1876)"} true;
    call $t18 := $AddBv8($t10, $t17);
    if ($abort_flag) {
        assume {:print "$at(8,1763,1876)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t19 := 0 at ./sources/math/i32.move:88:29+1
    assume {:print "$at(8,1906,1907)"} true;
    $t19 := 0bv8;
    assume $IsValid'bv8'($t19);

    // $t20 := ==($t18, $t19) at ./sources/math/i32.move:88:17+13
    $t20 := $IsEqual'bv8'($t18, $t19);

    // if ($t20) goto L1 else goto L0 at ./sources/math/i32.move:88:9+6
    if ($t20) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i32.move:89:9+3
    assume {:print "$at(8,1929,1932)"} true;
L1:

    // trace_return[0]($t3) at ./sources/math/i32.move:84:47+244
    assume {:print "$at(8,1694,1938)"} true;
    assume {:print "$track_return(98,1,0):", $t3} $t3 == $t3;

    // goto L2 at ./sources/math/i32.move:84:47+244
    goto L2;

    // label L0 at ./sources/math/i32.move:88:32+9
    assume {:print "$at(8,1909,1918)"} true;
L0:

    // $t21 := 0 at ./sources/math/i32.move:88:32+9
    assume {:print "$at(8,1909,1918)"} true;
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // trace_abort($t21) at ./sources/math/i32.move:88:9+6
    assume {:print "$at(8,1886,1892)"} true;
    assume {:print "$track_abort(98,1):", $t21} $t21 == $t21;

    // $t4 := move($t21) at ./sources/math/i32.move:88:9+6
    $t4 := $t21;

    // goto L3 at ./sources/math/i32.move:88:9+6
    goto L3;

    // label L2 at ./sources/math/i32.move:90:5+1
    assume {:print "$at(8,1937,1938)"} true;
L2:

    // return $t3 at ./sources/math/i32.move:90:5+1
    assume {:print "$at(8,1937,1938)"} true;
    $ret0 := $t3;
    return;

    // label L3 at ./sources/math/i32.move:90:5+1
L3:

    // abort($t4) at ./sources/math/i32.move:90:5+1
    assume {:print "$at(8,1937,1938)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun i32::cmp [baseline] at ./sources/math/i32.move:182:5+299
procedure {:inline 1} $bb_i32_cmp(_$t0: $bb_i32_I32, _$t1: $bb_i32_I32) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t0: $bb_i32_I32;
    var $t1: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/i32.move:182:5+1
    assume {:print "$at(8,4001,4002)"} true;
    assume {:print "$track_local(98,2,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/i32.move:182:5+1
    assume {:print "$track_local(98,2,1):", $t1} $t1 == $t1;

    // $t2 := get_field<0xbb::i32::I32>.bits($t0) at ./sources/math/i32.move:183:13+9
    assume {:print "$at(8,4056,4065)"} true;
    $t2 := $bv2int.32($t0->$bits);

    // $t3 := get_field<0xbb::i32::I32>.bits($t1) at ./sources/math/i32.move:183:26+9
    $t3 := $bv2int.32($t1->$bits);

    // $t4 := ==($t2, $t3) at ./sources/math/i32.move:183:13+22
    $t4 := $IsEqual'u32'($t2, $t3);

    // if ($t4) goto L1 else goto L0 at ./sources/math/i32.move:183:9+37
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i32.move:183:44+2
L1:

    // $t5 := 1 at ./sources/math/i32.move:183:44+2
    assume {:print "$at(8,4087,4089)"} true;
    $t5 := 1;
    assume $IsValid'u8'($t5);

    // trace_return[0]($t5) at ./sources/math/i32.move:183:37+9
    assume {:print "$track_return(98,2,0):", $t5} $t5 == $t5;

    // $t6 := move($t5) at ./sources/math/i32.move:183:37+9
    $t6 := $t5;

    // goto L8 at ./sources/math/i32.move:183:37+9
    goto L8;

    // label L0 at ./sources/math/i32.move:184:13+10
    assume {:print "$at(8,4103,4113)"} true;
L0:

    // $t7 := i32::sign($t0) on_abort goto L9 with $t8 at ./sources/math/i32.move:184:13+10
    assume {:print "$at(8,4103,4113)"} true;
    call $t7 := $bb_i32_sign($t0);
    if ($abort_flag) {
        assume {:print "$at(8,4103,4113)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(98,2):", $t8} $t8 == $t8;
        goto L9;
    }

    // $t9 := i32::sign($t1) on_abort goto L9 with $t8 at ./sources/math/i32.move:184:26+10
    call $t9 := $bb_i32_sign($t1);
    if ($abort_flag) {
        assume {:print "$at(8,4116,4126)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(98,2):", $t8} $t8 == $t8;
        goto L9;
    }

    // $t10 := >($t7, $t9) at ./sources/math/i32.move:184:13+23
    call $t10 := $Gt($t7, $t9);

    // if ($t10) goto L3 else goto L2 at ./sources/math/i32.move:184:9+38
    if ($t10) { goto L3; } else { goto L2; }

    // label L3 at ./sources/math/i32.move:184:45+2
L3:

    // $t11 := 0 at ./sources/math/i32.move:184:45+2
    assume {:print "$at(8,4135,4137)"} true;
    $t11 := 0;
    assume $IsValid'u8'($t11);

    // trace_return[0]($t11) at ./sources/math/i32.move:184:38+9
    assume {:print "$track_return(98,2,0):", $t11} $t11 == $t11;

    // $t6 := move($t11) at ./sources/math/i32.move:184:38+9
    $t6 := $t11;

    // goto L8 at ./sources/math/i32.move:184:38+9
    goto L8;

    // label L2 at ./sources/math/i32.move:185:13+10
    assume {:print "$at(8,4151,4161)"} true;
L2:

    // $t12 := i32::sign($t0) on_abort goto L9 with $t8 at ./sources/math/i32.move:185:13+10
    assume {:print "$at(8,4151,4161)"} true;
    call $t12 := $bb_i32_sign($t0);
    if ($abort_flag) {
        assume {:print "$at(8,4151,4161)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(98,2):", $t8} $t8 == $t8;
        goto L9;
    }

    // $t13 := i32::sign($t1) on_abort goto L9 with $t8 at ./sources/math/i32.move:185:26+10
    call $t13 := $bb_i32_sign($t1);
    if ($abort_flag) {
        assume {:print "$at(8,4164,4174)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(98,2):", $t8} $t8 == $t8;
        goto L9;
    }

    // $t14 := <($t12, $t13) at ./sources/math/i32.move:185:13+23
    call $t14 := $Lt($t12, $t13);

    // if ($t14) goto L5 else goto L4 at ./sources/math/i32.move:185:9+38
    if ($t14) { goto L5; } else { goto L4; }

    // label L5 at ./sources/math/i32.move:185:45+2
L5:

    // $t15 := 2 at ./sources/math/i32.move:185:45+2
    assume {:print "$at(8,4183,4185)"} true;
    $t15 := 2;
    assume $IsValid'u8'($t15);

    // trace_return[0]($t15) at ./sources/math/i32.move:185:38+9
    assume {:print "$track_return(98,2,0):", $t15} $t15 == $t15;

    // $t6 := move($t15) at ./sources/math/i32.move:185:38+9
    $t6 := $t15;

    // goto L8 at ./sources/math/i32.move:185:38+9
    goto L8;

    // label L4 at ./sources/math/i32.move:186:13+4
    assume {:print "$at(8,4199,4203)"} true;
L4:

    // $t16 := get_field<0xbb::i32::I32>.bits($t0) at ./sources/math/i32.move:186:13+9
    assume {:print "$at(8,4199,4208)"} true;
    $t16 := $bv2int.32($t0->$bits);

    // $t17 := get_field<0xbb::i32::I32>.bits($t1) at ./sources/math/i32.move:186:25+9
    $t17 := $bv2int.32($t1->$bits);

    // $t18 := >($t16, $t17) at ./sources/math/i32.move:186:13+21
    call $t18 := $Gt($t16, $t17);

    // if ($t18) goto L7 else goto L6 at ./sources/math/i32.move:186:9+99
    if ($t18) { goto L7; } else { goto L6; }

    // label L7 at ./sources/math/i32.move:187:20+2
    assume {:print "$at(8,4243,4245)"} true;
L7:

    // $t19 := 2 at ./sources/math/i32.move:187:20+2
    assume {:print "$at(8,4243,4245)"} true;
    $t19 := 2;
    assume $IsValid'u8'($t19);

    // trace_return[0]($t19) at ./sources/math/i32.move:187:13+9
    assume {:print "$track_return(98,2,0):", $t19} $t19 == $t19;

    // $t6 := move($t19) at ./sources/math/i32.move:187:13+9
    $t6 := $t19;

    // goto L8 at ./sources/math/i32.move:187:13+9
    goto L8;

    // label L6 at ./sources/math/i32.move:189:20+2
    assume {:print "$at(8,4282,4284)"} true;
L6:

    // $t20 := 0 at ./sources/math/i32.move:189:20+2
    assume {:print "$at(8,4282,4284)"} true;
    $t20 := 0;
    assume $IsValid'u8'($t20);

    // trace_return[0]($t20) at ./sources/math/i32.move:189:13+9
    assume {:print "$track_return(98,2,0):", $t20} $t20 == $t20;

    // $t6 := move($t20) at ./sources/math/i32.move:189:13+9
    $t6 := $t20;

    // label L8 at ./sources/math/i32.move:191:5+1
    assume {:print "$at(8,4299,4300)"} true;
L8:

    // return $t6 at ./sources/math/i32.move:191:5+1
    assume {:print "$at(8,4299,4300)"} true;
    $ret0 := $t6;
    return;

    // label L9 at ./sources/math/i32.move:191:5+1
L9:

    // abort($t8) at ./sources/math/i32.move:191:5+1
    assume {:print "$at(8,4299,4300)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun i32::sub [baseline] at ./sources/math/i32.move:99:5+175
procedure {:inline 1} $bb_i32_sub(_$t0: $bb_i32_I32, _$t1: $bb_i32_I32) returns ($ret0: $bb_i32_I32)
{
    // declare local variables
    var $t2: $bb_i32_I32;
    var $t3: bv32;
    var $t4: bv32;
    var $t5: int;
    var $t6: $bb_i32_I32;
    var $t7: int;
    var $t8: $bb_i32_I32;
    var $t9: $bb_i32_I32;
    var $t10: $bb_i32_I32;
    var $t0: $bb_i32_I32;
    var $t1: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/i32.move:99:5+1
    assume {:print "$at(8,2143,2144)"} true;
    assume {:print "$track_local(98,3,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/i32.move:99:5+1
    assume {:print "$track_local(98,3,1):", $t1} $t1 == $t1;

    // $t3 := get_field<0xbb::i32::I32>.bits($t1) at ./sources/math/i32.move:101:27+9
    assume {:print "$at(8,2254,2263)"} true;
    $t3 := ($t1->$bits);

    // $t4 := i32::u32_neg($t3) on_abort goto L2 with $t5 at ./sources/math/i32.move:101:19+18
    call $t4 := $bb_i32_u32_neg($t3);
    if ($abort_flag) {
        assume {:print "$at(8,2246,2264)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(98,3):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t6 := pack 0xbb::i32::I32($t4) at ./sources/math/i32.move:100:36+52
    assume {:print "$at(8,2222,2274)"} true;
    $t6 := $bb_i32_I32($t4);

    // $t7 := 1 at ./sources/math/i32.move:102:17+1
    assume {:print "$at(8,2281,2282)"} true;
    $t7 := 1;
    assume $IsValid'u32'($t7);

    // $t8 := i32::from($t7) on_abort goto L2 with $t5 at ./sources/math/i32.move:102:12+7
    call $t8 := $bb_i32_from($int2bv.32($t7));
    if ($abort_flag) {
        assume {:print "$at(8,2276,2283)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(98,3):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t9 := i32::wrapping_add($t6, $t8) on_abort goto L2 with $t5 at ./sources/math/i32.move:100:23+75
    assume {:print "$at(8,2209,2284)"} true;
    call $t9 := $bb_i32_wrapping_add($t6, $t8);
    if ($abort_flag) {
        assume {:print "$at(8,2209,2284)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(98,3):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[$t4]($t9) at ./sources/math/i32.move:100:23+75
    assume {:print "$track_local(98,3,2):", $t9} $t9 == $t9;

    // $t10 := i32::add($t0, $t9) on_abort goto L2 with $t5 at ./sources/math/i32.move:103:9+18
    assume {:print "$at(8,2294,2312)"} true;
    call $t10 := $bb_i32_add($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(8,2294,2312)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(98,3):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t10) at ./sources/math/i32.move:103:9+18
    assume {:print "$track_return(98,3,0):", $t10} $t10 == $t10;

    // label L1 at ./sources/math/i32.move:104:5+1
    assume {:print "$at(8,2317,2318)"} true;
L1:

    // return $t10 at ./sources/math/i32.move:104:5+1
    assume {:print "$at(8,2317,2318)"} true;
    $ret0 := $t10;
    return;

    // label L2 at ./sources/math/i32.move:104:5+1
L2:

    // abort($t5) at ./sources/math/i32.move:104:5+1
    assume {:print "$at(8,2317,2318)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun i32::zero [baseline] at ./sources/math/i32.move:23:5+74
procedure {:inline 1} $bb_i32_zero() returns ($ret0: $bb_i32_I32)
{
    // declare local variables
    var $t0: bv32;
    var $t1: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;

    // bytecode translation starts here
    // $t0 := 0 at ./sources/math/i32.move:25:19+1
    assume {:print "$at(8,464,465)"} true;
    $t0 := 0bv32;
    assume $IsValid'bv32'($t0);

    // $t1 := pack 0xbb::i32::I32($t0) at ./sources/math/i32.move:24:9+35
    assume {:print "$at(8,440,475)"} true;
    $t1 := $bb_i32_I32($t0);

    // trace_return[0]($t1) at ./sources/math/i32.move:24:9+35
    assume {:print "$track_return(98,4,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/math/i32.move:27:5+1
    assume {:print "$at(8,480,481)"} true;
L1:

    // return $t1 at ./sources/math/i32.move:27:5+1
    assume {:print "$at(8,480,481)"} true;
    $ret0 := $t1;
    return;

}

// fun i32::div [baseline] at ./sources/math/i32.move:114:5+216
procedure {:inline 1} $bb_i32_div(_$t0: $bb_i32_I32, _$t1: $bb_i32_I32) returns ($ret0: $bb_i32_I32)
{
    // declare local variables
    var $t2: int;
    var $t3: bv32;
    var $t4: int;
    var $t5: bv32;
    var $t6: bv32;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: $bb_i32_I32;
    var $t11: $bb_i32_I32;
    var $t12: $bb_i32_I32;
    var $t0: $bb_i32_I32;
    var $t1: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bv32': bv32;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/i32.move:114:5+1
    assume {:print "$at(8,2549,2550)"} true;
    assume {:print "$track_local(98,5,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/i32.move:114:5+1
    assume {:print "$track_local(98,5,1):", $t1} $t1 == $t1;

    // $t3 := i32::abs_u32($t0) on_abort goto L3 with $t4 at ./sources/math/i32.move:115:22+13
    assume {:print "$at(8,2614,2627)"} true;
    call $t3 := $bb_i32_abs_u32($t0);
    if ($abort_flag) {
        assume {:print "$at(8,2614,2627)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,5):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := i32::abs_u32($t1) on_abort goto L3 with $t4 at ./sources/math/i32.move:115:38+13
    call $t5 := $bb_i32_abs_u32($t1);
    if ($abort_flag) {
        assume {:print "$at(8,2630,2643)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,5):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t6 := /($t3, $t5) on_abort goto L3 with $t4 at ./sources/math/i32.move:115:22+29
    call $t6 := $DivBv32($t3, $t5);
    if ($abort_flag) {
        assume {:print "$at(8,2614,2643)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,5):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_local[$t4]($t6) at ./sources/math/i32.move:115:22+29
    assume {:print "$track_local(98,5,2):", $t6} $t6 == $t6;

    // $t7 := i32::sign($t0) on_abort goto L3 with $t4 at ./sources/math/i32.move:116:13+10
    assume {:print "$at(8,2657,2667)"} true;
    call $t7 := $bb_i32_sign($t0);
    if ($abort_flag) {
        assume {:print "$at(8,2657,2667)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,5):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t8 := i32::sign($t1) on_abort goto L3 with $t4 at ./sources/math/i32.move:116:27+10
    call $t8 := $bb_i32_sign($t1);
    if ($abort_flag) {
        assume {:print "$at(8,2671,2681)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,5):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t9 := !=($t7, $t8) at ./sources/math/i32.move:116:13+24
    $t9 := !$IsEqual'u8'($t7, $t8);

    // if ($t9) goto L1 else goto L0 at ./sources/math/i32.move:116:9+77
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i32.move:117:20+16
    assume {:print "$at(8,2704,2720)"} true;
L1:

    // $t10 := i32::neg_from($t6) on_abort goto L3 with $t4 at ./sources/math/i32.move:117:20+16
    assume {:print "$at(8,2704,2720)"} true;
    call $t10 := $bb_i32_neg_from($t6);
    if ($abort_flag) {
        assume {:print "$at(8,2704,2720)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,5):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_return[0]($t10) at ./sources/math/i32.move:117:13+23
    assume {:print "$track_return(98,5,0):", $t10} $t10 == $t10;

    // $t11 := move($t10) at ./sources/math/i32.move:117:13+23
    $t11 := $t10;

    // goto L2 at ./sources/math/i32.move:117:13+23
    goto L2;

    // label L0 at ./sources/math/i32.move:119:16+12
    assume {:print "$at(8,2747,2759)"} true;
L0:

    // $t12 := i32::from($t6) on_abort goto L3 with $t4 at ./sources/math/i32.move:119:16+12
    assume {:print "$at(8,2747,2759)"} true;
    call $t12 := $bb_i32_from($t6);
    if ($abort_flag) {
        assume {:print "$at(8,2747,2759)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,5):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_return[0]($t12) at ./sources/math/i32.move:119:9+19
    assume {:print "$track_return(98,5,0):", $t12} $t12 == $t12;

    // $t11 := move($t12) at ./sources/math/i32.move:119:9+19
    $t11 := $t12;

    // label L2 at ./sources/math/i32.move:120:5+1
    assume {:print "$at(8,2764,2765)"} true;
L2:

    // return $t11 at ./sources/math/i32.move:120:5+1
    assume {:print "$at(8,2764,2765)"} true;
    $ret0 := $t11;
    return;

    // label L3 at ./sources/math/i32.move:120:5+1
L3:

    // abort($t4) at ./sources/math/i32.move:120:5+1
    assume {:print "$at(8,2764,2765)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun i32::eq [baseline] at ./sources/math/i32.move:193:5+80
procedure {:inline 1} $bb_i32_eq(_$t0: $bb_i32_I32, _$t1: $bb_i32_I32) returns ($ret0: bool)
{
    // declare local variables
    var $t2: bv32;
    var $t3: bv32;
    var $t4: bool;
    var $t0: $bb_i32_I32;
    var $t1: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/i32.move:193:5+1
    assume {:print "$at(8,4306,4307)"} true;
    assume {:print "$track_local(98,6,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/i32.move:193:5+1
    assume {:print "$track_local(98,6,1):", $t1} $t1 == $t1;

    // $t2 := get_field<0xbb::i32::I32>.bits($t0) at ./sources/math/i32.move:194:9+9
    assume {:print "$at(8,4358,4367)"} true;
    $t2 := ($t0->$bits);

    // $t3 := get_field<0xbb::i32::I32>.bits($t1) at ./sources/math/i32.move:194:22+9
    $t3 := $t1->$bits;

    // $t4 := ==($t2, $t3) at ./sources/math/i32.move:194:9+22
    $t4 := $IsEqual'bv32'($t2, $t3);

    // trace_return[0]($t4) at ./sources/math/i32.move:194:9+22
    assume {:print "$track_return(98,6,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/math/i32.move:195:5+1
    assume {:print "$at(8,4385,4386)"} true;
L1:

    // return $t4 at ./sources/math/i32.move:195:5+1
    assume {:print "$at(8,4385,4386)"} true;
    $ret0 := $t4;
    return;

}

// fun i32::mul [baseline] at ./sources/math/i32.move:106:5+219
procedure {:inline 1} $bb_i32_mul(_$t0: $bb_i32_I32, _$t1: $bb_i32_I32) returns ($ret0: $bb_i32_I32)
{
    // declare local variables
    var $t2: int;
    var $t3: bv32;
    var $t4: int;
    var $t5: bv32;
    var $t6: bv32;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: $bb_i32_I32;
    var $t11: $bb_i32_I32;
    var $t12: $bb_i32_I32;
    var $t0: $bb_i32_I32;
    var $t1: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bv32': bv32;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/i32.move:106:5+1
    assume {:print "$at(8,2324,2325)"} true;
    assume {:print "$track_local(98,7,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/i32.move:106:5+1
    assume {:print "$track_local(98,7,1):", $t1} $t1 == $t1;

    // $t3 := i32::abs_u32($t0) on_abort goto L3 with $t4 at ./sources/math/i32.move:107:23+13
    assume {:print "$at(8,2390,2403)"} true;
    call $t3 := $bb_i32_abs_u32($t0);
    if ($abort_flag) {
        assume {:print "$at(8,2390,2403)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,7):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := i32::abs_u32($t1) on_abort goto L3 with $t4 at ./sources/math/i32.move:107:39+13
    call $t5 := $bb_i32_abs_u32($t1);
    if ($abort_flag) {
        assume {:print "$at(8,2406,2419)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,7):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t6 := *($t3, $t5) on_abort goto L3 with $t4 at ./sources/math/i32.move:107:23+29
    call $t6 := $MulBv32($t3, $t5);
    if ($abort_flag) {
        assume {:print "$at(8,2390,2419)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,7):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_local[$t4]($t6) at ./sources/math/i32.move:107:23+29
    assume {:print "$track_local(98,7,2):", $t6} $t6 == $t6;

    // $t7 := i32::sign($t0) on_abort goto L3 with $t4 at ./sources/math/i32.move:108:13+10
    assume {:print "$at(8,2433,2443)"} true;
    call $t7 := $bb_i32_sign($t0);
    if ($abort_flag) {
        assume {:print "$at(8,2433,2443)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,7):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t8 := i32::sign($t1) on_abort goto L3 with $t4 at ./sources/math/i32.move:108:27+10
    call $t8 := $bb_i32_sign($t1);
    if ($abort_flag) {
        assume {:print "$at(8,2447,2457)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,7):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t9 := !=($t7, $t8) at ./sources/math/i32.move:108:13+24
    $t9 := !$IsEqual'u8'($t7, $t8);

    // if ($t9) goto L1 else goto L0 at ./sources/math/i32.move:108:9+78
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i32.move:109:20+17
    assume {:print "$at(8,2480,2497)"} true;
L1:

    // $t10 := i32::neg_from($t6) on_abort goto L3 with $t4 at ./sources/math/i32.move:109:20+17
    assume {:print "$at(8,2480,2497)"} true;
    call $t10 := $bb_i32_neg_from($t6);
    if ($abort_flag) {
        assume {:print "$at(8,2480,2497)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,7):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_return[0]($t10) at ./sources/math/i32.move:109:13+24
    assume {:print "$track_return(98,7,0):", $t10} $t10 == $t10;

    // $t11 := move($t10) at ./sources/math/i32.move:109:13+24
    $t11 := $t10;

    // goto L2 at ./sources/math/i32.move:109:13+24
    goto L2;

    // label L0 at ./sources/math/i32.move:111:16+13
    assume {:print "$at(8,2524,2537)"} true;
L0:

    // $t12 := i32::from($t6) on_abort goto L3 with $t4 at ./sources/math/i32.move:111:16+13
    assume {:print "$at(8,2524,2537)"} true;
    call $t12 := $bb_i32_from($t6);
    if ($abort_flag) {
        assume {:print "$at(8,2524,2537)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,7):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_return[0]($t12) at ./sources/math/i32.move:111:9+20
    assume {:print "$track_return(98,7,0):", $t12} $t12 == $t12;

    // $t11 := move($t12) at ./sources/math/i32.move:111:9+20
    $t11 := $t12;

    // label L2 at ./sources/math/i32.move:112:5+1
    assume {:print "$at(8,2542,2543)"} true;
L2:

    // return $t11 at ./sources/math/i32.move:112:5+1
    assume {:print "$at(8,2542,2543)"} true;
    $ret0 := $t11;
    return;

    // label L3 at ./sources/math/i32.move:112:5+1
L3:

    // abort($t4) at ./sources/math/i32.move:112:5+1
    assume {:print "$at(8,2542,2543)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun i32::sign [baseline] at ./sources/math/i32.move:174:5+66
procedure {:inline 1} $bb_i32_sign(_$t0: $bb_i32_I32) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t0: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'u8': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i32.move:174:5+1
    assume {:print "$at(8,3863,3864)"} true;
    assume {:print "$track_local(98,8,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0xbb::i32::I32>.bits($t0) at ./sources/math/i32.move:175:11+6
    assume {:print "$at(8,3903,3909)"} true;
    $t1 := $bv2int.32($t0->$bits);

    // $t2 := 31 at ./sources/math/i32.move:175:21+2
    $t2 := 31;
    assume $IsValid'u8'($t2);

    // $t3 := >>($t1, $t2) on_abort goto L2 with $t4 at ./sources/math/i32.move:175:10+14
    call $t3 := $ShrU32($t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(8,3902,3916)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,8):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := (u8)($t3) on_abort goto L2 with $t4 at ./sources/math/i32.move:175:9+22
    call $t5 := $CastU8($t3);
    if ($abort_flag) {
        assume {:print "$at(8,3901,3923)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,8):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t5) at ./sources/math/i32.move:175:9+22
    assume {:print "$track_return(98,8,0):", $t5} $t5 == $t5;

    // label L1 at ./sources/math/i32.move:176:5+1
    assume {:print "$at(8,3928,3929)"} true;
L1:

    // return $t5 at ./sources/math/i32.move:176:5+1
    assume {:print "$at(8,3928,3929)"} true;
    $ret0 := $t5;
    return;

    // label L2 at ./sources/math/i32.move:176:5+1
L2:

    // abort($t4) at ./sources/math/i32.move:176:5+1
    assume {:print "$at(8,3928,3929)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun i32::abs [baseline] at ./sources/math/i32.move:122:5+231
procedure {:inline 1} $bb_i32_abs(_$t0: $bb_i32_I32) returns ($ret0: $bb_i32_I32)
{
    // declare local variables
    var $t1: $bb_i32_I32;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bv32;
    var $t7: bv32;
    var $t8: bool;
    var $t9: bv32;
    var $t10: bv32;
    var $t11: bv32;
    var $t12: bv32;
    var $t13: $bb_i32_I32;
    var $t14: int;
    var $t0: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i32.move:122:5+1
    assume {:print "$at(8,2771,2772)"} true;
    assume {:print "$track_local(98,9,0):", $t0} $t0 == $t0;

    // $t2 := i32::sign($t0) on_abort goto L6 with $t3 at ./sources/math/i32.move:123:13+7
    assume {:print "$at(8,2813,2820)"} true;
    call $t2 := $bb_i32_sign($t0);
    if ($abort_flag) {
        assume {:print "$at(8,2813,2820)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(98,9):", $t3} $t3 == $t3;
        goto L6;
    }

    // $t4 := 0 at ./sources/math/i32.move:123:24+1
    $t4 := 0;
    assume $IsValid'u8'($t4);

    // $t5 := ==($t2, $t4) at ./sources/math/i32.move:123:13+12
    $t5 := $IsEqual'u8'($t2, $t4);

    // if ($t5) goto L1 else goto L0 at ./sources/math/i32.move:123:9+187
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i32.move:124:13+1
    assume {:print "$at(8,2841,2842)"} true;
L1:

    // $t1 := $t0 at ./sources/math/i32.move:124:13+1
    assume {:print "$at(8,2841,2842)"} true;
    $t1 := $t0;

    // trace_local[return]($t0) at ./sources/math/i32.move:124:13+1
    assume {:print "$track_local(98,9,1):", $t0} $t0 == $t0;

    // label L4 at ./sources/math/i32.move:123:9+187
    assume {:print "$at(8,2809,2996)"} true;
L4:

    // trace_return[0]($t1) at ./sources/math/i32.move:123:9+187
    assume {:print "$at(8,2809,2996)"} true;
    assume {:print "$track_return(98,9,0):", $t1} $t1 == $t1;

    // goto L5 at ./sources/math/i32.move:123:9+187
    goto L5;

    // label L0 at ./sources/math/i32.move:126:21+1
    assume {:print "$at(8,2880,2881)"} true;
L0:

    // $t6 := get_field<0xbb::i32::I32>.bits($t0) at ./sources/math/i32.move:126:21+6
    assume {:print "$at(8,2880,2886)"} true;
    $t6 := $t0->$bits;

    // $t7 := 2147483648 at ./sources/math/i32.move:126:30+10
    $t7 := 2147483648bv32;
    assume $IsValid'bv32'($t7);

    // $t8 := >($t6, $t7) at ./sources/math/i32.move:126:21+19
    call $t8 := $GtBv32($t6, $t7);

    // if ($t8) goto L3 else goto L2 at ./sources/math/i32.move:126:13+6
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at ./sources/math/i32.move:128:31+1
    assume {:print "$at(8,2961,2962)"} true;
L3:

    // $t9 := get_field<0xbb::i32::I32>.bits($t0) at ./sources/math/i32.move:128:31+6
    assume {:print "$at(8,2961,2967)"} true;
    $t9 := $t0->$bits;

    // $t10 := 1 at ./sources/math/i32.move:128:40+1
    $t10 := 1bv32;
    assume $IsValid'bv32'($t10);

    // $t11 := -($t9, $t10) on_abort goto L6 with $t3 at ./sources/math/i32.move:128:31+10
    call $t11 := $SubBv32($t9, $t10);
    if ($abort_flag) {
        assume {:print "$at(8,2961,2971)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(98,9):", $t3} $t3 == $t3;
        goto L6;
    }

    // $t12 := i32::u32_neg($t11) on_abort goto L6 with $t3 at ./sources/math/i32.move:128:23+19
    call $t12 := $bb_i32_u32_neg($t11);
    if ($abort_flag) {
        assume {:print "$at(8,2953,2972)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(98,9):", $t3} $t3 == $t3;
        goto L6;
    }

    // $t13 := pack 0xbb::i32::I32($t12) at ./sources/math/i32.move:127:13+61
    assume {:print "$at(8,2925,2986)"} true;
    $t13 := $bb_i32_I32($t12);

    // $t1 := $t13 at ./sources/math/i32.move:127:13+61
    $t1 := $t13;

    // trace_local[return]($t13) at ./sources/math/i32.move:127:13+61
    assume {:print "$track_local(98,9,1):", $t13} $t13 == $t13;

    // goto L4 at ./sources/math/i32.move:127:13+61
    goto L4;

    // label L2 at ./sources/math/i32.move:126:42+9
    assume {:print "$at(8,2901,2910)"} true;
L2:

    // $t14 := 0 at ./sources/math/i32.move:126:42+9
    assume {:print "$at(8,2901,2910)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // trace_abort($t14) at ./sources/math/i32.move:126:13+6
    assume {:print "$at(8,2872,2878)"} true;
    assume {:print "$track_abort(98,9):", $t14} $t14 == $t14;

    // $t3 := move($t14) at ./sources/math/i32.move:126:13+6
    $t3 := $t14;

    // goto L6 at ./sources/math/i32.move:126:13+6
    goto L6;

    // label L5 at ./sources/math/i32.move:131:5+1
    assume {:print "$at(8,3001,3002)"} true;
L5:

    // return $t1 at ./sources/math/i32.move:131:5+1
    assume {:print "$at(8,3001,3002)"} true;
    $ret0 := $t1;
    return;

    // label L6 at ./sources/math/i32.move:131:5+1
L6:

    // abort($t3) at ./sources/math/i32.move:131:5+1
    assume {:print "$at(8,3001,3002)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun i32::abs_u32 [baseline] at ./sources/math/i32.move:133:5+145
procedure {:inline 1} $bb_i32_abs_u32(_$t0: $bb_i32_I32) returns ($ret0: bv32)
{
    // declare local variables
    var $t1: bv32;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bv32;
    var $t7: bv32;
    var $t8: bv32;
    var $t9: bv32;
    var $t10: bv32;
    var $t0: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bv32': bv32;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i32.move:133:5+1
    assume {:print "$at(8,3008,3009)"} true;
    assume {:print "$track_local(98,10,0):", $t0} $t0 == $t0;

    // $t2 := i32::sign($t0) on_abort goto L4 with $t3 at ./sources/math/i32.move:134:13+7
    assume {:print "$at(8,3054,3061)"} true;
    call $t2 := $bb_i32_sign($t0);
    if ($abort_flag) {
        assume {:print "$at(8,3054,3061)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(98,10):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t4 := 0 at ./sources/math/i32.move:134:24+1
    $t4 := 0;
    assume $IsValid'u8'($t4);

    // $t5 := ==($t2, $t4) at ./sources/math/i32.move:134:13+12
    $t5 := $IsEqual'u8'($t2, $t4);

    // if ($t5) goto L1 else goto L0 at ./sources/math/i32.move:134:9+97
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i32.move:135:13+1
    assume {:print "$at(8,3082,3083)"} true;
L1:

    // $t6 := get_field<0xbb::i32::I32>.bits($t0) at ./sources/math/i32.move:135:13+6
    assume {:print "$at(8,3082,3088)"} true;
    $t6 := $t0->$bits;

    // $t1 := $t6 at ./sources/math/i32.move:135:13+6
    $t1 := $t6;

    // trace_local[return]($t6) at ./sources/math/i32.move:135:13+6
    assume {:print "$track_local(98,10,1):", $t6} $t6 == $t6;

    // label L2 at ./sources/math/i32.move:134:9+97
    assume {:print "$at(8,3050,3147)"} true;
L2:

    // trace_return[0]($t1) at ./sources/math/i32.move:134:9+97
    assume {:print "$at(8,3050,3147)"} true;
    assume {:print "$track_return(98,10,0):", $t1} $t1 == $t1;

    // goto L3 at ./sources/math/i32.move:134:9+97
    goto L3;

    // label L0 at ./sources/math/i32.move:137:21+1
    assume {:print "$at(8,3126,3127)"} true;
L0:

    // $t7 := get_field<0xbb::i32::I32>.bits($t0) at ./sources/math/i32.move:137:21+6
    assume {:print "$at(8,3126,3132)"} true;
    $t7 := $t0->$bits;

    // $t8 := 1 at ./sources/math/i32.move:137:30+1
    $t8 := 1bv32;
    assume $IsValid'bv32'($t8);

    // $t9 := -($t7, $t8) on_abort goto L4 with $t3 at ./sources/math/i32.move:137:21+10
    call $t9 := $SubBv32($t7, $t8);
    if ($abort_flag) {
        assume {:print "$at(8,3126,3136)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(98,10):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t10 := i32::u32_neg($t9) on_abort goto L4 with $t3 at ./sources/math/i32.move:137:13+19
    call $t10 := $bb_i32_u32_neg($t9);
    if ($abort_flag) {
        assume {:print "$at(8,3118,3137)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(98,10):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t1 := $t10 at ./sources/math/i32.move:137:13+19
    $t1 := $t10;

    // trace_local[return]($t10) at ./sources/math/i32.move:137:13+19
    assume {:print "$track_local(98,10,1):", $t10} $t10 == $t10;

    // goto L2 at ./sources/math/i32.move:137:13+19
    goto L2;

    // label L3 at ./sources/math/i32.move:139:5+1
    assume {:print "$at(8,3152,3153)"} true;
L3:

    // return $t1 at ./sources/math/i32.move:139:5+1
    assume {:print "$at(8,3152,3153)"} true;
    $ret0 := $t1;
    return;

    // label L4 at ./sources/math/i32.move:139:5+1
L4:

    // abort($t3) at ./sources/math/i32.move:139:5+1
    assume {:print "$at(8,3152,3153)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun i32::as_u32 [baseline] at ./sources/math/i32.move:170:5+53
procedure {:inline 1} $bb_i32_as_u32(_$t0: $bb_i32_I32) returns ($ret0: bv32)
{
    // declare local variables
    var $t1: bv32;
    var $t0: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bv32': bv32;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i32.move:170:5+1
    assume {:print "$at(8,3804,3805)"} true;
    assume {:print "$track_local(98,12,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0xbb::i32::I32>.bits($t0) at ./sources/math/i32.move:171:9+6
    assume {:print "$at(8,3845,3851)"} true;
    $t1 := $t0->$bits;

    // trace_return[0]($t1) at ./sources/math/i32.move:171:9+6
    assume {:print "$track_return(98,12,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/math/i32.move:172:5+1
    assume {:print "$at(8,3856,3857)"} true;
L1:

    // return $t1 at ./sources/math/i32.move:172:5+1
    assume {:print "$at(8,3856,3857)"} true;
    $ret0 := $t1;
    return;

}

// fun i32::from_u32 [baseline] at ./sources/math/i32.move:29:5+84
procedure {:inline 1} $bb_i32_from_u32(_$t0: bv32) returns ($ret0: $bb_i32_I32)
{
    // declare local variables
    var $t1: $bb_i32_I32;
    var $t0: bv32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bv32': bv32;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i32.move:29:5+1
    assume {:print "$at(8,487,488)"} true;
    assume {:print "$track_local(98,13,0):", $t0} $t0 == $t0;

    // $t1 := pack 0xbb::i32::I32($t0) at ./sources/math/i32.move:30:9+35
    assume {:print "$at(8,530,565)"} true;
    $t1 := $bb_i32_I32($t0);

    // trace_return[0]($t1) at ./sources/math/i32.move:30:9+35
    assume {:print "$track_return(98,13,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/math/i32.move:33:5+1
    assume {:print "$at(8,570,571)"} true;
L1:

    // return $t1 at ./sources/math/i32.move:33:5+1
    assume {:print "$at(8,570,571)"} true;
    $ret0 := $t1;
    return;

}

// fun i32::gte [baseline] at ./sources/math/i32.move:201:5+80
procedure {:inline 1} $bb_i32_gte(_$t0: $bb_i32_I32, _$t1: $bb_i32_I32) returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t0: $bb_i32_I32;
    var $t1: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/i32.move:201:5+1
    assume {:print "$at(8,4477,4478)"} true;
    assume {:print "$track_local(98,15,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/i32.move:201:5+1
    assume {:print "$track_local(98,15,1):", $t1} $t1 == $t1;

    // $t2 := i32::cmp($t0, $t1) on_abort goto L2 with $t3 at ./sources/math/i32.move:202:9+15
    assume {:print "$at(8,4530,4545)"} true;
    call $t2 := $bb_i32_cmp($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,4530,4545)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(98,15):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := 1 at ./sources/math/i32.move:202:28+2
    $t4 := 1;
    assume $IsValid'u8'($t4);

    // $t5 := >=($t2, $t4) at ./sources/math/i32.move:202:9+21
    call $t5 := $Ge($t2, $t4);

    // trace_return[0]($t5) at ./sources/math/i32.move:202:9+21
    assume {:print "$track_return(98,15,0):", $t5} $t5 == $t5;

    // label L1 at ./sources/math/i32.move:203:5+1
    assume {:print "$at(8,4556,4557)"} true;
L1:

    // return $t5 at ./sources/math/i32.move:203:5+1
    assume {:print "$at(8,4556,4557)"} true;
    $ret0 := $t5;
    return;

    // label L2 at ./sources/math/i32.move:203:5+1
L2:

    // abort($t3) at ./sources/math/i32.move:203:5+1
    assume {:print "$at(8,4556,4557)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun i32::is_neg [baseline] at ./sources/math/i32.move:178:5+60
procedure {:inline 1} $bb_i32_is_neg(_$t0: $bb_i32_I32) returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t0: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i32.move:178:5+1
    assume {:print "$at(8,3935,3936)"} true;
    assume {:print "$track_local(98,17,0):", $t0} $t0 == $t0;

    // $t1 := i32::sign($t0) on_abort goto L2 with $t2 at ./sources/math/i32.move:179:9+7
    assume {:print "$at(8,3977,3984)"} true;
    call $t1 := $bb_i32_sign($t0);
    if ($abort_flag) {
        assume {:print "$at(8,3977,3984)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(98,17):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := 1 at ./sources/math/i32.move:179:20+1
    $t3 := 1;
    assume $IsValid'u8'($t3);

    // $t4 := ==($t1, $t3) at ./sources/math/i32.move:179:9+12
    $t4 := $IsEqual'u8'($t1, $t3);

    // trace_return[0]($t4) at ./sources/math/i32.move:179:9+12
    assume {:print "$track_return(98,17,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/math/i32.move:180:5+1
    assume {:print "$at(8,3994,3995)"} true;
L1:

    // return $t4 at ./sources/math/i32.move:180:5+1
    assume {:print "$at(8,3994,3995)"} true;
    $ret0 := $t4;
    return;

    // label L2 at ./sources/math/i32.move:180:5+1
L2:

    // abort($t2) at ./sources/math/i32.move:180:5+1
    assume {:print "$at(8,3994,3995)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun i32::lt [baseline] at ./sources/math/i32.move:205:5+79
procedure {:inline 1} $bb_i32_lt(_$t0: $bb_i32_I32, _$t1: $bb_i32_I32) returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t0: $bb_i32_I32;
    var $t1: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/i32.move:205:5+1
    assume {:print "$at(8,4563,4564)"} true;
    assume {:print "$track_local(98,18,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/i32.move:205:5+1
    assume {:print "$track_local(98,18,1):", $t1} $t1 == $t1;

    // $t2 := i32::cmp($t0, $t1) on_abort goto L2 with $t3 at ./sources/math/i32.move:206:9+15
    assume {:print "$at(8,4615,4630)"} true;
    call $t2 := $bb_i32_cmp($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,4615,4630)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(98,18):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := 0 at ./sources/math/i32.move:206:28+2
    $t4 := 0;
    assume $IsValid'u8'($t4);

    // $t5 := ==($t2, $t4) at ./sources/math/i32.move:206:9+21
    $t5 := $IsEqual'u8'($t2, $t4);

    // trace_return[0]($t5) at ./sources/math/i32.move:206:9+21
    assume {:print "$track_return(98,18,0):", $t5} $t5 == $t5;

    // label L1 at ./sources/math/i32.move:207:5+1
    assume {:print "$at(8,4641,4642)"} true;
L1:

    // return $t5 at ./sources/math/i32.move:207:5+1
    assume {:print "$at(8,4641,4642)"} true;
    $ret0 := $t5;
    return;

    // label L2 at ./sources/math/i32.move:207:5+1
L2:

    // abort($t3) at ./sources/math/i32.move:207:5+1
    assume {:print "$at(8,4641,4642)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun i32::lte [baseline] at ./sources/math/i32.move:209:5+80
procedure {:inline 1} $bb_i32_lte(_$t0: $bb_i32_I32, _$t1: $bb_i32_I32) returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t0: $bb_i32_I32;
    var $t1: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/i32.move:209:5+1
    assume {:print "$at(8,4648,4649)"} true;
    assume {:print "$track_local(98,19,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/i32.move:209:5+1
    assume {:print "$track_local(98,19,1):", $t1} $t1 == $t1;

    // $t2 := i32::cmp($t0, $t1) on_abort goto L2 with $t3 at ./sources/math/i32.move:210:9+15
    assume {:print "$at(8,4701,4716)"} true;
    call $t2 := $bb_i32_cmp($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,4701,4716)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(98,19):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := 1 at ./sources/math/i32.move:210:28+2
    $t4 := 1;
    assume $IsValid'u8'($t4);

    // $t5 := <=($t2, $t4) at ./sources/math/i32.move:210:9+21
    call $t5 := $Le($t2, $t4);

    // trace_return[0]($t5) at ./sources/math/i32.move:210:9+21
    assume {:print "$track_return(98,19,0):", $t5} $t5 == $t5;

    // label L1 at ./sources/math/i32.move:211:5+1
    assume {:print "$at(8,4727,4728)"} true;
L1:

    // return $t5 at ./sources/math/i32.move:211:5+1
    assume {:print "$at(8,4727,4728)"} true;
    $ret0 := $t5;
    return;

    // label L2 at ./sources/math/i32.move:211:5+1
L2:

    // abort($t3) at ./sources/math/i32.move:211:5+1
    assume {:print "$at(8,4727,4728)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun i32::mod [baseline] at ./sources/math/i32.move:162:5+189
procedure {:inline 1} $bb_i32_mod(_$t0: $bb_i32_I32, _$t1: $bb_i32_I32) returns ($ret0: $bb_i32_I32)
{
    // declare local variables
    var $t2: $bb_i32_I32;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: bv32;
    var $t8: bv32;
    var $t9: bv32;
    var $t10: $bb_i32_I32;
    var $t11: bv32;
    var $t12: bv32;
    var $t13: bv32;
    var $t14: $bb_i32_I32;
    var $t0: $bb_i32_I32;
    var $t1: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i32.move:162:5+1
    assume {:print "$at(8,3609,3610)"} true;
    assume {:print "$track_local(98,20,0):", $t0} $t0 == $t0;

    // trace_local[n]($t1) at ./sources/math/i32.move:162:5+1
    assume {:print "$track_local(98,20,1):", $t1} $t1 == $t1;

    // $t3 := i32::sign($t0) on_abort goto L4 with $t4 at ./sources/math/i32.move:163:13+7
    assume {:print "$at(8,3659,3666)"} true;
    call $t3 := $bb_i32_sign($t0);
    if ($abort_flag) {
        assume {:print "$at(8,3659,3666)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,20):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t5 := 1 at ./sources/math/i32.move:163:24+1
    $t5 := 1;
    assume $IsValid'u8'($t5);

    // $t6 := ==($t3, $t5) at ./sources/math/i32.move:163:13+12
    $t6 := $IsEqual'u8'($t3, $t5);

    // if ($t6) goto L1 else goto L0 at ./sources/math/i32.move:163:9+137
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i32.move:164:23+10
    assume {:print "$at(8,3697,3707)"} true;
L1:

    // $t7 := i32::abs_u32($t0) on_abort goto L4 with $t4 at ./sources/math/i32.move:164:23+10
    assume {:print "$at(8,3697,3707)"} true;
    call $t7 := $bb_i32_abs_u32($t0);
    if ($abort_flag) {
        assume {:print "$at(8,3697,3707)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,20):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t8 := i32::abs_u32($t1) on_abort goto L4 with $t4 at ./sources/math/i32.move:164:36+10
    call $t8 := $bb_i32_abs_u32($t1);
    if ($abort_flag) {
        assume {:print "$at(8,3710,3720)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,20):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t9 := %($t7, $t8) on_abort goto L4 with $t4 at ./sources/math/i32.move:164:22+25
    call $t9 := $ModBv32($t7, $t8);
    if ($abort_flag) {
        assume {:print "$at(8,3696,3721)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,20):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t10 := i32::neg_from($t9) on_abort goto L4 with $t4 at ./sources/math/i32.move:164:13+35
    call $t10 := $bb_i32_neg_from($t9);
    if ($abort_flag) {
        assume {:print "$at(8,3687,3722)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,20):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t2 := $t10 at ./sources/math/i32.move:164:13+35
    $t2 := $t10;

    // trace_local[return]($t10) at ./sources/math/i32.move:164:13+35
    assume {:print "$track_local(98,20,2):", $t10} $t10 == $t10;

    // label L2 at ./sources/math/i32.move:163:9+137
    assume {:print "$at(8,3655,3792)"} true;
L2:

    // trace_return[0]($t2) at ./sources/math/i32.move:163:9+137
    assume {:print "$at(8,3655,3792)"} true;
    assume {:print "$track_return(98,20,0):", $t2} $t2 == $t2;

    // goto L3 at ./sources/math/i32.move:163:9+137
    goto L3;

    // label L0 at ./sources/math/i32.move:166:19+9
    assume {:print "$at(8,3758,3767)"} true;
L0:

    // $t11 := i32::as_u32($t0) on_abort goto L4 with $t4 at ./sources/math/i32.move:166:19+9
    assume {:print "$at(8,3758,3767)"} true;
    call $t11 := $bb_i32_as_u32($t0);
    if ($abort_flag) {
        assume {:print "$at(8,3758,3767)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,20):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t12 := i32::abs_u32($t1) on_abort goto L4 with $t4 at ./sources/math/i32.move:166:31+10
    call $t12 := $bb_i32_abs_u32($t1);
    if ($abort_flag) {
        assume {:print "$at(8,3770,3780)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,20):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t13 := %($t11, $t12) on_abort goto L4 with $t4 at ./sources/math/i32.move:166:18+24
    call $t13 := $ModBv32($t11, $t12);
    if ($abort_flag) {
        assume {:print "$at(8,3757,3781)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,20):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t14 := i32::from($t13) on_abort goto L4 with $t4 at ./sources/math/i32.move:166:13+30
    call $t14 := $bb_i32_from($t13);
    if ($abort_flag) {
        assume {:print "$at(8,3752,3782)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(98,20):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t2 := $t14 at ./sources/math/i32.move:166:13+30
    $t2 := $t14;

    // trace_local[return]($t14) at ./sources/math/i32.move:166:13+30
    assume {:print "$track_local(98,20,2):", $t14} $t14 == $t14;

    // goto L2 at ./sources/math/i32.move:166:13+30
    goto L2;

    // label L3 at ./sources/math/i32.move:168:5+1
    assume {:print "$at(8,3797,3798)"} true;
L3:

    // return $t2 at ./sources/math/i32.move:168:5+1
    assume {:print "$at(8,3797,3798)"} true;
    $ret0 := $t2;
    return;

    // label L4 at ./sources/math/i32.move:168:5+1
L4:

    // abort($t4) at ./sources/math/i32.move:168:5+1
    assume {:print "$at(8,3797,3798)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun i32::neg_from [baseline] at ./sources/math/i32.move:57:5+273
procedure {:inline 1} $bb_i32_neg_from(_$t0: bv32) returns ($ret0: $bb_i32_I32)
{
    // declare local variables
    var $t1: $bb_i32_I32;
    var $t2: bv32;
    var $t3: bool;
    var $t4: bv32;
    var $t5: bool;
    var $t6: $bb_i32_I32;
    var $t7: bv32;
    var $t8: int;
    var $t9: bv32;
    var $t10: bv32;
    var $t11: int;
    var $t12: bv32;
    var $t13: $bb_i32_I32;
    var $t14: int;
    var $t0: bv32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bv32': bv32;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i32.move:57:5+1
    assume {:print "$at(8,1021,1022)"} true;
    assume {:print "$track_local(98,21,0):", $t0} $t0 == $t0;

    // $t2 := 2147483648 at ./sources/math/i32.move:58:22+10
    assume {:print "$at(8,1077,1087)"} true;
    $t2 := 2147483648bv32;
    assume $IsValid'bv32'($t2);

    // $t3 := <=($t0, $t2) at ./sources/math/i32.move:58:17+15
    call $t3 := $LeBv32($t0, $t2);

    // if ($t3) goto L1 else goto L0 at ./sources/math/i32.move:58:9+6
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i32.move:59:13+1
    assume {:print "$at(8,1113,1114)"} true;
L1:

    // $t4 := 0 at ./sources/math/i32.move:59:18+1
    assume {:print "$at(8,1118,1119)"} true;
    $t4 := 0bv32;
    assume $IsValid'bv32'($t4);

    // $t5 := ==($t0, $t4) at ./sources/math/i32.move:59:13+6
    $t5 := $IsEqual'bv32'($t0, $t4);

    // if ($t5) goto L3 else goto L2 at ./sources/math/i32.move:59:9+179
    if ($t5) { goto L3; } else { goto L2; }

    // label L3 at ./sources/math/i32.move:60:13+43
    assume {:print "$at(8,1135,1178)"} true;
L3:

    // $t6 := pack 0xbb::i32::I32($t0) at ./sources/math/i32.move:60:13+43
    assume {:print "$at(8,1135,1178)"} true;
    $t6 := $bb_i32_I32($t0);

    // $t1 := $t6 at ./sources/math/i32.move:60:13+43
    $t1 := $t6;

    // trace_local[return]($t6) at ./sources/math/i32.move:60:13+43
    assume {:print "$track_local(98,21,1):", $t6} $t6 == $t6;

    // label L4 at ./sources/math/i32.move:57:38+240
    assume {:print "$at(8,1054,1294)"} true;
L4:

    // trace_return[0]($t1) at ./sources/math/i32.move:57:38+240
    assume {:print "$at(8,1054,1294)"} true;
    assume {:print "$track_return(98,21,0):", $t1} $t1 == $t1;

    // goto L5 at ./sources/math/i32.move:57:38+240
    goto L5;

    // label L2 at ./sources/math/i32.move:65:24+10
    assume {:print "$at(8,1237,1247)"} true;
L2:

    // $t7 := i32::u32_neg($t0) on_abort goto L6 with $t8 at ./sources/math/i32.move:65:24+10
    assume {:print "$at(8,1237,1247)"} true;
    call $t7 := $bb_i32_u32_neg($t0);
    if ($abort_flag) {
        assume {:print "$at(8,1237,1247)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(98,21):", $t8} $t8 == $t8;
        goto L6;
    }

    // $t9 := 1 at ./sources/math/i32.move:65:37+1
    $t9 := 1bv32;
    assume $IsValid'bv32'($t9);

    // $t10 := +($t7, $t9) on_abort goto L6 with $t8 at ./sources/math/i32.move:65:23+16
    call $t10 := $AddBv32($t7, $t9);
    if ($abort_flag) {
        assume {:print "$at(8,1236,1252)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(98,21):", $t8} $t8 == $t8;
        goto L6;
    }

    // $t11 := 2147483648 at ./sources/math/i32.move:65:42+9
    $t11 := 2147483648;
    assume $IsValid'u32'($t11);

    // $t12 := |($t10, $t11) at ./sources/math/i32.move:65:23+28
    call $t12 := $OrBv32($t10, $int2bv.32($t11));

    // $t13 := pack 0xbb::i32::I32($t12) at ./sources/math/i32.move:64:13+70
    assume {:print "$at(8,1208,1278)"} true;
    $t13 := $bb_i32_I32($t12);

    // $t1 := $t13 at ./sources/math/i32.move:64:13+70
    $t1 := $t13;

    // trace_local[return]($t13) at ./sources/math/i32.move:64:13+70
    assume {:print "$track_local(98,21,1):", $t13} $t13 == $t13;

    // goto L4 at ./sources/math/i32.move:64:13+70
    goto L4;

    // label L0 at ./sources/math/i32.move:58:34+9
    assume {:print "$at(8,1089,1098)"} true;
L0:

    // $t14 := 0 at ./sources/math/i32.move:58:34+9
    assume {:print "$at(8,1089,1098)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // trace_abort($t14) at ./sources/math/i32.move:58:9+6
    assume {:print "$at(8,1064,1070)"} true;
    assume {:print "$track_abort(98,21):", $t14} $t14 == $t14;

    // $t8 := move($t14) at ./sources/math/i32.move:58:9+6
    $t8 := $t14;

    // goto L6 at ./sources/math/i32.move:58:9+6
    goto L6;

    // label L5 at ./sources/math/i32.move:68:5+1
    assume {:print "$at(8,1293,1294)"} true;
L5:

    // return $t1 at ./sources/math/i32.move:68:5+1
    assume {:print "$at(8,1293,1294)"} true;
    $ret0 := $t1;
    return;

    // label L6 at ./sources/math/i32.move:68:5+1
L6:

    // abort($t8) at ./sources/math/i32.move:68:5+1
    assume {:print "$at(8,1293,1294)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun i32::shr [baseline] at ./sources/math/i32.move:147:5+334
procedure {:inline 1} $bb_i32_shr(_$t0: $bb_i32_I32, _$t1: bv8) returns ($ret0: $bb_i32_I32)
{
    // declare local variables
    var $t2: int;
    var $t3: bv8;
    var $t4: bool;
    var $t5: $bb_i32_I32;
    var $t6: bv32;
    var $t7: bv8;
    var $t8: bv8;
    var $t9: int;
    var $t10: bv32;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: bv32;
    var $t15: bv32;
    var $t16: bv32;
    var $t17: $bb_i32_I32;
    var $t18: bv32;
    var $t19: bv32;
    var $t20: $bb_i32_I32;
    var $t0: $bb_i32_I32;
    var $t1: bv8;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bv32': bv32;
    var $temp_0'bv8': bv8;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i32.move:147:5+1
    assume {:print "$at(8,3269,3270)"} true;
    assume {:print "$track_local(98,25,0):", $t0} $t0 == $t0;

    // trace_local[shift]($t1) at ./sources/math/i32.move:147:5+1
    assume {:print "$track_local(98,25,1):", $t1} $t1 == $t1;

    // $t3 := 0 at ./sources/math/i32.move:148:22+1
    assume {:print "$at(8,3331,3332)"} true;
    $t3 := 0bv8;
    assume $IsValid'bv8'($t3);

    // $t4 := ==($t1, $t3) at ./sources/math/i32.move:148:13+10
    $t4 := $IsEqual'bv8'($t1, $t3);

    // if ($t4) goto L1 else goto L0 at ./sources/math/i32.move:148:9+48
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i32.move:149:20+1
    assume {:print "$at(8,3355,3356)"} true;
L1:

    // trace_return[0]($t0) at ./sources/math/i32.move:149:13+8
    assume {:print "$at(8,3348,3356)"} true;
    assume {:print "$track_return(98,25,0):", $t0} $t0 == $t0;

    // $t5 := move($t0) at ./sources/math/i32.move:149:13+8
    $t5 := $t0;

    // goto L4 at ./sources/math/i32.move:149:13+8
    goto L4;

    // label L0 at ./sources/math/i32.move:151:20+10
    assume {:print "$at(8,3387,3397)"} true;
L0:

    // $t6 := 4294967295 at ./sources/math/i32.move:151:20+10
    assume {:print "$at(8,3387,3397)"} true;
    $t6 := 4294967295bv32;
    assume $IsValid'bv32'($t6);

    // $t7 := 32 at ./sources/math/i32.move:151:35+2
    $t7 := 32bv8;
    assume $IsValid'bv8'($t7);

    // $t8 := -($t7, $t1) on_abort goto L5 with $t9 at ./sources/math/i32.move:151:34+12
    call $t8 := $SubBv8($t7, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,3401,3413)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(98,25):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t10 := <<($t6, $t8) on_abort goto L5 with $t9 at ./sources/math/i32.move:151:20+26
    call $t10 := $ShlBv32From8($t6, $t8);
    if ($abort_flag) {
        assume {:print "$at(8,3387,3413)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(98,25):", $t9} $t9 == $t9;
        goto L5;
    }

    // trace_local[$t7]($t10) at ./sources/math/i32.move:151:20+26
    assume {:print "$track_local(98,25,2):", $t10} $t10 == $t10;

    // $t11 := i32::sign($t0) on_abort goto L5 with $t9 at ./sources/math/i32.move:152:13+7
    assume {:print "$at(8,3427,3434)"} true;
    call $t11 := $bb_i32_sign($t0);
    if ($abort_flag) {
        assume {:print "$at(8,3427,3434)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(98,25):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t12 := 1 at ./sources/math/i32.move:152:24+1
    $t12 := 1;
    assume $IsValid'u8'($t12);

    // $t13 := ==($t11, $t12) at ./sources/math/i32.move:152:13+12
    $t13 := $IsEqual'u8'($t11, $t12);

    // if ($t13) goto L3 else goto L2 at ./sources/math/i32.move:152:9+115
    if ($t13) { goto L3; } else { goto L2; }

    // label L3 at ./sources/math/i32.move:154:24+1
    assume {:print "$at(8,3491,3492)"} true;
L3:

    // $t14 := get_field<0xbb::i32::I32>.bits($t0) at ./sources/math/i32.move:154:24+6
    assume {:print "$at(8,3491,3497)"} true;
    $t14 := $t0->$bits;

    // $t15 := >>($t14, $t1) on_abort goto L5 with $t9 at ./sources/math/i32.move:154:23+17
    call $t15 := $ShrBv32From8($t14, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,3490,3507)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(98,25):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t16 := |($t15, $t10) at ./sources/math/i32.move:154:23+24
    call $t16 := $OrBv32($t15, $t10);

    // $t17 := pack 0xbb::i32::I32($t16) at ./sources/math/i32.move:153:20+66
    assume {:print "$at(8,3462,3528)"} true;
    $t17 := $bb_i32_I32($t16);

    // trace_return[0]($t17) at ./sources/math/i32.move:153:13+73
    assume {:print "$track_return(98,25,0):", $t17} $t17 == $t17;

    // $t5 := move($t17) at ./sources/math/i32.move:153:13+73
    $t5 := $t17;

    // goto L4 at ./sources/math/i32.move:153:13+73
    goto L4;

    // label L2 at ./sources/math/i32.move:158:19+1
    assume {:print "$at(8,3572,3573)"} true;
L2:

    // $t18 := get_field<0xbb::i32::I32>.bits($t0) at ./sources/math/i32.move:158:19+6
    assume {:print "$at(8,3572,3578)"} true;
    $t18 := $t0->$bits;

    // $t19 := >>($t18, $t1) on_abort goto L5 with $t9 at ./sources/math/i32.move:158:19+15
    call $t19 := $ShrBv32From8($t18, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,3572,3587)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(98,25):", $t9} $t9 == $t9;
        goto L5;
    }

    // $t20 := pack 0xbb::i32::I32($t19) at ./sources/math/i32.move:157:9+49
    assume {:print "$at(8,3548,3597)"} true;
    $t20 := $bb_i32_I32($t19);

    // trace_return[0]($t20) at ./sources/math/i32.move:147:44+295
    assume {:print "$at(8,3308,3603)"} true;
    assume {:print "$track_return(98,25,0):", $t20} $t20 == $t20;

    // $t5 := move($t20) at ./sources/math/i32.move:147:44+295
    $t5 := $t20;

    // label L4 at ./sources/math/i32.move:160:5+1
    assume {:print "$at(8,3602,3603)"} true;
L4:

    // return $t5 at ./sources/math/i32.move:160:5+1
    assume {:print "$at(8,3602,3603)"} true;
    $ret0 := $t5;
    return;

    // label L5 at ./sources/math/i32.move:160:5+1
L5:

    // abort($t9) at ./sources/math/i32.move:160:5+1
    assume {:print "$at(8,3602,3603)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun i32::u32_neg [baseline] at ./sources/math/i32.move:247:5+55
procedure {:inline 1} $bb_i32_u32_neg(_$t0: bv32) returns ($ret0: bv32)
{
    // declare local variables
    var $t1: int;
    var $t2: bv32;
    var $t0: bv32;
    var $temp_0'bv32': bv32;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i32.move:247:5+1
    assume {:print "$at(8,5585,5586)"} true;
    assume {:print "$track_local(98,26,0):", $t0} $t0 == $t0;

    // $t1 := 4294967295 at ./sources/math/i32.move:248:13+10
    assume {:print "$at(8,5624,5634)"} true;
    $t1 := 4294967295;
    assume $IsValid'u32'($t1);

    // $t2 := ^($t0, $t1) at ./sources/math/i32.move:248:9+14
    call $t2 := $XorBv32($t0, $int2bv.32($t1));

    // trace_return[0]($t2) at ./sources/math/i32.move:248:9+14
    assume {:print "$track_return(98,26,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/math/i32.move:249:5+1
    assume {:print "$at(8,5639,5640)"} true;
L1:

    // return $t2 at ./sources/math/i32.move:249:5+1
    assume {:print "$at(8,5639,5640)"} true;
    $ret0 := $t2;
    return;

}

// fun i32::u8_neg [baseline] at ./sources/math/i32.move:251:5+46
procedure {:inline 1} $bb_i32_u8_neg(_$t0: int) returns ($ret0: bv8)
{
    // declare local variables
    var $t1: int;
    var $t2: bv8;
    var $t0: int;
    var $temp_0'u8': int;
    var $temp_0'bv8': bv8;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i32.move:251:5+1
    assume {:print "$at(8,5646,5647)"} true;
    assume {:print "$track_local(98,27,0):", $t0} $t0 == $t0;

    // $t1 := 255 at ./sources/math/i32.move:252:13+4
    assume {:print "$at(8,5682,5686)"} true;
    $t1 := 255;
    assume $IsValid'u8'($t1);

    // $t2 := ^($t0, $t1) at ./sources/math/i32.move:252:9+8
    call $t2 := $XorBv8($int2bv.8($t0), $int2bv.8($t1));

    // trace_return[0]($t2) at ./sources/math/i32.move:252:9+8
    assume {:print "$track_return(98,27,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/math/i32.move:253:5+1
    assume {:print "$at(8,5691,5692)"} true;
L1:

    // return $t2 at ./sources/math/i32.move:253:5+1
    assume {:print "$at(8,5691,5692)"} true;
    $ret0 := $t2;
    return;

}

// fun i32::wrapping_add [baseline] at ./sources/math/i32.move:70:5+346
procedure {:inline 1} $bb_i32_wrapping_add(_$t0: $bb_i32_I32, _$t1: $bb_i32_I32) returns ($ret0: $bb_i32_I32)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bv32;
    var $t9: int;
    var $t10: int;
    var $t11: bv32;
    var $t12: bv8;
    var $t13: bv32;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: bv32;
    var $t19: bv32;
    var $t20: bv8;
    var $t21: bv32;
    var $t22: $bb_i32_I32;
    var $t0: $bb_i32_I32;
    var $t1: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'u32': int;
    var $temp_0'bv32': bv32;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/i32.move:70:5+1
    assume {:print "$at(8,1300,1301)"} true;
    assume {:print "$track_local(98,28,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/i32.move:70:5+1
    assume {:print "$track_local(98,28,1):", $t1} $t1 == $t1;

    // $t6 := get_field<0xbb::i32::I32>.bits($t0) at ./sources/math/i32.move:71:19+9
    assume {:print "$at(8,1371,1380)"} true;
    $t6 := $bv2int.32($t0->$bits);

    // $t7 := get_field<0xbb::i32::I32>.bits($t1) at ./sources/math/i32.move:71:31+9
    $t7 := $bv2int.32($t1->$bits);

    // $t8 := ^($t6, $t7) at ./sources/math/i32.move:71:19+21
    call $t8 := $XorBv32($int2bv.32($t6), $int2bv.32($t7));

    // trace_local[$t4]($t8) at ./sources/math/i32.move:71:19+21
    assume {:print "$track_local(98,28,2):", $t8} $t8 == $t8;

    // $t9 := get_field<0xbb::i32::I32>.bits($t0) at ./sources/math/i32.move:72:22+9
    assume {:print "$at(8,1415,1424)"} true;
    $t9 := $bv2int.32($t0->$bits);

    // $t10 := get_field<0xbb::i32::I32>.bits($t1) at ./sources/math/i32.move:72:34+9
    $t10 := $bv2int.32($t1->$bits);

    // $t11 := &($t9, $t10) at ./sources/math/i32.move:72:21+23
    call $t11 := $AndBv32($int2bv.32($t9), $int2bv.32($t10));

    // $t12 := 1 at ./sources/math/i32.move:72:48+1
    $t12 := 1bv8;
    assume $IsValid'bv8'($t12);

    // $t13 := <<($t11, $t12) on_abort goto L5 with $t14 at ./sources/math/i32.move:72:21+28
    call $t13 := $ShlBv32From8($t11, $t12);
    if ($abort_flag) {
        assume {:print "$at(8,1414,1442)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(98,28):", $t14} $t14 == $t14;
        goto L5;
    }

    // trace_local[$t7]($t13) at ./sources/math/i32.move:72:21+28
    assume {:print "$track_local(98,28,3):", $t13} $t13 == $t13;

    // label L2 at ./sources/math/i32.move:73:16+5
    assume {:print "$at(8,1459,1464)"} true;
L2:

    // $t2 := havoc[val]() at ./sources/math/i32.move:73:16+5
    assume {:print "$at(8,1459,1464)"} true;
    havoc $t2;

    // assume WellFormed($t2) at ./sources/math/i32.move:73:16+5
    assume $IsValid'u32'($t2);

    // $t3 := havoc[val]() at ./sources/math/i32.move:73:16+5
    havoc $t3;

    // assume WellFormed($t3) at ./sources/math/i32.move:73:16+5
    assume $IsValid'u32'($t3);

    // $t15 := havoc[val]() at ./sources/math/i32.move:73:16+5
    havoc $t15;

    // assume WellFormed($t15) at ./sources/math/i32.move:73:16+5
    assume $IsValid'u32'($t15);

    // $t16 := havoc[val]() at ./sources/math/i32.move:73:16+5
    havoc $t16;

    // assume WellFormed($t16) at ./sources/math/i32.move:73:16+5
    assume $IsValid'bool'($t16);

    // $t17 := havoc[val]() at ./sources/math/i32.move:73:16+5
    havoc $t17;

    // assume WellFormed($t17) at ./sources/math/i32.move:73:16+5
    assume $IsValid'u32'($t17);

    // $t18 := havoc[val]() at ./sources/math/i32.move:73:16+5
    havoc $t18;

    // assume WellFormed($t18) at ./sources/math/i32.move:73:16+5
    assume $IsValid'bv32'($t18);

    // $t19 := havoc[val]() at ./sources/math/i32.move:73:16+5
    havoc $t19;

    // assume WellFormed($t19) at ./sources/math/i32.move:73:16+5
    assume $IsValid'bv32'($t19);

    // $t20 := havoc[val]() at ./sources/math/i32.move:73:16+5
    havoc $t20;

    // assume WellFormed($t20) at ./sources/math/i32.move:73:16+5
    assume $IsValid'bv8'($t20);

    // $t21 := havoc[val]() at ./sources/math/i32.move:73:16+5
    havoc $t21;

    // assume WellFormed($t21) at ./sources/math/i32.move:73:16+5
    assume $IsValid'bv32'($t21);

    // trace_local[$t4]($t2) at ./sources/math/i32.move:73:16+5
    assume {:print "$info(): enter loop, variable(s) $t4, $t7 havocked and reassigned"} true;
    assume {:print "$track_local(98,28,2):", $t2} $t2 == $t2;

    // trace_local[$t7]($t3) at ./sources/math/i32.move:73:16+5
    assume {:print "$track_local(98,28,3):", $t3} $t3 == $t3;

    // assume Not(AbortFlag()) at ./sources/math/i32.move:73:16+5
    assume !$abort_flag;

    // $t15 := 0 at ./sources/math/i32.move:73:25+1
    $t15 := 0;
    assume $IsValid'u32'($t15);

    // $t16 := !=($t3, $t15) at ./sources/math/i32.move:73:16+10
    $t16 := !$IsEqual'u32'($t3, $t15);

    // if ($t16) goto L1 else goto L0 at ./sources/math/i32.move:73:9+141
    if ($t16) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i32.move:74:21+3
    assume {:print "$at(8,1493,1496)"} true;
L1:

    // $t17 := move($t2) at ./sources/math/i32.move:74:21+3
    assume {:print "$at(8,1493,1496)"} true;
    $t17 := $t2;

    // trace_local[$t15]($t2) at ./sources/math/i32.move:74:21+3
    assume {:print "$track_local(98,28,4):", $t2} $t2 == $t2;

    // trace_local[$t21]($t3) at ./sources/math/i32.move:75:21+5
    assume {:print "$at(8,1518,1523)"} true;
    assume {:print "$track_local(98,28,5):", $t3} $t3 == $t3;

    // $t18 := ^($t2, $t3) at ./sources/math/i32.move:76:19+5
    assume {:print "$at(8,1543,1548)"} true;
    call $t18 := $XorBv32($int2bv.32($t2), $int2bv.32($t3));

    // trace_local[$t4]($t18) at ./sources/math/i32.move:76:13+11
    assume {:print "$track_local(98,28,2):", $t18} $t18 == $t18;

    // $t19 := &($t17, $t3) at ./sources/math/i32.move:77:21+7
    assume {:print "$at(8,1570,1577)"} true;
    call $t19 := $AndBv32($int2bv.32($t17), $int2bv.32($t3));

    // $t20 := 1 at ./sources/math/i32.move:77:32+1
    $t20 := 1bv8;
    assume $IsValid'bv8'($t20);

    // $t21 := <<($t19, $t20) on_abort goto L5 with $t14 at ./sources/math/i32.move:77:21+12
    call $t21 := $ShlBv32From8($t19, $t20);
    if ($abort_flag) {
        assume {:print "$at(8,1570,1582)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(98,28):", $t14} $t14 == $t14;
        goto L5;
    }

    // trace_local[$t7]($t21) at ./sources/math/i32.move:77:13+20
    assume {:print "$track_local(98,28,3):", $t21} $t21 == $t21;

    // goto L3 at ./sources/math/i32.move:73:9+141
    assume {:print "$at(8,1452,1593)"} true;
    goto L3;

    // label L0 at ./sources/math/i32.move:79:9+37
    assume {:print "$at(8,1603,1640)"} true;
L0:

    // $t22 := pack 0xbb::i32::I32($t2) at ./sources/math/i32.move:79:9+37
    assume {:print "$at(8,1603,1640)"} true;
    $t22 := $bb_i32_I32($int2bv.32($t2));

    // trace_return[0]($t22) at ./sources/math/i32.move:70:56+295
    assume {:print "$at(8,1351,1646)"} true;
    assume {:print "$track_return(98,28,0):", $t22} $t22 == $t22;

    // goto L4 at ./sources/math/i32.move:70:56+295
    goto L4;

    // label L3 at ./sources/math/i32.move:79:9+37
    // Loop invariant checking block for the loop started with header: L2
    assume {:print "$at(8,1603,1640)"} true;
L3:

    // stop() at ./sources/math/i32.move:79:9+37
    assume {:print "$at(8,1603,1640)"} true;
    assume false;
    return;

    // label L4 at ./sources/math/i32.move:82:5+1
    assume {:print "$at(8,1645,1646)"} true;
L4:

    // return $t22 at ./sources/math/i32.move:82:5+1
    assume {:print "$at(8,1645,1646)"} true;
    $ret0 := $t22;
    return;

    // label L5 at ./sources/math/i32.move:82:5+1
L5:

    // abort($t14) at ./sources/math/i32.move:82:5+1
    assume {:print "$at(8,1645,1646)"} true;
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// struct i128::I128 at ./sources/math/i128.move:15:5+60
datatype $bb_i128_I128 {
    $bb_i128_I128($bits: bv128)
}
function {:inline} $Update'$bb_i128_I128'_bits(s: $bb_i128_I128, x: bv128): $bb_i128_I128 {
    $bb_i128_I128(x)
}
function $IsValid'$bb_i128_I128'(s: $bb_i128_I128): bool {
    $IsValid'bv128'(s->$bits)
}
function {:inline} $IsEqual'$bb_i128_I128'(s1: $bb_i128_I128, s2: $bb_i128_I128): bool {
    s1 == s2
}

// fun i128::from [baseline] at ./sources/math/i128.move:25:5+153
procedure {:inline 1} $bb_i128_from(_$t0: bv128) returns ($ret0: $bb_i128_I128)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: $bb_i128_I128;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t0: bv128;
    var $temp_0'$bb_i128_I128': $bb_i128_I128;
    var $temp_0'bv128': bv128;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i128.move:25:5+1
    assume {:print "$at(7,459,460)"} true;
    assume {:print "$track_local(100,0,0):", $t0} $t0 == $t0;

    // $t1 := 170141183460469231731687303715884105727 at ./sources/math/i128.move:26:22+11
    assume {:print "$at(7,513,524)"} true;
    $t1 := 170141183460469231731687303715884105727;
    assume $IsValid'u128'($t1);

    // $t2 := <=($t0, $t1) at ./sources/math/i128.move:26:17+16
    call $t2 := $LeBv128($t0, $int2bv.128($t1));

    // if ($t2) goto L1 else goto L0 at ./sources/math/i128.move:26:9+6
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i128.move:27:9+36
    assume {:print "$at(7,570,606)"} true;
L1:

    // $t3 := pack 0xbb::i128::I128($t0) at ./sources/math/i128.move:27:9+36
    assume {:print "$at(7,570,606)"} true;
    $t3 := $bb_i128_I128($t0);

    // trace_return[0]($t3) at ./sources/math/i128.move:25:36+122
    assume {:print "$at(7,490,612)"} true;
    assume {:print "$track_return(100,0,0):", $t3} $t3 == $t3;

    // goto L2 at ./sources/math/i128.move:25:36+122
    goto L2;

    // label L0 at ./sources/math/i128.move:26:59+8
    assume {:print "$at(7,550,558)"} true;
L0:

    // $t4 := 0 at ./sources/math/i128.move:26:59+8
    assume {:print "$at(7,550,558)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := error::invalid_argument($t4) on_abort goto L3 with $t6 at ./sources/math/i128.move:26:35+33
    call $t5 := $1_error_invalid_argument($t4);
    if ($abort_flag) {
        assume {:print "$at(7,526,559)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(100,0):", $t6} $t6 == $t6;
        goto L3;
    }

    // trace_abort($t5) at ./sources/math/i128.move:26:9+6
    assume {:print "$at(7,500,506)"} true;
    assume {:print "$track_abort(100,0):", $t5} $t5 == $t5;

    // $t6 := move($t5) at ./sources/math/i128.move:26:9+6
    $t6 := $t5;

    // goto L3 at ./sources/math/i128.move:26:9+6
    goto L3;

    // label L2 at ./sources/math/i128.move:30:5+1
    assume {:print "$at(7,611,612)"} true;
L2:

    // return $t3 at ./sources/math/i128.move:30:5+1
    assume {:print "$at(7,611,612)"} true;
    $ret0 := $t3;
    return;

    // label L3 at ./sources/math/i128.move:30:5+1
L3:

    // abort($t6) at ./sources/math/i128.move:30:5+1
    assume {:print "$at(7,611,612)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun i128::add [baseline] at ./sources/math/i128.move:67:5+301
procedure {:inline 1} $bb_i128_add(_$t0: $bb_i128_I128, _$t1: $bb_i128_I128) returns ($ret0: $bb_i128_I128)
{
    // declare local variables
    var $t2: $bb_i128_I128;
    var $t3: $bb_i128_I128;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bv8;
    var $t8: int;
    var $t9: bv8;
    var $t10: bv8;
    var $t11: int;
    var $t12: bv8;
    var $t13: int;
    var $t14: bv8;
    var $t15: bv8;
    var $t16: int;
    var $t17: bv8;
    var $t18: bv8;
    var $t19: bv8;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t0: $bb_i128_I128;
    var $t1: $bb_i128_I128;
    var $temp_0'$bb_i128_I128': $bb_i128_I128;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/i128.move:67:5+1
    assume {:print "$at(7,1427,1428)"} true;
    assume {:print "$track_local(100,1,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/i128.move:67:5+1
    assume {:print "$track_local(100,1,1):", $t1} $t1 == $t1;

    // $t3 := i128::wrapping_add($t0, $t1) on_abort goto L3 with $t4 at ./sources/math/i128.move:68:19+24
    assume {:print "$at(7,1492,1516)"} true;
    call $t3 := $bb_i128_wrapping_add($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(7,1492,1516)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(100,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_local[$t4]($t3) at ./sources/math/i128.move:68:19+24
    assume {:print "$track_local(100,1,2):", $t3} $t3 == $t3;

    // $t5 := i128::sign($t0) on_abort goto L3 with $t4 at ./sources/math/i128.move:69:25+10
    assume {:print "$at(7,1542,1552)"} true;
    call $t5 := $bb_i128_sign($t0);
    if ($abort_flag) {
        assume {:print "$at(7,1542,1552)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(100,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t6 := i128::sign($t1) on_abort goto L3 with $t4 at ./sources/math/i128.move:69:38+10
    call $t6 := $bb_i128_sign($t1);
    if ($abort_flag) {
        assume {:print "$at(7,1555,1565)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(100,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t7 := &($t5, $t6) at ./sources/math/i128.move:69:25+23
    call $t7 := $AndBv8($int2bv.8($t5), $int2bv.8($t6));

    // $t8 := i128::sign($t3) on_abort goto L3 with $t4 at ./sources/math/i128.move:69:58+9
    call $t8 := $bb_i128_sign($t3);
    if ($abort_flag) {
        assume {:print "$at(7,1575,1584)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(100,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t9 := i128::u8_neg($t8) on_abort goto L3 with $t4 at ./sources/math/i128.move:69:51+17
    call $t9 := $bb_i128_u8_neg($t8);
    if ($abort_flag) {
        assume {:print "$at(7,1568,1585)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(100,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t10 := &($t7, $t9) at ./sources/math/i128.move:69:24+45
    call $t10 := $AndBv8($t7, $t9);

    // $t11 := i128::sign($t0) on_abort goto L3 with $t4 at ./sources/math/i128.move:69:80+10
    call $t11 := $bb_i128_sign($t0);
    if ($abort_flag) {
        assume {:print "$at(7,1597,1607)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(100,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t12 := i128::u8_neg($t11) on_abort goto L3 with $t4 at ./sources/math/i128.move:69:73+18
    call $t12 := $bb_i128_u8_neg($t11);
    if ($abort_flag) {
        assume {:print "$at(7,1590,1608)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(100,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t13 := i128::sign($t1) on_abort goto L3 with $t4 at ./sources/math/i128.move:69:101+10
    call $t13 := $bb_i128_sign($t1);
    if ($abort_flag) {
        assume {:print "$at(7,1618,1628)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(100,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t14 := i128::u8_neg($t13) on_abort goto L3 with $t4 at ./sources/math/i128.move:69:94+18
    call $t14 := $bb_i128_u8_neg($t13);
    if ($abort_flag) {
        assume {:print "$at(7,1611,1629)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(100,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t15 := &($t12, $t14) at ./sources/math/i128.move:69:73+39
    call $t15 := $AndBv8($t12, $t14);

    // $t16 := i128::sign($t3) on_abort goto L3 with $t4 at ./sources/math/i128.move:69:115+9
    call $t16 := $bb_i128_sign($t3);
    if ($abort_flag) {
        assume {:print "$at(7,1632,1641)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(100,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t17 := &($t15, $t16) at ./sources/math/i128.move:69:72+53
    call $t17 := $AndBv8($t15, $int2bv.8($t16));

    // $t18 := +($t10, $t17) on_abort goto L3 with $t4 at ./sources/math/i128.move:69:24+101
    call $t18 := $AddBv8($t10, $t17);
    if ($abort_flag) {
        assume {:print "$at(7,1541,1642)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(100,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t19 := 0 at ./sources/math/i128.move:70:29+1
    assume {:print "$at(7,1672,1673)"} true;
    $t19 := 0bv8;
    assume $IsValid'bv8'($t19);

    // $t20 := ==($t18, $t19) at ./sources/math/i128.move:70:17+13
    $t20 := $IsEqual'bv8'($t18, $t19);

    // if ($t20) goto L1 else goto L0 at ./sources/math/i128.move:70:9+6
    if ($t20) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i128.move:71:9+3
    assume {:print "$at(7,1719,1722)"} true;
L1:

    // trace_return[0]($t3) at ./sources/math/i128.move:67:50+256
    assume {:print "$at(7,1472,1728)"} true;
    assume {:print "$track_return(100,1,0):", $t3} $t3 == $t3;

    // goto L2 at ./sources/math/i128.move:67:50+256
    goto L2;

    // label L0 at ./sources/math/i128.move:70:56+8
    assume {:print "$at(7,1699,1707)"} true;
L0:

    // $t21 := 0 at ./sources/math/i128.move:70:56+8
    assume {:print "$at(7,1699,1707)"} true;
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // $t22 := error::invalid_argument($t21) on_abort goto L3 with $t4 at ./sources/math/i128.move:70:32+33
    call $t22 := $1_error_invalid_argument($t21);
    if ($abort_flag) {
        assume {:print "$at(7,1675,1708)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(100,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_abort($t22) at ./sources/math/i128.move:70:9+6
    assume {:print "$at(7,1652,1658)"} true;
    assume {:print "$track_abort(100,1):", $t22} $t22 == $t22;

    // $t4 := move($t22) at ./sources/math/i128.move:70:9+6
    $t4 := $t22;

    // goto L3 at ./sources/math/i128.move:70:9+6
    goto L3;

    // label L2 at ./sources/math/i128.move:72:5+1
    assume {:print "$at(7,1727,1728)"} true;
L2:

    // return $t3 at ./sources/math/i128.move:72:5+1
    assume {:print "$at(7,1727,1728)"} true;
    $ret0 := $t3;
    return;

    // label L3 at ./sources/math/i128.move:72:5+1
L3:

    // abort($t4) at ./sources/math/i128.move:72:5+1
    assume {:print "$at(7,1727,1728)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun i128::sub [baseline] at ./sources/math/i128.move:87:5+180
procedure {:inline 1} $bb_i128_sub(_$t0: $bb_i128_I128, _$t1: $bb_i128_I128) returns ($ret0: $bb_i128_I128)
{
    // declare local variables
    var $t2: $bb_i128_I128;
    var $t3: bv128;
    var $t4: bv128;
    var $t5: int;
    var $t6: $bb_i128_I128;
    var $t7: int;
    var $t8: $bb_i128_I128;
    var $t9: $bb_i128_I128;
    var $t10: $bb_i128_I128;
    var $t0: $bb_i128_I128;
    var $t1: $bb_i128_I128;
    var $temp_0'$bb_i128_I128': $bb_i128_I128;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/i128.move:87:5+1
    assume {:print "$at(7,2215,2216)"} true;
    assume {:print "$track_local(100,3,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/i128.move:87:5+1
    assume {:print "$track_local(100,3,1):", $t1} $t1 == $t1;

    // $t3 := get_field<0xbb::i128::I128>.bits($t1) at ./sources/math/i128.move:89:28+9
    assume {:print "$at(7,2331,2340)"} true;
    $t3 := $t1->$bits;

    // $t4 := i128::u128_neg($t3) on_abort goto L2 with $t5 at ./sources/math/i128.move:89:19+19
    call $t4 := $bb_i128_u128_neg($t3);
    if ($abort_flag) {
        assume {:print "$at(7,2322,2341)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(100,3):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t6 := pack 0xbb::i128::I128($t4) at ./sources/math/i128.move:88:36+54
    assume {:print "$at(7,2297,2351)"} true;
    $t6 := $bb_i128_I128($t4);

    // $t7 := 1 at ./sources/math/i128.move:90:17+1
    assume {:print "$at(7,2358,2359)"} true;
    $t7 := 1;
    assume $IsValid'u128'($t7);

    // $t8 := i128::from($t7) on_abort goto L2 with $t5 at ./sources/math/i128.move:90:12+7
    call $t8 := $bb_i128_from($int2bv.128($t7));
    if ($abort_flag) {
        assume {:print "$at(7,2353,2360)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(100,3):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t9 := i128::wrapping_add($t6, $t8) on_abort goto L2 with $t5 at ./sources/math/i128.move:88:23+77
    assume {:print "$at(7,2284,2361)"} true;
    call $t9 := $bb_i128_wrapping_add($t6, $t8);
    if ($abort_flag) {
        assume {:print "$at(7,2284,2361)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(100,3):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[$t4]($t9) at ./sources/math/i128.move:88:23+77
    assume {:print "$track_local(100,3,2):", $t9} $t9 == $t9;

    // $t10 := i128::add($t0, $t9) on_abort goto L2 with $t5 at ./sources/math/i128.move:91:9+18
    assume {:print "$at(7,2371,2389)"} true;
    call $t10 := $bb_i128_add($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(7,2371,2389)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(100,3):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t10) at ./sources/math/i128.move:91:9+18
    assume {:print "$track_return(100,3,0):", $t10} $t10 == $t10;

    // label L1 at ./sources/math/i128.move:92:5+1
    assume {:print "$at(7,2394,2395)"} true;
L1:

    // return $t10 at ./sources/math/i128.move:92:5+1
    assume {:print "$at(7,2394,2395)"} true;
    $ret0 := $t10;
    return;

    // label L2 at ./sources/math/i128.move:92:5+1
L2:

    // abort($t5) at ./sources/math/i128.move:92:5+1
    assume {:print "$at(7,2394,2395)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun i128::zero [baseline] at ./sources/math/i128.move:19:5+76
procedure {:inline 1} $bb_i128_zero() returns ($ret0: $bb_i128_I128)
{
    // declare local variables
    var $t0: bv128;
    var $t1: $bb_i128_I128;
    var $temp_0'$bb_i128_I128': $bb_i128_I128;

    // bytecode translation starts here
    // $t0 := 0 at ./sources/math/i128.move:21:19+1
    assume {:print "$at(7,436,437)"} true;
    $t0 := 0bv128;
    assume $IsValid'bv128'($t0);

    // $t1 := pack 0xbb::i128::I128($t0) at ./sources/math/i128.move:20:9+36
    assume {:print "$at(7,411,447)"} true;
    $t1 := $bb_i128_I128($t0);

    // trace_return[0]($t1) at ./sources/math/i128.move:20:9+36
    assume {:print "$track_return(100,4,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/math/i128.move:23:5+1
    assume {:print "$at(7,452,453)"} true;
L1:

    // return $t1 at ./sources/math/i128.move:23:5+1
    assume {:print "$at(7,452,453)"} true;
    $ret0 := $t1;
    return;

}

// fun i128::sign [baseline] at ./sources/math/i128.move:179:5+68
procedure {:inline 1} $bb_i128_sign(_$t0: $bb_i128_I128) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t0: $bb_i128_I128;
    var $temp_0'$bb_i128_I128': $bb_i128_I128;
    var $temp_0'u8': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i128.move:179:5+1
    assume {:print "$at(7,4626,4627)"} true;
    assume {:print "$track_local(100,9,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0xbb::i128::I128>.bits($t0) at ./sources/math/i128.move:180:11+6
    assume {:print "$at(7,4667,4673)"} true;
    $t1 := $bv2int.128($t0->$bits);

    // $t2 := 127 at ./sources/math/i128.move:180:21+3
    $t2 := 127;
    assume $IsValid'u8'($t2);

    // $t3 := >>($t1, $t2) on_abort goto L2 with $t4 at ./sources/math/i128.move:180:10+15
    call $t3 := $ShrU128($t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(7,4666,4681)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(100,9):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := (u8)($t3) on_abort goto L2 with $t4 at ./sources/math/i128.move:180:9+23
    call $t5 := $CastU8($t3);
    if ($abort_flag) {
        assume {:print "$at(7,4665,4688)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(100,9):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t5) at ./sources/math/i128.move:180:9+23
    assume {:print "$track_return(100,9,0):", $t5} $t5 == $t5;

    // label L1 at ./sources/math/i128.move:181:5+1
    assume {:print "$at(7,4693,4694)"} true;
L1:

    // return $t5 at ./sources/math/i128.move:181:5+1
    assume {:print "$at(7,4693,4694)"} true;
    $ret0 := $t5;
    return;

    // label L2 at ./sources/math/i128.move:181:5+1
L2:

    // abort($t4) at ./sources/math/i128.move:181:5+1
    assume {:print "$at(7,4693,4694)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun i128::neg_from [baseline] at ./sources/math/i128.move:32:5+305
procedure {:inline 1} $bb_i128_neg_from(_$t0: bv128) returns ($ret0: $bb_i128_I128)
{
    // declare local variables
    var $t1: $bb_i128_I128;
    var $t2: bv128;
    var $t3: bool;
    var $t4: bv128;
    var $t5: bool;
    var $t6: $bb_i128_I128;
    var $t7: bv128;
    var $t8: int;
    var $t9: bv128;
    var $t10: bv128;
    var $t11: int;
    var $t12: bv128;
    var $t13: $bb_i128_I128;
    var $t14: int;
    var $t15: int;
    var $t0: bv128;
    var $temp_0'$bb_i128_I128': $bb_i128_I128;
    var $temp_0'bv128': bv128;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i128.move:32:5+1
    assume {:print "$at(7,618,619)"} true;
    assume {:print "$track_local(100,17,0):", $t0} $t0 == $t0;

    // $t2 := 170141183460469231731687303715884105728 at ./sources/math/i128.move:33:22+11
    assume {:print "$at(7,676,687)"} true;
    $t2 := 170141183460469231731687303715884105728bv128;
    assume $IsValid'bv128'($t2);

    // $t3 := <=($t0, $t2) at ./sources/math/i128.move:33:17+16
    call $t3 := $LeBv128($t0, $t2);

    // if ($t3) goto L1 else goto L0 at ./sources/math/i128.move:33:9+6
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i128.move:34:13+1
    assume {:print "$at(7,737,738)"} true;
L1:

    // $t4 := 0 at ./sources/math/i128.move:34:18+1
    assume {:print "$at(7,742,743)"} true;
    $t4 := 0bv128;
    assume $IsValid'bv128'($t4);

    // $t5 := ==($t0, $t4) at ./sources/math/i128.move:34:13+6
    $t5 := $IsEqual'bv128'($t0, $t4);

    // if ($t5) goto L3 else goto L2 at ./sources/math/i128.move:34:9+184
    if ($t5) { goto L3; } else { goto L2; }

    // label L3 at ./sources/math/i128.move:35:13+44
    assume {:print "$at(7,759,803)"} true;
L3:

    // $t6 := pack 0xbb::i128::I128($t0) at ./sources/math/i128.move:35:13+44
    assume {:print "$at(7,759,803)"} true;
    $t6 := $bb_i128_I128($t0);

    // $t1 := $t6 at ./sources/math/i128.move:35:13+44
    $t1 := $t6;

    // trace_local[return]($t6) at ./sources/math/i128.move:35:13+44
    assume {:print "$track_local(100,17,1):", $t6} $t6 == $t6;

    // label L4 at ./sources/math/i128.move:32:40+270
    assume {:print "$at(7,653,923)"} true;
L4:

    // trace_return[0]($t1) at ./sources/math/i128.move:32:40+270
    assume {:print "$at(7,653,923)"} true;
    assume {:print "$track_return(100,17,0):", $t1} $t1 == $t1;

    // goto L5 at ./sources/math/i128.move:32:40+270
    goto L5;

    // label L2 at ./sources/math/i128.move:40:24+11
    assume {:print "$at(7,863,874)"} true;
L2:

    // $t7 := i128::u128_neg($t0) on_abort goto L6 with $t8 at ./sources/math/i128.move:40:24+11
    assume {:print "$at(7,863,874)"} true;
    call $t7 := $bb_i128_u128_neg($t0);
    if ($abort_flag) {
        assume {:print "$at(7,863,874)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(100,17):", $t8} $t8 == $t8;
        goto L6;
    }

    // $t9 := 1 at ./sources/math/i128.move:40:39+1
    $t9 := 1bv128;
    assume $IsValid'bv128'($t9);

    // $t10 := +($t7, $t9) on_abort goto L6 with $t8 at ./sources/math/i128.move:40:23+18
    call $t10 := $AddBv128($t7, $t9);
    if ($abort_flag) {
        assume {:print "$at(7,862,880)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(100,17):", $t8} $t8 == $t8;
        goto L6;
    }

    // $t11 := 170141183460469231731687303715884105728 at ./sources/math/i128.move:40:44+10
    $t11 := 170141183460469231731687303715884105728;
    assume $IsValid'u128'($t11);

    // $t12 := |($t10, $t11) at ./sources/math/i128.move:40:23+31
    call $t12 := $OrBv128($t10, $int2bv.128($t11));

    // $t13 := pack 0xbb::i128::I128($t12) at ./sources/math/i128.move:39:13+74
    assume {:print "$at(7,833,907)"} true;
    $t13 := $bb_i128_I128($t12);

    // $t1 := $t13 at ./sources/math/i128.move:39:13+74
    $t1 := $t13;

    // trace_local[return]($t13) at ./sources/math/i128.move:39:13+74
    assume {:print "$track_local(100,17,1):", $t13} $t13 == $t13;

    // goto L4 at ./sources/math/i128.move:39:13+74
    goto L4;

    // label L0 at ./sources/math/i128.move:33:59+8
    assume {:print "$at(7,713,721)"} true;
L0:

    // $t14 := 0 at ./sources/math/i128.move:33:59+8
    assume {:print "$at(7,713,721)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := error::invalid_argument($t14) on_abort goto L6 with $t8 at ./sources/math/i128.move:33:35+33
    call $t15 := $1_error_invalid_argument($t14);
    if ($abort_flag) {
        assume {:print "$at(7,689,722)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(100,17):", $t8} $t8 == $t8;
        goto L6;
    }

    // trace_abort($t15) at ./sources/math/i128.move:33:9+6
    assume {:print "$at(7,663,669)"} true;
    assume {:print "$track_abort(100,17):", $t15} $t15 == $t15;

    // $t8 := move($t15) at ./sources/math/i128.move:33:9+6
    $t8 := $t15;

    // goto L6 at ./sources/math/i128.move:33:9+6
    goto L6;

    // label L5 at ./sources/math/i128.move:43:5+1
    assume {:print "$at(7,922,923)"} true;
L5:

    // return $t1 at ./sources/math/i128.move:43:5+1
    assume {:print "$at(7,922,923)"} true;
    $ret0 := $t1;
    return;

    // label L6 at ./sources/math/i128.move:43:5+1
L6:

    // abort($t8) at ./sources/math/i128.move:43:5+1
    assume {:print "$at(7,922,923)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun i128::u8_neg [baseline] at ./sources/math/i128.move:234:5+46
procedure {:inline 1} $bb_i128_u8_neg(_$t0: int) returns ($ret0: bv8)
{
    // declare local variables
    var $t1: int;
    var $t2: bv8;
    var $t0: int;
    var $temp_0'u8': int;
    var $temp_0'bv8': bv8;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i128.move:234:5+1
    assume {:print "$at(7,5850,5851)"} true;
    assume {:print "$track_local(100,21,0):", $t0} $t0 == $t0;

    // $t1 := 255 at ./sources/math/i128.move:235:13+4
    assume {:print "$at(7,5886,5890)"} true;
    $t1 := 255;
    assume $IsValid'u8'($t1);

    // $t2 := ^($t0, $t1) at ./sources/math/i128.move:235:9+8
    call $t2 := $XorBv8($int2bv.8($t0), $int2bv.8($t1));

    // trace_return[0]($t2) at ./sources/math/i128.move:235:9+8
    assume {:print "$track_return(100,21,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/math/i128.move:236:5+1
    assume {:print "$at(7,5895,5896)"} true;
L1:

    // return $t2 at ./sources/math/i128.move:236:5+1
    assume {:print "$at(7,5895,5896)"} true;
    $ret0 := $t2;
    return;

}

// fun i128::wrapping_add [baseline] at ./sources/math/i128.move:53:5+349
procedure {:inline 1} $bb_i128_wrapping_add(_$t0: $bb_i128_I128, _$t1: $bb_i128_I128) returns ($ret0: $bb_i128_I128)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bv128;
    var $t9: int;
    var $t10: int;
    var $t11: bv128;
    var $t12: bv8;
    var $t13: bv128;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: bv128;
    var $t19: bv128;
    var $t20: bv8;
    var $t21: bv128;
    var $t22: $bb_i128_I128;
    var $t0: $bb_i128_I128;
    var $t1: $bb_i128_I128;
    var $temp_0'$bb_i128_I128': $bb_i128_I128;
    var $temp_0'u128': int;
    var $temp_0'bv128': bv128;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/i128.move:53:5+1
    assume {:print "$at(7,1072,1073)"} true;
    assume {:print "$track_local(100,22,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/i128.move:53:5+1
    assume {:print "$track_local(100,22,1):", $t1} $t1 == $t1;

    // $t6 := get_field<0xbb::i128::I128>.bits($t0) at ./sources/math/i128.move:54:19+9
    assume {:print "$at(7,1145,1154)"} true;
    $t6 := $bv2int.128($t0->$bits);

    // $t7 := get_field<0xbb::i128::I128>.bits($t1) at ./sources/math/i128.move:54:31+9
    $t7 := $bv2int.128($t1->$bits);

    // $t8 := ^($t6, $t7) at ./sources/math/i128.move:54:19+21
    call $t8 := $XorBv128($int2bv.128($t6), $int2bv.128($t7));

    // trace_local[$t4]($t8) at ./sources/math/i128.move:54:19+21
    assume {:print "$track_local(100,22,2):", $t8} $t8 == $t8;

    // $t9 := get_field<0xbb::i128::I128>.bits($t0) at ./sources/math/i128.move:55:22+9
    assume {:print "$at(7,1189,1198)"} true;
    $t9 := $bv2int.128($t0->$bits);

    // $t10 := get_field<0xbb::i128::I128>.bits($t1) at ./sources/math/i128.move:55:34+9
    $t10 := $bv2int.128($t1->$bits);

    // $t11 := &($t9, $t10) at ./sources/math/i128.move:55:21+23
    call $t11 := $AndBv128($int2bv.128($t9), $int2bv.128($t10));

    // $t12 := 1 at ./sources/math/i128.move:55:48+1
    $t12 := 1bv8;
    assume $IsValid'bv8'($t12);

    // $t13 := <<($t11, $t12) on_abort goto L5 with $t14 at ./sources/math/i128.move:55:21+28
    call $t13 := $ShlBv128From8($t11, $t12);
    if ($abort_flag) {
        assume {:print "$at(7,1188,1216)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(100,22):", $t14} $t14 == $t14;
        goto L5;
    }

    // trace_local[$t7]($t13) at ./sources/math/i128.move:55:21+28
    assume {:print "$track_local(100,22,3):", $t13} $t13 == $t13;

    // label L2 at ./sources/math/i128.move:56:16+5
    assume {:print "$at(7,1233,1238)"} true;
L2:

    // $t2 := havoc[val]() at ./sources/math/i128.move:56:16+5
    assume {:print "$at(7,1233,1238)"} true;
    havoc $t2;

    // assume WellFormed($t2) at ./sources/math/i128.move:56:16+5
    assume $IsValid'u128'($t2);

    // $t3 := havoc[val]() at ./sources/math/i128.move:56:16+5
    havoc $t3;

    // assume WellFormed($t3) at ./sources/math/i128.move:56:16+5
    assume $IsValid'u128'($t3);

    // $t15 := havoc[val]() at ./sources/math/i128.move:56:16+5
    havoc $t15;

    // assume WellFormed($t15) at ./sources/math/i128.move:56:16+5
    assume $IsValid'u128'($t15);

    // $t16 := havoc[val]() at ./sources/math/i128.move:56:16+5
    havoc $t16;

    // assume WellFormed($t16) at ./sources/math/i128.move:56:16+5
    assume $IsValid'bool'($t16);

    // $t17 := havoc[val]() at ./sources/math/i128.move:56:16+5
    havoc $t17;

    // assume WellFormed($t17) at ./sources/math/i128.move:56:16+5
    assume $IsValid'u128'($t17);

    // $t18 := havoc[val]() at ./sources/math/i128.move:56:16+5
    havoc $t18;

    // assume WellFormed($t18) at ./sources/math/i128.move:56:16+5
    assume $IsValid'bv128'($t18);

    // $t19 := havoc[val]() at ./sources/math/i128.move:56:16+5
    havoc $t19;

    // assume WellFormed($t19) at ./sources/math/i128.move:56:16+5
    assume $IsValid'bv128'($t19);

    // $t20 := havoc[val]() at ./sources/math/i128.move:56:16+5
    havoc $t20;

    // assume WellFormed($t20) at ./sources/math/i128.move:56:16+5
    assume $IsValid'bv8'($t20);

    // $t21 := havoc[val]() at ./sources/math/i128.move:56:16+5
    havoc $t21;

    // assume WellFormed($t21) at ./sources/math/i128.move:56:16+5
    assume $IsValid'bv128'($t21);

    // trace_local[$t4]($t2) at ./sources/math/i128.move:56:16+5
    assume {:print "$info(): enter loop, variable(s) $t4, $t7 havocked and reassigned"} true;
    assume {:print "$track_local(100,22,2):", $t2} $t2 == $t2;

    // trace_local[$t7]($t3) at ./sources/math/i128.move:56:16+5
    assume {:print "$track_local(100,22,3):", $t3} $t3 == $t3;

    // assume Not(AbortFlag()) at ./sources/math/i128.move:56:16+5
    assume !$abort_flag;

    // $t15 := 0 at ./sources/math/i128.move:56:25+1
    $t15 := 0;
    assume $IsValid'u128'($t15);

    // $t16 := !=($t3, $t15) at ./sources/math/i128.move:56:16+10
    $t16 := !$IsEqual'u128'($t3, $t15);

    // if ($t16) goto L1 else goto L0 at ./sources/math/i128.move:56:9+141
    if ($t16) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/i128.move:57:21+3
    assume {:print "$at(7,1267,1270)"} true;
L1:

    // $t17 := move($t2) at ./sources/math/i128.move:57:21+3
    assume {:print "$at(7,1267,1270)"} true;
    $t17 := $t2;

    // trace_local[$t15]($t2) at ./sources/math/i128.move:57:21+3
    assume {:print "$track_local(100,22,4):", $t2} $t2 == $t2;

    // trace_local[$t21]($t3) at ./sources/math/i128.move:58:21+5
    assume {:print "$at(7,1292,1297)"} true;
    assume {:print "$track_local(100,22,5):", $t3} $t3 == $t3;

    // $t18 := ^($t2, $t3) at ./sources/math/i128.move:59:19+5
    assume {:print "$at(7,1317,1322)"} true;
    call $t18 := $XorBv128($int2bv.128($t2), $int2bv.128($t3));

    // trace_local[$t4]($t18) at ./sources/math/i128.move:59:13+11
    assume {:print "$track_local(100,22,2):", $t18} $t18 == $t18;

    // $t19 := &($t17, $t3) at ./sources/math/i128.move:60:21+7
    assume {:print "$at(7,1344,1351)"} true;
    call $t19 := $AndBv128($int2bv.128($t17), $int2bv.128($t3));

    // $t20 := 1 at ./sources/math/i128.move:60:32+1
    $t20 := 1bv8;
    assume $IsValid'bv8'($t20);

    // $t21 := <<($t19, $t20) on_abort goto L5 with $t14 at ./sources/math/i128.move:60:21+12
    call $t21 := $ShlBv128From8($t19, $t20);
    if ($abort_flag) {
        assume {:print "$at(7,1344,1356)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(100,22):", $t14} $t14 == $t14;
        goto L5;
    }

    // trace_local[$t7]($t21) at ./sources/math/i128.move:60:13+20
    assume {:print "$track_local(100,22,3):", $t21} $t21 == $t21;

    // goto L3 at ./sources/math/i128.move:56:9+141
    assume {:print "$at(7,1226,1367)"} true;
    goto L3;

    // label L0 at ./sources/math/i128.move:62:9+38
    assume {:print "$at(7,1377,1415)"} true;
L0:

    // $t22 := pack 0xbb::i128::I128($t2) at ./sources/math/i128.move:62:9+38
    assume {:print "$at(7,1377,1415)"} true;
    $t22 := $bb_i128_I128($int2bv.128($t2));

    // trace_return[0]($t22) at ./sources/math/i128.move:53:58+296
    assume {:print "$at(7,1125,1421)"} true;
    assume {:print "$track_return(100,22,0):", $t22} $t22 == $t22;

    // goto L4 at ./sources/math/i128.move:53:58+296
    goto L4;

    // label L3 at ./sources/math/i128.move:62:9+38
    // Loop invariant checking block for the loop started with header: L2
    assume {:print "$at(7,1377,1415)"} true;
L3:

    // stop() at ./sources/math/i128.move:62:9+38
    assume {:print "$at(7,1377,1415)"} true;
    assume false;
    return;

    // label L4 at ./sources/math/i128.move:65:5+1
    assume {:print "$at(7,1420,1421)"} true;
L4:

    // return $t22 at ./sources/math/i128.move:65:5+1
    assume {:print "$at(7,1420,1421)"} true;
    $ret0 := $t22;
    return;

    // label L5 at ./sources/math/i128.move:65:5+1
L5:

    // abort($t14) at ./sources/math/i128.move:65:5+1
    assume {:print "$at(7,1420,1421)"} true;
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun i128::u128_neg [baseline] at ./sources/math/i128.move:230:5+83
procedure {:inline 1} $bb_i128_u128_neg(_$t0: bv128) returns ($ret0: bv128)
{
    // declare local variables
    var $t1: int;
    var $t2: bv128;
    var $t0: bv128;
    var $temp_0'bv128': bv128;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[v]($t0) at ./sources/math/i128.move:230:5+1
    assume {:print "$at(7,5761,5762)"} true;
    assume {:print "$track_local(100,30,0):", $t0} $t0 == $t0;

    // $t1 := 340282366920938463463374607431768211455 at ./sources/math/i128.move:231:13+34
    assume {:print "$at(7,5804,5838)"} true;
    $t1 := 340282366920938463463374607431768211455;
    assume $IsValid'u128'($t1);

    // $t2 := ^($t0, $t1) at ./sources/math/i128.move:231:9+38
    call $t2 := $XorBv128($t0, $int2bv.128($t1));

    // trace_return[0]($t2) at ./sources/math/i128.move:231:9+38
    assume {:print "$track_return(100,30,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/math/i128.move:232:5+1
    assume {:print "$at(7,5843,5844)"} true;
L1:

    // return $t2 at ./sources/math/i128.move:232:5+1
    assume {:print "$at(7,5843,5844)"} true;
    $ret0 := $t2;
    return;

}

// fun full_math_u128::full_mul [baseline] at ./sources/math/full_math_u128.move:28:5+97
procedure {:inline 1} $bb_full_math_u128_full_mul(_$t0: int, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'u128': int;
    var $temp_0'u256': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/full_math_u128.move:28:5+1
    assume {:print "$at(5,885,886)"} true;
    assume {:print "$track_local(101,0,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/full_math_u128.move:28:5+1
    assume {:print "$track_local(101,0,1):", $t1} $t1 == $t1;

    // $t2 := (u256)($t0) on_abort goto L2 with $t3 at ./sources/math/full_math_u128.move:29:9+14
    assume {:print "$at(5,945,959)"} true;
    call $t2 := $CastU256($t0);
    if ($abort_flag) {
        assume {:print "$at(5,945,959)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,0):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := (u256)($t1) on_abort goto L2 with $t3 at ./sources/math/full_math_u128.move:29:26+14
    call $t4 := $CastU256($t1);
    if ($abort_flag) {
        assume {:print "$at(5,962,976)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,0):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t5 := *($t2, $t4) on_abort goto L2 with $t3 at ./sources/math/full_math_u128.move:29:9+31
    call $t5 := $MulU256($t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(5,945,976)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,0):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t5) at ./sources/math/full_math_u128.move:29:9+31
    assume {:print "$track_return(101,0,0):", $t5} $t5 == $t5;

    // label L1 at ./sources/math/full_math_u128.move:30:5+1
    assume {:print "$at(5,981,982)"} true;
L1:

    // return $t5 at ./sources/math/full_math_u128.move:30:5+1
    assume {:print "$at(5,981,982)"} true;
    $ret0 := $t5;
    return;

    // label L2 at ./sources/math/full_math_u128.move:30:5+1
L2:

    // abort($t3) at ./sources/math/full_math_u128.move:30:5+1
    assume {:print "$at(5,981,982)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun full_math_u128::full_mul_v2 [baseline] at ./sources/math/full_math_u128.move:32:5+100
procedure {:inline 1} $bb_full_math_u128_full_mul_v2(_$t0: int, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'u128': int;
    var $temp_0'u256': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/full_math_u128.move:32:5+1
    assume {:print "$at(5,988,989)"} true;
    assume {:print "$track_local(101,1,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/full_math_u128.move:32:5+1
    assume {:print "$track_local(101,1,1):", $t1} $t1 == $t1;

    // $t2 := (u256)($t0) on_abort goto L2 with $t3 at ./sources/math/full_math_u128.move:33:9+14
    assume {:print "$at(5,1051,1065)"} true;
    call $t2 := $CastU256($t0);
    if ($abort_flag) {
        assume {:print "$at(5,1051,1065)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,1):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := (u256)($t1) on_abort goto L2 with $t3 at ./sources/math/full_math_u128.move:33:26+14
    call $t4 := $CastU256($t1);
    if ($abort_flag) {
        assume {:print "$at(5,1068,1082)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,1):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t5 := *($t2, $t4) on_abort goto L2 with $t3 at ./sources/math/full_math_u128.move:33:9+31
    call $t5 := $MulU256($t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(5,1051,1082)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,1):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t5) at ./sources/math/full_math_u128.move:33:9+31
    assume {:print "$track_return(101,1,0):", $t5} $t5 == $t5;

    // label L1 at ./sources/math/full_math_u128.move:34:5+1
    assume {:print "$at(5,1087,1088)"} true;
L1:

    // return $t5 at ./sources/math/full_math_u128.move:34:5+1
    assume {:print "$at(5,1087,1088)"} true;
    $ret0 := $t5;
    return;

    // label L2 at ./sources/math/full_math_u128.move:34:5+1
L2:

    // abort($t3) at ./sources/math/full_math_u128.move:34:5+1
    assume {:print "$at(5,1087,1088)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun full_math_u128::mul_shr [baseline] at ./sources/math/full_math_u128.move:18:5+149
procedure {:inline 1} $bb_full_math_u128_mul_shr(_$t0: int, _$t1: int, _$t2: int) returns ($ret0: int)
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $temp_0'u128': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[num1]($t0) at ./sources/math/full_math_u128.move:18:5+1
    assume {:print "$at(5,575,576)"} true;
    assume {:print "$track_local(101,6,0):", $t0} $t0 == $t0;

    // trace_local[num2]($t1) at ./sources/math/full_math_u128.move:18:5+1
    assume {:print "$track_local(101,6,1):", $t1} $t1 == $t1;

    // trace_local[shift]($t2) at ./sources/math/full_math_u128.move:18:5+1
    assume {:print "$track_local(101,6,2):", $t2} $t2 == $t2;

    // $t3 := full_math_u128::full_mul_v2($t0, $t1) on_abort goto L2 with $t4 at ./sources/math/full_math_u128.move:19:23+23
    assume {:print "$at(5,659,682)"} true;
    call $t3 := $bb_full_math_u128_full_mul_v2($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(5,659,682)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,6):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := >>($t3, $t2) on_abort goto L2 with $t4 at ./sources/math/full_math_u128.move:19:23+32
    call $t5 := $ShrU256($t3, $t2);
    if ($abort_flag) {
        assume {:print "$at(5,659,691)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,6):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t6 := (u128)($t5) on_abort goto L2 with $t4 at ./sources/math/full_math_u128.move:20:9+17
    assume {:print "$at(5,701,718)"} true;
    call $t6 := $CastU128($t5);
    if ($abort_flag) {
        assume {:print "$at(5,701,718)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,6):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t6) at ./sources/math/full_math_u128.move:20:9+17
    assume {:print "$track_return(101,6,0):", $t6} $t6 == $t6;

    // label L1 at ./sources/math/full_math_u128.move:21:5+1
    assume {:print "$at(5,723,724)"} true;
L1:

    // return $t6 at ./sources/math/full_math_u128.move:21:5+1
    assume {:print "$at(5,723,724)"} true;
    $ret0 := $t6;
    return;

    // label L2 at ./sources/math/full_math_u128.move:21:5+1
L2:

    // abort($t4) at ./sources/math/full_math_u128.move:21:5+1
    assume {:print "$at(5,723,724)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun tick_math::get_sqrt_price_at_negative_tick [baseline] at ./sources/math/tick_math.move:131:5+2643
procedure {:inline 1} $bb_tick_math_get_sqrt_price_at_negative_tick(_$t0: $bb_i32_I32) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: $bb_i32_I32;
    var $t4: int;
    var $t5: bv32;
    var $t6: int;
    var $t7: bv32;
    var $t8: bv32;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: bv32;
    var $t13: bv32;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bv32;
    var $t20: bv32;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: bv32;
    var $t27: bv32;
    var $t28: bool;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: bv32;
    var $t34: bv32;
    var $t35: bool;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: bv32;
    var $t41: bv32;
    var $t42: bool;
    var $t43: int;
    var $t44: int;
    var $t45: int;
    var $t46: int;
    var $t47: bv32;
    var $t48: bv32;
    var $t49: bool;
    var $t50: int;
    var $t51: int;
    var $t52: int;
    var $t53: int;
    var $t54: bv32;
    var $t55: bv32;
    var $t56: bool;
    var $t57: int;
    var $t58: int;
    var $t59: int;
    var $t60: int;
    var $t61: bv32;
    var $t62: bv32;
    var $t63: bool;
    var $t64: int;
    var $t65: int;
    var $t66: int;
    var $t67: int;
    var $t68: bv32;
    var $t69: bv32;
    var $t70: bool;
    var $t71: int;
    var $t72: int;
    var $t73: int;
    var $t74: int;
    var $t75: bv32;
    var $t76: bv32;
    var $t77: bool;
    var $t78: int;
    var $t79: int;
    var $t80: int;
    var $t81: int;
    var $t82: bv32;
    var $t83: bv32;
    var $t84: bool;
    var $t85: int;
    var $t86: int;
    var $t87: int;
    var $t88: int;
    var $t89: bv32;
    var $t90: bv32;
    var $t91: bool;
    var $t92: int;
    var $t93: int;
    var $t94: int;
    var $t95: int;
    var $t96: bv32;
    var $t97: bv32;
    var $t98: bool;
    var $t99: int;
    var $t100: int;
    var $t101: int;
    var $t102: int;
    var $t103: bv32;
    var $t104: bv32;
    var $t105: bool;
    var $t106: int;
    var $t107: int;
    var $t108: int;
    var $t109: int;
    var $t110: bv32;
    var $t111: bv32;
    var $t112: bool;
    var $t113: int;
    var $t114: int;
    var $t115: int;
    var $t116: int;
    var $t117: bv32;
    var $t118: bv32;
    var $t119: bool;
    var $t120: int;
    var $t121: int;
    var $t122: int;
    var $t123: int;
    var $t124: bv32;
    var $t125: bv32;
    var $t126: bool;
    var $t127: int;
    var $t128: int;
    var $t129: int;
    var $t130: int;
    var $t131: bv32;
    var $t132: bv32;
    var $t133: bool;
    var $t134: int;
    var $t135: int;
    var $t136: int;
    var $t137: int;
    var $t0: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'u128': int;
    var $temp_0'bv32': bv32;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[tick]($t0) at ./sources/math/tick_math.move:131:5+1
    assume {:print "$at(14,3969,3970)"} true;
    assume {:print "$track_local(102,2,0):", $t0} $t0 == $t0;

    // $t3 := i32::abs($t0) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:132:36+14
    assume {:print "$at(14,4064,4078)"} true;
    call $t3 := $bb_i32_abs($t0);
    if ($abort_flag) {
        assume {:print "$at(14,4064,4078)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t5 := i32::as_u32($t3) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:132:24+27
    call $t5 := $bb_i32_as_u32($t3);
    if ($abort_flag) {
        assume {:print "$at(14,4052,4079)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // trace_local[abs_tick]($t5) at ./sources/math/tick_math.move:132:24+27
    assume {:print "$track_local(102,2,1):", $t5} $t5 == $t5;

    // $t6 := 1 at ./sources/math/tick_math.move:133:36+3
    assume {:print "$at(14,4116,4119)"} true;
    $t6 := 1;
    assume $IsValid'u32'($t6);

    // $t7 := &($t5, $t6) at ./sources/math/tick_math.move:133:25+14
    call $t7 := $AndBv32($t5, $int2bv.32($t6));

    // $t8 := 0 at ./sources/math/tick_math.move:133:43+1
    $t8 := 0bv32;
    assume $IsValid'bv32'($t8);

    // $t9 := !=($t7, $t8) at ./sources/math/tick_math.move:133:25+19
    $t9 := !$IsEqual'bv32'($t7, $t8);

    // if ($t9) goto L1 else goto L0 at ./sources/math/tick_math.move:133:21+127
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/tick_math.move:134:13+24
    assume {:print "$at(14,4140,4164)"} true;
L1:

    // $t10 := 18445821805675392311 at ./sources/math/tick_math.move:134:13+24
    assume {:print "$at(14,4140,4164)"} true;
    $t10 := 18445821805675392311;
    assume $IsValid'u128'($t10);

    // $t2 := $t10 at ./sources/math/tick_math.move:134:13+24
    $t2 := $t10;

    // trace_local[ratio]($t10) at ./sources/math/tick_math.move:134:13+24
    assume {:print "$track_local(102,2,2):", $t10} $t10 == $t10;

    // label L56 at ./sources/math/tick_math.move:138:13+8
    assume {:print "$at(14,4242,4250)"} true;
L56:

    // $t11 := 2 at ./sources/math/tick_math.move:138:24+3
    assume {:print "$at(14,4253,4256)"} true;
    $t11 := 2;
    assume $IsValid'u32'($t11);

    // $t12 := &($t5, $t11) at ./sources/math/tick_math.move:138:13+14
    call $t12 := $AndBv32($t5, $int2bv.32($t11));

    // $t13 := 0 at ./sources/math/tick_math.move:138:31+1
    $t13 := 0bv32;
    assume $IsValid'bv32'($t13);

    // $t14 := !=($t12, $t13) at ./sources/math/tick_math.move:138:13+19
    $t14 := !$IsEqual'bv32'($t12, $t13);

    // if ($t14) goto L2 else goto L4 at ./sources/math/tick_math.move:138:9+119
    if ($t14) { goto L2; } else { goto L4; }

    // label L2 at ./sources/math/tick_math.move:139:45+5
    assume {:print "$at(14,4309,4314)"} true;
L2:

    // $t15 := 18444899583751176498 at ./sources/math/tick_math.move:139:52+24
    assume {:print "$at(14,4316,4340)"} true;
    $t15 := 18444899583751176498;
    assume $IsValid'u128'($t15);

    // $t16 := 64 at ./sources/math/tick_math.move:139:78+4
    $t16 := 64;
    assume $IsValid'u8'($t16);

    // $t17 := full_math_u128::mul_shr($t2, $t15, $t16) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:139:21+62
    call $t17 := $bb_full_math_u128_mul_shr($t2, $t15, $t16);
    if ($abort_flag) {
        assume {:print "$at(14,4285,4347)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t17 at ./sources/math/tick_math.move:139:13+70
    $t2 := $t17;

    // trace_local[ratio]($t17) at ./sources/math/tick_math.move:139:13+70
    assume {:print "$track_local(102,2,2):", $t17} $t17 == $t17;

    // label L4 at ./sources/math/tick_math.move:141:13+8
    assume {:print "$at(14,4371,4379)"} true;
L4:

    // $t18 := 4 at ./sources/math/tick_math.move:141:24+3
    assume {:print "$at(14,4382,4385)"} true;
    $t18 := 4;
    assume $IsValid'u32'($t18);

    // $t19 := &($t5, $t18) at ./sources/math/tick_math.move:141:13+14
    call $t19 := $AndBv32($t5, $int2bv.32($t18));

    // $t20 := 0 at ./sources/math/tick_math.move:141:31+1
    $t20 := 0bv32;
    assume $IsValid'bv32'($t20);

    // $t21 := !=($t19, $t20) at ./sources/math/tick_math.move:141:13+19
    $t21 := !$IsEqual'bv32'($t19, $t20);

    // if ($t21) goto L5 else goto L7 at ./sources/math/tick_math.move:141:9+120
    if ($t21) { goto L5; } else { goto L7; }

    // label L5 at ./sources/math/tick_math.move:142:45+5
    assume {:print "$at(14,4438,4443)"} true;
L5:

    // $t22 := 18443055278223354162 at ./sources/math/tick_math.move:142:52+24
    assume {:print "$at(14,4445,4469)"} true;
    $t22 := 18443055278223354162;
    assume $IsValid'u128'($t22);

    // $t23 := 64 at ./sources/math/tick_math.move:142:78+4
    $t23 := 64;
    assume $IsValid'u8'($t23);

    // $t24 := full_math_u128::mul_shr($t2, $t22, $t23) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:142:21+62
    call $t24 := $bb_full_math_u128_mul_shr($t2, $t22, $t23);
    if ($abort_flag) {
        assume {:print "$at(14,4414,4476)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t24 at ./sources/math/tick_math.move:142:13+70
    $t2 := $t24;

    // trace_local[ratio]($t24) at ./sources/math/tick_math.move:142:13+70
    assume {:print "$track_local(102,2,2):", $t24} $t24 == $t24;

    // label L7 at ./sources/math/tick_math.move:144:13+8
    assume {:print "$at(14,4501,4509)"} true;
L7:

    // $t25 := 8 at ./sources/math/tick_math.move:144:24+3
    assume {:print "$at(14,4512,4515)"} true;
    $t25 := 8;
    assume $IsValid'u32'($t25);

    // $t26 := &($t5, $t25) at ./sources/math/tick_math.move:144:13+14
    call $t26 := $AndBv32($t5, $int2bv.32($t25));

    // $t27 := 0 at ./sources/math/tick_math.move:144:31+1
    $t27 := 0bv32;
    assume $IsValid'bv32'($t27);

    // $t28 := !=($t26, $t27) at ./sources/math/tick_math.move:144:13+19
    $t28 := !$IsEqual'bv32'($t26, $t27);

    // if ($t28) goto L8 else goto L10 at ./sources/math/tick_math.move:144:9+120
    if ($t28) { goto L8; } else { goto L10; }

    // label L8 at ./sources/math/tick_math.move:145:45+5
    assume {:print "$at(14,4568,4573)"} true;
L8:

    // $t29 := 18439367220385604838 at ./sources/math/tick_math.move:145:52+24
    assume {:print "$at(14,4575,4599)"} true;
    $t29 := 18439367220385604838;
    assume $IsValid'u128'($t29);

    // $t30 := 64 at ./sources/math/tick_math.move:145:78+4
    $t30 := 64;
    assume $IsValid'u8'($t30);

    // $t31 := full_math_u128::mul_shr($t2, $t29, $t30) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:145:21+62
    call $t31 := $bb_full_math_u128_mul_shr($t2, $t29, $t30);
    if ($abort_flag) {
        assume {:print "$at(14,4544,4606)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t31 at ./sources/math/tick_math.move:145:13+70
    $t2 := $t31;

    // trace_local[ratio]($t31) at ./sources/math/tick_math.move:145:13+70
    assume {:print "$track_local(102,2,2):", $t31} $t31 == $t31;

    // label L10 at ./sources/math/tick_math.move:147:13+8
    assume {:print "$at(14,4631,4639)"} true;
L10:

    // $t32 := 16 at ./sources/math/tick_math.move:147:24+4
    assume {:print "$at(14,4642,4646)"} true;
    $t32 := 16;
    assume $IsValid'u32'($t32);

    // $t33 := &($t5, $t32) at ./sources/math/tick_math.move:147:13+15
    call $t33 := $AndBv32($t5, $int2bv.32($t32));

    // $t34 := 0 at ./sources/math/tick_math.move:147:32+1
    $t34 := 0bv32;
    assume $IsValid'bv32'($t34);

    // $t35 := !=($t33, $t34) at ./sources/math/tick_math.move:147:13+20
    $t35 := !$IsEqual'bv32'($t33, $t34);

    // if ($t35) goto L11 else goto L13 at ./sources/math/tick_math.move:147:9+121
    if ($t35) { goto L11; } else { goto L13; }

    // label L11 at ./sources/math/tick_math.move:148:45+5
    assume {:print "$at(14,4699,4704)"} true;
L11:

    // $t36 := 18431993317065449817 at ./sources/math/tick_math.move:148:52+24
    assume {:print "$at(14,4706,4730)"} true;
    $t36 := 18431993317065449817;
    assume $IsValid'u128'($t36);

    // $t37 := 64 at ./sources/math/tick_math.move:148:78+4
    $t37 := 64;
    assume $IsValid'u8'($t37);

    // $t38 := full_math_u128::mul_shr($t2, $t36, $t37) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:148:21+62
    call $t38 := $bb_full_math_u128_mul_shr($t2, $t36, $t37);
    if ($abort_flag) {
        assume {:print "$at(14,4675,4737)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t38 at ./sources/math/tick_math.move:148:13+70
    $t2 := $t38;

    // trace_local[ratio]($t38) at ./sources/math/tick_math.move:148:13+70
    assume {:print "$track_local(102,2,2):", $t38} $t38 == $t38;

    // label L13 at ./sources/math/tick_math.move:150:13+8
    assume {:print "$at(14,4762,4770)"} true;
L13:

    // $t39 := 32 at ./sources/math/tick_math.move:150:24+4
    assume {:print "$at(14,4773,4777)"} true;
    $t39 := 32;
    assume $IsValid'u32'($t39);

    // $t40 := &($t5, $t39) at ./sources/math/tick_math.move:150:13+15
    call $t40 := $AndBv32($t5, $int2bv.32($t39));

    // $t41 := 0 at ./sources/math/tick_math.move:150:32+1
    $t41 := 0bv32;
    assume $IsValid'bv32'($t41);

    // $t42 := !=($t40, $t41) at ./sources/math/tick_math.move:150:13+20
    $t42 := !$IsEqual'bv32'($t40, $t41);

    // if ($t42) goto L14 else goto L16 at ./sources/math/tick_math.move:150:9+121
    if ($t42) { goto L14; } else { goto L16; }

    // label L14 at ./sources/math/tick_math.move:151:45+5
    assume {:print "$at(14,4830,4835)"} true;
L14:

    // $t43 := 18417254355718160513 at ./sources/math/tick_math.move:151:52+24
    assume {:print "$at(14,4837,4861)"} true;
    $t43 := 18417254355718160513;
    assume $IsValid'u128'($t43);

    // $t44 := 64 at ./sources/math/tick_math.move:151:78+4
    $t44 := 64;
    assume $IsValid'u8'($t44);

    // $t45 := full_math_u128::mul_shr($t2, $t43, $t44) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:151:21+62
    call $t45 := $bb_full_math_u128_mul_shr($t2, $t43, $t44);
    if ($abort_flag) {
        assume {:print "$at(14,4806,4868)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t45 at ./sources/math/tick_math.move:151:13+70
    $t2 := $t45;

    // trace_local[ratio]($t45) at ./sources/math/tick_math.move:151:13+70
    assume {:print "$track_local(102,2,2):", $t45} $t45 == $t45;

    // label L16 at ./sources/math/tick_math.move:153:13+8
    assume {:print "$at(14,4893,4901)"} true;
L16:

    // $t46 := 64 at ./sources/math/tick_math.move:153:24+4
    assume {:print "$at(14,4904,4908)"} true;
    $t46 := 64;
    assume $IsValid'u32'($t46);

    // $t47 := &($t5, $t46) at ./sources/math/tick_math.move:153:13+15
    call $t47 := $AndBv32($t5, $int2bv.32($t46));

    // $t48 := 0 at ./sources/math/tick_math.move:153:32+1
    $t48 := 0bv32;
    assume $IsValid'bv32'($t48);

    // $t49 := !=($t47, $t48) at ./sources/math/tick_math.move:153:13+20
    $t49 := !$IsEqual'bv32'($t47, $t48);

    // if ($t49) goto L17 else goto L19 at ./sources/math/tick_math.move:153:9+121
    if ($t49) { goto L17; } else { goto L19; }

    // label L17 at ./sources/math/tick_math.move:154:45+5
    assume {:print "$at(14,4961,4966)"} true;
L17:

    // $t50 := 18387811781193591352 at ./sources/math/tick_math.move:154:52+24
    assume {:print "$at(14,4968,4992)"} true;
    $t50 := 18387811781193591352;
    assume $IsValid'u128'($t50);

    // $t51 := 64 at ./sources/math/tick_math.move:154:78+4
    $t51 := 64;
    assume $IsValid'u8'($t51);

    // $t52 := full_math_u128::mul_shr($t2, $t50, $t51) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:154:21+62
    call $t52 := $bb_full_math_u128_mul_shr($t2, $t50, $t51);
    if ($abort_flag) {
        assume {:print "$at(14,4937,4999)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t52 at ./sources/math/tick_math.move:154:13+70
    $t2 := $t52;

    // trace_local[ratio]($t52) at ./sources/math/tick_math.move:154:13+70
    assume {:print "$track_local(102,2,2):", $t52} $t52 == $t52;

    // label L19 at ./sources/math/tick_math.move:156:13+8
    assume {:print "$at(14,5024,5032)"} true;
L19:

    // $t53 := 128 at ./sources/math/tick_math.move:156:24+4
    assume {:print "$at(14,5035,5039)"} true;
    $t53 := 128;
    assume $IsValid'u32'($t53);

    // $t54 := &($t5, $t53) at ./sources/math/tick_math.move:156:13+15
    call $t54 := $AndBv32($t5, $int2bv.32($t53));

    // $t55 := 0 at ./sources/math/tick_math.move:156:32+1
    $t55 := 0bv32;
    assume $IsValid'bv32'($t55);

    // $t56 := !=($t54, $t55) at ./sources/math/tick_math.move:156:13+20
    $t56 := !$IsEqual'bv32'($t54, $t55);

    // if ($t56) goto L20 else goto L22 at ./sources/math/tick_math.move:156:9+121
    if ($t56) { goto L20; } else { goto L22; }

    // label L20 at ./sources/math/tick_math.move:157:45+5
    assume {:print "$at(14,5092,5097)"} true;
L20:

    // $t57 := 18329067761203520168 at ./sources/math/tick_math.move:157:52+24
    assume {:print "$at(14,5099,5123)"} true;
    $t57 := 18329067761203520168;
    assume $IsValid'u128'($t57);

    // $t58 := 64 at ./sources/math/tick_math.move:157:78+4
    $t58 := 64;
    assume $IsValid'u8'($t58);

    // $t59 := full_math_u128::mul_shr($t2, $t57, $t58) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:157:21+62
    call $t59 := $bb_full_math_u128_mul_shr($t2, $t57, $t58);
    if ($abort_flag) {
        assume {:print "$at(14,5068,5130)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t59 at ./sources/math/tick_math.move:157:13+70
    $t2 := $t59;

    // trace_local[ratio]($t59) at ./sources/math/tick_math.move:157:13+70
    assume {:print "$track_local(102,2,2):", $t59} $t59 == $t59;

    // label L22 at ./sources/math/tick_math.move:159:13+8
    assume {:print "$at(14,5155,5163)"} true;
L22:

    // $t60 := 256 at ./sources/math/tick_math.move:159:24+5
    assume {:print "$at(14,5166,5171)"} true;
    $t60 := 256;
    assume $IsValid'u32'($t60);

    // $t61 := &($t5, $t60) at ./sources/math/tick_math.move:159:13+16
    call $t61 := $AndBv32($t5, $int2bv.32($t60));

    // $t62 := 0 at ./sources/math/tick_math.move:159:33+1
    $t62 := 0bv32;
    assume $IsValid'bv32'($t62);

    // $t63 := !=($t61, $t62) at ./sources/math/tick_math.move:159:13+21
    $t63 := !$IsEqual'bv32'($t61, $t62);

    // if ($t63) goto L23 else goto L25 at ./sources/math/tick_math.move:159:9+122
    if ($t63) { goto L23; } else { goto L25; }

    // label L23 at ./sources/math/tick_math.move:160:45+5
    assume {:print "$at(14,5224,5229)"} true;
L23:

    // $t64 := 18212142134806087854 at ./sources/math/tick_math.move:160:52+24
    assume {:print "$at(14,5231,5255)"} true;
    $t64 := 18212142134806087854;
    assume $IsValid'u128'($t64);

    // $t65 := 64 at ./sources/math/tick_math.move:160:78+4
    $t65 := 64;
    assume $IsValid'u8'($t65);

    // $t66 := full_math_u128::mul_shr($t2, $t64, $t65) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:160:21+62
    call $t66 := $bb_full_math_u128_mul_shr($t2, $t64, $t65);
    if ($abort_flag) {
        assume {:print "$at(14,5200,5262)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t66 at ./sources/math/tick_math.move:160:13+70
    $t2 := $t66;

    // trace_local[ratio]($t66) at ./sources/math/tick_math.move:160:13+70
    assume {:print "$track_local(102,2,2):", $t66} $t66 == $t66;

    // label L25 at ./sources/math/tick_math.move:162:13+8
    assume {:print "$at(14,5287,5295)"} true;
L25:

    // $t67 := 512 at ./sources/math/tick_math.move:162:24+5
    assume {:print "$at(14,5298,5303)"} true;
    $t67 := 512;
    assume $IsValid'u32'($t67);

    // $t68 := &($t5, $t67) at ./sources/math/tick_math.move:162:13+16
    call $t68 := $AndBv32($t5, $int2bv.32($t67));

    // $t69 := 0 at ./sources/math/tick_math.move:162:33+1
    $t69 := 0bv32;
    assume $IsValid'bv32'($t69);

    // $t70 := !=($t68, $t69) at ./sources/math/tick_math.move:162:13+21
    $t70 := !$IsEqual'bv32'($t68, $t69);

    // if ($t70) goto L26 else goto L28 at ./sources/math/tick_math.move:162:9+122
    if ($t70) { goto L26; } else { goto L28; }

    // label L26 at ./sources/math/tick_math.move:163:45+5
    assume {:print "$at(14,5356,5361)"} true;
L26:

    // $t71 := 17980523815641551639 at ./sources/math/tick_math.move:163:52+24
    assume {:print "$at(14,5363,5387)"} true;
    $t71 := 17980523815641551639;
    assume $IsValid'u128'($t71);

    // $t72 := 64 at ./sources/math/tick_math.move:163:78+4
    $t72 := 64;
    assume $IsValid'u8'($t72);

    // $t73 := full_math_u128::mul_shr($t2, $t71, $t72) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:163:21+62
    call $t73 := $bb_full_math_u128_mul_shr($t2, $t71, $t72);
    if ($abort_flag) {
        assume {:print "$at(14,5332,5394)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t73 at ./sources/math/tick_math.move:163:13+70
    $t2 := $t73;

    // trace_local[ratio]($t73) at ./sources/math/tick_math.move:163:13+70
    assume {:print "$track_local(102,2,2):", $t73} $t73 == $t73;

    // label L28 at ./sources/math/tick_math.move:165:13+8
    assume {:print "$at(14,5419,5427)"} true;
L28:

    // $t74 := 1024 at ./sources/math/tick_math.move:165:24+5
    assume {:print "$at(14,5430,5435)"} true;
    $t74 := 1024;
    assume $IsValid'u32'($t74);

    // $t75 := &($t5, $t74) at ./sources/math/tick_math.move:165:13+16
    call $t75 := $AndBv32($t5, $int2bv.32($t74));

    // $t76 := 0 at ./sources/math/tick_math.move:165:33+1
    $t76 := 0bv32;
    assume $IsValid'bv32'($t76);

    // $t77 := !=($t75, $t76) at ./sources/math/tick_math.move:165:13+21
    $t77 := !$IsEqual'bv32'($t75, $t76);

    // if ($t77) goto L29 else goto L31 at ./sources/math/tick_math.move:165:9+122
    if ($t77) { goto L29; } else { goto L31; }

    // label L29 at ./sources/math/tick_math.move:166:45+5
    assume {:print "$at(14,5488,5493)"} true;
L29:

    // $t78 := 17526086738831147013 at ./sources/math/tick_math.move:166:52+24
    assume {:print "$at(14,5495,5519)"} true;
    $t78 := 17526086738831147013;
    assume $IsValid'u128'($t78);

    // $t79 := 64 at ./sources/math/tick_math.move:166:78+4
    $t79 := 64;
    assume $IsValid'u8'($t79);

    // $t80 := full_math_u128::mul_shr($t2, $t78, $t79) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:166:21+62
    call $t80 := $bb_full_math_u128_mul_shr($t2, $t78, $t79);
    if ($abort_flag) {
        assume {:print "$at(14,5464,5526)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t80 at ./sources/math/tick_math.move:166:13+70
    $t2 := $t80;

    // trace_local[ratio]($t80) at ./sources/math/tick_math.move:166:13+70
    assume {:print "$track_local(102,2,2):", $t80} $t80 == $t80;

    // label L31 at ./sources/math/tick_math.move:168:13+8
    assume {:print "$at(14,5551,5559)"} true;
L31:

    // $t81 := 2048 at ./sources/math/tick_math.move:168:24+5
    assume {:print "$at(14,5562,5567)"} true;
    $t81 := 2048;
    assume $IsValid'u32'($t81);

    // $t82 := &($t5, $t81) at ./sources/math/tick_math.move:168:13+16
    call $t82 := $AndBv32($t5, $int2bv.32($t81));

    // $t83 := 0 at ./sources/math/tick_math.move:168:33+1
    $t83 := 0bv32;
    assume $IsValid'bv32'($t83);

    // $t84 := !=($t82, $t83) at ./sources/math/tick_math.move:168:13+21
    $t84 := !$IsEqual'bv32'($t82, $t83);

    // if ($t84) goto L32 else goto L34 at ./sources/math/tick_math.move:168:9+122
    if ($t84) { goto L32; } else { goto L34; }

    // label L32 at ./sources/math/tick_math.move:169:45+5
    assume {:print "$at(14,5620,5625)"} true;
L32:

    // $t85 := 16651378430235024244 at ./sources/math/tick_math.move:169:52+24
    assume {:print "$at(14,5627,5651)"} true;
    $t85 := 16651378430235024244;
    assume $IsValid'u128'($t85);

    // $t86 := 64 at ./sources/math/tick_math.move:169:78+4
    $t86 := 64;
    assume $IsValid'u8'($t86);

    // $t87 := full_math_u128::mul_shr($t2, $t85, $t86) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:169:21+62
    call $t87 := $bb_full_math_u128_mul_shr($t2, $t85, $t86);
    if ($abort_flag) {
        assume {:print "$at(14,5596,5658)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t87 at ./sources/math/tick_math.move:169:13+70
    $t2 := $t87;

    // trace_local[ratio]($t87) at ./sources/math/tick_math.move:169:13+70
    assume {:print "$track_local(102,2,2):", $t87} $t87 == $t87;

    // label L34 at ./sources/math/tick_math.move:171:13+8
    assume {:print "$at(14,5683,5691)"} true;
L34:

    // $t88 := 4096 at ./sources/math/tick_math.move:171:24+6
    assume {:print "$at(14,5694,5700)"} true;
    $t88 := 4096;
    assume $IsValid'u32'($t88);

    // $t89 := &($t5, $t88) at ./sources/math/tick_math.move:171:13+17
    call $t89 := $AndBv32($t5, $int2bv.32($t88));

    // $t90 := 0 at ./sources/math/tick_math.move:171:34+1
    $t90 := 0bv32;
    assume $IsValid'bv32'($t90);

    // $t91 := !=($t89, $t90) at ./sources/math/tick_math.move:171:13+22
    $t91 := !$IsEqual'bv32'($t89, $t90);

    // if ($t91) goto L35 else goto L37 at ./sources/math/tick_math.move:171:9+123
    if ($t91) { goto L35; } else { goto L37; }

    // label L35 at ./sources/math/tick_math.move:172:45+5
    assume {:print "$at(14,5753,5758)"} true;
L35:

    // $t92 := 15030750278693429944 at ./sources/math/tick_math.move:172:52+24
    assume {:print "$at(14,5760,5784)"} true;
    $t92 := 15030750278693429944;
    assume $IsValid'u128'($t92);

    // $t93 := 64 at ./sources/math/tick_math.move:172:78+4
    $t93 := 64;
    assume $IsValid'u8'($t93);

    // $t94 := full_math_u128::mul_shr($t2, $t92, $t93) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:172:21+62
    call $t94 := $bb_full_math_u128_mul_shr($t2, $t92, $t93);
    if ($abort_flag) {
        assume {:print "$at(14,5729,5791)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t94 at ./sources/math/tick_math.move:172:13+70
    $t2 := $t94;

    // trace_local[ratio]($t94) at ./sources/math/tick_math.move:172:13+70
    assume {:print "$track_local(102,2,2):", $t94} $t94 == $t94;

    // label L37 at ./sources/math/tick_math.move:174:13+8
    assume {:print "$at(14,5816,5824)"} true;
L37:

    // $t95 := 8192 at ./sources/math/tick_math.move:174:24+6
    assume {:print "$at(14,5827,5833)"} true;
    $t95 := 8192;
    assume $IsValid'u32'($t95);

    // $t96 := &($t5, $t95) at ./sources/math/tick_math.move:174:13+17
    call $t96 := $AndBv32($t5, $int2bv.32($t95));

    // $t97 := 0 at ./sources/math/tick_math.move:174:34+1
    $t97 := 0bv32;
    assume $IsValid'bv32'($t97);

    // $t98 := !=($t96, $t97) at ./sources/math/tick_math.move:174:13+22
    $t98 := !$IsEqual'bv32'($t96, $t97);

    // if ($t98) goto L38 else goto L40 at ./sources/math/tick_math.move:174:9+123
    if ($t98) { goto L38; } else { goto L40; }

    // label L38 at ./sources/math/tick_math.move:175:45+5
    assume {:print "$at(14,5886,5891)"} true;
L38:

    // $t99 := 12247334978882834399 at ./sources/math/tick_math.move:175:52+24
    assume {:print "$at(14,5893,5917)"} true;
    $t99 := 12247334978882834399;
    assume $IsValid'u128'($t99);

    // $t100 := 64 at ./sources/math/tick_math.move:175:78+4
    $t100 := 64;
    assume $IsValid'u8'($t100);

    // $t101 := full_math_u128::mul_shr($t2, $t99, $t100) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:175:21+62
    call $t101 := $bb_full_math_u128_mul_shr($t2, $t99, $t100);
    if ($abort_flag) {
        assume {:print "$at(14,5862,5924)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t101 at ./sources/math/tick_math.move:175:13+70
    $t2 := $t101;

    // trace_local[ratio]($t101) at ./sources/math/tick_math.move:175:13+70
    assume {:print "$track_local(102,2,2):", $t101} $t101 == $t101;

    // label L40 at ./sources/math/tick_math.move:177:13+8
    assume {:print "$at(14,5949,5957)"} true;
L40:

    // $t102 := 16384 at ./sources/math/tick_math.move:177:24+6
    assume {:print "$at(14,5960,5966)"} true;
    $t102 := 16384;
    assume $IsValid'u32'($t102);

    // $t103 := &($t5, $t102) at ./sources/math/tick_math.move:177:13+17
    call $t103 := $AndBv32($t5, $int2bv.32($t102));

    // $t104 := 0 at ./sources/math/tick_math.move:177:34+1
    $t104 := 0bv32;
    assume $IsValid'bv32'($t104);

    // $t105 := !=($t103, $t104) at ./sources/math/tick_math.move:177:13+22
    $t105 := !$IsEqual'bv32'($t103, $t104);

    // if ($t105) goto L41 else goto L43 at ./sources/math/tick_math.move:177:9+122
    if ($t105) { goto L41; } else { goto L43; }

    // label L41 at ./sources/math/tick_math.move:178:45+5
    assume {:print "$at(14,6019,6024)"} true;
L41:

    // $t106 := 8131365268884726200 at ./sources/math/tick_math.move:178:52+23
    assume {:print "$at(14,6026,6049)"} true;
    $t106 := 8131365268884726200;
    assume $IsValid'u128'($t106);

    // $t107 := 64 at ./sources/math/tick_math.move:178:77+4
    $t107 := 64;
    assume $IsValid'u8'($t107);

    // $t108 := full_math_u128::mul_shr($t2, $t106, $t107) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:178:21+61
    call $t108 := $bb_full_math_u128_mul_shr($t2, $t106, $t107);
    if ($abort_flag) {
        assume {:print "$at(14,5995,6056)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t108 at ./sources/math/tick_math.move:178:13+69
    $t2 := $t108;

    // trace_local[ratio]($t108) at ./sources/math/tick_math.move:178:13+69
    assume {:print "$track_local(102,2,2):", $t108} $t108 == $t108;

    // label L43 at ./sources/math/tick_math.move:180:13+8
    assume {:print "$at(14,6081,6089)"} true;
L43:

    // $t109 := 32768 at ./sources/math/tick_math.move:180:24+6
    assume {:print "$at(14,6092,6098)"} true;
    $t109 := 32768;
    assume $IsValid'u32'($t109);

    // $t110 := &($t5, $t109) at ./sources/math/tick_math.move:180:13+17
    call $t110 := $AndBv32($t5, $int2bv.32($t109));

    // $t111 := 0 at ./sources/math/tick_math.move:180:34+1
    $t111 := 0bv32;
    assume $IsValid'bv32'($t111);

    // $t112 := !=($t110, $t111) at ./sources/math/tick_math.move:180:13+22
    $t112 := !$IsEqual'bv32'($t110, $t111);

    // if ($t112) goto L44 else goto L46 at ./sources/math/tick_math.move:180:9+122
    if ($t112) { goto L44; } else { goto L46; }

    // label L44 at ./sources/math/tick_math.move:181:45+5
    assume {:print "$at(14,6151,6156)"} true;
L44:

    // $t113 := 3584323654723342297 at ./sources/math/tick_math.move:181:52+23
    assume {:print "$at(14,6158,6181)"} true;
    $t113 := 3584323654723342297;
    assume $IsValid'u128'($t113);

    // $t114 := 64 at ./sources/math/tick_math.move:181:77+4
    $t114 := 64;
    assume $IsValid'u8'($t114);

    // $t115 := full_math_u128::mul_shr($t2, $t113, $t114) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:181:21+61
    call $t115 := $bb_full_math_u128_mul_shr($t2, $t113, $t114);
    if ($abort_flag) {
        assume {:print "$at(14,6127,6188)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t115 at ./sources/math/tick_math.move:181:13+69
    $t2 := $t115;

    // trace_local[ratio]($t115) at ./sources/math/tick_math.move:181:13+69
    assume {:print "$track_local(102,2,2):", $t115} $t115 == $t115;

    // label L46 at ./sources/math/tick_math.move:183:13+8
    assume {:print "$at(14,6213,6221)"} true;
L46:

    // $t116 := 65536 at ./sources/math/tick_math.move:183:24+7
    assume {:print "$at(14,6224,6231)"} true;
    $t116 := 65536;
    assume $IsValid'u32'($t116);

    // $t117 := &($t5, $t116) at ./sources/math/tick_math.move:183:13+18
    call $t117 := $AndBv32($t5, $int2bv.32($t116));

    // $t118 := 0 at ./sources/math/tick_math.move:183:35+1
    $t118 := 0bv32;
    assume $IsValid'bv32'($t118);

    // $t119 := !=($t117, $t118) at ./sources/math/tick_math.move:183:13+23
    $t119 := !$IsEqual'bv32'($t117, $t118);

    // if ($t119) goto L47 else goto L49 at ./sources/math/tick_math.move:183:9+122
    if ($t119) { goto L47; } else { goto L49; }

    // label L47 at ./sources/math/tick_math.move:184:45+5
    assume {:print "$at(14,6284,6289)"} true;
L47:

    // $t120 := 696457651847595233 at ./sources/math/tick_math.move:184:52+22
    assume {:print "$at(14,6291,6313)"} true;
    $t120 := 696457651847595233;
    assume $IsValid'u128'($t120);

    // $t121 := 64 at ./sources/math/tick_math.move:184:76+4
    $t121 := 64;
    assume $IsValid'u8'($t121);

    // $t122 := full_math_u128::mul_shr($t2, $t120, $t121) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:184:21+60
    call $t122 := $bb_full_math_u128_mul_shr($t2, $t120, $t121);
    if ($abort_flag) {
        assume {:print "$at(14,6260,6320)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t122 at ./sources/math/tick_math.move:184:13+68
    $t2 := $t122;

    // trace_local[ratio]($t122) at ./sources/math/tick_math.move:184:13+68
    assume {:print "$track_local(102,2,2):", $t122} $t122 == $t122;

    // label L49 at ./sources/math/tick_math.move:186:13+8
    assume {:print "$at(14,6345,6353)"} true;
L49:

    // $t123 := 131072 at ./sources/math/tick_math.move:186:24+7
    assume {:print "$at(14,6356,6363)"} true;
    $t123 := 131072;
    assume $IsValid'u32'($t123);

    // $t124 := &($t5, $t123) at ./sources/math/tick_math.move:186:13+18
    call $t124 := $AndBv32($t5, $int2bv.32($t123));

    // $t125 := 0 at ./sources/math/tick_math.move:186:35+1
    $t125 := 0bv32;
    assume $IsValid'bv32'($t125);

    // $t126 := !=($t124, $t125) at ./sources/math/tick_math.move:186:13+23
    $t126 := !$IsEqual'bv32'($t124, $t125);

    // if ($t126) goto L50 else goto L52 at ./sources/math/tick_math.move:186:9+121
    if ($t126) { goto L50; } else { goto L52; }

    // label L50 at ./sources/math/tick_math.move:187:45+5
    assume {:print "$at(14,6416,6421)"} true;
L50:

    // $t127 := 26294789957452057 at ./sources/math/tick_math.move:187:52+21
    assume {:print "$at(14,6423,6444)"} true;
    $t127 := 26294789957452057;
    assume $IsValid'u128'($t127);

    // $t128 := 64 at ./sources/math/tick_math.move:187:75+4
    $t128 := 64;
    assume $IsValid'u8'($t128);

    // $t129 := full_math_u128::mul_shr($t2, $t127, $t128) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:187:21+59
    call $t129 := $bb_full_math_u128_mul_shr($t2, $t127, $t128);
    if ($abort_flag) {
        assume {:print "$at(14,6392,6451)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t129 at ./sources/math/tick_math.move:187:13+67
    $t2 := $t129;

    // trace_local[ratio]($t129) at ./sources/math/tick_math.move:187:13+67
    assume {:print "$track_local(102,2,2):", $t129} $t129 == $t129;

    // label L52 at ./sources/math/tick_math.move:189:13+8
    assume {:print "$at(14,6476,6484)"} true;
L52:

    // $t130 := 262144 at ./sources/math/tick_math.move:189:24+7
    assume {:print "$at(14,6487,6494)"} true;
    $t130 := 262144;
    assume $IsValid'u32'($t130);

    // $t131 := &($t5, $t130) at ./sources/math/tick_math.move:189:13+18
    call $t131 := $AndBv32($t5, $int2bv.32($t130));

    // $t132 := 0 at ./sources/math/tick_math.move:189:35+1
    $t132 := 0bv32;
    assume $IsValid'bv32'($t132);

    // $t133 := !=($t131, $t132) at ./sources/math/tick_math.move:189:13+23
    $t133 := !$IsEqual'bv32'($t131, $t132);

    // if ($t133) goto L53 else goto L55 at ./sources/math/tick_math.move:189:9+118
    if ($t133) { goto L53; } else { goto L55; }

    // label L53 at ./sources/math/tick_math.move:190:45+5
    assume {:print "$at(14,6547,6552)"} true;
L53:

    // $t134 := 37481735321082 at ./sources/math/tick_math.move:190:52+18
    assume {:print "$at(14,6554,6572)"} true;
    $t134 := 37481735321082;
    assume $IsValid'u128'($t134);

    // $t135 := 64 at ./sources/math/tick_math.move:190:72+4
    $t135 := 64;
    assume $IsValid'u8'($t135);

    // $t136 := full_math_u128::mul_shr($t2, $t134, $t135) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:190:21+56
    call $t136 := $bb_full_math_u128_mul_shr($t2, $t134, $t135);
    if ($abort_flag) {
        assume {:print "$at(14,6523,6579)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,2):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t136 at ./sources/math/tick_math.move:190:13+64
    $t2 := $t136;

    // trace_local[ratio]($t136) at ./sources/math/tick_math.move:190:13+64
    assume {:print "$track_local(102,2,2):", $t136} $t136 == $t136;

    // label L55 at ./sources/math/tick_math.move:193:9+5
    assume {:print "$at(14,6601,6606)"} true;
L55:

    // trace_return[0]($t2) at ./sources/math/tick_math.move:131:63+2585
    assume {:print "$at(14,4027,6612)"} true;
    assume {:print "$track_return(102,2,0):", $t2} $t2 == $t2;

    // goto L57 at ./sources/math/tick_math.move:131:63+2585
    goto L57;

    // label L0 at ./sources/math/tick_math.move:136:13+24
    assume {:print "$at(14,4194,4218)"} true;
L0:

    // $t137 := 18446744073709551616 at ./sources/math/tick_math.move:136:13+24
    assume {:print "$at(14,4194,4218)"} true;
    $t137 := 18446744073709551616;
    assume $IsValid'u128'($t137);

    // $t2 := $t137 at ./sources/math/tick_math.move:136:13+24
    $t2 := $t137;

    // trace_local[ratio]($t137) at ./sources/math/tick_math.move:136:13+24
    assume {:print "$track_local(102,2,2):", $t137} $t137 == $t137;

    // goto L56 at ./sources/math/tick_math.move:136:13+24
    goto L56;

    // label L57 at ./sources/math/tick_math.move:194:5+1
    assume {:print "$at(14,6611,6612)"} true;
L57:

    // return $t2 at ./sources/math/tick_math.move:194:5+1
    assume {:print "$at(14,6611,6612)"} true;
    $ret0 := $t2;
    return;

    // label L58 at ./sources/math/tick_math.move:194:5+1
L58:

    // abort($t4) at ./sources/math/tick_math.move:194:5+1
    assume {:print "$at(14,6611,6612)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun tick_math::get_sqrt_price_at_positive_tick [baseline] at ./sources/math/tick_math.move:196:5+2840
procedure {:inline 1} $bb_tick_math_get_sqrt_price_at_positive_tick(_$t0: $bb_i32_I32) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: $bb_i32_I32;
    var $t4: int;
    var $t5: bv32;
    var $t6: int;
    var $t7: bv32;
    var $t8: bv32;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: bv32;
    var $t13: bv32;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bv32;
    var $t20: bv32;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: bv32;
    var $t27: bv32;
    var $t28: bool;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: bv32;
    var $t34: bv32;
    var $t35: bool;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: bv32;
    var $t41: bv32;
    var $t42: bool;
    var $t43: int;
    var $t44: int;
    var $t45: int;
    var $t46: int;
    var $t47: bv32;
    var $t48: bv32;
    var $t49: bool;
    var $t50: int;
    var $t51: int;
    var $t52: int;
    var $t53: int;
    var $t54: bv32;
    var $t55: bv32;
    var $t56: bool;
    var $t57: int;
    var $t58: int;
    var $t59: int;
    var $t60: int;
    var $t61: bv32;
    var $t62: bv32;
    var $t63: bool;
    var $t64: int;
    var $t65: int;
    var $t66: int;
    var $t67: int;
    var $t68: bv32;
    var $t69: bv32;
    var $t70: bool;
    var $t71: int;
    var $t72: int;
    var $t73: int;
    var $t74: int;
    var $t75: bv32;
    var $t76: bv32;
    var $t77: bool;
    var $t78: int;
    var $t79: int;
    var $t80: int;
    var $t81: int;
    var $t82: bv32;
    var $t83: bv32;
    var $t84: bool;
    var $t85: int;
    var $t86: int;
    var $t87: int;
    var $t88: int;
    var $t89: bv32;
    var $t90: bv32;
    var $t91: bool;
    var $t92: int;
    var $t93: int;
    var $t94: int;
    var $t95: int;
    var $t96: bv32;
    var $t97: bv32;
    var $t98: bool;
    var $t99: int;
    var $t100: int;
    var $t101: int;
    var $t102: int;
    var $t103: bv32;
    var $t104: bv32;
    var $t105: bool;
    var $t106: int;
    var $t107: int;
    var $t108: int;
    var $t109: int;
    var $t110: bv32;
    var $t111: bv32;
    var $t112: bool;
    var $t113: int;
    var $t114: int;
    var $t115: int;
    var $t116: int;
    var $t117: bv32;
    var $t118: bv32;
    var $t119: bool;
    var $t120: int;
    var $t121: int;
    var $t122: int;
    var $t123: int;
    var $t124: bv32;
    var $t125: bv32;
    var $t126: bool;
    var $t127: int;
    var $t128: int;
    var $t129: int;
    var $t130: int;
    var $t131: bv32;
    var $t132: bv32;
    var $t133: bool;
    var $t134: int;
    var $t135: int;
    var $t136: int;
    var $t137: int;
    var $t138: int;
    var $t139: int;
    var $t0: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'u128': int;
    var $temp_0'bv32': bv32;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[tick]($t0) at ./sources/math/tick_math.move:196:5+1
    assume {:print "$at(14,6618,6619)"} true;
    assume {:print "$track_local(102,3,0):", $t0} $t0 == $t0;

    // $t3 := i32::abs($t0) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:197:36+14
    assume {:print "$at(14,6713,6727)"} true;
    call $t3 := $bb_i32_abs($t0);
    if ($abort_flag) {
        assume {:print "$at(14,6713,6727)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t5 := i32::as_u32($t3) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:197:24+27
    call $t5 := $bb_i32_as_u32($t3);
    if ($abort_flag) {
        assume {:print "$at(14,6701,6728)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // trace_local[abs_tick]($t5) at ./sources/math/tick_math.move:197:24+27
    assume {:print "$track_local(102,3,1):", $t5} $t5 == $t5;

    // $t6 := 1 at ./sources/math/tick_math.move:198:36+3
    assume {:print "$at(14,6765,6768)"} true;
    $t6 := 1;
    assume $IsValid'u32'($t6);

    // $t7 := &($t5, $t6) at ./sources/math/tick_math.move:198:25+14
    call $t7 := $AndBv32($t5, $int2bv.32($t6));

    // $t8 := 0 at ./sources/math/tick_math.move:198:43+1
    $t8 := 0bv32;
    assume $IsValid'bv32'($t8);

    // $t9 := !=($t7, $t8) at ./sources/math/tick_math.move:198:25+19
    $t9 := !$IsEqual'bv32'($t7, $t8);

    // if ($t9) goto L1 else goto L0 at ./sources/math/tick_math.move:198:21+145
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/tick_math.move:199:13+33
    assume {:print "$at(14,6789,6822)"} true;
L1:

    // $t10 := 79232123823359799118286999567 at ./sources/math/tick_math.move:199:13+33
    assume {:print "$at(14,6789,6822)"} true;
    $t10 := 79232123823359799118286999567;
    assume $IsValid'u128'($t10);

    // $t2 := $t10 at ./sources/math/tick_math.move:199:13+33
    $t2 := $t10;

    // trace_local[ratio]($t10) at ./sources/math/tick_math.move:199:13+33
    assume {:print "$track_local(102,3,2):", $t10} $t10 == $t10;

    // label L56 at ./sources/math/tick_math.move:204:13+8
    assume {:print "$at(14,6910,6918)"} true;
L56:

    // $t11 := 2 at ./sources/math/tick_math.move:204:24+3
    assume {:print "$at(14,6921,6924)"} true;
    $t11 := 2;
    assume $IsValid'u32'($t11);

    // $t12 := &($t5, $t11) at ./sources/math/tick_math.move:204:13+14
    call $t12 := $AndBv32($t5, $int2bv.32($t11));

    // $t13 := 0 at ./sources/math/tick_math.move:204:31+1
    $t13 := 0bv32;
    assume $IsValid'bv32'($t13);

    // $t14 := !=($t12, $t13) at ./sources/math/tick_math.move:204:13+19
    $t14 := !$IsEqual'bv32'($t12, $t13);

    // if ($t14) goto L2 else goto L4 at ./sources/math/tick_math.move:204:9+128
    if ($t14) { goto L2; } else { goto L4; }

    // label L2 at ./sources/math/tick_math.move:205:45+5
    assume {:print "$at(14,6977,6982)"} true;
L2:

    // $t15 := 79236085330515764027303304731 at ./sources/math/tick_math.move:205:52+33
    assume {:print "$at(14,6984,7017)"} true;
    $t15 := 79236085330515764027303304731;
    assume $IsValid'u128'($t15);

    // $t16 := 96 at ./sources/math/tick_math.move:205:87+4
    $t16 := 96;
    assume $IsValid'u8'($t16);

    // $t17 := full_math_u128::mul_shr($t2, $t15, $t16) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:205:21+71
    call $t17 := $bb_full_math_u128_mul_shr($t2, $t15, $t16);
    if ($abort_flag) {
        assume {:print "$at(14,6953,7024)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t17 at ./sources/math/tick_math.move:205:13+79
    $t2 := $t17;

    // trace_local[ratio]($t17) at ./sources/math/tick_math.move:205:13+79
    assume {:print "$track_local(102,3,2):", $t17} $t17 == $t17;

    // label L4 at ./sources/math/tick_math.move:207:13+8
    assume {:print "$at(14,7048,7056)"} true;
L4:

    // $t18 := 4 at ./sources/math/tick_math.move:207:24+3
    assume {:print "$at(14,7059,7062)"} true;
    $t18 := 4;
    assume $IsValid'u32'($t18);

    // $t19 := &($t5, $t18) at ./sources/math/tick_math.move:207:13+14
    call $t19 := $AndBv32($t5, $int2bv.32($t18));

    // $t20 := 0 at ./sources/math/tick_math.move:207:31+1
    $t20 := 0bv32;
    assume $IsValid'bv32'($t20);

    // $t21 := !=($t19, $t20) at ./sources/math/tick_math.move:207:13+19
    $t21 := !$IsEqual'bv32'($t19, $t20);

    // if ($t21) goto L5 else goto L7 at ./sources/math/tick_math.move:207:9+128
    if ($t21) { goto L5; } else { goto L7; }

    // label L5 at ./sources/math/tick_math.move:208:45+5
    assume {:print "$at(14,7115,7120)"} true;
L5:

    // $t22 := 79244008939048815603706035061 at ./sources/math/tick_math.move:208:52+33
    assume {:print "$at(14,7122,7155)"} true;
    $t22 := 79244008939048815603706035061;
    assume $IsValid'u128'($t22);

    // $t23 := 96 at ./sources/math/tick_math.move:208:87+4
    $t23 := 96;
    assume $IsValid'u8'($t23);

    // $t24 := full_math_u128::mul_shr($t2, $t22, $t23) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:208:21+71
    call $t24 := $bb_full_math_u128_mul_shr($t2, $t22, $t23);
    if ($abort_flag) {
        assume {:print "$at(14,7091,7162)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t24 at ./sources/math/tick_math.move:208:13+79
    $t2 := $t24;

    // trace_local[ratio]($t24) at ./sources/math/tick_math.move:208:13+79
    assume {:print "$track_local(102,3,2):", $t24} $t24 == $t24;

    // label L7 at ./sources/math/tick_math.move:210:13+8
    assume {:print "$at(14,7186,7194)"} true;
L7:

    // $t25 := 8 at ./sources/math/tick_math.move:210:24+3
    assume {:print "$at(14,7197,7200)"} true;
    $t25 := 8;
    assume $IsValid'u32'($t25);

    // $t26 := &($t5, $t25) at ./sources/math/tick_math.move:210:13+14
    call $t26 := $AndBv32($t5, $int2bv.32($t25));

    // $t27 := 0 at ./sources/math/tick_math.move:210:31+1
    $t27 := 0bv32;
    assume $IsValid'bv32'($t27);

    // $t28 := !=($t26, $t27) at ./sources/math/tick_math.move:210:13+19
    $t28 := !$IsEqual'bv32'($t26, $t27);

    // if ($t28) goto L8 else goto L10 at ./sources/math/tick_math.move:210:9+128
    if ($t28) { goto L8; } else { goto L10; }

    // label L8 at ./sources/math/tick_math.move:211:45+5
    assume {:print "$at(14,7253,7258)"} true;
L8:

    // $t29 := 79259858533276714757314932305 at ./sources/math/tick_math.move:211:52+33
    assume {:print "$at(14,7260,7293)"} true;
    $t29 := 79259858533276714757314932305;
    assume $IsValid'u128'($t29);

    // $t30 := 96 at ./sources/math/tick_math.move:211:87+4
    $t30 := 96;
    assume $IsValid'u8'($t30);

    // $t31 := full_math_u128::mul_shr($t2, $t29, $t30) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:211:21+71
    call $t31 := $bb_full_math_u128_mul_shr($t2, $t29, $t30);
    if ($abort_flag) {
        assume {:print "$at(14,7229,7300)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t31 at ./sources/math/tick_math.move:211:13+79
    $t2 := $t31;

    // trace_local[ratio]($t31) at ./sources/math/tick_math.move:211:13+79
    assume {:print "$track_local(102,3,2):", $t31} $t31 == $t31;

    // label L10 at ./sources/math/tick_math.move:213:13+8
    assume {:print "$at(14,7324,7332)"} true;
L10:

    // $t32 := 16 at ./sources/math/tick_math.move:213:24+4
    assume {:print "$at(14,7335,7339)"} true;
    $t32 := 16;
    assume $IsValid'u32'($t32);

    // $t33 := &($t5, $t32) at ./sources/math/tick_math.move:213:13+15
    call $t33 := $AndBv32($t5, $int2bv.32($t32));

    // $t34 := 0 at ./sources/math/tick_math.move:213:32+1
    $t34 := 0bv32;
    assume $IsValid'bv32'($t34);

    // $t35 := !=($t33, $t34) at ./sources/math/tick_math.move:213:13+20
    $t35 := !$IsEqual'bv32'($t33, $t34);

    // if ($t35) goto L11 else goto L13 at ./sources/math/tick_math.move:213:9+129
    if ($t35) { goto L11; } else { goto L13; }

    // label L11 at ./sources/math/tick_math.move:214:45+5
    assume {:print "$at(14,7392,7397)"} true;
L11:

    // $t36 := 79291567232598584799939703904 at ./sources/math/tick_math.move:214:52+33
    assume {:print "$at(14,7399,7432)"} true;
    $t36 := 79291567232598584799939703904;
    assume $IsValid'u128'($t36);

    // $t37 := 96 at ./sources/math/tick_math.move:214:87+4
    $t37 := 96;
    assume $IsValid'u8'($t37);

    // $t38 := full_math_u128::mul_shr($t2, $t36, $t37) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:214:21+71
    call $t38 := $bb_full_math_u128_mul_shr($t2, $t36, $t37);
    if ($abort_flag) {
        assume {:print "$at(14,7368,7439)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t38 at ./sources/math/tick_math.move:214:13+79
    $t2 := $t38;

    // trace_local[ratio]($t38) at ./sources/math/tick_math.move:214:13+79
    assume {:print "$track_local(102,3,2):", $t38} $t38 == $t38;

    // label L13 at ./sources/math/tick_math.move:216:13+8
    assume {:print "$at(14,7463,7471)"} true;
L13:

    // $t39 := 32 at ./sources/math/tick_math.move:216:24+4
    assume {:print "$at(14,7474,7478)"} true;
    $t39 := 32;
    assume $IsValid'u32'($t39);

    // $t40 := &($t5, $t39) at ./sources/math/tick_math.move:216:13+15
    call $t40 := $AndBv32($t5, $int2bv.32($t39));

    // $t41 := 0 at ./sources/math/tick_math.move:216:32+1
    $t41 := 0bv32;
    assume $IsValid'bv32'($t41);

    // $t42 := !=($t40, $t41) at ./sources/math/tick_math.move:216:13+20
    $t42 := !$IsEqual'bv32'($t40, $t41);

    // if ($t42) goto L14 else goto L16 at ./sources/math/tick_math.move:216:9+129
    if ($t42) { goto L14; } else { goto L16; }

    // label L14 at ./sources/math/tick_math.move:217:45+5
    assume {:print "$at(14,7531,7536)"} true;
L14:

    // $t43 := 79355022692464371645785046466 at ./sources/math/tick_math.move:217:52+33
    assume {:print "$at(14,7538,7571)"} true;
    $t43 := 79355022692464371645785046466;
    assume $IsValid'u128'($t43);

    // $t44 := 96 at ./sources/math/tick_math.move:217:87+4
    $t44 := 96;
    assume $IsValid'u8'($t44);

    // $t45 := full_math_u128::mul_shr($t2, $t43, $t44) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:217:21+71
    call $t45 := $bb_full_math_u128_mul_shr($t2, $t43, $t44);
    if ($abort_flag) {
        assume {:print "$at(14,7507,7578)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t45 at ./sources/math/tick_math.move:217:13+79
    $t2 := $t45;

    // trace_local[ratio]($t45) at ./sources/math/tick_math.move:217:13+79
    assume {:print "$track_local(102,3,2):", $t45} $t45 == $t45;

    // label L16 at ./sources/math/tick_math.move:219:13+8
    assume {:print "$at(14,7602,7610)"} true;
L16:

    // $t46 := 64 at ./sources/math/tick_math.move:219:24+4
    assume {:print "$at(14,7613,7617)"} true;
    $t46 := 64;
    assume $IsValid'u32'($t46);

    // $t47 := &($t5, $t46) at ./sources/math/tick_math.move:219:13+15
    call $t47 := $AndBv32($t5, $int2bv.32($t46));

    // $t48 := 0 at ./sources/math/tick_math.move:219:32+1
    $t48 := 0bv32;
    assume $IsValid'bv32'($t48);

    // $t49 := !=($t47, $t48) at ./sources/math/tick_math.move:219:13+20
    $t49 := !$IsEqual'bv32'($t47, $t48);

    // if ($t49) goto L17 else goto L19 at ./sources/math/tick_math.move:219:9+129
    if ($t49) { goto L17; } else { goto L19; }

    // label L17 at ./sources/math/tick_math.move:220:45+5
    assume {:print "$at(14,7670,7675)"} true;
L17:

    // $t50 := 79482085999252804386437311141 at ./sources/math/tick_math.move:220:52+33
    assume {:print "$at(14,7677,7710)"} true;
    $t50 := 79482085999252804386437311141;
    assume $IsValid'u128'($t50);

    // $t51 := 96 at ./sources/math/tick_math.move:220:87+4
    $t51 := 96;
    assume $IsValid'u8'($t51);

    // $t52 := full_math_u128::mul_shr($t2, $t50, $t51) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:220:21+71
    call $t52 := $bb_full_math_u128_mul_shr($t2, $t50, $t51);
    if ($abort_flag) {
        assume {:print "$at(14,7646,7717)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t52 at ./sources/math/tick_math.move:220:13+79
    $t2 := $t52;

    // trace_local[ratio]($t52) at ./sources/math/tick_math.move:220:13+79
    assume {:print "$track_local(102,3,2):", $t52} $t52 == $t52;

    // label L19 at ./sources/math/tick_math.move:222:13+8
    assume {:print "$at(14,7741,7749)"} true;
L19:

    // $t53 := 128 at ./sources/math/tick_math.move:222:24+4
    assume {:print "$at(14,7752,7756)"} true;
    $t53 := 128;
    assume $IsValid'u32'($t53);

    // $t54 := &($t5, $t53) at ./sources/math/tick_math.move:222:13+15
    call $t54 := $AndBv32($t5, $int2bv.32($t53));

    // $t55 := 0 at ./sources/math/tick_math.move:222:32+1
    $t55 := 0bv32;
    assume $IsValid'bv32'($t55);

    // $t56 := !=($t54, $t55) at ./sources/math/tick_math.move:222:13+20
    $t56 := !$IsEqual'bv32'($t54, $t55);

    // if ($t56) goto L20 else goto L22 at ./sources/math/tick_math.move:222:9+129
    if ($t56) { goto L20; } else { goto L22; }

    // label L20 at ./sources/math/tick_math.move:223:45+5
    assume {:print "$at(14,7809,7814)"} true;
L20:

    // $t57 := 79736823300114093921829183326 at ./sources/math/tick_math.move:223:52+33
    assume {:print "$at(14,7816,7849)"} true;
    $t57 := 79736823300114093921829183326;
    assume $IsValid'u128'($t57);

    // $t58 := 96 at ./sources/math/tick_math.move:223:87+4
    $t58 := 96;
    assume $IsValid'u8'($t58);

    // $t59 := full_math_u128::mul_shr($t2, $t57, $t58) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:223:21+71
    call $t59 := $bb_full_math_u128_mul_shr($t2, $t57, $t58);
    if ($abort_flag) {
        assume {:print "$at(14,7785,7856)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t59 at ./sources/math/tick_math.move:223:13+79
    $t2 := $t59;

    // trace_local[ratio]($t59) at ./sources/math/tick_math.move:223:13+79
    assume {:print "$track_local(102,3,2):", $t59} $t59 == $t59;

    // label L22 at ./sources/math/tick_math.move:225:13+8
    assume {:print "$at(14,7880,7888)"} true;
L22:

    // $t60 := 256 at ./sources/math/tick_math.move:225:24+5
    assume {:print "$at(14,7891,7896)"} true;
    $t60 := 256;
    assume $IsValid'u32'($t60);

    // $t61 := &($t5, $t60) at ./sources/math/tick_math.move:225:13+16
    call $t61 := $AndBv32($t5, $int2bv.32($t60));

    // $t62 := 0 at ./sources/math/tick_math.move:225:33+1
    $t62 := 0bv32;
    assume $IsValid'bv32'($t62);

    // $t63 := !=($t61, $t62) at ./sources/math/tick_math.move:225:13+21
    $t63 := !$IsEqual'bv32'($t61, $t62);

    // if ($t63) goto L23 else goto L25 at ./sources/math/tick_math.move:225:9+130
    if ($t63) { goto L23; } else { goto L25; }

    // label L23 at ./sources/math/tick_math.move:226:45+5
    assume {:print "$at(14,7949,7954)"} true;
L23:

    // $t64 := 80248749790819932309965073892 at ./sources/math/tick_math.move:226:52+33
    assume {:print "$at(14,7956,7989)"} true;
    $t64 := 80248749790819932309965073892;
    assume $IsValid'u128'($t64);

    // $t65 := 96 at ./sources/math/tick_math.move:226:87+4
    $t65 := 96;
    assume $IsValid'u8'($t65);

    // $t66 := full_math_u128::mul_shr($t2, $t64, $t65) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:226:21+71
    call $t66 := $bb_full_math_u128_mul_shr($t2, $t64, $t65);
    if ($abort_flag) {
        assume {:print "$at(14,7925,7996)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t66 at ./sources/math/tick_math.move:226:13+79
    $t2 := $t66;

    // trace_local[ratio]($t66) at ./sources/math/tick_math.move:226:13+79
    assume {:print "$track_local(102,3,2):", $t66} $t66 == $t66;

    // label L25 at ./sources/math/tick_math.move:228:13+8
    assume {:print "$at(14,8020,8028)"} true;
L25:

    // $t67 := 512 at ./sources/math/tick_math.move:228:24+5
    assume {:print "$at(14,8031,8036)"} true;
    $t67 := 512;
    assume $IsValid'u32'($t67);

    // $t68 := &($t5, $t67) at ./sources/math/tick_math.move:228:13+16
    call $t68 := $AndBv32($t5, $int2bv.32($t67));

    // $t69 := 0 at ./sources/math/tick_math.move:228:33+1
    $t69 := 0bv32;
    assume $IsValid'bv32'($t69);

    // $t70 := !=($t68, $t69) at ./sources/math/tick_math.move:228:13+21
    $t70 := !$IsEqual'bv32'($t68, $t69);

    // if ($t70) goto L26 else goto L28 at ./sources/math/tick_math.move:228:9+130
    if ($t70) { goto L26; } else { goto L28; }

    // label L26 at ./sources/math/tick_math.move:229:45+5
    assume {:print "$at(14,8089,8094)"} true;
L26:

    // $t71 := 81282483887344747381513967011 at ./sources/math/tick_math.move:229:52+33
    assume {:print "$at(14,8096,8129)"} true;
    $t71 := 81282483887344747381513967011;
    assume $IsValid'u128'($t71);

    // $t72 := 96 at ./sources/math/tick_math.move:229:87+4
    $t72 := 96;
    assume $IsValid'u8'($t72);

    // $t73 := full_math_u128::mul_shr($t2, $t71, $t72) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:229:21+71
    call $t73 := $bb_full_math_u128_mul_shr($t2, $t71, $t72);
    if ($abort_flag) {
        assume {:print "$at(14,8065,8136)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t73 at ./sources/math/tick_math.move:229:13+79
    $t2 := $t73;

    // trace_local[ratio]($t73) at ./sources/math/tick_math.move:229:13+79
    assume {:print "$track_local(102,3,2):", $t73} $t73 == $t73;

    // label L28 at ./sources/math/tick_math.move:231:13+8
    assume {:print "$at(14,8160,8168)"} true;
L28:

    // $t74 := 1024 at ./sources/math/tick_math.move:231:24+5
    assume {:print "$at(14,8171,8176)"} true;
    $t74 := 1024;
    assume $IsValid'u32'($t74);

    // $t75 := &($t5, $t74) at ./sources/math/tick_math.move:231:13+16
    call $t75 := $AndBv32($t5, $int2bv.32($t74));

    // $t76 := 0 at ./sources/math/tick_math.move:231:33+1
    $t76 := 0bv32;
    assume $IsValid'bv32'($t76);

    // $t77 := !=($t75, $t76) at ./sources/math/tick_math.move:231:13+21
    $t77 := !$IsEqual'bv32'($t75, $t76);

    // if ($t77) goto L29 else goto L31 at ./sources/math/tick_math.move:231:9+130
    if ($t77) { goto L29; } else { goto L31; }

    // label L29 at ./sources/math/tick_math.move:232:45+5
    assume {:print "$at(14,8229,8234)"} true;
L29:

    // $t78 := 83390072131320151908154831281 at ./sources/math/tick_math.move:232:52+33
    assume {:print "$at(14,8236,8269)"} true;
    $t78 := 83390072131320151908154831281;
    assume $IsValid'u128'($t78);

    // $t79 := 96 at ./sources/math/tick_math.move:232:87+4
    $t79 := 96;
    assume $IsValid'u8'($t79);

    // $t80 := full_math_u128::mul_shr($t2, $t78, $t79) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:232:21+71
    call $t80 := $bb_full_math_u128_mul_shr($t2, $t78, $t79);
    if ($abort_flag) {
        assume {:print "$at(14,8205,8276)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t80 at ./sources/math/tick_math.move:232:13+79
    $t2 := $t80;

    // trace_local[ratio]($t80) at ./sources/math/tick_math.move:232:13+79
    assume {:print "$track_local(102,3,2):", $t80} $t80 == $t80;

    // label L31 at ./sources/math/tick_math.move:234:13+8
    assume {:print "$at(14,8300,8308)"} true;
L31:

    // $t81 := 2048 at ./sources/math/tick_math.move:234:24+5
    assume {:print "$at(14,8311,8316)"} true;
    $t81 := 2048;
    assume $IsValid'u32'($t81);

    // $t82 := &($t5, $t81) at ./sources/math/tick_math.move:234:13+16
    call $t82 := $AndBv32($t5, $int2bv.32($t81));

    // $t83 := 0 at ./sources/math/tick_math.move:234:33+1
    $t83 := 0bv32;
    assume $IsValid'bv32'($t83);

    // $t84 := !=($t82, $t83) at ./sources/math/tick_math.move:234:13+21
    $t84 := !$IsEqual'bv32'($t82, $t83);

    // if ($t84) goto L32 else goto L34 at ./sources/math/tick_math.move:234:9+130
    if ($t84) { goto L32; } else { goto L34; }

    // label L32 at ./sources/math/tick_math.move:235:45+5
    assume {:print "$at(14,8369,8374)"} true;
L32:

    // $t85 := 87770609709833776024991924138 at ./sources/math/tick_math.move:235:52+33
    assume {:print "$at(14,8376,8409)"} true;
    $t85 := 87770609709833776024991924138;
    assume $IsValid'u128'($t85);

    // $t86 := 96 at ./sources/math/tick_math.move:235:87+4
    $t86 := 96;
    assume $IsValid'u8'($t86);

    // $t87 := full_math_u128::mul_shr($t2, $t85, $t86) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:235:21+71
    call $t87 := $bb_full_math_u128_mul_shr($t2, $t85, $t86);
    if ($abort_flag) {
        assume {:print "$at(14,8345,8416)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t87 at ./sources/math/tick_math.move:235:13+79
    $t2 := $t87;

    // trace_local[ratio]($t87) at ./sources/math/tick_math.move:235:13+79
    assume {:print "$track_local(102,3,2):", $t87} $t87 == $t87;

    // label L34 at ./sources/math/tick_math.move:237:13+8
    assume {:print "$at(14,8440,8448)"} true;
L34:

    // $t88 := 4096 at ./sources/math/tick_math.move:237:24+6
    assume {:print "$at(14,8451,8457)"} true;
    $t88 := 4096;
    assume $IsValid'u32'($t88);

    // $t89 := &($t5, $t88) at ./sources/math/tick_math.move:237:13+17
    call $t89 := $AndBv32($t5, $int2bv.32($t88));

    // $t90 := 0 at ./sources/math/tick_math.move:237:34+1
    $t90 := 0bv32;
    assume $IsValid'bv32'($t90);

    // $t91 := !=($t89, $t90) at ./sources/math/tick_math.move:237:13+22
    $t91 := !$IsEqual'bv32'($t89, $t90);

    // if ($t91) goto L35 else goto L37 at ./sources/math/tick_math.move:237:9+131
    if ($t91) { goto L35; } else { goto L37; }

    // label L35 at ./sources/math/tick_math.move:238:45+5
    assume {:print "$at(14,8510,8515)"} true;
L35:

    // $t92 := 97234110755111693312479820773 at ./sources/math/tick_math.move:238:52+33
    assume {:print "$at(14,8517,8550)"} true;
    $t92 := 97234110755111693312479820773;
    assume $IsValid'u128'($t92);

    // $t93 := 96 at ./sources/math/tick_math.move:238:87+4
    $t93 := 96;
    assume $IsValid'u8'($t93);

    // $t94 := full_math_u128::mul_shr($t2, $t92, $t93) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:238:21+71
    call $t94 := $bb_full_math_u128_mul_shr($t2, $t92, $t93);
    if ($abort_flag) {
        assume {:print "$at(14,8486,8557)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t94 at ./sources/math/tick_math.move:238:13+79
    $t2 := $t94;

    // trace_local[ratio]($t94) at ./sources/math/tick_math.move:238:13+79
    assume {:print "$track_local(102,3,2):", $t94} $t94 == $t94;

    // label L37 at ./sources/math/tick_math.move:240:13+8
    assume {:print "$at(14,8581,8589)"} true;
L37:

    // $t95 := 8192 at ./sources/math/tick_math.move:240:24+6
    assume {:print "$at(14,8592,8598)"} true;
    $t95 := 8192;
    assume $IsValid'u32'($t95);

    // $t96 := &($t5, $t95) at ./sources/math/tick_math.move:240:13+17
    call $t96 := $AndBv32($t5, $int2bv.32($t95));

    // $t97 := 0 at ./sources/math/tick_math.move:240:34+1
    $t97 := 0bv32;
    assume $IsValid'bv32'($t97);

    // $t98 := !=($t96, $t97) at ./sources/math/tick_math.move:240:13+22
    $t98 := !$IsEqual'bv32'($t96, $t97);

    // if ($t98) goto L38 else goto L40 at ./sources/math/tick_math.move:240:9+132
    if ($t98) { goto L38; } else { goto L40; }

    // label L38 at ./sources/math/tick_math.move:241:45+5
    assume {:print "$at(14,8651,8656)"} true;
L38:

    // $t99 := 119332217159966728226237229890 at ./sources/math/tick_math.move:241:52+34
    assume {:print "$at(14,8658,8692)"} true;
    $t99 := 119332217159966728226237229890;
    assume $IsValid'u128'($t99);

    // $t100 := 96 at ./sources/math/tick_math.move:241:88+4
    $t100 := 96;
    assume $IsValid'u8'($t100);

    // $t101 := full_math_u128::mul_shr($t2, $t99, $t100) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:241:21+72
    call $t101 := $bb_full_math_u128_mul_shr($t2, $t99, $t100);
    if ($abort_flag) {
        assume {:print "$at(14,8627,8699)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t101 at ./sources/math/tick_math.move:241:13+80
    $t2 := $t101;

    // trace_local[ratio]($t101) at ./sources/math/tick_math.move:241:13+80
    assume {:print "$track_local(102,3,2):", $t101} $t101 == $t101;

    // label L40 at ./sources/math/tick_math.move:243:13+8
    assume {:print "$at(14,8723,8731)"} true;
L40:

    // $t102 := 16384 at ./sources/math/tick_math.move:243:24+6
    assume {:print "$at(14,8734,8740)"} true;
    $t102 := 16384;
    assume $IsValid'u32'($t102);

    // $t103 := &($t5, $t102) at ./sources/math/tick_math.move:243:13+17
    call $t103 := $AndBv32($t5, $int2bv.32($t102));

    // $t104 := 0 at ./sources/math/tick_math.move:243:34+1
    $t104 := 0bv32;
    assume $IsValid'bv32'($t104);

    // $t105 := !=($t103, $t104) at ./sources/math/tick_math.move:243:13+22
    $t105 := !$IsEqual'bv32'($t103, $t104);

    // if ($t105) goto L41 else goto L43 at ./sources/math/tick_math.move:243:9+132
    if ($t105) { goto L41; } else { goto L43; }

    // label L41 at ./sources/math/tick_math.move:244:45+5
    assume {:print "$at(14,8793,8798)"} true;
L41:

    // $t106 := 179736315981702064433883588727 at ./sources/math/tick_math.move:244:52+34
    assume {:print "$at(14,8800,8834)"} true;
    $t106 := 179736315981702064433883588727;
    assume $IsValid'u128'($t106);

    // $t107 := 96 at ./sources/math/tick_math.move:244:88+4
    $t107 := 96;
    assume $IsValid'u8'($t107);

    // $t108 := full_math_u128::mul_shr($t2, $t106, $t107) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:244:21+72
    call $t108 := $bb_full_math_u128_mul_shr($t2, $t106, $t107);
    if ($abort_flag) {
        assume {:print "$at(14,8769,8841)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t108 at ./sources/math/tick_math.move:244:13+80
    $t2 := $t108;

    // trace_local[ratio]($t108) at ./sources/math/tick_math.move:244:13+80
    assume {:print "$track_local(102,3,2):", $t108} $t108 == $t108;

    // label L43 at ./sources/math/tick_math.move:246:13+8
    assume {:print "$at(14,8865,8873)"} true;
L43:

    // $t109 := 32768 at ./sources/math/tick_math.move:246:24+6
    assume {:print "$at(14,8876,8882)"} true;
    $t109 := 32768;
    assume $IsValid'u32'($t109);

    // $t110 := &($t5, $t109) at ./sources/math/tick_math.move:246:13+17
    call $t110 := $AndBv32($t5, $int2bv.32($t109));

    // $t111 := 0 at ./sources/math/tick_math.move:246:34+1
    $t111 := 0bv32;
    assume $IsValid'bv32'($t111);

    // $t112 := !=($t110, $t111) at ./sources/math/tick_math.move:246:13+22
    $t112 := !$IsEqual'bv32'($t110, $t111);

    // if ($t112) goto L44 else goto L46 at ./sources/math/tick_math.move:246:9+132
    if ($t112) { goto L44; } else { goto L46; }

    // label L44 at ./sources/math/tick_math.move:247:45+5
    assume {:print "$at(14,8935,8940)"} true;
L44:

    // $t113 := 407748233172238350107850275304 at ./sources/math/tick_math.move:247:52+34
    assume {:print "$at(14,8942,8976)"} true;
    $t113 := 407748233172238350107850275304;
    assume $IsValid'u128'($t113);

    // $t114 := 96 at ./sources/math/tick_math.move:247:88+4
    $t114 := 96;
    assume $IsValid'u8'($t114);

    // $t115 := full_math_u128::mul_shr($t2, $t113, $t114) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:247:21+72
    call $t115 := $bb_full_math_u128_mul_shr($t2, $t113, $t114);
    if ($abort_flag) {
        assume {:print "$at(14,8911,8983)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t115 at ./sources/math/tick_math.move:247:13+80
    $t2 := $t115;

    // trace_local[ratio]($t115) at ./sources/math/tick_math.move:247:13+80
    assume {:print "$track_local(102,3,2):", $t115} $t115 == $t115;

    // label L46 at ./sources/math/tick_math.move:249:13+8
    assume {:print "$at(14,9007,9015)"} true;
L46:

    // $t116 := 65536 at ./sources/math/tick_math.move:249:24+7
    assume {:print "$at(14,9018,9025)"} true;
    $t116 := 65536;
    assume $IsValid'u32'($t116);

    // $t117 := &($t5, $t116) at ./sources/math/tick_math.move:249:13+18
    call $t117 := $AndBv32($t5, $int2bv.32($t116));

    // $t118 := 0 at ./sources/math/tick_math.move:249:35+1
    $t118 := 0bv32;
    assume $IsValid'bv32'($t118);

    // $t119 := !=($t117, $t118) at ./sources/math/tick_math.move:249:13+23
    $t119 := !$IsEqual'bv32'($t117, $t118);

    // if ($t119) goto L47 else goto L49 at ./sources/math/tick_math.move:249:9+134
    if ($t119) { goto L47; } else { goto L49; }

    // label L47 at ./sources/math/tick_math.move:250:45+5
    assume {:print "$at(14,9078,9083)"} true;
L47:

    // $t120 := 2098478828474011932436660412517 at ./sources/math/tick_math.move:250:52+35
    assume {:print "$at(14,9085,9120)"} true;
    $t120 := 2098478828474011932436660412517;
    assume $IsValid'u128'($t120);

    // $t121 := 96 at ./sources/math/tick_math.move:250:89+4
    $t121 := 96;
    assume $IsValid'u8'($t121);

    // $t122 := full_math_u128::mul_shr($t2, $t120, $t121) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:250:21+73
    call $t122 := $bb_full_math_u128_mul_shr($t2, $t120, $t121);
    if ($abort_flag) {
        assume {:print "$at(14,9054,9127)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t122 at ./sources/math/tick_math.move:250:13+81
    $t2 := $t122;

    // trace_local[ratio]($t122) at ./sources/math/tick_math.move:250:13+81
    assume {:print "$track_local(102,3,2):", $t122} $t122 == $t122;

    // label L49 at ./sources/math/tick_math.move:252:13+8
    assume {:print "$at(14,9151,9159)"} true;
L49:

    // $t123 := 131072 at ./sources/math/tick_math.move:252:24+7
    assume {:print "$at(14,9162,9169)"} true;
    $t123 := 131072;
    assume $IsValid'u32'($t123);

    // $t124 := &($t5, $t123) at ./sources/math/tick_math.move:252:13+18
    call $t124 := $AndBv32($t5, $int2bv.32($t123));

    // $t125 := 0 at ./sources/math/tick_math.move:252:35+1
    $t125 := 0bv32;
    assume $IsValid'bv32'($t125);

    // $t126 := !=($t124, $t125) at ./sources/math/tick_math.move:252:13+23
    $t126 := !$IsEqual'bv32'($t124, $t125);

    // if ($t126) goto L50 else goto L52 at ./sources/math/tick_math.move:252:9+135
    if ($t126) { goto L50; } else { goto L52; }

    // label L50 at ./sources/math/tick_math.move:253:45+5
    assume {:print "$at(14,9222,9227)"} true;
L50:

    // $t127 := 55581415166113811149459800483533 at ./sources/math/tick_math.move:253:52+36
    assume {:print "$at(14,9229,9265)"} true;
    $t127 := 55581415166113811149459800483533;
    assume $IsValid'u128'($t127);

    // $t128 := 96 at ./sources/math/tick_math.move:253:90+4
    $t128 := 96;
    assume $IsValid'u8'($t128);

    // $t129 := full_math_u128::mul_shr($t2, $t127, $t128) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:253:21+74
    call $t129 := $bb_full_math_u128_mul_shr($t2, $t127, $t128);
    if ($abort_flag) {
        assume {:print "$at(14,9198,9272)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t129 at ./sources/math/tick_math.move:253:13+82
    $t2 := $t129;

    // trace_local[ratio]($t129) at ./sources/math/tick_math.move:253:13+82
    assume {:print "$track_local(102,3,2):", $t129} $t129 == $t129;

    // label L52 at ./sources/math/tick_math.move:255:13+8
    assume {:print "$at(14,9296,9304)"} true;
L52:

    // $t130 := 262144 at ./sources/math/tick_math.move:255:24+7
    assume {:print "$at(14,9307,9314)"} true;
    $t130 := 262144;
    assume $IsValid'u32'($t130);

    // $t131 := &($t5, $t130) at ./sources/math/tick_math.move:255:13+18
    call $t131 := $AndBv32($t5, $int2bv.32($t130));

    // $t132 := 0 at ./sources/math/tick_math.move:255:35+1
    $t132 := 0bv32;
    assume $IsValid'bv32'($t132);

    // $t133 := !=($t131, $t132) at ./sources/math/tick_math.move:255:13+23
    $t133 := !$IsEqual'bv32'($t131, $t132);

    // if ($t133) goto L53 else goto L55 at ./sources/math/tick_math.move:255:9+138
    if ($t133) { goto L53; } else { goto L55; }

    // label L53 at ./sources/math/tick_math.move:256:45+5
    assume {:print "$at(14,9367,9372)"} true;
L53:

    // $t134 := 38992368544603139932233054999993551 at ./sources/math/tick_math.move:256:52+39
    assume {:print "$at(14,9374,9413)"} true;
    $t134 := 38992368544603139932233054999993551;
    assume $IsValid'u128'($t134);

    // $t135 := 96 at ./sources/math/tick_math.move:256:93+4
    $t135 := 96;
    assume $IsValid'u8'($t135);

    // $t136 := full_math_u128::mul_shr($t2, $t134, $t135) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:256:21+77
    call $t136 := $bb_full_math_u128_mul_shr($t2, $t134, $t135);
    if ($abort_flag) {
        assume {:print "$at(14,9343,9420)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // $t2 := $t136 at ./sources/math/tick_math.move:256:13+85
    $t2 := $t136;

    // trace_local[ratio]($t136) at ./sources/math/tick_math.move:256:13+85
    assume {:print "$track_local(102,3,2):", $t136} $t136 == $t136;

    // label L55 at ./sources/math/tick_math.move:259:9+5
    assume {:print "$at(14,9441,9446)"} true;
L55:

    // $t137 := 32 at ./sources/math/tick_math.move:259:18+2
    assume {:print "$at(14,9450,9452)"} true;
    $t137 := 32;
    assume $IsValid'u8'($t137);

    // $t138 := >>($t2, $t137) on_abort goto L58 with $t4 at ./sources/math/tick_math.move:259:9+11
    call $t138 := $ShrU128($t2, $t137);
    if ($abort_flag) {
        assume {:print "$at(14,9441,9452)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,3):", $t4} $t4 == $t4;
        goto L58;
    }

    // trace_return[0]($t138) at ./sources/math/tick_math.move:196:63+2782
    assume {:print "$at(14,6676,9458)"} true;
    assume {:print "$track_return(102,3,0):", $t138} $t138 == $t138;

    // goto L57 at ./sources/math/tick_math.move:196:63+2782
    goto L57;

    // label L0 at ./sources/math/tick_math.move:201:13+33
    assume {:print "$at(14,6852,6885)"} true;
L0:

    // $t139 := 79228162514264337593543950336 at ./sources/math/tick_math.move:201:13+33
    assume {:print "$at(14,6852,6885)"} true;
    $t139 := 79228162514264337593543950336;
    assume $IsValid'u128'($t139);

    // $t2 := $t139 at ./sources/math/tick_math.move:201:13+33
    $t2 := $t139;

    // trace_local[ratio]($t139) at ./sources/math/tick_math.move:201:13+33
    assume {:print "$track_local(102,3,2):", $t139} $t139 == $t139;

    // goto L56 at ./sources/math/tick_math.move:201:13+33
    goto L56;

    // label L57 at ./sources/math/tick_math.move:260:5+1
    assume {:print "$at(14,9457,9458)"} true;
L57:

    // return $t138 at ./sources/math/tick_math.move:260:5+1
    assume {:print "$at(14,9457,9458)"} true;
    $ret0 := $t138;
    return;

    // label L58 at ./sources/math/tick_math.move:260:5+1
L58:

    // abort($t4) at ./sources/math/tick_math.move:260:5+1
    assume {:print "$at(14,9457,9458)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun tick_math::get_sqrt_price_at_tick [baseline] at ./sources/math/tick_math.move:51:5+313
procedure {:inline 1} $bb_tick_math_get_sqrt_price_at_tick(_$t0: $bb_i32_I32) returns ($ret0: int)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: $bb_i32_I32;
    var $t4: int;
    var $t5: bool;
    var $t6: $bb_i32_I32;
    var $t7: bool;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t0: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bool': bool;
    var $temp_0'u128': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[tick]($t0) at ./sources/math/tick_math.move:51:5+1
    assume {:print "$at(14,1378,1379)"} true;
    assume {:print "$track_local(102,4,0):", $t0} $t0 == $t0;

    // $t3 := tick_math::min_tick() on_abort goto L9 with $t4 at ./sources/math/tick_math.move:52:32+10
    assume {:print "$at(14,1467,1477)"} true;
    call $t3 := $bb_tick_math_min_tick();
    if ($abort_flag) {
        assume {:print "$at(14,1467,1477)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,4):", $t4} $t4 == $t4;
        goto L9;
    }

    // $t5 := i32::gte($t0, $t3) on_abort goto L9 with $t4 at ./sources/math/tick_math.move:52:17+26
    call $t5 := $bb_i32_gte($t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(14,1452,1478)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,4):", $t4} $t4 == $t4;
        goto L9;
    }

    // if ($t5) goto L1 else goto L0 at ./sources/math/tick_math.move:52:17+56
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/tick_math.move:52:56+4
L1:

    // $t6 := tick_math::max_tick() on_abort goto L9 with $t4 at ./sources/math/tick_math.move:52:62+10
    assume {:print "$at(14,1497,1507)"} true;
    call $t6 := $bb_tick_math_max_tick();
    if ($abort_flag) {
        assume {:print "$at(14,1497,1507)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,4):", $t4} $t4 == $t4;
        goto L9;
    }

    // $t7 := i32::lte($t0, $t6) on_abort goto L9 with $t4 at ./sources/math/tick_math.move:52:47+26
    call $t7 := $bb_i32_lte($t0, $t6);
    if ($abort_flag) {
        assume {:print "$at(14,1482,1508)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,4):", $t4} $t4 == $t4;
        goto L9;
    }

    // $t1 := $t7 at ./sources/math/tick_math.move:52:47+26
    $t1 := $t7;

    // trace_local[$t3]($t7) at ./sources/math/tick_math.move:52:47+26
    assume {:print "$track_local(102,4,1):", $t7} $t7 == $t7;

    // label L7 at ./sources/math/tick_math.move:52:9+6
L7:

    // if ($t1) goto L3 else goto L2 at ./sources/math/tick_math.move:52:9+6
    assume {:print "$at(14,1444,1450)"} true;
    if ($t1) { goto L3; } else { goto L2; }

    // label L3 at ./sources/math/tick_math.move:53:13+17
    assume {:print "$at(14,1538,1555)"} true;
L3:

    // $t8 := i32::is_neg($t0) on_abort goto L9 with $t4 at ./sources/math/tick_math.move:53:13+17
    assume {:print "$at(14,1538,1555)"} true;
    call $t8 := $bb_i32_is_neg($t0);
    if ($abort_flag) {
        assume {:print "$at(14,1538,1555)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,4):", $t4} $t4 == $t4;
        goto L9;
    }

    // if ($t8) goto L5 else goto L4 at ./sources/math/tick_math.move:53:9+151
    if ($t8) { goto L5; } else { goto L4; }

    // label L5 at ./sources/math/tick_math.move:54:13+37
    assume {:print "$at(14,1571,1608)"} true;
L5:

    // $t9 := tick_math::get_sqrt_price_at_negative_tick($t0) on_abort goto L9 with $t4 at ./sources/math/tick_math.move:54:13+37
    assume {:print "$at(14,1571,1608)"} true;
    call $t9 := $bb_tick_math_get_sqrt_price_at_negative_tick($t0);
    if ($abort_flag) {
        assume {:print "$at(14,1571,1608)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,4):", $t4} $t4 == $t4;
        goto L9;
    }

    // $t2 := $t9 at ./sources/math/tick_math.move:54:13+37
    $t2 := $t9;

    // trace_local[return]($t9) at ./sources/math/tick_math.move:54:13+37
    assume {:print "$track_local(102,4,2):", $t9} $t9 == $t9;

    // label L6 at ./sources/math/tick_math.move:51:61+257
    assume {:print "$at(14,1434,1691)"} true;
L6:

    // trace_return[0]($t2) at ./sources/math/tick_math.move:51:61+257
    assume {:print "$at(14,1434,1691)"} true;
    assume {:print "$track_return(102,4,0):", $t2} $t2 == $t2;

    // goto L8 at ./sources/math/tick_math.move:51:61+257
    goto L8;

    // label L4 at ./sources/math/tick_math.move:56:13+37
    assume {:print "$at(14,1638,1675)"} true;
L4:

    // $t10 := tick_math::get_sqrt_price_at_positive_tick($t0) on_abort goto L9 with $t4 at ./sources/math/tick_math.move:56:13+37
    assume {:print "$at(14,1638,1675)"} true;
    call $t10 := $bb_tick_math_get_sqrt_price_at_positive_tick($t0);
    if ($abort_flag) {
        assume {:print "$at(14,1638,1675)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(102,4):", $t4} $t4 == $t4;
        goto L9;
    }

    // $t2 := $t10 at ./sources/math/tick_math.move:56:13+37
    $t2 := $t10;

    // trace_local[return]($t10) at ./sources/math/tick_math.move:56:13+37
    assume {:print "$track_local(102,4,2):", $t10} $t10 == $t10;

    // goto L6 at ./sources/math/tick_math.move:56:13+37
    goto L6;

    // label L2 at ./sources/math/tick_math.move:52:75+13
    assume {:print "$at(14,1510,1523)"} true;
L2:

    // $t11 := 500004 at ./sources/math/tick_math.move:52:75+13
    assume {:print "$at(14,1510,1523)"} true;
    $t11 := 500004;
    assume $IsValid'u64'($t11);

    // trace_abort($t11) at ./sources/math/tick_math.move:52:9+6
    assume {:print "$at(14,1444,1450)"} true;
    assume {:print "$track_abort(102,4):", $t11} $t11 == $t11;

    // $t4 := move($t11) at ./sources/math/tick_math.move:52:9+6
    $t4 := $t11;

    // goto L9 at ./sources/math/tick_math.move:52:9+6
    goto L9;

    // label L0 at ./sources/math/tick_math.move:52:17+56
L0:

    // $t12 := false at ./sources/math/tick_math.move:52:17+56
    assume {:print "$at(14,1452,1508)"} true;
    $t12 := false;
    assume $IsValid'bool'($t12);

    // $t1 := $t12 at ./sources/math/tick_math.move:52:17+56
    $t1 := $t12;

    // trace_local[$t3]($t12) at ./sources/math/tick_math.move:52:17+56
    assume {:print "$track_local(102,4,1):", $t12} $t12 == $t12;

    // goto L7 at ./sources/math/tick_math.move:52:17+56
    goto L7;

    // label L8 at ./sources/math/tick_math.move:58:5+1
    assume {:print "$at(14,1690,1691)"} true;
L8:

    // return $t2 at ./sources/math/tick_math.move:58:5+1
    assume {:print "$at(14,1690,1691)"} true;
    $ret0 := $t2;
    return;

    // label L9 at ./sources/math/tick_math.move:58:5+1
L9:

    // abort($t4) at ./sources/math/tick_math.move:58:5+1
    assume {:print "$at(14,1690,1691)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun tick_math::max_tick [baseline] at ./sources/math/tick_math.move:28:5+69
procedure {:inline 1} $bb_tick_math_max_tick() returns ($ret0: $bb_i32_I32)
{
    // declare local variables
    var $t0: bv32;
    var $t1: $bb_i32_I32;
    var $t2: int;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;

    // bytecode translation starts here
    // $t0 := 443636 at ./sources/math/tick_math.move:29:19+10
    assume {:print "$at(14,776,786)"} true;
    $t0 := 443636bv32;
    assume $IsValid'bv32'($t0);

    // $t1 := i32::from($t0) on_abort goto L2 with $t2 at ./sources/math/tick_math.move:29:9+21
    call $t1 := $bb_i32_from($t0);
    if ($abort_flag) {
        assume {:print "$at(14,766,787)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(102,9):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t1) at ./sources/math/tick_math.move:29:9+21
    assume {:print "$track_return(102,9,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/math/tick_math.move:30:5+1
    assume {:print "$at(14,792,793)"} true;
L1:

    // return $t1 at ./sources/math/tick_math.move:30:5+1
    assume {:print "$at(14,792,793)"} true;
    $ret0 := $t1;
    return;

    // label L2 at ./sources/math/tick_math.move:30:5+1
L2:

    // abort($t2) at ./sources/math/tick_math.move:30:5+1
    assume {:print "$at(14,792,793)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun tick_math::min_tick [baseline] at ./sources/math/tick_math.move:32:5+73
procedure {:inline 1} $bb_tick_math_min_tick() returns ($ret0: $bb_i32_I32)
{
    // declare local variables
    var $t0: bv32;
    var $t1: $bb_i32_I32;
    var $t2: int;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;

    // bytecode translation starts here
    // $t0 := 443636 at ./sources/math/tick_math.move:33:23+10
    assume {:print "$at(14,855,865)"} true;
    $t0 := 443636bv32;
    assume $IsValid'bv32'($t0);

    // $t1 := i32::neg_from($t0) on_abort goto L2 with $t2 at ./sources/math/tick_math.move:33:9+25
    call $t1 := $bb_i32_neg_from($t0);
    if ($abort_flag) {
        assume {:print "$at(14,841,866)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(102,11):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t1) at ./sources/math/tick_math.move:33:9+25
    assume {:print "$track_return(102,11,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/math/tick_math.move:34:5+1
    assume {:print "$at(14,871,872)"} true;
L1:

    // return $t1 at ./sources/math/tick_math.move:34:5+1
    assume {:print "$at(14,871,872)"} true;
    $ret0 := $t1;
    return;

    // label L2 at ./sources/math/tick_math.move:34:5+1
L2:

    // abort($t2) at ./sources/math/tick_math.move:34:5+1
    assume {:print "$at(14,871,872)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// struct tick_bitmap::BitMap at ./sources/v3/tick_bitmap.move:10:5+61
datatype $bb_tick_bitmap_BitMap {
    $bb_tick_bitmap_BitMap($map: Table int (int))
}
function {:inline} $Update'$bb_tick_bitmap_BitMap'_map(s: $bb_tick_bitmap_BitMap, x: Table int (int)): $bb_tick_bitmap_BitMap {
    $bb_tick_bitmap_BitMap(x)
}
function $IsValid'$bb_tick_bitmap_BitMap'(s: $bb_tick_bitmap_BitMap): bool {
    $IsValid'$1_table_Table'$bb_i32_I32_u256''(s->$map)
}
function {:inline} $IsEqual'$bb_tick_bitmap_BitMap'(s1: $bb_tick_bitmap_BitMap, s2: $bb_tick_bitmap_BitMap): bool {
    s1 == s2
}

// fun tick_bitmap::flip_tick [baseline] at ./sources/v3/tick_bitmap.move:31:5+565
procedure {:inline 1} $bb_tick_bitmap_flip_tick(_$t0: $Mutation ($bb_tick_bitmap_BitMap), _$t1: $bb_i32_I32, _$t2: bv32) returns ($ret0: $Mutation ($bb_tick_bitmap_BitMap))
{
    // declare local variables
    var $t3: int;
    var $t4: $bb_i32_I32;
    var $t5: int;
    var $t6: $Mutation (int);
    var $t7: $bb_i32_I32;
    var $t8: int;
    var $t9: $bb_i32_I32;
    var $t10: $bb_i32_I32;
    var $t11: bool;
    var $t12: $bb_i32_I32;
    var $t13: $bb_i32_I32;
    var $t14: $bb_i32_I32;
    var $t15: bv8;
    var $t16: bv256;
    var $t17: bv256;
    var $t18: Table int (int);
    var $t19: bool;
    var $t20: $Mutation (Table int (int));
    var $t21: int;
    var $t22: $Mutation (Table int (int));
    var $t23: $Mutation (bv256);
    var $t24: bv256;
    var $t25: bv256;
    //var $t500: $Mutation int;
    var $t26: int;
    var $t0: $Mutation ($bb_tick_bitmap_BitMap);
    var $t1: $bb_i32_I32;
    var $t2: bv32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'$bb_tick_bitmap_BitMap': $bb_tick_bitmap_BitMap;
    var $temp_0'bv256': bv256;
    var $temp_0'bv32': bv32;
    var $temp_0'bv8': bv8;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[bit_map]($t0) at ./sources/v3/tick_bitmap.move:31:5+1
    assume {:print "$at(26,957,958)"} true;
    $temp_0'$bb_tick_bitmap_BitMap' := $Dereference($t0);
    assume {:print "$track_local(104,1,0):", $temp_0'$bb_tick_bitmap_BitMap'} $temp_0'$bb_tick_bitmap_BitMap' == $temp_0'$bb_tick_bitmap_BitMap';

    // trace_local[tick]($t1) at ./sources/v3/tick_bitmap.move:31:5+1
    assume {:print "$track_local(104,1,1):", $t1} $t1 == $t1;

    // trace_local[tick_spacing]($t2) at ./sources/v3/tick_bitmap.move:31:5+1
    assume {:print "$track_local(104,1,2):", $t2} $t2 == $t2;

    // $t7 := i32::from($t2) on_abort goto L6 with $t8 at ./sources/v3/tick_bitmap.move:36:40+23
    assume {:print "$at(26,1101,1124)"} true;
    call $t7 := $bb_i32_from($t2);
    if ($abort_flag) {
        assume {:print "$at(26,1101,1124)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(104,1):", $t8} $t8 == $t8;
        goto L6;
    }

    // $t9 := i32::mod($t1, $t7) on_abort goto L6 with $t8 at ./sources/v3/tick_bitmap.move:36:25+39
    call $t9 := $bb_i32_mod($t1, $t7);
    if ($abort_flag) {
        assume {:print "$at(26,1086,1125)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(104,1):", $t8} $t8 == $t8;
        goto L6;
    }

    // $t10 := i32::zero() on_abort goto L6 with $t8 at ./sources/v3/tick_bitmap.move:36:66+11
    call $t10 := $bb_i32_zero();
    if ($abort_flag) {
        assume {:print "$at(26,1127,1138)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(104,1):", $t8} $t8 == $t8;
        goto L6;
    }

    // $t11 := i32::eq($t9, $t10) on_abort goto L6 with $t8 at ./sources/v3/tick_bitmap.move:36:17+61
    call $t11 := $bb_i32_eq($t9, $t10);
    if ($abort_flag) {
        assume {:print "$at(26,1078,1139)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(104,1):", $t8} $t8 == $t8;
        goto L6;
    }

    // if ($t11) goto L1 else goto L0 at ./sources/v3/tick_bitmap.move:36:9+6
    if ($t11) { goto L1; } else { goto L0; }

    // label L1 at ./sources/v3/tick_bitmap.move:37:35+4
    assume {:print "$at(26,1200,1204)"} true;
L1:

    // $t12 := i32::from_u32($t2) on_abort goto L6 with $t8 at ./sources/v3/tick_bitmap.move:37:41+27
    assume {:print "$at(26,1206,1233)"} true;
    call $t12 := $bb_i32_from_u32($t2);
    if ($abort_flag) {
        assume {:print "$at(26,1206,1233)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(104,1):", $t8} $t8 == $t8;
        goto L6;
    }

    // $t13 := i32::div($t1, $t12) on_abort goto L6 with $t8 at ./sources/v3/tick_bitmap.move:37:26+43
    call $t13 := $bb_i32_div($t1, $t12);
    if ($abort_flag) {
        assume {:print "$at(26,1191,1234)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(104,1):", $t8} $t8 == $t8;
        goto L6;
    }

    // ($t14, $t15) := tick_bitmap::position($t13) on_abort goto L6 with $t8 at ./sources/v3/tick_bitmap.move:38:35+20
    assume {:print "$at(26,1270,1290)"} true;
    call $t14,$t15 := $bb_tick_bitmap_position($t13);
    if ($abort_flag) {
        assume {:print "$at(26,1270,1290)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(104,1):", $t8} $t8 == $t8;
        goto L6;
    }

    // trace_local[bit_pos]($t15) at ./sources/v3/tick_bitmap.move:38:35+20
    assume {:print "$track_local(104,1,3):", $t15} $t15 == $t15;

    // trace_local[$t5]($t14) at ./sources/v3/tick_bitmap.move:38:35+20
    assume {:print "$track_local(104,1,4):", $t14} $t14 == $t14;

    // $t16 := 1 at ./sources/v3/tick_bitmap.move:39:21+11
    assume {:print "$at(26,1312,1323)"} true;
    $t16 := 1bv256;
    assume $IsValid'bv256'($t16);

    // $t17 := <<($t16, $t15) on_abort goto L6 with $t8 at ./sources/v3/tick_bitmap.move:39:20+24
    call $t17 := $ShlBv256From8($t16, $t15);
    if ($abort_flag) {
        assume {:print "$at(26,1311,1335)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(104,1):", $t8} $t8 == $t8;
        goto L6;
    }

    // trace_local[$t15]($t17) at ./sources/v3/tick_bitmap.move:39:20+24
    assume {:print "$track_local(104,1,5):", $t17} $t17 == $t17;

    // $t18 := get_field<0xbb::tick_bitmap::BitMap>.map($t0) at ./sources/v3/tick_bitmap.move:40:14+30
    assume {:print "$at(26,1350,1380)"} true;
    $t18 := $Dereference($t0)->$map;

    // $t19 := table::contains<0xbb::i32::I32, u256>($t18, $t14) on_abort goto L6 with $t8 at ./sources/v3/tick_bitmap.move:40:14+30
    call $t19 := $1_table_contains'$bb_i32_I32_u256'($t18, $t14);
    if ($abort_flag) {
        assume {:print "$at(26,1350,1380)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(104,1):", $t8} $t8 == $t8;
        goto L6;
    }

    // if ($t19) goto L3 else goto L2 at ./sources/v3/tick_bitmap.move:40:13+31
    if ($t19) { goto L3; } else { goto L2; }

    // label L3 at ./sources/v3/tick_bitmap.move:40:9+90
L3:

    // goto L4 at ./sources/v3/tick_bitmap.move:40:9+90
    assume {:print "$at(26,1345,1435)"} true;
    goto L4;

    // label L2 at ./sources/v3/tick_bitmap.move:41:13+28
    assume {:print "$at(26,1396,1424)"} true;
L2:

    // $t20 := borrow_field<0xbb::tick_bitmap::BitMap>.map($t0) at ./sources/v3/tick_bitmap.move:41:13+28
    assume {:print "$at(26,1396,1424)"} true;
    $t20 := $ChildMutation($t0, 0, $Dereference($t0)->$map);

    // $t21 := 0 at ./sources/v3/tick_bitmap.move:41:39+1
    $t21 := 0;
    assume $IsValid'u256'($t21);

    // table::add<0xbb::i32::I32, u256>($t20, $t14, $t21) on_abort goto L6 with $t8 at ./sources/v3/tick_bitmap.move:41:13+28
    call $t20 := $1_table_add'$bb_i32_I32_u256'($t20, $t14, $t21);
    if ($abort_flag) {
        assume {:print "$at(26,1396,1424)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(104,1):", $t8} $t8 == $t8;
        goto L6;
    }

    // write_back[Reference($t0).map (0x1::table::Table<0xbb::i32::I32, u256>)]($t20) at ./sources/v3/tick_bitmap.move:41:13+28
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_bitmap_BitMap'_map($Dereference($t0), $Dereference($t20)));

    // trace_local[bit_map]($t0) at ./sources/v3/tick_bitmap.move:41:13+28
    $temp_0'$bb_tick_bitmap_BitMap' := $Dereference($t0);
    assume {:print "$track_local(104,1,0):", $temp_0'$bb_tick_bitmap_BitMap'} $temp_0'$bb_tick_bitmap_BitMap' == $temp_0'$bb_tick_bitmap_BitMap';

    // label L4 at ./sources/v3/tick_bitmap.move:43:19+32
    assume {:print "$at(26,1455,1487)"} true;
L4:

    // $t22 := borrow_field<0xbb::tick_bitmap::BitMap>.map($t0) at ./sources/v3/tick_bitmap.move:43:19+32
    assume {:print "$at(26,1455,1487)"} true;
    $t22 := $ChildMutation($t0, 0, $Dereference($t0)->$map);

    // $t23 := table::borrow_mut<0xbb::i32::I32, u256>($t22, $t14) on_abort goto L6 with $t8 at ./sources/v3/tick_bitmap.move:43:19+32
call $t23,$t22 := $1_table_borrow_mut'$bb_i32_I32_u256'($t22,$t14);
//$t23 := $UpdateMutation($t500, $Dereference($t500));
   if ($abort_flag) {
        assume {:print "$at(26,1455,1487)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(104,1):", $t8} $t8 == $t8;
        goto L6;
    }

    // trace_local[map]($t23) at ./sources/v3/tick_bitmap.move:43:19+32
    $temp_0'bv256' := $Dereference($t23);
    assume {:print "$track_local(104,1,6):", $temp_0'bv256'} $temp_0'bv256' == $temp_0'bv256';

    // $t24 := read_ref($t23) at ./sources/v3/tick_bitmap.move:44:16+4
    assume {:print "$at(26,1504,1508)"} true;
    $t24 := $Dereference($t23);

    // $t25 := ^($t24, $t17) at ./sources/v3/tick_bitmap.move:44:16+11
    call $t25 := $XorBv256($t24, $t17);

    // write_ref($t23, $t25) at ./sources/v3/tick_bitmap.move:44:9+18
    $t23 := $UpdateMutation($t23, $t25);

    // write_back[Reference($t22)[]]($t23) at ./sources/v3/tick_bitmap.move:44:9+18
    $t22 := $UpdateMutation($t22, UpdateTable($Dereference($t22), ReadVec($t23->p, LenVec($t22->p)), $bv2int.256($Dereference($t23))));

    // write_back[Reference($t0).map (0x1::table::Table<0xbb::i32::I32, u256>)]($t22) at ./sources/v3/tick_bitmap.move:44:9+18
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_bitmap_BitMap'_map($Dereference($t0), $Dereference($t22)));

    // trace_local[bit_map]($t0) at ./sources/v3/tick_bitmap.move:44:9+18
    $temp_0'$bb_tick_bitmap_BitMap' := $Dereference($t0);
    assume {:print "$track_local(104,1,0):", $temp_0'$bb_tick_bitmap_BitMap'} $temp_0'$bb_tick_bitmap_BitMap' == $temp_0'$bb_tick_bitmap_BitMap';

    // trace_local[bit_map]($t0) at ./sources/v3/tick_bitmap.move:35:7+462
    assume {:print "$at(26,1060,1522)"} true;
    $temp_0'$bb_tick_bitmap_BitMap' := $Dereference($t0);
    assume {:print "$track_local(104,1,0):", $temp_0'$bb_tick_bitmap_BitMap'} $temp_0'$bb_tick_bitmap_BitMap' == $temp_0'$bb_tick_bitmap_BitMap';

    // goto L5 at ./sources/v3/tick_bitmap.move:35:7+462
    goto L5;

    // label L0 at ./sources/v3/tick_bitmap.move:36:9+6
    assume {:print "$at(26,1070,1076)"} true;
L0:

    // drop($t0) at ./sources/v3/tick_bitmap.move:36:9+6
    assume {:print "$at(26,1070,1076)"} true;

    // $t26 := 600001 at ./sources/v3/tick_bitmap.move:36:80+22
    $t26 := 600001;
    assume $IsValid'u64'($t26);

    // trace_abort($t26) at ./sources/v3/tick_bitmap.move:36:9+6
    assume {:print "$at(26,1070,1076)"} true;
    assume {:print "$track_abort(104,1):", $t26} $t26 == $t26;

    // $t8 := move($t26) at ./sources/v3/tick_bitmap.move:36:9+6
    $t8 := $t26;

    // goto L6 at ./sources/v3/tick_bitmap.move:36:9+6
    goto L6;

    // label L5 at ./sources/v3/tick_bitmap.move:45:5+1
    assume {:print "$at(26,1521,1522)"} true;
L5:

    // return () at ./sources/v3/tick_bitmap.move:45:5+1
    assume {:print "$at(26,1521,1522)"} true;
    $ret0 := $t0;
    return;

    // label L6 at ./sources/v3/tick_bitmap.move:45:5+1
L6:

    // abort($t8) at ./sources/v3/tick_bitmap.move:45:5+1
    assume {:print "$at(26,1521,1522)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun tick_bitmap::position [baseline] at ./sources/v3/tick_bitmap.move:24:5+266
procedure {:inline 1} $bb_tick_bitmap_position(_$t0: $bb_i32_I32) returns ($ret0: $bb_i32_I32, $ret1: bv8)
{
    // declare local variables
    var $t1: $bb_i32_I32;
    var $t2: bv8;
    var $t3: $bb_i32_I32;
    var $t4: int;
    var $t5: bv32;
    var $t6: $bb_i32_I32;
    var $t7: $bb_i32_I32;
    var $t8: $bb_i32_I32;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: bv32;
    var $t13: bv8;
    var $t14: int;
    var $t0: $bb_i32_I32;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bv8': bv8;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[tick]($t0) at ./sources/v3/tick_bitmap.move:24:5+1
    assume {:print "$at(26,685,686)"} true;
    assume {:print "$track_local(104,3,0):", $t0} $t0 == $t0;

    // $t2 := 8 at ./sources/v3/tick_bitmap.move:25:39+1
    assume {:print "$at(26,760,761)"} true;
    $t2 := 8bv8;
    assume $IsValid'bv8'($t2);

    // $t3 := i32::shr($t0, $t2) on_abort goto L3 with $t4 at ./sources/v3/tick_bitmap.move:25:24+17
    call $t3 := $bb_i32_shr($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(26,745,762)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(104,3):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_local[$t4]($t3) at ./sources/v3/tick_bitmap.move:25:24+17
    assume {:print "$track_local(104,3,1):", $t3} $t3 == $t3;

    // $t5 := 256 at ./sources/v3/tick_bitmap.move:26:71+3
    assume {:print "$at(26,834,837)"} true;
    $t5 := 256bv32;
    assume $IsValid'bv32'($t5);

    // $t6 := i32::from_u32($t5) on_abort goto L3 with $t4 at ./sources/v3/tick_bitmap.move:26:57+18
    call $t6 := $bb_i32_from_u32($t5);
    if ($abort_flag) {
        assume {:print "$at(26,820,838)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(104,3):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t7 := i32::mul($t3, $t6) on_abort goto L3 with $t4 at ./sources/v3/tick_bitmap.move:26:37+39
    call $t7 := $bb_i32_mul($t3, $t6);
    if ($abort_flag) {
        assume {:print "$at(26,800,839)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(104,3):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t8 := i32::sub($t0, $t7) on_abort goto L3 with $t4 at ./sources/v3/tick_bitmap.move:26:23+54
    call $t8 := $bb_i32_sub($t0, $t7);
    if ($abort_flag) {
        assume {:print "$at(26,786,840)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(104,3):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_local[tick]($t8) at ./sources/v3/tick_bitmap.move:26:23+54
    assume {:print "$track_local(104,3,0):", $t8} $t8 == $t8;

    // $t9 := i32::sign($t8) on_abort goto L3 with $t4 at ./sources/v3/tick_bitmap.move:27:17+18
    assume {:print "$at(26,858,876)"} true;
    call $t9 := $bb_i32_sign($t8);
    if ($abort_flag) {
        assume {:print "$at(26,858,876)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(104,3):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t10 := 0 at ./sources/v3/tick_bitmap.move:27:39+1
    $t10 := 0;
    assume $IsValid'u8'($t10);

    // $t11 := ==($t9, $t10) at ./sources/v3/tick_bitmap.move:27:17+23
    $t11 := $IsEqual'u8'($t9, $t10);

    // if ($t11) goto L1 else goto L0 at ./sources/v3/tick_bitmap.move:27:9+6
    if ($t11) { goto L1; } else { goto L0; }

    // label L1 at ./sources/v3/tick_bitmap.move:28:10+8
    assume {:print "$at(26,905,913)"} true;
L1:

    // $t12 := i32::abs_u32($t8) on_abort goto L3 with $t4 at ./sources/v3/tick_bitmap.move:28:21+21
    assume {:print "$at(26,916,937)"} true;
    call $t12 := $bb_i32_abs_u32($t8);
    if ($abort_flag) {
        assume {:print "$at(26,916,937)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(104,3):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t13 := (u8)($t12) on_abort goto L3 with $t4 at ./sources/v3/tick_bitmap.move:28:20+29
    call $t13 := $CastBv32to8($t12);
    if ($abort_flag) {
        assume {:print "$at(26,915,944)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(104,3):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_return[0]($t3) at ./sources/v3/tick_bitmap.move:24:40+231
    assume {:print "$at(26,720,951)"} true;
    assume {:print "$track_return(104,3,0):", $t3} $t3 == $t3;

    // trace_return[1]($t13) at ./sources/v3/tick_bitmap.move:24:40+231
    assume {:print "$track_return(104,3,1):", $t13} $t13 == $t13;

    // goto L2 at ./sources/v3/tick_bitmap.move:24:40+231
    goto L2;

    // label L0 at ./sources/v3/tick_bitmap.move:27:42+10
    assume {:print "$at(26,883,893)"} true;
L0:

    // $t14 := 600002 at ./sources/v3/tick_bitmap.move:27:42+10
    assume {:print "$at(26,883,893)"} true;
    $t14 := 600002;
    assume $IsValid'u64'($t14);

    // trace_abort($t14) at ./sources/v3/tick_bitmap.move:27:9+6
    assume {:print "$at(26,850,856)"} true;
    assume {:print "$track_abort(104,3):", $t14} $t14 == $t14;

    // $t4 := move($t14) at ./sources/v3/tick_bitmap.move:27:9+6
    $t4 := $t14;

    // goto L3 at ./sources/v3/tick_bitmap.move:27:9+6
    goto L3;

    // label L2 at ./sources/v3/tick_bitmap.move:29:5+1
    assume {:print "$at(26,950,951)"} true;
L2:

    // return ($t3, $t13) at ./sources/v3/tick_bitmap.move:29:5+1
    assume {:print "$at(26,950,951)"} true;
    $ret0 := $t3;
    $ret1 := $t13;
    return;

    // label L3 at ./sources/v3/tick_bitmap.move:29:5+1
L3:

    // abort($t4) at ./sources/v3/tick_bitmap.move:29:5+1
    assume {:print "$at(26,950,951)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun math_u128::overflowing_sub [baseline] at ./sources/math/math_u128.move:30:5+195
procedure {:inline 1} $bb_math_u128_overflowing_sub(_$t0: int, _$t1: int) returns ($ret0: int, $ret1: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t0: int;
    var $t1: int;
    var $temp_0'bool': bool;
    var $temp_0'u128': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[n1]($t0) at ./sources/math/math_u128.move:30:5+1
    assume {:print "$at(11,889,890)"} true;
    assume {:print "$track_local(105,5,0):", $t0} $t0 == $t0;

    // trace_local[n2]($t1) at ./sources/math/math_u128.move:30:5+1
    assume {:print "$track_local(105,5,1):", $t1} $t1 == $t1;

    // $t4 := >=($t0, $t1) at ./sources/math/math_u128.move:31:13+8
    assume {:print "$at(11,964,972)"} true;
    call $t4 := $Ge($t0, $t1);

    // if ($t4) goto L1 else goto L0 at ./sources/math/math_u128.move:31:9+118
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/math_u128.move:32:15+2
    assume {:print "$at(11,990,992)"} true;
L1:

    // $t5 := -($t0, $t1) on_abort goto L4 with $t6 at ./sources/math/math_u128.move:32:14+9
    assume {:print "$at(11,989,998)"} true;
    call $t5 := $Sub($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(11,989,998)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(105,5):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t2 := $t5 at ./sources/math/math_u128.move:32:14+9
    $t2 := $t5;

    // trace_local[$t5]($t5) at ./sources/math/math_u128.move:32:14+9
    assume {:print "$track_local(105,5,2):", $t5} $t5 == $t5;

    // $t7 := false at ./sources/math/math_u128.move:32:25+5
    $t7 := false;
    assume $IsValid'bool'($t7);

    // $t3 := $t7 at ./sources/math/math_u128.move:32:25+5
    $t3 := $t7;

    // trace_local[$t4]($t7) at ./sources/math/math_u128.move:32:25+5
    assume {:print "$track_local(105,5,3):", $t7} $t7 == $t7;

    // label L2 at ./sources/math/math_u128.move:31:9+118
    assume {:print "$at(11,960,1078)"} true;
L2:

    // trace_return[0]($t2) at ./sources/math/math_u128.move:31:9+118
    assume {:print "$at(11,960,1078)"} true;
    assume {:print "$track_return(105,5,0):", $t2} $t2 == $t2;

    // trace_return[1]($t3) at ./sources/math/math_u128.move:31:9+118
    assume {:print "$track_return(105,5,1):", $t3} $t3 == $t3;

    // goto L3 at ./sources/math/math_u128.move:31:9+118
    goto L3;

    // label L0 at ./sources/math/math_u128.move:34:15+8
    assume {:print "$at(11,1038,1046)"} true;
L0:

    // $t8 := 340282366920938463463374607431768211455 at ./sources/math/math_u128.move:34:15+8
    assume {:print "$at(11,1038,1046)"} true;
    $t8 := 340282366920938463463374607431768211455;
    assume $IsValid'u128'($t8);

    // $t9 := -($t8, $t1) on_abort goto L4 with $t6 at ./sources/math/math_u128.move:34:15+13
    call $t9 := $Sub($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(11,1038,1051)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(105,5):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t10 := +($t9, $t0) on_abort goto L4 with $t6 at ./sources/math/math_u128.move:34:15+18
    call $t10 := $AddU128($t9, $t0);
    if ($abort_flag) {
        assume {:print "$at(11,1038,1056)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(105,5):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t11 := 1 at ./sources/math/math_u128.move:34:36+1
    $t11 := 1;
    assume $IsValid'u128'($t11);

    // $t12 := +($t10, $t11) on_abort goto L4 with $t6 at ./sources/math/math_u128.move:34:14+24
    call $t12 := $AddU128($t10, $t11);
    if ($abort_flag) {
        assume {:print "$at(11,1037,1061)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(105,5):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t2 := $t12 at ./sources/math/math_u128.move:34:14+24
    $t2 := $t12;

    // trace_local[$t5]($t12) at ./sources/math/math_u128.move:34:14+24
    assume {:print "$track_local(105,5,2):", $t12} $t12 == $t12;

    // $t13 := true at ./sources/math/math_u128.move:34:40+4
    $t13 := true;
    assume $IsValid'bool'($t13);

    // $t3 := $t13 at ./sources/math/math_u128.move:34:40+4
    $t3 := $t13;

    // trace_local[$t4]($t13) at ./sources/math/math_u128.move:34:40+4
    assume {:print "$track_local(105,5,3):", $t13} $t13 == $t13;

    // goto L2 at ./sources/math/math_u128.move:34:40+4
    goto L2;

    // label L3 at ./sources/math/math_u128.move:36:5+1
    assume {:print "$at(11,1083,1084)"} true;
L3:

    // return ($t2, $t3) at ./sources/math/math_u128.move:36:5+1
    assume {:print "$at(11,1083,1084)"} true;
    $ret0 := $t2;
    $ret1 := $t3;
    return;

    // label L4 at ./sources/math/math_u128.move:36:5+1
L4:

    // abort($t6) at ./sources/math/math_u128.move:36:5+1
    assume {:print "$at(11,1083,1084)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun liquidity_math::add_delta [baseline] at ./sources/math/liquidity_math.move:5:5+78
procedure {:inline 1} $bb_liquidity_math_add_delta(_$t0: int, _$t1: bv128) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $t1: bv128;
    var $temp_0'u128': int;
    var $temp_0'bv128': bv128;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[net]($t0) at ./sources/math/liquidity_math.move:5:5+1
    assume {:print "$at(10,94,95)"} true;
    assume {:print "$track_local(106,0,0):", $t0} $t0 == $t0;

    // trace_local[delta]($t1) at ./sources/math/liquidity_math.move:5:5+1
    assume {:print "$track_local(106,0,1):", $t1} $t1 == $t1;

    // $t2 := +($t0, $t1) on_abort goto L2 with $t3 at ./sources/math/liquidity_math.move:6:9+11
    assume {:print "$at(10,155,166)"} true;
    call $t2 := $AddU128($t0, $bv2int.128($t1));
    if ($abort_flag) {
        assume {:print "$at(10,155,166)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(106,0):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/math/liquidity_math.move:6:9+11
    assume {:print "$track_return(106,0,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/math/liquidity_math.move:7:5+1
    assume {:print "$at(10,171,172)"} true;
L1:

    // return $t2 at ./sources/math/liquidity_math.move:7:5+1
    assume {:print "$at(10,171,172)"} true;
    $ret0 := $t2;
    return;

    // label L2 at ./sources/math/liquidity_math.move:7:5+1
L2:

    // abort($t3) at ./sources/math/liquidity_math.move:7:5+1
    assume {:print "$at(10,171,172)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun liquidity_math::sub_delta [baseline] at ./sources/math/liquidity_math.move:9:5+78
procedure {:inline 1} $bb_liquidity_math_sub_delta(_$t0: int, _$t1: bv128) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $t1: bv128;
    var $temp_0'u128': int;
    var $temp_0'bv128': bv128;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[net]($t0) at ./sources/math/liquidity_math.move:9:5+1
    assume {:print "$at(10,178,179)"} true;
    assume {:print "$track_local(106,1,0):", $t0} $t0 == $t0;

    // trace_local[delta]($t1) at ./sources/math/liquidity_math.move:9:5+1
    assume {:print "$track_local(106,1,1):", $t1} $t1 == $t1;

    // $t2 := -($t0, $t1) on_abort goto L2 with $t3 at ./sources/math/liquidity_math.move:10:9+11
    assume {:print "$at(10,239,250)"} true;
    call $t2 := $Sub($t0, $bv2int.128($t1));
    if ($abort_flag) {
        assume {:print "$at(10,239,250)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(106,1):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/math/liquidity_math.move:10:9+11
    assume {:print "$track_return(106,1,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/math/liquidity_math.move:11:5+1
    assume {:print "$at(10,255,256)"} true;
L1:

    // return $t2 at ./sources/math/liquidity_math.move:11:5+1
    assume {:print "$at(10,255,256)"} true;
    $ret0 := $t2;
    return;

    // label L2 at ./sources/math/liquidity_math.move:11:5+1
L2:

    // abort($t3) at ./sources/math/liquidity_math.move:11:5+1
    assume {:print "$at(10,255,256)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// struct tick::TickInfo at ./sources/v3/tick.move:11:5+1513
datatype $bb_tick_TickInfo {
    $bb_tick_TickInfo($liquidity_gross: int, $liquidity_net: $bb_i128_I128, $fee_growth_outside_a: int, $fee_growth_outside_b: int, $tick_cumulative_outside: int, $seconds_per_liquidity_oracle_outside: int, $seconds_per_liquidity_incentive_outside: int, $emissions_per_liquidity_incentive_outside: Vec (int), $seconds_outside: int, $initialized: bool)
}
function {:inline} $Update'$bb_tick_TickInfo'_liquidity_gross(s: $bb_tick_TickInfo, x: int): $bb_tick_TickInfo {
    $bb_tick_TickInfo(x, s->$liquidity_net, s->$fee_growth_outside_a, s->$fee_growth_outside_b, s->$tick_cumulative_outside, s->$seconds_per_liquidity_oracle_outside, s->$seconds_per_liquidity_incentive_outside, s->$emissions_per_liquidity_incentive_outside, s->$seconds_outside, s->$initialized)
}
function {:inline} $Update'$bb_tick_TickInfo'_liquidity_net(s: $bb_tick_TickInfo, x: $bb_i128_I128): $bb_tick_TickInfo {
    $bb_tick_TickInfo(s->$liquidity_gross, x, s->$fee_growth_outside_a, s->$fee_growth_outside_b, s->$tick_cumulative_outside, s->$seconds_per_liquidity_oracle_outside, s->$seconds_per_liquidity_incentive_outside, s->$emissions_per_liquidity_incentive_outside, s->$seconds_outside, s->$initialized)
}
function {:inline} $Update'$bb_tick_TickInfo'_fee_growth_outside_a(s: $bb_tick_TickInfo, x: int): $bb_tick_TickInfo {
    $bb_tick_TickInfo(s->$liquidity_gross, s->$liquidity_net, x, s->$fee_growth_outside_b, s->$tick_cumulative_outside, s->$seconds_per_liquidity_oracle_outside, s->$seconds_per_liquidity_incentive_outside, s->$emissions_per_liquidity_incentive_outside, s->$seconds_outside, s->$initialized)
}
function {:inline} $Update'$bb_tick_TickInfo'_fee_growth_outside_b(s: $bb_tick_TickInfo, x: int): $bb_tick_TickInfo {
    $bb_tick_TickInfo(s->$liquidity_gross, s->$liquidity_net, s->$fee_growth_outside_a, x, s->$tick_cumulative_outside, s->$seconds_per_liquidity_oracle_outside, s->$seconds_per_liquidity_incentive_outside, s->$emissions_per_liquidity_incentive_outside, s->$seconds_outside, s->$initialized)
}
function {:inline} $Update'$bb_tick_TickInfo'_tick_cumulative_outside(s: $bb_tick_TickInfo, x: int): $bb_tick_TickInfo {
    $bb_tick_TickInfo(s->$liquidity_gross, s->$liquidity_net, s->$fee_growth_outside_a, s->$fee_growth_outside_b, x, s->$seconds_per_liquidity_oracle_outside, s->$seconds_per_liquidity_incentive_outside, s->$emissions_per_liquidity_incentive_outside, s->$seconds_outside, s->$initialized)
}
function {:inline} $Update'$bb_tick_TickInfo'_seconds_per_liquidity_oracle_outside(s: $bb_tick_TickInfo, x: int): $bb_tick_TickInfo {
    $bb_tick_TickInfo(s->$liquidity_gross, s->$liquidity_net, s->$fee_growth_outside_a, s->$fee_growth_outside_b, s->$tick_cumulative_outside, x, s->$seconds_per_liquidity_incentive_outside, s->$emissions_per_liquidity_incentive_outside, s->$seconds_outside, s->$initialized)
}
function {:inline} $Update'$bb_tick_TickInfo'_seconds_per_liquidity_incentive_outside(s: $bb_tick_TickInfo, x: int): $bb_tick_TickInfo {
    $bb_tick_TickInfo(s->$liquidity_gross, s->$liquidity_net, s->$fee_growth_outside_a, s->$fee_growth_outside_b, s->$tick_cumulative_outside, s->$seconds_per_liquidity_oracle_outside, x, s->$emissions_per_liquidity_incentive_outside, s->$seconds_outside, s->$initialized)
}
function {:inline} $Update'$bb_tick_TickInfo'_emissions_per_liquidity_incentive_outside(s: $bb_tick_TickInfo, x: Vec (int)): $bb_tick_TickInfo {
    $bb_tick_TickInfo(s->$liquidity_gross, s->$liquidity_net, s->$fee_growth_outside_a, s->$fee_growth_outside_b, s->$tick_cumulative_outside, s->$seconds_per_liquidity_oracle_outside, s->$seconds_per_liquidity_incentive_outside, x, s->$seconds_outside, s->$initialized)
}
function {:inline} $Update'$bb_tick_TickInfo'_seconds_outside(s: $bb_tick_TickInfo, x: int): $bb_tick_TickInfo {
    $bb_tick_TickInfo(s->$liquidity_gross, s->$liquidity_net, s->$fee_growth_outside_a, s->$fee_growth_outside_b, s->$tick_cumulative_outside, s->$seconds_per_liquidity_oracle_outside, s->$seconds_per_liquidity_incentive_outside, s->$emissions_per_liquidity_incentive_outside, x, s->$initialized)
}
function {:inline} $Update'$bb_tick_TickInfo'_initialized(s: $bb_tick_TickInfo, x: bool): $bb_tick_TickInfo {
    $bb_tick_TickInfo(s->$liquidity_gross, s->$liquidity_net, s->$fee_growth_outside_a, s->$fee_growth_outside_b, s->$tick_cumulative_outside, s->$seconds_per_liquidity_oracle_outside, s->$seconds_per_liquidity_incentive_outside, s->$emissions_per_liquidity_incentive_outside, s->$seconds_outside, x)
}
function $IsValid'$bb_tick_TickInfo'(s: $bb_tick_TickInfo): bool {
    $IsValid'u128'(s->$liquidity_gross)
      && $IsValid'$bb_i128_I128'(s->$liquidity_net)
      && $IsValid'u128'(s->$fee_growth_outside_a)
      && $IsValid'u128'(s->$fee_growth_outside_b)
      && $IsValid'u64'(s->$tick_cumulative_outside)
      && $IsValid'u128'(s->$seconds_per_liquidity_oracle_outside)
      && $IsValid'u128'(s->$seconds_per_liquidity_incentive_outside)
      && $IsValid'vec'u128''(s->$emissions_per_liquidity_incentive_outside)
      && $IsValid'u64'(s->$seconds_outside)
      && $IsValid'bool'(s->$initialized)
}
function {:inline} $IsEqual'$bb_tick_TickInfo'(s1: $bb_tick_TickInfo, s2: $bb_tick_TickInfo): bool {
    $IsEqual'u128'(s1->$liquidity_gross, s2->$liquidity_gross)
    && $IsEqual'$bb_i128_I128'(s1->$liquidity_net, s2->$liquidity_net)
    && $IsEqual'u128'(s1->$fee_growth_outside_a, s2->$fee_growth_outside_a)
    && $IsEqual'u128'(s1->$fee_growth_outside_b, s2->$fee_growth_outside_b)
    && $IsEqual'u64'(s1->$tick_cumulative_outside, s2->$tick_cumulative_outside)
    && $IsEqual'u128'(s1->$seconds_per_liquidity_oracle_outside, s2->$seconds_per_liquidity_oracle_outside)
    && $IsEqual'u128'(s1->$seconds_per_liquidity_incentive_outside, s2->$seconds_per_liquidity_incentive_outside)
    && $IsEqual'vec'u128''(s1->$emissions_per_liquidity_incentive_outside, s2->$emissions_per_liquidity_incentive_outside)
    && $IsEqual'u64'(s1->$seconds_outside, s2->$seconds_outside)
    && $IsEqual'bool'(s1->$initialized, s2->$initialized)}

// struct tick::TickUpdatedEvent at ./sources/v3/tick.move:36:5+426
datatype $bb_tick_TickUpdatedEvent {
    $bb_tick_TickUpdatedEvent($tick: $bb_i32_I32, $liquidity_gross_before: int, $liquidity_gross_after: int, $liquidity_net_before: $bb_i128_I128, $liquidity_net_after: $bb_i128_I128, $flipped: bool, $fee_growth_updated: bool, $fee_growth_outside_a_before: int, $fee_growth_outside_b_before: int, $emissions_per_liquidity_incentive_outside_before: Vec (int))
}
function {:inline} $Update'$bb_tick_TickUpdatedEvent'_tick(s: $bb_tick_TickUpdatedEvent, x: $bb_i32_I32): $bb_tick_TickUpdatedEvent {
    $bb_tick_TickUpdatedEvent(x, s->$liquidity_gross_before, s->$liquidity_gross_after, s->$liquidity_net_before, s->$liquidity_net_after, s->$flipped, s->$fee_growth_updated, s->$fee_growth_outside_a_before, s->$fee_growth_outside_b_before, s->$emissions_per_liquidity_incentive_outside_before)
}
function {:inline} $Update'$bb_tick_TickUpdatedEvent'_liquidity_gross_before(s: $bb_tick_TickUpdatedEvent, x: int): $bb_tick_TickUpdatedEvent {
    $bb_tick_TickUpdatedEvent(s->$tick, x, s->$liquidity_gross_after, s->$liquidity_net_before, s->$liquidity_net_after, s->$flipped, s->$fee_growth_updated, s->$fee_growth_outside_a_before, s->$fee_growth_outside_b_before, s->$emissions_per_liquidity_incentive_outside_before)
}
function {:inline} $Update'$bb_tick_TickUpdatedEvent'_liquidity_gross_after(s: $bb_tick_TickUpdatedEvent, x: int): $bb_tick_TickUpdatedEvent {
    $bb_tick_TickUpdatedEvent(s->$tick, s->$liquidity_gross_before, x, s->$liquidity_net_before, s->$liquidity_net_after, s->$flipped, s->$fee_growth_updated, s->$fee_growth_outside_a_before, s->$fee_growth_outside_b_before, s->$emissions_per_liquidity_incentive_outside_before)
}
function {:inline} $Update'$bb_tick_TickUpdatedEvent'_liquidity_net_before(s: $bb_tick_TickUpdatedEvent, x: $bb_i128_I128): $bb_tick_TickUpdatedEvent {
    $bb_tick_TickUpdatedEvent(s->$tick, s->$liquidity_gross_before, s->$liquidity_gross_after, x, s->$liquidity_net_after, s->$flipped, s->$fee_growth_updated, s->$fee_growth_outside_a_before, s->$fee_growth_outside_b_before, s->$emissions_per_liquidity_incentive_outside_before)
}
function {:inline} $Update'$bb_tick_TickUpdatedEvent'_liquidity_net_after(s: $bb_tick_TickUpdatedEvent, x: $bb_i128_I128): $bb_tick_TickUpdatedEvent {
    $bb_tick_TickUpdatedEvent(s->$tick, s->$liquidity_gross_before, s->$liquidity_gross_after, s->$liquidity_net_before, x, s->$flipped, s->$fee_growth_updated, s->$fee_growth_outside_a_before, s->$fee_growth_outside_b_before, s->$emissions_per_liquidity_incentive_outside_before)
}
function {:inline} $Update'$bb_tick_TickUpdatedEvent'_flipped(s: $bb_tick_TickUpdatedEvent, x: bool): $bb_tick_TickUpdatedEvent {
    $bb_tick_TickUpdatedEvent(s->$tick, s->$liquidity_gross_before, s->$liquidity_gross_after, s->$liquidity_net_before, s->$liquidity_net_after, x, s->$fee_growth_updated, s->$fee_growth_outside_a_before, s->$fee_growth_outside_b_before, s->$emissions_per_liquidity_incentive_outside_before)
}
function {:inline} $Update'$bb_tick_TickUpdatedEvent'_fee_growth_updated(s: $bb_tick_TickUpdatedEvent, x: bool): $bb_tick_TickUpdatedEvent {
    $bb_tick_TickUpdatedEvent(s->$tick, s->$liquidity_gross_before, s->$liquidity_gross_after, s->$liquidity_net_before, s->$liquidity_net_after, s->$flipped, x, s->$fee_growth_outside_a_before, s->$fee_growth_outside_b_before, s->$emissions_per_liquidity_incentive_outside_before)
}
function {:inline} $Update'$bb_tick_TickUpdatedEvent'_fee_growth_outside_a_before(s: $bb_tick_TickUpdatedEvent, x: int): $bb_tick_TickUpdatedEvent {
    $bb_tick_TickUpdatedEvent(s->$tick, s->$liquidity_gross_before, s->$liquidity_gross_after, s->$liquidity_net_before, s->$liquidity_net_after, s->$flipped, s->$fee_growth_updated, x, s->$fee_growth_outside_b_before, s->$emissions_per_liquidity_incentive_outside_before)
}
function {:inline} $Update'$bb_tick_TickUpdatedEvent'_fee_growth_outside_b_before(s: $bb_tick_TickUpdatedEvent, x: int): $bb_tick_TickUpdatedEvent {
    $bb_tick_TickUpdatedEvent(s->$tick, s->$liquidity_gross_before, s->$liquidity_gross_after, s->$liquidity_net_before, s->$liquidity_net_after, s->$flipped, s->$fee_growth_updated, s->$fee_growth_outside_a_before, x, s->$emissions_per_liquidity_incentive_outside_before)
}
function {:inline} $Update'$bb_tick_TickUpdatedEvent'_emissions_per_liquidity_incentive_outside_before(s: $bb_tick_TickUpdatedEvent, x: Vec (int)): $bb_tick_TickUpdatedEvent {
    $bb_tick_TickUpdatedEvent(s->$tick, s->$liquidity_gross_before, s->$liquidity_gross_after, s->$liquidity_net_before, s->$liquidity_net_after, s->$flipped, s->$fee_growth_updated, s->$fee_growth_outside_a_before, s->$fee_growth_outside_b_before, x)
}
function $IsValid'$bb_tick_TickUpdatedEvent'(s: $bb_tick_TickUpdatedEvent): bool {
    $IsValid'$bb_i32_I32'(s->$tick)
      && $IsValid'u128'(s->$liquidity_gross_before)
      && $IsValid'u128'(s->$liquidity_gross_after)
      && $IsValid'$bb_i128_I128'(s->$liquidity_net_before)
      && $IsValid'$bb_i128_I128'(s->$liquidity_net_after)
      && $IsValid'bool'(s->$flipped)
      && $IsValid'bool'(s->$fee_growth_updated)
      && $IsValid'u128'(s->$fee_growth_outside_a_before)
      && $IsValid'u128'(s->$fee_growth_outside_b_before)
      && $IsValid'vec'u128''(s->$emissions_per_liquidity_incentive_outside_before)
}
function {:inline} $IsEqual'$bb_tick_TickUpdatedEvent'(s1: $bb_tick_TickUpdatedEvent, s2: $bb_tick_TickUpdatedEvent): bool {
    $IsEqual'$bb_i32_I32'(s1->$tick, s2->$tick)
    && $IsEqual'u128'(s1->$liquidity_gross_before, s2->$liquidity_gross_before)
    && $IsEqual'u128'(s1->$liquidity_gross_after, s2->$liquidity_gross_after)
    && $IsEqual'$bb_i128_I128'(s1->$liquidity_net_before, s2->$liquidity_net_before)
    && $IsEqual'$bb_i128_I128'(s1->$liquidity_net_after, s2->$liquidity_net_after)
    && $IsEqual'bool'(s1->$flipped, s2->$flipped)
    && $IsEqual'bool'(s1->$fee_growth_updated, s2->$fee_growth_updated)
    && $IsEqual'u128'(s1->$fee_growth_outside_a_before, s2->$fee_growth_outside_a_before)
    && $IsEqual'u128'(s1->$fee_growth_outside_b_before, s2->$fee_growth_outside_b_before)
    && $IsEqual'vec'u128''(s1->$emissions_per_liquidity_incentive_outside_before, s2->$emissions_per_liquidity_incentive_outside_before)}

// fun tick::update [baseline] at ./sources/v3/tick.move:87:5+3134
procedure {:inline 1} $bb_tick_update(_$t0: $Mutation ($bb_tick_TickInfo), _$t1: $bb_i32_I32, _$t2: int, _$t3: int, _$t4: int, _$t5: int, _$t6: Vec (int), _$t7: bool, _$t8: bv128, _$t9: $bb_i32_I32, _$t10: bool) returns ($ret0: bool, $ret1: $Mutation ($bb_tick_TickInfo))
{
    // declare local variables
    var $t11: int;
    var $t12: $bb_i128_I128;
    var $t13: int;
    var $t14: int;
    var $t15: Vec (int);
    var $t16: $Mutation (int);
    var $t17: $Mutation (Vec (int));
    var $t18: bool;
    var $t19: bool;
    var $t20: int;
    var $t21: $bb_i128_I128;
    var $t22: int;
    var $t23: int;
    var $t24: Vec (int);
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: $Mutation (int);
    var $t29: int;
    var $t30: bool;
    var $t31: bool;
    var $t32: $Mutation (int);
    var $t33: $Mutation (int);
    var $t34: $Mutation (int);
    var $t35: $Mutation (int);
    var $t36: $Mutation (Vec (int));
    var $t37: bool;
    var $t38: bool;
    var $t39: $Mutation (bool);
    var $t40: $bb_i128_I128;
    var $t41: $bb_i128_I128;
    var $t42: $bb_i128_I128;
    var $t43: $Mutation ($bb_i128_I128);
    var $t44: int;
    var $t45: bool;
    var $t46: int;
    var $t47: int;
    var $t48: bool;
    var $t49: bool;
    var $t50: int;
    var $t51: $bb_i128_I128;
    var $t52: $bb_tick_TickUpdatedEvent;
    var $t53: bool;
    var $t54: int;
    var $t55: int;
    var $t56: bool;
    var $t57: bool;
    var $t58: bool;
    var $t59: $bb_i128_I128;
    var $t60: $bb_i128_I128;
    var $t61: $bb_i128_I128;
    var $t62: $Mutation ($bb_i128_I128);
    var $t63: $bb_i128_I128;
    var $t64: $bb_i128_I128;
    var $t65: $bb_i128_I128;
    var $t66: $Mutation ($bb_i128_I128);
    var $t67: $bb_i128_I128;
    var $t68: $bb_i128_I128;
    var $t69: $bb_i128_I128;
    var $t70: $Mutation ($bb_i128_I128);
    var $t71: bool;
    var $t72: bool;
    var $t73: int;
    var $t74: int;
    var $t75: $Mutation (int);
    var $t0: $Mutation ($bb_tick_TickInfo);
    var $t1: $bb_i32_I32;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: Vec (int);
    var $t7: bool;
    var $t8: bv128;
    var $t9: $bb_i32_I32;
    var $t10: bool;
    var $temp_0'$bb_i128_I128': $bb_i128_I128;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'$bb_tick_TickInfo': $bb_tick_TickInfo;
    var $temp_0'bool': bool;
    var $temp_0'u128': int;
    var $temp_0'bv128': bv128;
    var $temp_0'vec'u128'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;
    $t7 := _$t7;
    $t8 := _$t8;
    $t9 := _$t9;
    $t10 := _$t10;

    // bytecode translation starts here
    // trace_local[info]($t0) at ./sources/v3/tick.move:87:5+1
    assume {:print "$at(25,4190,4191)"} true;
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,0,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // trace_local[tick_to_update]($t1) at ./sources/v3/tick.move:87:5+1
    assume {:print "$track_local(107,0,1):", $t1} $t1 == $t1;

    // trace_local[fee_growth_global_a]($t2) at ./sources/v3/tick.move:87:5+1
    assume {:print "$track_local(107,0,2):", $t2} $t2 == $t2;

    // trace_local[fee_growth_global_b]($t3) at ./sources/v3/tick.move:87:5+1
    assume {:print "$track_local(107,0,3):", $t3} $t3 == $t3;

    // trace_local[seconds_per_liquidity_oracle]($t4) at ./sources/v3/tick.move:87:5+1
    assume {:print "$track_local(107,0,4):", $t4} $t4 == $t4;

    // trace_local[seconds_per_liquidity_incentive]($t5) at ./sources/v3/tick.move:87:5+1
    assume {:print "$track_local(107,0,5):", $t5} $t5 == $t5;

    // trace_local[emissions_per_liquidity]($t6) at ./sources/v3/tick.move:87:5+1
    assume {:print "$track_local(107,0,6):", $t6} $t6 == $t6;

    // trace_local[direction]($t7) at ./sources/v3/tick.move:87:5+1
    assume {:print "$track_local(107,0,7):", $t7} $t7 == $t7;

    // trace_local[liquidity_delta]($t8) at ./sources/v3/tick.move:87:5+1
    assume {:print "$track_local(107,0,8):", $t8} $t8 == $t8;

    // trace_local[tick_current]($t9) at ./sources/v3/tick.move:87:5+1
    assume {:print "$track_local(107,0,9):", $t9} $t9 == $t9;

    // trace_local[upper]($t10) at ./sources/v3/tick.move:87:5+1
    assume {:print "$track_local(107,0,10):", $t10} $t10 == $t10;

    // $t20 := get_field<0xbb::tick::TickInfo>.liquidity_gross($t0) at ./sources/v3/tick.move:100:38+20
    assume {:print "$at(25,4629,4649)"} true;
    $t20 := $Dereference($t0)->$liquidity_gross;

    // trace_local[liquidity_gross_before]($t20) at ./sources/v3/tick.move:100:38+20
    assume {:print "$track_local(107,0,11):", $t20} $t20 == $t20;

    // $t21 := get_field<0xbb::tick::TickInfo>.liquidity_net($t0) at ./sources/v3/tick.move:101:36+18
    assume {:print "$at(25,4686,4704)"} true;
    $t21 := $Dereference($t0)->$liquidity_net;

    // trace_local[liquidity_net_before]($t21) at ./sources/v3/tick.move:101:36+18
    assume {:print "$track_local(107,0,12):", $t21} $t21 == $t21;

    // $t22 := get_field<0xbb::tick::TickInfo>.fee_growth_outside_a($t0) at ./sources/v3/tick.move:102:43+25
    assume {:print "$at(25,4748,4773)"} true;
    $t22 := $Dereference($t0)->$fee_growth_outside_a;

    // trace_local[fee_growth_outside_a_before]($t22) at ./sources/v3/tick.move:102:43+25
    assume {:print "$track_local(107,0,13):", $t22} $t22 == $t22;

    // $t23 := get_field<0xbb::tick::TickInfo>.fee_growth_outside_b($t0) at ./sources/v3/tick.move:103:43+25
    assume {:print "$at(25,4817,4842)"} true;
    $t23 := $Dereference($t0)->$fee_growth_outside_b;

    // trace_local[fee_growth_outside_b_before]($t23) at ./sources/v3/tick.move:103:43+25
    assume {:print "$track_local(107,0,14):", $t23} $t23 == $t23;

    // $t24 := get_field<0xbb::tick::TickInfo>.emissions_per_liquidity_incentive_outside($t0) at ./sources/v3/tick.move:104:64+46
    assume {:print "$at(25,4907,4953)"} true;
    $t24 := $Dereference($t0)->$emissions_per_liquidity_incentive_outside;

    // trace_local[emissions_per_liquidity_incentive_outside_before]($t24) at ./sources/v3/tick.move:104:64+46
    assume {:print "$track_local(107,0,15):", $t24} $t24 == $t24;

    // if ($t7) goto L1 else goto L0 at ./sources/v3/tick.move:105:9+245
    assume {:print "$at(25,4963,5208)"} true;
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at ./sources/v3/tick.move:106:62+20
    assume {:print "$at(25,5041,5061)"} true;
L1:

    // $t25 := get_field<0xbb::tick::TickInfo>.liquidity_gross($t0) at ./sources/v3/tick.move:106:62+20
    assume {:print "$at(25,5041,5061)"} true;
    $t25 := $Dereference($t0)->$liquidity_gross;

    // $t26 := liquidity_math::add_delta($t25, $t8) on_abort goto L23 with $t27 at ./sources/v3/tick.move:106:36+64
    call $t26 := $bb_liquidity_math_add_delta($t25, $t8);
    if ($abort_flag) {
        assume {:print "$at(25,5015,5079)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(107,0):", $t27} $t27 == $t27;
        goto L23;
    }

    // $t28 := borrow_field<0xbb::tick::TickInfo>.liquidity_gross($t0) at ./sources/v3/tick.move:106:13+20
    $t28 := $ChildMutation($t0, 0, $Dereference($t0)->$liquidity_gross);

    // write_ref($t28, $t26) at ./sources/v3/tick.move:106:13+87
    $t28 := $UpdateMutation($t28, $t26);

    // write_back[Reference($t0).liquidity_gross (u128)]($t28) at ./sources/v3/tick.move:106:13+87
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_TickInfo'_liquidity_gross($Dereference($t0), $Dereference($t28)));

    // trace_local[info]($t0) at ./sources/v3/tick.move:106:13+87
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,0,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // label L21 at ./sources/v3/tick.move:111:38+22
    assume {:print "$at(25,5248,5270)"} true;
L21:

    // $t29 := 0 at ./sources/v3/tick.move:111:64+1
    assume {:print "$at(25,5274,5275)"} true;
    $t29 := 0;
    assume $IsValid'u128'($t29);

    // $t30 := ==($t20, $t29) at ./sources/v3/tick.move:111:38+27
    $t30 := $IsEqual'u128'($t20, $t29);

    // if ($t30) goto L3 else goto L2 at ./sources/v3/tick.move:111:34+664
    if ($t30) { goto L3; } else { goto L2; }

    // label L3 at ./sources/v3/tick.move:112:25+14
    assume {:print "$at(25,5347,5361)"} true;
L3:

    // $t31 := i32::lte($t1, $t9) on_abort goto L23 with $t27 at ./sources/v3/tick.move:112:16+38
    assume {:print "$at(25,5338,5376)"} true;
    call $t31 := $bb_i32_lte($t1, $t9);
    if ($abort_flag) {
        assume {:print "$at(25,5338,5376)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(107,0):", $t27} $t27 == $t27;
        goto L23;
    }

    // if ($t31) goto L5 else goto L4 at ./sources/v3/tick.move:112:13+528
    if ($t31) { goto L5; } else { goto L4; }

    // label L5 at ./sources/v3/tick.move:113:17+25
    assume {:print "$at(25,5396,5421)"} true;
L5:

    // $t32 := borrow_field<0xbb::tick::TickInfo>.fee_growth_outside_a($t0) at ./sources/v3/tick.move:113:17+25
    assume {:print "$at(25,5396,5421)"} true;
    $t32 := $ChildMutation($t0, 2, $Dereference($t0)->$fee_growth_outside_a);

    // trace_local[$t25]($t32) at ./sources/v3/tick.move:113:17+47
    $temp_0'u128' := $Dereference($t32);
    assume {:print "$track_local(107,0,16):", $temp_0'u128'} $temp_0'u128' == $temp_0'u128';

    // write_ref($t32, $t2) at ./sources/v3/tick.move:113:17+47
    $t32 := $UpdateMutation($t32, $t2);

    // write_back[Reference($t0).fee_growth_outside_a (u128)]($t32) at ./sources/v3/tick.move:113:17+47
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_TickInfo'_fee_growth_outside_a($Dereference($t0), $Dereference($t32)));

    // trace_local[info]($t0) at ./sources/v3/tick.move:113:17+47
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,0,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // $t33 := borrow_field<0xbb::tick::TickInfo>.fee_growth_outside_b($t0) at ./sources/v3/tick.move:114:17+25
    assume {:print "$at(25,5461,5486)"} true;
    $t33 := $ChildMutation($t0, 3, $Dereference($t0)->$fee_growth_outside_b);

    // trace_local[$t25]($t33) at ./sources/v3/tick.move:114:17+47
    $temp_0'u128' := $Dereference($t33);
    assume {:print "$track_local(107,0,16):", $temp_0'u128'} $temp_0'u128' == $temp_0'u128';

    // write_ref($t33, $t3) at ./sources/v3/tick.move:114:17+47
    $t33 := $UpdateMutation($t33, $t3);

    // write_back[Reference($t0).fee_growth_outside_b (u128)]($t33) at ./sources/v3/tick.move:114:17+47
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_TickInfo'_fee_growth_outside_b($Dereference($t0), $Dereference($t33)));

    // trace_local[info]($t0) at ./sources/v3/tick.move:114:17+47
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,0,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // $t34 := borrow_field<0xbb::tick::TickInfo>.seconds_per_liquidity_oracle_outside($t0) at ./sources/v3/tick.move:115:17+41
    assume {:print "$at(25,5526,5567)"} true;
    $t34 := $ChildMutation($t0, 5, $Dereference($t0)->$seconds_per_liquidity_oracle_outside);

    // trace_local[$t25]($t34) at ./sources/v3/tick.move:115:17+72
    $temp_0'u128' := $Dereference($t34);
    assume {:print "$track_local(107,0,16):", $temp_0'u128'} $temp_0'u128' == $temp_0'u128';

    // write_ref($t34, $t4) at ./sources/v3/tick.move:115:17+72
    $t34 := $UpdateMutation($t34, $t4);

    // write_back[Reference($t0).seconds_per_liquidity_oracle_outside (u128)]($t34) at ./sources/v3/tick.move:115:17+72
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_TickInfo'_seconds_per_liquidity_oracle_outside($Dereference($t0), $Dereference($t34)));

    // trace_local[info]($t0) at ./sources/v3/tick.move:115:17+72
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,0,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // $t35 := borrow_field<0xbb::tick::TickInfo>.seconds_per_liquidity_incentive_outside($t0) at ./sources/v3/tick.move:116:17+44
    assume {:print "$at(25,5616,5660)"} true;
    $t35 := $ChildMutation($t0, 6, $Dereference($t0)->$seconds_per_liquidity_incentive_outside);

    // trace_local[$t25]($t35) at ./sources/v3/tick.move:116:17+78
    $temp_0'u128' := $Dereference($t35);
    assume {:print "$track_local(107,0,16):", $temp_0'u128'} $temp_0'u128' == $temp_0'u128';

    // write_ref($t35, $t5) at ./sources/v3/tick.move:116:17+78
    $t35 := $UpdateMutation($t35, $t5);

    // write_back[Reference($t0).seconds_per_liquidity_incentive_outside (u128)]($t35) at ./sources/v3/tick.move:116:17+78
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_TickInfo'_seconds_per_liquidity_incentive_outside($Dereference($t0), $Dereference($t35)));

    // trace_local[info]($t0) at ./sources/v3/tick.move:116:17+78
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,0,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // $t36 := borrow_field<0xbb::tick::TickInfo>.emissions_per_liquidity_incentive_outside($t0) at ./sources/v3/tick.move:117:17+46
    assume {:print "$at(25,5712,5758)"} true;
    $t36 := $ChildMutation($t0, 7, $Dereference($t0)->$emissions_per_liquidity_incentive_outside);

    // trace_local[$t40]($t36) at ./sources/v3/tick.move:117:17+72
    $temp_0'vec'u128'' := $Dereference($t36);
    assume {:print "$track_local(107,0,17):", $temp_0'vec'u128''} $temp_0'vec'u128'' == $temp_0'vec'u128'';

    // write_ref($t36, $t6) at ./sources/v3/tick.move:117:17+72
    $t36 := $UpdateMutation($t36, $t6);

    // write_back[Reference($t0).emissions_per_liquidity_incentive_outside (vector<u128>)]($t36) at ./sources/v3/tick.move:117:17+72
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_TickInfo'_emissions_per_liquidity_incentive_outside($Dereference($t0), $Dereference($t36)));

    // trace_local[info]($t0) at ./sources/v3/tick.move:117:17+72
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,0,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // $t37 := true at ./sources/v3/tick.move:118:17+4
    assume {:print "$at(25,5802,5806)"} true;
    $t37 := true;
    assume $IsValid'bool'($t37);

    // $t18 := $t37 at ./sources/v3/tick.move:118:17+4
    $t18 := $t37;

    // trace_local[$t31]($t37) at ./sources/v3/tick.move:118:17+4
    assume {:print "$track_local(107,0,18):", $t37} $t37 == $t37;

    // label L20 at ./sources/v3/tick.move:125:28+4
    assume {:print "$at(25,5937,5941)"} true;
L20:

    // $t38 := true at ./sources/v3/tick.move:125:28+4
    assume {:print "$at(25,5937,5941)"} true;
    $t38 := true;
    assume $IsValid'bool'($t38);

    // $t39 := borrow_field<0xbb::tick::TickInfo>.initialized($t0) at ./sources/v3/tick.move:125:9+16
    $t39 := $ChildMutation($t0, 9, $Dereference($t0)->$initialized);

    // write_ref($t39, $t38) at ./sources/v3/tick.move:125:9+23
    $t39 := $UpdateMutation($t39, $t38);

    // write_back[Reference($t0).initialized (bool)]($t39) at ./sources/v3/tick.move:125:9+23
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_TickInfo'_initialized($Dereference($t0), $Dereference($t39)));

    // trace_local[info]($t0) at ./sources/v3/tick.move:125:9+23
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,0,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // if ($t10) goto L7 else goto L6 at ./sources/v3/tick.move:128:9+562
    assume {:print "$at(25,6067,6629)"} true;
    if ($t10) { goto L7; } else { goto L6; }

    // label L7 at ./sources/v3/tick.move:129:13+248
    assume {:print "$at(25,6092,6340)"} true;
L7:

    // if ($t7) goto L9 else goto L8 at ./sources/v3/tick.move:129:13+248
    assume {:print "$at(25,6092,6340)"} true;
    if ($t7) { goto L9; } else { goto L8; }

    // label L9 at ./sources/v3/tick.move:130:48+18
    assume {:print "$at(25,6155,6173)"} true;
L9:

    // $t40 := get_field<0xbb::tick::TickInfo>.liquidity_net($t0) at ./sources/v3/tick.move:130:48+18
    assume {:print "$at(25,6155,6173)"} true;
    $t40 := $Dereference($t0)->$liquidity_net;

    // $t41 := i128::from($t8) on_abort goto L23 with $t27 at ./sources/v3/tick.move:130:68+27
    call $t41 := $bb_i128_from($t8);
    if ($abort_flag) {
        assume {:print "$at(25,6175,6202)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(107,0):", $t27} $t27 == $t27;
        goto L23;
    }

    // $t42 := i128::sub($t40, $t41) on_abort goto L23 with $t27 at ./sources/v3/tick.move:130:38+58
    call $t42 := $bb_i128_sub($t40, $t41);
    if ($abort_flag) {
        assume {:print "$at(25,6145,6203)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(107,0):", $t27} $t27 == $t27;
        goto L23;
    }

    // $t43 := borrow_field<0xbb::tick::TickInfo>.liquidity_net($t0) at ./sources/v3/tick.move:130:17+18
    $t43 := $ChildMutation($t0, 1, $Dereference($t0)->$liquidity_net);

    // write_ref($t43, $t42) at ./sources/v3/tick.move:130:17+79
    $t43 := $UpdateMutation($t43, $t42);

    // write_back[Reference($t0).liquidity_net (0xbb::i128::I128)]($t43) at ./sources/v3/tick.move:130:17+79
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_TickInfo'_liquidity_net($Dereference($t0), $Dereference($t43)));

    // trace_local[info]($t0) at ./sources/v3/tick.move:130:17+79
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,0,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // label L17 at ./sources/v3/tick.move:143:27+22
    assume {:print "$at(25,6658,6680)"} true;
L17:

    // $t44 := 0 at ./sources/v3/tick.move:143:53+1
    assume {:print "$at(25,6684,6685)"} true;
    $t44 := 0;
    assume $IsValid'u128'($t44);

    // $t45 := ==($t20, $t44) at ./sources/v3/tick.move:143:27+27
    $t45 := $IsEqual'u128'($t20, $t44);

    // if ($t45) goto L11 else goto L10 at ./sources/v3/tick.move:143:23+187
    if ($t45) { goto L11; } else { goto L10; }

    // label L11 at ./sources/v3/tick.move:144:17+20
    assume {:print "$at(25,6705,6725)"} true;
L11:

    // $t46 := get_field<0xbb::tick::TickInfo>.liquidity_gross($t0) at ./sources/v3/tick.move:144:17+20
    assume {:print "$at(25,6705,6725)"} true;
    $t46 := $Dereference($t0)->$liquidity_gross;

    // $t47 := 0 at ./sources/v3/tick.move:144:41+1
    $t47 := 0;
    assume $IsValid'u128'($t47);

    // $t48 := !=($t46, $t47) at ./sources/v3/tick.move:144:17+25
    $t48 := !$IsEqual'u128'($t46, $t47);

    // if ($t48) goto L13 else goto L12 at ./sources/v3/tick.move:144:13+50
    if ($t48) { goto L13; } else { goto L12; }

    // label L13 at ./sources/v3/tick.move:144:46+4
L13:

    // $t49 := true at ./sources/v3/tick.move:144:46+4
    assume {:print "$at(25,6734,6738)"} true;
    $t49 := true;
    assume $IsValid'bool'($t49);

    // $t19 := $t49 at ./sources/v3/tick.move:144:46+4
    $t19 := $t49;

    // trace_local[$t41]($t49) at ./sources/v3/tick.move:144:46+4
    assume {:print "$track_local(107,0,19):", $t49} $t49 == $t49;

    // label L14 at ./sources/v3/tick.move:149:19+14
    assume {:print "$at(25,6899,6913)"} true;
L14:

    // $t50 := get_field<0xbb::tick::TickInfo>.liquidity_gross($t0) at ./sources/v3/tick.move:151:36+20
    assume {:print "$at(25,6986,7006)"} true;
    $t50 := $Dereference($t0)->$liquidity_gross;

    // $t51 := get_field<0xbb::tick::TickInfo>.liquidity_net($t0) at ./sources/v3/tick.move:153:34+18
    assume {:print "$at(25,7075,7093)"} true;
    $t51 := $Dereference($t0)->$liquidity_net;

    // $t52 := pack 0xbb::tick::TickUpdatedEvent($t1, $t20, $t50, $t21, $t51, $t19, $t18, $t22, $t23, $t24) at ./sources/v3/tick.move:148:21+437
    assume {:print "$at(25,6863,7300)"} true;
    $t52 := $bb_tick_TickUpdatedEvent($t1, $t20, $t50, $t21, $t51, $t19, $t18, $t22, $t23, $t24);

    // opaque begin: event::emit<0xbb::tick::TickUpdatedEvent>($t52) at ./sources/v3/tick.move:148:9+450

    // opaque end: event::emit<0xbb::tick::TickUpdatedEvent>($t52) at ./sources/v3/tick.move:148:9+450

    // trace_return[0]($t19) at ./sources/v3/tick.move:99:13+2734
    assume {:print "$at(25,4590,7324)"} true;
    assume {:print "$track_return(107,0,0):", $t19} $t19 == $t19;

    // trace_local[info]($t0) at ./sources/v3/tick.move:99:13+2734
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,0,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // goto L22 at ./sources/v3/tick.move:99:13+2734
    goto L22;

    // label L12 at ./sources/v3/tick.move:144:58+5
    assume {:print "$at(25,6746,6751)"} true;
L12:

    // $t53 := false at ./sources/v3/tick.move:144:58+5
    assume {:print "$at(25,6746,6751)"} true;
    $t53 := false;
    assume $IsValid'bool'($t53);

    // $t19 := $t53 at ./sources/v3/tick.move:144:58+5
    $t19 := $t53;

    // trace_local[$t41]($t53) at ./sources/v3/tick.move:144:58+5
    assume {:print "$track_local(107,0,19):", $t53} $t53 == $t53;

    // goto L14 at ./sources/v3/tick.move:144:58+5
    goto L14;

    // label L10 at ./sources/v3/tick.move:146:17+20
    assume {:print "$at(25,6785,6805)"} true;
L10:

    // $t54 := get_field<0xbb::tick::TickInfo>.liquidity_gross($t0) at ./sources/v3/tick.move:146:17+20
    assume {:print "$at(25,6785,6805)"} true;
    $t54 := $Dereference($t0)->$liquidity_gross;

    // $t55 := 0 at ./sources/v3/tick.move:146:41+1
    $t55 := 0;
    assume $IsValid'u128'($t55);

    // $t56 := !=($t54, $t55) at ./sources/v3/tick.move:146:17+25
    $t56 := !$IsEqual'u128'($t54, $t55);

    // if ($t56) goto L16 else goto L15 at ./sources/v3/tick.move:146:13+50
    if ($t56) { goto L16; } else { goto L15; }

    // label L16 at ./sources/v3/tick.move:146:46+5
L16:

    // $t57 := false at ./sources/v3/tick.move:146:46+5
    assume {:print "$at(25,6814,6819)"} true;
    $t57 := false;
    assume $IsValid'bool'($t57);

    // $t19 := $t57 at ./sources/v3/tick.move:146:46+5
    $t19 := $t57;

    // trace_local[$t41]($t57) at ./sources/v3/tick.move:146:46+5
    assume {:print "$track_local(107,0,19):", $t57} $t57 == $t57;

    // goto L14 at ./sources/v3/tick.move:146:46+5
    goto L14;

    // label L15 at ./sources/v3/tick.move:146:59+4
L15:

    // $t58 := true at ./sources/v3/tick.move:146:59+4
    assume {:print "$at(25,6827,6831)"} true;
    $t58 := true;
    assume $IsValid'bool'($t58);

    // $t19 := $t58 at ./sources/v3/tick.move:146:59+4
    $t19 := $t58;

    // trace_local[$t41]($t58) at ./sources/v3/tick.move:146:59+4
    assume {:print "$track_local(107,0,19):", $t58} $t58 == $t58;

    // goto L14 at ./sources/v3/tick.move:146:59+4
    goto L14;

    // label L8 at ./sources/v3/tick.move:132:48+18
    assume {:print "$at(25,6273,6291)"} true;
L8:

    // $t59 := get_field<0xbb::tick::TickInfo>.liquidity_net($t0) at ./sources/v3/tick.move:132:48+18
    assume {:print "$at(25,6273,6291)"} true;
    $t59 := $Dereference($t0)->$liquidity_net;

    // $t60 := i128::neg_from($t8) on_abort goto L23 with $t27 at ./sources/v3/tick.move:132:68+31
    call $t60 := $bb_i128_neg_from($t8);
    if ($abort_flag) {
        assume {:print "$at(25,6293,6324)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(107,0):", $t27} $t27 == $t27;
        goto L23;
    }

    // $t61 := i128::sub($t59, $t60) on_abort goto L23 with $t27 at ./sources/v3/tick.move:132:38+62
    call $t61 := $bb_i128_sub($t59, $t60);
    if ($abort_flag) {
        assume {:print "$at(25,6263,6325)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(107,0):", $t27} $t27 == $t27;
        goto L23;
    }

    // $t62 := borrow_field<0xbb::tick::TickInfo>.liquidity_net($t0) at ./sources/v3/tick.move:132:17+18
    $t62 := $ChildMutation($t0, 1, $Dereference($t0)->$liquidity_net);

    // write_ref($t62, $t61) at ./sources/v3/tick.move:132:17+83
    $t62 := $UpdateMutation($t62, $t61);

    // write_back[Reference($t0).liquidity_net (0xbb::i128::I128)]($t62) at ./sources/v3/tick.move:132:17+83
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_TickInfo'_liquidity_net($Dereference($t0), $Dereference($t62)));

    // trace_local[info]($t0) at ./sources/v3/tick.move:132:17+83
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,0,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // goto L17 at ./sources/v3/tick.move:132:17+83
    goto L17;

    // label L6 at ./sources/v3/tick.move:135:13+248
    assume {:print "$at(25,6370,6618)"} true;
L6:

    // if ($t7) goto L19 else goto L18 at ./sources/v3/tick.move:135:13+248
    assume {:print "$at(25,6370,6618)"} true;
    if ($t7) { goto L19; } else { goto L18; }

    // label L19 at ./sources/v3/tick.move:136:48+18
    assume {:print "$at(25,6433,6451)"} true;
L19:

    // $t63 := get_field<0xbb::tick::TickInfo>.liquidity_net($t0) at ./sources/v3/tick.move:136:48+18
    assume {:print "$at(25,6433,6451)"} true;
    $t63 := $Dereference($t0)->$liquidity_net;

    // $t64 := i128::from($t8) on_abort goto L23 with $t27 at ./sources/v3/tick.move:136:68+27
    call $t64 := $bb_i128_from($t8);
    if ($abort_flag) {
        assume {:print "$at(25,6453,6480)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(107,0):", $t27} $t27 == $t27;
        goto L23;
    }

    // $t65 := i128::add($t63, $t64) on_abort goto L23 with $t27 at ./sources/v3/tick.move:136:38+58
    call $t65 := $bb_i128_add($t63, $t64);
    if ($abort_flag) {
        assume {:print "$at(25,6423,6481)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(107,0):", $t27} $t27 == $t27;
        goto L23;
    }

    // $t66 := borrow_field<0xbb::tick::TickInfo>.liquidity_net($t0) at ./sources/v3/tick.move:136:17+18
    $t66 := $ChildMutation($t0, 1, $Dereference($t0)->$liquidity_net);

    // write_ref($t66, $t65) at ./sources/v3/tick.move:136:17+79
    $t66 := $UpdateMutation($t66, $t65);

    // write_back[Reference($t0).liquidity_net (0xbb::i128::I128)]($t66) at ./sources/v3/tick.move:136:17+79
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_TickInfo'_liquidity_net($Dereference($t0), $Dereference($t66)));

    // trace_local[info]($t0) at ./sources/v3/tick.move:136:17+79
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,0,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // goto L17 at ./sources/v3/tick.move:135:27+112
    assume {:print "$at(25,6384,6496)"} true;
    goto L17;

    // label L18 at ./sources/v3/tick.move:138:48+18
    assume {:print "$at(25,6551,6569)"} true;
L18:

    // $t67 := get_field<0xbb::tick::TickInfo>.liquidity_net($t0) at ./sources/v3/tick.move:138:48+18
    assume {:print "$at(25,6551,6569)"} true;
    $t67 := $Dereference($t0)->$liquidity_net;

    // $t68 := i128::neg_from($t8) on_abort goto L23 with $t27 at ./sources/v3/tick.move:138:68+31
    call $t68 := $bb_i128_neg_from($t8);
    if ($abort_flag) {
        assume {:print "$at(25,6571,6602)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(107,0):", $t27} $t27 == $t27;
        goto L23;
    }

    // $t69 := i128::add($t67, $t68) on_abort goto L23 with $t27 at ./sources/v3/tick.move:138:38+62
    call $t69 := $bb_i128_add($t67, $t68);
    if ($abort_flag) {
        assume {:print "$at(25,6541,6603)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(107,0):", $t27} $t27 == $t27;
        goto L23;
    }

    // $t70 := borrow_field<0xbb::tick::TickInfo>.liquidity_net($t0) at ./sources/v3/tick.move:138:17+18
    $t70 := $ChildMutation($t0, 1, $Dereference($t0)->$liquidity_net);

    // write_ref($t70, $t69) at ./sources/v3/tick.move:138:17+83
    $t70 := $UpdateMutation($t70, $t69);

    // write_back[Reference($t0).liquidity_net (0xbb::i128::I128)]($t70) at ./sources/v3/tick.move:138:17+83
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_TickInfo'_liquidity_net($Dereference($t0), $Dereference($t70)));

    // trace_local[info]($t0) at ./sources/v3/tick.move:138:17+83
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,0,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // goto L17 at ./sources/v3/tick.move:138:17+83
    goto L17;

    // label L4 at ./sources/v3/tick.move:120:17+5
    assume {:print "$at(25,5844,5849)"} true;
L4:

    // $t71 := false at ./sources/v3/tick.move:120:17+5
    assume {:print "$at(25,5844,5849)"} true;
    $t71 := false;
    assume $IsValid'bool'($t71);

    // $t18 := $t71 at ./sources/v3/tick.move:120:17+5
    $t18 := $t71;

    // trace_local[$t31]($t71) at ./sources/v3/tick.move:120:17+5
    assume {:print "$track_local(107,0,18):", $t71} $t71 == $t71;

    // goto L20 at ./sources/v3/tick.move:120:17+5
    goto L20;

    // label L2 at ./sources/v3/tick.move:123:13+5
    assume {:print "$at(25,5893,5898)"} true;
L2:

    // $t72 := false at ./sources/v3/tick.move:123:13+5
    assume {:print "$at(25,5893,5898)"} true;
    $t72 := false;
    assume $IsValid'bool'($t72);

    // $t18 := $t72 at ./sources/v3/tick.move:123:13+5
    $t18 := $t72;

    // trace_local[$t31]($t72) at ./sources/v3/tick.move:123:13+5
    assume {:print "$track_local(107,0,18):", $t72} $t72 == $t72;

    // goto L20 at ./sources/v3/tick.move:123:13+5
    goto L20;

    // label L0 at ./sources/v3/tick.move:108:62+20
    assume {:print "$at(25,5159,5179)"} true;
L0:

    // $t73 := get_field<0xbb::tick::TickInfo>.liquidity_gross($t0) at ./sources/v3/tick.move:108:62+20
    assume {:print "$at(25,5159,5179)"} true;
    $t73 := $Dereference($t0)->$liquidity_gross;

    // $t74 := liquidity_math::sub_delta($t73, $t8) on_abort goto L23 with $t27 at ./sources/v3/tick.move:108:36+64
    call $t74 := $bb_liquidity_math_sub_delta($t73, $t8);
    if ($abort_flag) {
        assume {:print "$at(25,5133,5197)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(107,0):", $t27} $t27 == $t27;
        goto L23;
    }

    // $t75 := borrow_field<0xbb::tick::TickInfo>.liquidity_gross($t0) at ./sources/v3/tick.move:108:13+20
    $t75 := $ChildMutation($t0, 0, $Dereference($t0)->$liquidity_gross);

    // write_ref($t75, $t74) at ./sources/v3/tick.move:108:13+87
    $t75 := $UpdateMutation($t75, $t74);

    // write_back[Reference($t0).liquidity_gross (u128)]($t75) at ./sources/v3/tick.move:108:13+87
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_TickInfo'_liquidity_gross($Dereference($t0), $Dereference($t75)));

    // trace_local[info]($t0) at ./sources/v3/tick.move:108:13+87
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,0,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // goto L21 at ./sources/v3/tick.move:108:13+87
    goto L21;

    // label L22 at ./sources/v3/tick.move:161:5+1
    assume {:print "$at(25,7323,7324)"} true;
L22:

    // return $t19 at ./sources/v3/tick.move:161:5+1
    assume {:print "$at(25,7323,7324)"} true;
    $ret0 := $t19;
    $ret1 := $t0;
    return;

    // label L23 at ./sources/v3/tick.move:161:5+1
L23:

    // abort($t27) at ./sources/v3/tick.move:161:5+1
    assume {:print "$at(25,7323,7324)"} true;
    $abort_code := $t27;
    $abort_flag := true;
    return;

}

// fun tick::empty [baseline] at ./sources/v3/tick.move:59:5+1617
procedure {:inline 1} $bb_tick_empty() returns ($ret0: $bb_tick_TickInfo)
{
    // declare local variables
    var $t0: int;
    var $t1: $bb_i128_I128;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: Vec (int);
    var $t9: int;
    var $t10: bool;
    var $t11: $bb_tick_TickInfo;
    var $temp_0'$bb_tick_TickInfo': $bb_tick_TickInfo;

    // bytecode translation starts here
    // $t0 := 0 at ./sources/v3/tick.move:63:30+1
    assume {:print "$at(25,2643,2644)"} true;
    $t0 := 0;
    assume $IsValid'u128'($t0);

    // $t1 := i128::zero() on_abort goto L2 with $t2 at ./sources/v3/tick.move:65:28+12
    assume {:print "$at(25,2788,2800)"} true;
    call $t1 := $bb_i128_zero();
    if ($abort_flag) {
        assume {:print "$at(25,2788,2800)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(107,1):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := 0 at ./sources/v3/tick.move:68:35+1
    assume {:print "$at(25,3053,3054)"} true;
    $t3 := 0;
    assume $IsValid'u128'($t3);

    // $t4 := 0 at ./sources/v3/tick.move:69:35+1
    assume {:print "$at(25,3090,3091)"} true;
    $t4 := 0;
    assume $IsValid'u128'($t4);

    // $t5 := 0 at ./sources/v3/tick.move:71:38+1
    assume {:print "$at(25,3201,3202)"} true;
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t6 := 0 at ./sources/v3/tick.move:74:51+1
    assume {:print "$at(25,3472,3473)"} true;
    $t6 := 0;
    assume $IsValid'u128'($t6);

    // $t7 := 0 at ./sources/v3/tick.move:75:54+1
    assume {:print "$at(25,3528,3529)"} true;
    $t7 := 0;
    assume $IsValid'u128'($t7);

    // $t8 := vector::empty<u128>() on_abort goto L2 with $t2 at ./sources/v3/tick.move:76:56+21
    assume {:print "$at(25,3586,3607)"} true;
    call $t8 := $1_vector_empty'u128'();
    if ($abort_flag) {
        assume {:print "$at(25,3586,3607)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(107,1):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t9 := 0 at ./sources/v3/tick.move:79:30+1
    assume {:print "$at(25,3837,3838)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // $t10 := false at ./sources/v3/tick.move:82:26+5
    assume {:print "$at(25,4088,4093)"} true;
    $t10 := false;
    assume $IsValid'bool'($t10);

    // $t11 := pack 0xbb::tick::TickInfo($t0, $t1, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10) at ./sources/v3/tick.move:61:9+1571
    assume {:print "$at(25,2533,4104)"} true;
    $t11 := $bb_tick_TickInfo($t0, $t1, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10);

    // trace_return[0]($t11) at ./sources/v3/tick.move:61:9+1571
    assume {:print "$track_return(107,1,0):", $t11} $t11 == $t11;

    // label L1 at ./sources/v3/tick.move:84:5+1
    assume {:print "$at(25,4109,4110)"} true;
L1:

    // return $t11 at ./sources/v3/tick.move:84:5+1
    assume {:print "$at(25,4109,4110)"} true;
    $ret0 := $t11;
    return;

    // label L2 at ./sources/v3/tick.move:84:5+1
L2:

    // abort($t2) at ./sources/v3/tick.move:84:5+1
    assume {:print "$at(25,4109,4110)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun tick::get_emissions_per_liquidity_incentive_inside [baseline] at ./sources/v3/tick.move:291:5+2336
procedure {:inline 1} $bb_tick_get_emissions_per_liquidity_incentive_inside(_$t0: $bb_tick_TickInfo, _$t1: $bb_tick_TickInfo, _$t2: $bb_i32_I32, _$t3: $bb_i32_I32, _$t4: $bb_i32_I32, _$t5: Vec (int)) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t6: Vec (int);
    var $t7: Vec (int);
    var $t8: Vec (int);
    var $t9: int;
    var $t10: int;
    var $t11: Vec (int);
    var $t12: int;
    var $t13: Vec (int);
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: Vec (int);
    var $t18: bool;
    var $t19: Vec (int);
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: bool;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (Vec (int));
    var $t32: Vec (int);
    var $t33: int;
    var $t34: int;
    var $t35: bool;
    var $t36: int;
    var $t37: Vec (int);
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: $Mutation (Vec (int));
    var $t43: Vec (int);
    var $t44: int;
    var $t45: int;
    var $t46: bool;
    var $t47: int;
    var $t48: Vec (int);
    var $t49: int;
    var $t50: int;
    var $t51: int;
    var $t52: int;
    var $t53: $Mutation (Vec (int));
    var $t54: Vec (int);
    var $t0: $bb_tick_TickInfo;
    var $t1: $bb_tick_TickInfo;
    var $t2: $bb_i32_I32;
    var $t3: $bb_i32_I32;
    var $t4: $bb_i32_I32;
    var $t5: Vec (int);
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'$bb_tick_TickInfo': $bb_tick_TickInfo;
    var $temp_0'u128': int;
    var $temp_0'u64': int;
    var $temp_0'vec'u128'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // trace_local[tick_lower_info]($t0) at ./sources/v3/tick.move:291:5+1
    assume {:print "$at(25,12398,12399)"} true;
    assume {:print "$track_local(107,3,0):", $t0} $t0 == $t0;

    // trace_local[tick_upper_info]($t1) at ./sources/v3/tick.move:291:5+1
    assume {:print "$track_local(107,3,1):", $t1} $t1 == $t1;

    // trace_local[tick_lower]($t2) at ./sources/v3/tick.move:291:5+1
    assume {:print "$track_local(107,3,2):", $t2} $t2 == $t2;

    // trace_local[tick_upper]($t3) at ./sources/v3/tick.move:291:5+1
    assume {:print "$track_local(107,3,3):", $t3} $t3 == $t3;

    // trace_local[tick_current]($t4) at ./sources/v3/tick.move:291:5+1
    assume {:print "$track_local(107,3,4):", $t4} $t4 == $t4;

    // trace_local[emissions_per_liquidity_global]($t5) at ./sources/v3/tick.move:291:5+1
    assume {:print "$track_local(107,3,5):", $t5} $t5 == $t5;

    // $t15 := i32::gte($t4, $t2) on_abort goto L19 with $t16 at ./sources/v3/tick.move:300:49+34
    assume {:print "$at(25,12764,12798)"} true;
    call $t15 := $bb_i32_gte($t4, $t2);
    if ($abort_flag) {
        assume {:print "$at(25,12764,12798)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // if ($t15) goto L1 else goto L0 at ./sources/v3/tick.move:300:45+602
    if ($t15) { goto L1; } else { goto L0; }

    // label L1 at ./sources/v3/tick.move:301:13+15
    assume {:print "$at(25,12814,12829)"} true;
L1:

    // $t17 := get_field<0xbb::tick::TickInfo>.emissions_per_liquidity_incentive_outside($t0) at ./sources/v3/tick.move:301:13+57
    assume {:print "$at(25,12814,12871)"} true;
    $t17 := $t0->$emissions_per_liquidity_incentive_outside;

    // $t6 := $t17 at ./sources/v3/tick.move:301:13+57
    $t6 := $t17;

    // trace_local[emissions_per_liquidity_below]($t17) at ./sources/v3/tick.move:301:13+57
    assume {:print "$track_local(107,3,6):", $t17} $t17 == $t17;

    // label L14 at ./sources/v3/tick.move:317:57+12
    assume {:print "$at(25,13459,13471)"} true;
L14:

    // $t18 := i32::lt($t4, $t3) on_abort goto L19 with $t16 at ./sources/v3/tick.move:317:49+33
    assume {:print "$at(25,13451,13484)"} true;
    call $t18 := $bb_i32_lt($t4, $t3);
    if ($abort_flag) {
        assume {:print "$at(25,13451,13484)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // if ($t18) goto L3 else goto L2 at ./sources/v3/tick.move:317:45+601
    if ($t18) { goto L3; } else { goto L2; }

    // label L3 at ./sources/v3/tick.move:318:13+15
    assume {:print "$at(25,13500,13515)"} true;
L3:

    // $t19 := get_field<0xbb::tick::TickInfo>.emissions_per_liquidity_incentive_outside($t1) at ./sources/v3/tick.move:318:13+57
    assume {:print "$at(25,13500,13557)"} true;
    $t19 := $t1->$emissions_per_liquidity_incentive_outside;

    // $t7 := $t19 at ./sources/v3/tick.move:318:13+57
    $t7 := $t19;

    // trace_local[emissions_per_liquidity_above]($t19) at ./sources/v3/tick.move:318:13+57
    assume {:print "$track_local(107,3,7):", $t19} $t19 == $t19;

    // label L10 at ./sources/v3/tick.move:333:56+21
    assume {:print "$at(25,14106,14127)"} true;
L10:

    // $t8 := vector::empty<u128>() on_abort goto L19 with $t16 at ./sources/v3/tick.move:333:56+21
    assume {:print "$at(25,14106,14127)"} true;
    call $t8 := $1_vector_empty'u128'();
    if ($abort_flag) {
        assume {:print "$at(25,14106,14127)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // trace_local[emissions_per_liquidity_incentive_inside]($t8) at ./sources/v3/tick.move:333:56+21
    assume {:print "$track_local(107,3,8):", $t8} $t8 == $t8;

    // $t20 := 0 at ./sources/v3/tick.move:334:17+1
    assume {:print "$at(25,14145,14146)"} true;
    $t20 := 0;
    assume $IsValid'u64'($t20);

    // trace_local[i]($t20) at ./sources/v3/tick.move:334:17+1
    assume {:print "$track_local(107,3,9):", $t20} $t20 == $t20;

    // label L6 at ./sources/v3/tick.move:335:15+1
    assume {:print "$at(25,14162,14163)"} true;
L6:

    // $t8 := havoc[val]() at ./sources/v3/tick.move:335:15+1
    assume {:print "$at(25,14162,14163)"} true;
    havoc $t8;

    // assume WellFormed($t8) at ./sources/v3/tick.move:335:15+1
    assume $IsValid'vec'u128''($t8);

    // $t9 := havoc[val]() at ./sources/v3/tick.move:335:15+1
    havoc $t9;

    // assume WellFormed($t9) at ./sources/v3/tick.move:335:15+1
    assume $IsValid'u64'($t9);

    // $t21 := havoc[val]() at ./sources/v3/tick.move:335:15+1
    havoc $t21;

    // assume WellFormed($t21) at ./sources/v3/tick.move:335:15+1
    assume $IsValid'u64'($t21);

    // $t22 := havoc[val]() at ./sources/v3/tick.move:335:15+1
    havoc $t22;

    // assume WellFormed($t22) at ./sources/v3/tick.move:335:15+1
    assume $IsValid'bool'($t22);

    // $t23 := havoc[val]() at ./sources/v3/tick.move:335:15+1
    havoc $t23;

    // assume WellFormed($t23) at ./sources/v3/tick.move:335:15+1
    assume $IsValid'u128'($t23);

    // $t24 := havoc[val]() at ./sources/v3/tick.move:335:15+1
    havoc $t24;

    // assume WellFormed($t24) at ./sources/v3/tick.move:335:15+1
    assume $IsValid'u128'($t24);

    // $t25 := havoc[val]() at ./sources/v3/tick.move:335:15+1
    havoc $t25;

    // assume WellFormed($t25) at ./sources/v3/tick.move:335:15+1
    assume $IsValid'u128'($t25);

    // $t26 := havoc[val]() at ./sources/v3/tick.move:335:15+1
    havoc $t26;

    // assume WellFormed($t26) at ./sources/v3/tick.move:335:15+1
    assume $IsValid'u128'($t26);

    // $t27 := havoc[val]() at ./sources/v3/tick.move:335:15+1
    havoc $t27;

    // assume WellFormed($t27) at ./sources/v3/tick.move:335:15+1
    assume $IsValid'u128'($t27);

    // $t28 := havoc[val]() at ./sources/v3/tick.move:335:15+1
    havoc $t28;

    // assume WellFormed($t28) at ./sources/v3/tick.move:335:15+1
    assume $IsValid'bool'($t28);

    // $t29 := havoc[val]() at ./sources/v3/tick.move:335:15+1
    havoc $t29;

    // assume WellFormed($t29) at ./sources/v3/tick.move:335:15+1
    assume $IsValid'u64'($t29);

    // $t30 := havoc[val]() at ./sources/v3/tick.move:335:15+1
    havoc $t30;

    // assume WellFormed($t30) at ./sources/v3/tick.move:335:15+1
    assume $IsValid'u64'($t30);

    // $t31 := havoc[mut_all]() at ./sources/v3/tick.move:335:15+1
    havoc $t31;

    // assume WellFormed($t31) at ./sources/v3/tick.move:335:15+1
    assume $IsValid'vec'u128''($Dereference($t31));

    // trace_local[emissions_per_liquidity_incentive_inside]($t8) at ./sources/v3/tick.move:335:15+1
    assume {:print "$info(): enter loop, variable(s) emissions_per_liquidity_incentive_inside, i havocked and reassigned"} true;
    assume {:print "$track_local(107,3,8):", $t8} $t8 == $t8;

    // trace_local[i]($t9) at ./sources/v3/tick.move:335:15+1
    assume {:print "$track_local(107,3,9):", $t9} $t9 == $t9;

    // assume Not(AbortFlag()) at ./sources/v3/tick.move:335:15+1
    assume !$abort_flag;

    // $t21 := vector::length<u128>($t5) on_abort goto L19 with $t16 at ./sources/v3/tick.move:335:19+39
    call $t21 := $1_vector_length'u128'($t5);
    if ($abort_flag) {
        assume {:print "$at(25,14166,14205)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // $t22 := <($t9, $t21) at ./sources/v3/tick.move:335:15+43
    call $t22 := $Lt($t9, $t21);

    // if ($t22) goto L5 else goto L4 at ./sources/v3/tick.move:335:9+521
    if ($t22) { goto L5; } else { goto L4; }

    // label L5 at ./sources/v3/tick.move:337:14+39
    assume {:print "$at(25,14265,14304)"} true;
L5:

    // $t23 := vector::borrow<u128>($t6, $t9) on_abort goto L19 with $t16 at ./sources/v3/tick.move:337:14+39
    assume {:print "$at(25,14265,14304)"} true;
    call $t23 := $1_vector_borrow'u128'($t6, $t9);
    if ($abort_flag) {
        assume {:print "$at(25,14265,14304)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // $t24 := vector::borrow<u128>($t7, $t9) on_abort goto L19 with $t16 at ./sources/v3/tick.move:338:18+39
    assume {:print "$at(25,14324,14363)"} true;
    call $t24 := $1_vector_borrow'u128'($t7, $t9);
    if ($abort_flag) {
        assume {:print "$at(25,14324,14363)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // $t25 := +($t23, $t24) on_abort goto L19 with $t16 at ./sources/v3/tick.move:337:13+99
    assume {:print "$at(25,14264,14363)"} true;
    call $t25 := $AddU128($t23, $t24);
    if ($abort_flag) {
        assume {:print "$at(25,14264,14363)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // trace_local[$t60]($t25) at ./sources/v3/tick.move:337:13+99
    assume {:print "$track_local(107,3,10):", $t25} $t25 == $t25;

    // $t26 := vector::borrow<u128>($t5, $t9) on_abort goto L19 with $t16 at ./sources/v3/tick.move:340:18+40
    assume {:print "$at(25,14447,14487)"} true;
    call $t26 := $1_vector_borrow'u128'($t5, $t9);
    if ($abort_flag) {
        assume {:print "$at(25,14447,14487)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // ($t27, $t28) := math_u128::overflowing_sub($t26, $t25) on_abort goto L19 with $t16 at ./sources/v3/tick.move:339:38+141
    assume {:print "$at(25,14402,14543)"} true;
    call $t27,$t28 := $bb_math_u128_overflowing_sub($t26, $t25);
    if ($abort_flag) {
        assume {:print "$at(25,14402,14543)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // drop($t28) at ./sources/v3/tick.move:339:38+141

    // trace_local[$t60]($t27) at ./sources/v3/tick.move:339:38+141
    assume {:print "$track_local(107,3,10):", $t27} $t27 == $t27;

    // $t31 := borrow_local($t8) at ./sources/v3/tick.move:344:13+88
    assume {:print "$at(25,14558,14646)"} true;
    $t31 := $Mutation($Local(8), EmptyVec(), $t8);

    // vector::push_back<u128>($t31, $t27) on_abort goto L19 with $t16 at ./sources/v3/tick.move:344:13+88
    call $t31 := $1_vector_push_back'u128'($t31, $t27);
    if ($abort_flag) {
        assume {:print "$at(25,14558,14646)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // write_back[LocalRoot($t8)@]($t31) at ./sources/v3/tick.move:344:13+88
    $t8 := $Dereference($t31);

    // trace_local[emissions_per_liquidity_incentive_inside]($t8) at ./sources/v3/tick.move:344:13+88
    assume {:print "$track_local(107,3,8):", $t8} $t8 == $t8;

    // $t29 := 1 at ./sources/v3/tick.move:347:18+1
    assume {:print "$at(25,14665,14666)"} true;
    $t29 := 1;
    assume $IsValid'u64'($t29);

    // $t30 := +($t9, $t29) on_abort goto L19 with $t16 at ./sources/v3/tick.move:347:13+6
    call $t30 := $AddU64($t9, $t29);
    if ($abort_flag) {
        assume {:print "$at(25,14660,14666)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // trace_local[i]($t30) at ./sources/v3/tick.move:347:13+6
    assume {:print "$track_local(107,3,9):", $t30} $t30 == $t30;

    // goto L15 at ./sources/v3/tick.move:335:9+521
    assume {:print "$at(25,14156,14677)"} true;
    goto L15;

    // label L4 at ./sources/v3/tick.move:350:9+40
    assume {:print "$at(25,14688,14728)"} true;
L4:

    // $t32 := move($t8) at ./sources/v3/tick.move:350:9+40
    assume {:print "$at(25,14688,14728)"} true;
    $t32 := $t8;

    // trace_return[0]($t32) at ./sources/v3/tick.move:298:21+2058
    assume {:print "$at(25,12676,14734)"} true;
    assume {:print "$track_return(107,3,0):", $t32} $t32 == $t32;

    // goto L18 at ./sources/v3/tick.move:298:21+2058
    goto L18;

    // label L2 at ./sources/v3/tick.move:320:35+21
    assume {:print "$at(25,13609,13630)"} true;
L2:

    // $t11 := vector::empty<u128>() on_abort goto L19 with $t16 at ./sources/v3/tick.move:320:35+21
    assume {:print "$at(25,13609,13630)"} true;
    call $t11 := $1_vector_empty'u128'();
    if ($abort_flag) {
        assume {:print "$at(25,13609,13630)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // trace_local[emissions_empty]($t11) at ./sources/v3/tick.move:320:35+21
    assume {:print "$track_local(107,3,11):", $t11} $t11 == $t11;

    // $t33 := 0 at ./sources/v3/tick.move:321:21+1
    assume {:print "$at(25,13652,13653)"} true;
    $t33 := 0;
    assume $IsValid'u64'($t33);

    // trace_local[i]($t33) at ./sources/v3/tick.move:321:21+1
    assume {:print "$track_local(107,3,9):", $t33} $t33 == $t33;

    // $t34 := vector::length<u128>($t5) on_abort goto L19 with $t16 at ./sources/v3/tick.move:322:26+39
    assume {:print "$at(25,13680,13719)"} true;
    call $t34 := $1_vector_length'u128'($t5);
    if ($abort_flag) {
        assume {:print "$at(25,13680,13719)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // trace_local[$t56]($t34) at ./sources/v3/tick.move:322:26+39
    assume {:print "$track_local(107,3,12):", $t34} $t34 == $t34;

    // label L9 at ./sources/v3/tick.move:323:19+1
    assume {:print "$at(25,13739,13740)"} true;
L9:

    // $t9 := havoc[val]() at ./sources/v3/tick.move:323:19+1
    assume {:print "$at(25,13739,13740)"} true;
    havoc $t9;

    // assume WellFormed($t9) at ./sources/v3/tick.move:323:19+1
    assume $IsValid'u64'($t9);

    // $t11 := havoc[val]() at ./sources/v3/tick.move:323:19+1
    havoc $t11;

    // assume WellFormed($t11) at ./sources/v3/tick.move:323:19+1
    assume $IsValid'vec'u128''($t11);

    // $t35 := havoc[val]() at ./sources/v3/tick.move:323:19+1
    havoc $t35;

    // assume WellFormed($t35) at ./sources/v3/tick.move:323:19+1
    assume $IsValid'bool'($t35);

    // $t36 := havoc[val]() at ./sources/v3/tick.move:323:19+1
    havoc $t36;

    // assume WellFormed($t36) at ./sources/v3/tick.move:323:19+1
    assume $IsValid'u128'($t36);

    // $t37 := havoc[val]() at ./sources/v3/tick.move:323:19+1
    havoc $t37;

    // assume WellFormed($t37) at ./sources/v3/tick.move:323:19+1
    assume $IsValid'vec'u128''($t37);

    // $t38 := havoc[val]() at ./sources/v3/tick.move:323:19+1
    havoc $t38;

    // assume WellFormed($t38) at ./sources/v3/tick.move:323:19+1
    assume $IsValid'u128'($t38);

    // $t39 := havoc[val]() at ./sources/v3/tick.move:323:19+1
    havoc $t39;

    // assume WellFormed($t39) at ./sources/v3/tick.move:323:19+1
    assume $IsValid'u128'($t39);

    // $t40 := havoc[val]() at ./sources/v3/tick.move:323:19+1
    havoc $t40;

    // assume WellFormed($t40) at ./sources/v3/tick.move:323:19+1
    assume $IsValid'u64'($t40);

    // $t41 := havoc[val]() at ./sources/v3/tick.move:323:19+1
    havoc $t41;

    // assume WellFormed($t41) at ./sources/v3/tick.move:323:19+1
    assume $IsValid'u64'($t41);

    // $t42 := havoc[mut_all]() at ./sources/v3/tick.move:323:19+1
    havoc $t42;

    // assume WellFormed($t42) at ./sources/v3/tick.move:323:19+1
    assume $IsValid'vec'u128''($Dereference($t42));

    // trace_local[i]($t9) at ./sources/v3/tick.move:323:19+1
    assume {:print "$info(): enter loop, variable(s) i, emissions_empty havocked and reassigned"} true;
    assume {:print "$track_local(107,3,9):", $t9} $t9 == $t9;

    // trace_local[emissions_empty]($t11) at ./sources/v3/tick.move:323:19+1
    assume {:print "$track_local(107,3,11):", $t11} $t11 == $t11;

    // assume Not(AbortFlag()) at ./sources/v3/tick.move:323:19+1
    assume !$abort_flag;

    // $t35 := <($t9, $t34) at ./sources/v3/tick.move:323:19+10
    call $t35 := $Lt($t9, $t34);

    // if ($t35) goto L8 else goto L7 at ./sources/v3/tick.move:323:13+276
    if ($t35) { goto L8; } else { goto L7; }

    // label L8 at ./sources/v3/tick.move:324:17+201
    assume {:print "$at(25,13769,13970)"} true;
L8:

    // $t42 := borrow_local($t11) at ./sources/v3/tick.move:324:17+201
    assume {:print "$at(25,13769,13970)"} true;
    $t42 := $Mutation($Local(11), EmptyVec(), $t11);

    // $t36 := vector::borrow<u128>($t5, $t9) on_abort goto L19 with $t16 at ./sources/v3/tick.move:325:22+40
    assume {:print "$at(25,13817,13857)"} true;
    call $t36 := $1_vector_borrow'u128'($t5, $t9);
    if ($abort_flag) {
        assume {:print "$at(25,13817,13857)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // $t37 := get_field<0xbb::tick::TickInfo>.emissions_per_liquidity_incentive_outside($t1) at ./sources/v3/tick.move:326:26+67
    assume {:print "$at(25,13885,13952)"} true;
    $t37 := $t1->$emissions_per_liquidity_incentive_outside;

    // $t38 := vector::borrow<u128>($t37, $t9) on_abort goto L19 with $t16 at ./sources/v3/tick.move:326:26+67
    call $t38 := $1_vector_borrow'u128'($t37, $t9);
    if ($abort_flag) {
        assume {:print "$at(25,13885,13952)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // $t39 := -($t36, $t38) on_abort goto L19 with $t16 at ./sources/v3/tick.move:325:21+136
    assume {:print "$at(25,13816,13952)"} true;
    call $t39 := $Sub($t36, $t38);
    if ($abort_flag) {
        assume {:print "$at(25,13816,13952)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // vector::push_back<u128>($t42, $t39) on_abort goto L19 with $t16 at ./sources/v3/tick.move:324:17+201
    assume {:print "$at(25,13769,13970)"} true;
    call $t42 := $1_vector_push_back'u128'($t42, $t39);
    if ($abort_flag) {
        assume {:print "$at(25,13769,13970)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // write_back[LocalRoot($t11)@]($t42) at ./sources/v3/tick.move:324:17+201
    $t11 := $Dereference($t42);

    // trace_local[emissions_empty]($t11) at ./sources/v3/tick.move:324:17+201
    assume {:print "$track_local(107,3,11):", $t11} $t11 == $t11;

    // $t40 := 1 at ./sources/v3/tick.move:328:22+1
    assume {:print "$at(25,13993,13994)"} true;
    $t40 := 1;
    assume $IsValid'u64'($t40);

    // $t41 := +($t9, $t40) on_abort goto L19 with $t16 at ./sources/v3/tick.move:328:17+6
    call $t41 := $AddU64($t9, $t40);
    if ($abort_flag) {
        assume {:print "$at(25,13988,13994)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // trace_local[i]($t41) at ./sources/v3/tick.move:328:17+6
    assume {:print "$track_local(107,3,9):", $t41} $t41 == $t41;

    // goto L16 at ./sources/v3/tick.move:323:13+276
    assume {:print "$at(25,13733,14009)"} true;
    goto L16;

    // label L7 at ./sources/v3/tick.move:330:13+15
    assume {:print "$at(25,14023,14038)"} true;
L7:

    // $t43 := move($t11) at ./sources/v3/tick.move:330:13+15
    assume {:print "$at(25,14023,14038)"} true;
    $t43 := $t11;

    // $t7 := $t43 at ./sources/v3/tick.move:330:13+15
    $t7 := $t43;

    // trace_local[emissions_per_liquidity_above]($t43) at ./sources/v3/tick.move:330:13+15
    assume {:print "$track_local(107,3,7):", $t43} $t43 == $t43;

    // goto L10 at ./sources/v3/tick.move:330:13+15
    goto L10;

    // label L0 at ./sources/v3/tick.move:303:35+21
    assume {:print "$at(25,12923,12944)"} true;
L0:

    // $t13 := vector::empty<u128>() on_abort goto L19 with $t16 at ./sources/v3/tick.move:303:35+21
    assume {:print "$at(25,12923,12944)"} true;
    call $t13 := $1_vector_empty'u128'();
    if ($abort_flag) {
        assume {:print "$at(25,12923,12944)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // trace_local[emissions_empty]($t13) at ./sources/v3/tick.move:303:35+21
    assume {:print "$track_local(107,3,13):", $t13} $t13 == $t13;

    // $t44 := 0 at ./sources/v3/tick.move:304:21+1
    assume {:print "$at(25,12966,12967)"} true;
    $t44 := 0;
    assume $IsValid'u64'($t44);

    // trace_local[$t52]($t44) at ./sources/v3/tick.move:304:21+1
    assume {:print "$track_local(107,3,14):", $t44} $t44 == $t44;

    // $t45 := vector::length<u128>($t5) on_abort goto L19 with $t16 at ./sources/v3/tick.move:305:26+39
    assume {:print "$at(25,12994,13033)"} true;
    call $t45 := $1_vector_length'u128'($t5);
    if ($abort_flag) {
        assume {:print "$at(25,12994,13033)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // trace_local[i]($t45) at ./sources/v3/tick.move:305:26+39
    assume {:print "$track_local(107,3,9):", $t45} $t45 == $t45;

    // label L13 at ./sources/v3/tick.move:306:19+1
    assume {:print "$at(25,13053,13054)"} true;
L13:

    // $t13 := havoc[val]() at ./sources/v3/tick.move:306:19+1
    assume {:print "$at(25,13053,13054)"} true;
    havoc $t13;

    // assume WellFormed($t13) at ./sources/v3/tick.move:306:19+1
    assume $IsValid'vec'u128''($t13);

    // $t14 := havoc[val]() at ./sources/v3/tick.move:306:19+1
    havoc $t14;

    // assume WellFormed($t14) at ./sources/v3/tick.move:306:19+1
    assume $IsValid'u64'($t14);

    // $t46 := havoc[val]() at ./sources/v3/tick.move:306:19+1
    havoc $t46;

    // assume WellFormed($t46) at ./sources/v3/tick.move:306:19+1
    assume $IsValid'bool'($t46);

    // $t47 := havoc[val]() at ./sources/v3/tick.move:306:19+1
    havoc $t47;

    // assume WellFormed($t47) at ./sources/v3/tick.move:306:19+1
    assume $IsValid'u128'($t47);

    // $t48 := havoc[val]() at ./sources/v3/tick.move:306:19+1
    havoc $t48;

    // assume WellFormed($t48) at ./sources/v3/tick.move:306:19+1
    assume $IsValid'vec'u128''($t48);

    // $t49 := havoc[val]() at ./sources/v3/tick.move:306:19+1
    havoc $t49;

    // assume WellFormed($t49) at ./sources/v3/tick.move:306:19+1
    assume $IsValid'u128'($t49);

    // $t50 := havoc[val]() at ./sources/v3/tick.move:306:19+1
    havoc $t50;

    // assume WellFormed($t50) at ./sources/v3/tick.move:306:19+1
    assume $IsValid'u128'($t50);

    // $t51 := havoc[val]() at ./sources/v3/tick.move:306:19+1
    havoc $t51;

    // assume WellFormed($t51) at ./sources/v3/tick.move:306:19+1
    assume $IsValid'u64'($t51);

    // $t52 := havoc[val]() at ./sources/v3/tick.move:306:19+1
    havoc $t52;

    // assume WellFormed($t52) at ./sources/v3/tick.move:306:19+1
    assume $IsValid'u64'($t52);

    // $t53 := havoc[mut_all]() at ./sources/v3/tick.move:306:19+1
    havoc $t53;

    // assume WellFormed($t53) at ./sources/v3/tick.move:306:19+1
    assume $IsValid'vec'u128''($Dereference($t53));

    // trace_local[emissions_empty]($t13) at ./sources/v3/tick.move:306:19+1
    assume {:print "$info(): enter loop, variable(s) emissions_empty, $t52 havocked and reassigned"} true;
    assume {:print "$track_local(107,3,13):", $t13} $t13 == $t13;

    // trace_local[$t52]($t14) at ./sources/v3/tick.move:306:19+1
    assume {:print "$track_local(107,3,14):", $t14} $t14 == $t14;

    // assume Not(AbortFlag()) at ./sources/v3/tick.move:306:19+1
    assume !$abort_flag;

    // $t46 := <($t14, $t45) at ./sources/v3/tick.move:306:19+10
    call $t46 := $Lt($t14, $t45);

    // if ($t46) goto L12 else goto L11 at ./sources/v3/tick.move:306:13+276
    if ($t46) { goto L12; } else { goto L11; }

    // label L12 at ./sources/v3/tick.move:307:17+201
    assume {:print "$at(25,13083,13284)"} true;
L12:

    // $t53 := borrow_local($t13) at ./sources/v3/tick.move:307:17+201
    assume {:print "$at(25,13083,13284)"} true;
    $t53 := $Mutation($Local(13), EmptyVec(), $t13);

    // $t47 := vector::borrow<u128>($t5, $t14) on_abort goto L19 with $t16 at ./sources/v3/tick.move:308:22+40
    assume {:print "$at(25,13131,13171)"} true;
    call $t47 := $1_vector_borrow'u128'($t5, $t14);
    if ($abort_flag) {
        assume {:print "$at(25,13131,13171)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // $t48 := get_field<0xbb::tick::TickInfo>.emissions_per_liquidity_incentive_outside($t0) at ./sources/v3/tick.move:309:26+67
    assume {:print "$at(25,13199,13266)"} true;
    $t48 := $t0->$emissions_per_liquidity_incentive_outside;

    // $t49 := vector::borrow<u128>($t48, $t14) on_abort goto L19 with $t16 at ./sources/v3/tick.move:309:26+67
    call $t49 := $1_vector_borrow'u128'($t48, $t14);
    if ($abort_flag) {
        assume {:print "$at(25,13199,13266)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // $t50 := -($t47, $t49) on_abort goto L19 with $t16 at ./sources/v3/tick.move:308:21+136
    assume {:print "$at(25,13130,13266)"} true;
    call $t50 := $Sub($t47, $t49);
    if ($abort_flag) {
        assume {:print "$at(25,13130,13266)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // vector::push_back<u128>($t53, $t50) on_abort goto L19 with $t16 at ./sources/v3/tick.move:307:17+201
    assume {:print "$at(25,13083,13284)"} true;
    call $t53 := $1_vector_push_back'u128'($t53, $t50);
    if ($abort_flag) {
        assume {:print "$at(25,13083,13284)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // write_back[LocalRoot($t13)@]($t53) at ./sources/v3/tick.move:307:17+201
    $t13 := $Dereference($t53);

    // trace_local[emissions_empty]($t13) at ./sources/v3/tick.move:307:17+201
    assume {:print "$track_local(107,3,13):", $t13} $t13 == $t13;

    // $t51 := 1 at ./sources/v3/tick.move:311:22+1
    assume {:print "$at(25,13307,13308)"} true;
    $t51 := 1;
    assume $IsValid'u64'($t51);

    // $t52 := +($t14, $t51) on_abort goto L19 with $t16 at ./sources/v3/tick.move:311:17+6
    call $t52 := $AddU64($t14, $t51);
    if ($abort_flag) {
        assume {:print "$at(25,13302,13308)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(107,3):", $t16} $t16 == $t16;
        goto L19;
    }

    // trace_local[$t52]($t52) at ./sources/v3/tick.move:311:17+6
    assume {:print "$track_local(107,3,14):", $t52} $t52 == $t52;

    // goto L17 at ./sources/v3/tick.move:306:13+276
    assume {:print "$at(25,13047,13323)"} true;
    goto L17;

    // label L11 at ./sources/v3/tick.move:313:13+15
    assume {:print "$at(25,13337,13352)"} true;
L11:

    // $t54 := move($t13) at ./sources/v3/tick.move:313:13+15
    assume {:print "$at(25,13337,13352)"} true;
    $t54 := $t13;

    // $t6 := $t54 at ./sources/v3/tick.move:313:13+15
    $t6 := $t54;

    // trace_local[emissions_per_liquidity_below]($t54) at ./sources/v3/tick.move:313:13+15
    assume {:print "$track_local(107,3,6):", $t54} $t54 == $t54;

    // goto L14 at ./sources/v3/tick.move:313:13+15
    goto L14;

    // label L15 at ./sources/v3/tick.move:313:13+15
    // Loop invariant checking block for the loop started with header: L6
L15:

    // stop() at ./sources/v3/tick.move:313:13+15
    assume {:print "$at(25,13337,13352)"} true;
    assume false;
    return;

    // label L16 at ./sources/v3/tick.move:313:13+15
    // Loop invariant checking block for the loop started with header: L9
L16:

    // stop() at ./sources/v3/tick.move:313:13+15
    assume {:print "$at(25,13337,13352)"} true;
    assume false;
    return;

    // label L17 at ./sources/v3/tick.move:313:13+15
    // Loop invariant checking block for the loop started with header: L13
L17:

    // stop() at ./sources/v3/tick.move:313:13+15
    assume {:print "$at(25,13337,13352)"} true;
    assume false;
    return;

    // label L18 at ./sources/v3/tick.move:351:5+1
    assume {:print "$at(25,14733,14734)"} true;
L18:

    // return $t32 at ./sources/v3/tick.move:351:5+1
    assume {:print "$at(25,14733,14734)"} true;
    $ret0 := $t32;
    return;

    // label L19 at ./sources/v3/tick.move:351:5+1
L19:

    // abort($t16) at ./sources/v3/tick.move:351:5+1
    assume {:print "$at(25,14733,14734)"} true;
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun tick::get_emissions_per_liquidity_outside [baseline] at ./sources/v3/tick.move:462:5+140
procedure {:inline 1} $bb_tick_get_emissions_per_liquidity_outside(_$t0: $bb_tick_TickInfo) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t0: $bb_tick_TickInfo;
    var $temp_0'$bb_tick_TickInfo': $bb_tick_TickInfo;
    var $temp_0'vec'u128'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[info]($t0) at ./sources/v3/tick.move:462:5+1
    assume {:print "$at(25,19161,19162)"} true;
    assume {:print "$track_local(107,4,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0xbb::tick::TickInfo>.emissions_per_liquidity_incentive_outside($t0) at ./sources/v3/tick.move:463:9+46
    assume {:print "$at(25,19249,19295)"} true;
    $t1 := $t0->$emissions_per_liquidity_incentive_outside;

    // trace_return[0]($t1) at ./sources/v3/tick.move:463:9+46
    assume {:print "$track_return(107,4,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/v3/tick.move:464:5+1
    assume {:print "$at(25,19300,19301)"} true;
L1:

    // return $t1 at ./sources/v3/tick.move:464:5+1
    assume {:print "$at(25,19300,19301)"} true;
    $ret0 := $t1;
    return;

}

// fun tick::get_fee_growth_inside [baseline] at ./sources/v3/tick.move:255:5+1526
procedure {:inline 1} $bb_tick_get_fee_growth_inside(_$t0: $bb_tick_TickInfo, _$t1: $bb_tick_TickInfo, _$t2: $bb_i32_I32, _$t3: $bb_i32_I32, _$t4: $bb_i32_I32, _$t5: int, _$t6: int) returns ($ret0: int, $ret1: int)
{
    // declare local variables
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: bool;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t0: $bb_tick_TickInfo;
    var $t1: $bb_tick_TickInfo;
    var $t2: $bb_i32_I32;
    var $t3: $bb_i32_I32;
    var $t4: $bb_i32_I32;
    var $t5: int;
    var $t6: int;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'$bb_tick_TickInfo': $bb_tick_TickInfo;
    var $temp_0'u128': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;

    // bytecode translation starts here
    // trace_local[tick_lower_info]($t0) at ./sources/v3/tick.move:255:5+1
    assume {:print "$at(25,10866,10867)"} true;
    assume {:print "$track_local(107,5,0):", $t0} $t0 == $t0;

    // trace_local[tick_upper_info]($t1) at ./sources/v3/tick.move:255:5+1
    assume {:print "$track_local(107,5,1):", $t1} $t1 == $t1;

    // trace_local[tick_lower]($t2) at ./sources/v3/tick.move:255:5+1
    assume {:print "$track_local(107,5,2):", $t2} $t2 == $t2;

    // trace_local[tick_upper]($t3) at ./sources/v3/tick.move:255:5+1
    assume {:print "$track_local(107,5,3):", $t3} $t3 == $t3;

    // trace_local[tick_current]($t4) at ./sources/v3/tick.move:255:5+1
    assume {:print "$track_local(107,5,4):", $t4} $t4 == $t4;

    // trace_local[fee_growth_global_a]($t5) at ./sources/v3/tick.move:255:5+1
    assume {:print "$track_local(107,5,5):", $t5} $t5 == $t5;

    // trace_local[fee_growth_global_b]($t6) at ./sources/v3/tick.move:255:5+1
    assume {:print "$track_local(107,5,6):", $t6} $t6 == $t6;

    // $t13 := i32::gte($t4, $t2) on_abort goto L7 with $t14 at ./sources/v3/tick.move:265:60+34
    assume {:print "$at(25,11236,11270)"} true;
    call $t13 := $bb_i32_gte($t4, $t2);
    if ($abort_flag) {
        assume {:print "$at(25,11236,11270)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(107,5):", $t14} $t14 == $t14;
        goto L7;
    }

    // if ($t13) goto L1 else goto L0 at ./sources/v3/tick.move:265:56+336
    if ($t13) { goto L1; } else { goto L0; }

    // label L1 at ./sources/v3/tick.move:266:14+15
    assume {:print "$at(25,11287,11302)"} true;
L1:

    // $t15 := get_field<0xbb::tick::TickInfo>.fee_growth_outside_a($t0) at ./sources/v3/tick.move:266:14+36
    assume {:print "$at(25,11287,11323)"} true;
    $t15 := $t0->$fee_growth_outside_a;

    // $t7 := $t15 at ./sources/v3/tick.move:266:14+36
    $t7 := $t15;

    // trace_local[fee_growth_below_a]($t15) at ./sources/v3/tick.move:266:14+36
    assume {:print "$track_local(107,5,7):", $t15} $t15 == $t15;

    // $t16 := get_field<0xbb::tick::TickInfo>.fee_growth_outside_b($t0) at ./sources/v3/tick.move:266:52+36
    $t16 := $t0->$fee_growth_outside_b;

    // $t8 := $t16 at ./sources/v3/tick.move:266:52+36
    $t8 := $t16;

    // trace_local[fee_growth_below_b]($t16) at ./sources/v3/tick.move:266:52+36
    assume {:print "$track_local(107,5,8):", $t16} $t16 == $t16;

    // label L5 at ./sources/v3/tick.move:275:68+12
    assume {:print "$at(25,11676,11688)"} true;
L5:

    // $t17 := i32::lt($t4, $t3) on_abort goto L7 with $t14 at ./sources/v3/tick.move:275:60+33
    assume {:print "$at(25,11668,11701)"} true;
    call $t17 := $bb_i32_lt($t4, $t3);
    if ($abort_flag) {
        assume {:print "$at(25,11668,11701)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(107,5):", $t14} $t14 == $t14;
        goto L7;
    }

    // if ($t17) goto L3 else goto L2 at ./sources/v3/tick.move:275:56+335
    if ($t17) { goto L3; } else { goto L2; }

    // label L3 at ./sources/v3/tick.move:276:14+15
    assume {:print "$at(25,11718,11733)"} true;
L3:

    // $t18 := get_field<0xbb::tick::TickInfo>.fee_growth_outside_a($t1) at ./sources/v3/tick.move:276:14+36
    assume {:print "$at(25,11718,11754)"} true;
    $t18 := $t1->$fee_growth_outside_a;

    // $t9 := $t18 at ./sources/v3/tick.move:276:14+36
    $t9 := $t18;

    // trace_local[fee_growth_above_a]($t18) at ./sources/v3/tick.move:276:14+36
    assume {:print "$track_local(107,5,9):", $t18} $t18 == $t18;

    // $t19 := get_field<0xbb::tick::TickInfo>.fee_growth_outside_b($t1) at ./sources/v3/tick.move:276:52+36
    $t19 := $t1->$fee_growth_outside_b;

    // $t10 := $t19 at ./sources/v3/tick.move:276:52+36
    $t10 := $t19;

    // trace_local[fee_growth_above_b]($t19) at ./sources/v3/tick.move:276:52+36
    assume {:print "$track_local(107,5,10):", $t19} $t19 == $t19;

    // label L4 at ./sources/v3/tick.move:283:33+18
    assume {:print "$at(25,12033,12051)"} true;
L4:

    // $t20 := +($t7, $t9) on_abort goto L7 with $t14 at ./sources/v3/tick.move:283:33+39
    assume {:print "$at(25,12033,12072)"} true;
    call $t20 := $AddU128($t7, $t9);
    if ($abort_flag) {
        assume {:print "$at(25,12033,12072)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(107,5):", $t14} $t14 == $t14;
        goto L7;
    }

    // trace_local[$t42]($t20) at ./sources/v3/tick.move:283:33+39
    assume {:print "$track_local(107,5,11):", $t20} $t20 == $t20;

    // $t21 := +($t8, $t10) on_abort goto L7 with $t14 at ./sources/v3/tick.move:284:33+39
    assume {:print "$at(25,12106,12145)"} true;
    call $t21 := $AddU128($t8, $t10);
    if ($abort_flag) {
        assume {:print "$at(25,12106,12145)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(107,5):", $t14} $t14 == $t14;
        goto L7;
    }

    // trace_local[$t44]($t21) at ./sources/v3/tick.move:284:33+39
    assume {:print "$track_local(107,5,12):", $t21} $t21 == $t21;

    // ($t22, $t23) := math_u128::overflowing_sub($t5, $t20) on_abort goto L7 with $t14 at ./sources/v3/tick.move:285:38+66
    assume {:print "$at(25,12184,12250)"} true;
    call $t22,$t23 := $bb_math_u128_overflowing_sub($t5, $t20);
    if ($abort_flag) {
        assume {:print "$at(25,12184,12250)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(107,5):", $t14} $t14 == $t14;
        goto L7;
    }

    // drop($t23) at ./sources/v3/tick.move:285:38+66

    // ($t24, $t25) := math_u128::overflowing_sub($t6, $t21) on_abort goto L7 with $t14 at ./sources/v3/tick.move:286:38+66
    assume {:print "$at(25,12289,12355)"} true;
    call $t24,$t25 := $bb_math_u128_overflowing_sub($t6, $t21);
    if ($abort_flag) {
        assume {:print "$at(25,12289,12355)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(107,5):", $t14} $t14 == $t14;
        goto L7;
    }

    // drop($t25) at ./sources/v3/tick.move:286:38+66

    // trace_return[0]($t22) at ./sources/v3/tick.move:288:9+20
    assume {:print "$at(25,12366,12386)"} true;
    assume {:print "$track_return(107,5,0):", $t22} $t22 == $t22;

    // trace_return[1]($t24) at ./sources/v3/tick.move:288:9+20
    assume {:print "$track_return(107,5,1):", $t24} $t24 == $t24;

    // goto L6 at ./sources/v3/tick.move:288:9+20
    goto L6;

    // label L2 at ./sources/v3/tick.move:279:17+19
    assume {:print "$at(25,11841,11860)"} true;
L2:

    // $t26 := get_field<0xbb::tick::TickInfo>.fee_growth_outside_a($t1) at ./sources/v3/tick.move:279:39+36
    assume {:print "$at(25,11863,11899)"} true;
    $t26 := $t1->$fee_growth_outside_a;

    // $t27 := -($t5, $t26) on_abort goto L7 with $t14 at ./sources/v3/tick.move:279:17+58
    call $t27 := $Sub($t5, $t26);
    if ($abort_flag) {
        assume {:print "$at(25,11841,11899)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(107,5):", $t14} $t14 == $t14;
        goto L7;
    }

    // $t9 := $t27 at ./sources/v3/tick.move:279:17+58
    $t9 := $t27;

    // trace_local[fee_growth_above_a]($t27) at ./sources/v3/tick.move:279:17+58
    assume {:print "$track_local(107,5,9):", $t27} $t27 == $t27;

    // $t28 := get_field<0xbb::tick::TickInfo>.fee_growth_outside_b($t1) at ./sources/v3/tick.move:280:39+36
    assume {:print "$at(25,11939,11975)"} true;
    $t28 := $t1->$fee_growth_outside_b;

    // $t29 := -($t6, $t28) on_abort goto L7 with $t14 at ./sources/v3/tick.move:280:17+58
    call $t29 := $Sub($t6, $t28);
    if ($abort_flag) {
        assume {:print "$at(25,11917,11975)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(107,5):", $t14} $t14 == $t14;
        goto L7;
    }

    // $t10 := $t29 at ./sources/v3/tick.move:280:17+58
    $t10 := $t29;

    // trace_local[fee_growth_above_b]($t29) at ./sources/v3/tick.move:280:17+58
    assume {:print "$track_local(107,5,10):", $t29} $t29 == $t29;

    // goto L4 at ./sources/v3/tick.move:280:17+58
    goto L4;

    // label L0 at ./sources/v3/tick.move:269:17+19
    assume {:print "$at(25,11410,11429)"} true;
L0:

    // $t30 := get_field<0xbb::tick::TickInfo>.fee_growth_outside_a($t0) at ./sources/v3/tick.move:269:39+36
    assume {:print "$at(25,11432,11468)"} true;
    $t30 := $t0->$fee_growth_outside_a;

    // $t31 := -($t5, $t30) on_abort goto L7 with $t14 at ./sources/v3/tick.move:269:17+58
    call $t31 := $Sub($t5, $t30);
    if ($abort_flag) {
        assume {:print "$at(25,11410,11468)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(107,5):", $t14} $t14 == $t14;
        goto L7;
    }

    // $t7 := $t31 at ./sources/v3/tick.move:269:17+58
    $t7 := $t31;

    // trace_local[fee_growth_below_a]($t31) at ./sources/v3/tick.move:269:17+58
    assume {:print "$track_local(107,5,7):", $t31} $t31 == $t31;

    // $t32 := get_field<0xbb::tick::TickInfo>.fee_growth_outside_b($t0) at ./sources/v3/tick.move:270:39+36
    assume {:print "$at(25,11508,11544)"} true;
    $t32 := $t0->$fee_growth_outside_b;

    // $t33 := -($t6, $t32) on_abort goto L7 with $t14 at ./sources/v3/tick.move:270:17+58
    call $t33 := $Sub($t6, $t32);
    if ($abort_flag) {
        assume {:print "$at(25,11486,11544)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(107,5):", $t14} $t14 == $t14;
        goto L7;
    }

    // $t8 := $t33 at ./sources/v3/tick.move:270:17+58
    $t8 := $t33;

    // trace_local[fee_growth_below_b]($t33) at ./sources/v3/tick.move:270:17+58
    assume {:print "$track_local(107,5,8):", $t33} $t33 == $t33;

    // goto L5 at ./sources/v3/tick.move:270:17+58
    goto L5;

    // label L6 at ./sources/v3/tick.move:289:5+1
    assume {:print "$at(25,12391,12392)"} true;
L6:

    // return ($t22, $t24) at ./sources/v3/tick.move:289:5+1
    assume {:print "$at(25,12391,12392)"} true;
    $ret0 := $t22;
    $ret1 := $t24;
    return;

    // label L7 at ./sources/v3/tick.move:289:5+1
L7:

    // abort($t14) at ./sources/v3/tick.move:289:5+1
    assume {:print "$at(25,12391,12392)"} true;
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun tick::padding_emissions_list [baseline] at ./sources/v3/tick.move:409:5+369
procedure {:inline 1} $bb_tick_padding_emissions_list(_$t0: $Mutation ($bb_tick_TickInfo), _$t1: int) returns ($ret0: $Mutation ($bb_tick_TickInfo))
{
    // declare local variables
    var $t2: int;
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $Mutation (Vec (int));
    var $t0: $Mutation ($bb_tick_TickInfo);
    var $t1: int;
    var $temp_0'$bb_tick_TickInfo': $bb_tick_TickInfo;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[info]($t0) at ./sources/v3/tick.move:409:5+1
    assume {:print "$at(25,16967,16968)"} true;
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,9,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // trace_local[length]($t1) at ./sources/v3/tick.move:409:5+1
    assume {:print "$track_local(107,9,1):", $t1} $t1 == $t1;

    // $t3 := get_field<0xbb::tick::TickInfo>.emissions_per_liquidity_incentive_outside($t0) at ./sources/v3/tick.move:413:19+55
    assume {:print "$at(25,17077,17132)"} true;
    $t3 := $Dereference($t0)->$emissions_per_liquidity_incentive_outside;

    // $t4 := vector::length<u128>($t3) on_abort goto L5 with $t5 at ./sources/v3/tick.move:413:19+55
    call $t4 := $1_vector_length'u128'($t3);
    if ($abort_flag) {
        assume {:print "$at(25,17077,17132)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(107,9):", $t5} $t5 == $t5;
        goto L5;
    }

    // trace_local[num]($t4) at ./sources/v3/tick.move:413:19+55
    assume {:print "$track_local(107,9,2):", $t4} $t4 == $t4;

    // $t6 := -($t1, $t4) on_abort goto L5 with $t5 at ./sources/v3/tick.move:414:30+12
    assume {:print "$at(25,17163,17175)"} true;
    call $t6 := $Sub($t1, $t4);
    if ($abort_flag) {
        assume {:print "$at(25,17163,17175)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(107,9):", $t5} $t5 == $t5;
        goto L5;
    }

    // trace_local[length]($t6) at ./sources/v3/tick.move:414:30+12
    assume {:print "$track_local(107,9,1):", $t6} $t6 == $t6;

    // label L2 at ./sources/v3/tick.move:415:15+14
    assume {:print "$at(25,17191,17205)"} true;
L2:

    // $t1 := havoc[val]() at ./sources/v3/tick.move:415:15+14
    assume {:print "$at(25,17191,17205)"} true;
    havoc $t1;

    // assume WellFormed($t1) at ./sources/v3/tick.move:415:15+14
    assume $IsValid'u64'($t1);

    // $t7 := havoc[val]() at ./sources/v3/tick.move:415:15+14
    havoc $t7;

    // assume WellFormed($t7) at ./sources/v3/tick.move:415:15+14
    assume $IsValid'u64'($t7);

    // $t8 := havoc[val]() at ./sources/v3/tick.move:415:15+14
    havoc $t8;

    // assume WellFormed($t8) at ./sources/v3/tick.move:415:15+14
    assume $IsValid'bool'($t8);

    // $t9 := havoc[val]() at ./sources/v3/tick.move:415:15+14
    havoc $t9;

    // assume WellFormed($t9) at ./sources/v3/tick.move:415:15+14
    assume $IsValid'u128'($t9);

    // $t10 := havoc[val]() at ./sources/v3/tick.move:415:15+14
    havoc $t10;

    // assume WellFormed($t10) at ./sources/v3/tick.move:415:15+14
    assume $IsValid'u64'($t10);

    // $t11 := havoc[val]() at ./sources/v3/tick.move:415:15+14
    havoc $t11;

    // assume WellFormed($t11) at ./sources/v3/tick.move:415:15+14
    assume $IsValid'u64'($t11);

    // $t0 := havoc[mut]() at ./sources/v3/tick.move:415:15+14
    havoc $temp_0'$bb_tick_TickInfo';
    $t0 := $UpdateMutation($t0, $temp_0'$bb_tick_TickInfo');

    // assume WellFormed($t0) at ./sources/v3/tick.move:415:15+14
    assume $IsValid'$bb_tick_TickInfo'($Dereference($t0));

    // $t12 := havoc[mut_all]() at ./sources/v3/tick.move:415:15+14
    havoc $t12;

    // assume WellFormed($t12) at ./sources/v3/tick.move:415:15+14
    assume $IsValid'vec'u128''($Dereference($t12));

    // trace_local[info]($t0) at ./sources/v3/tick.move:415:15+14
    assume {:print "$info(): enter loop, variable(s) info, length havocked and reassigned"} true;
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,9,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // trace_local[length]($t1) at ./sources/v3/tick.move:415:15+14
    assume {:print "$track_local(107,9,1):", $t1} $t1 == $t1;

    // assume Not(AbortFlag()) at ./sources/v3/tick.move:415:15+14
    assume !$abort_flag;

    // $t7 := 0 at ./sources/v3/tick.move:415:33+1
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := !=($t1, $t7) at ./sources/v3/tick.move:415:15+19
    $t8 := !$IsEqual'u64'($t1, $t7);

    // if ($t8) goto L1 else goto L0 at ./sources/v3/tick.move:415:9+144
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at ./sources/v3/tick.move:416:13+59
    assume {:print "$at(25,17226,17285)"} true;
L1:

    // $t12 := borrow_field<0xbb::tick::TickInfo>.emissions_per_liquidity_incentive_outside($t0) at ./sources/v3/tick.move:416:13+59
    assume {:print "$at(25,17226,17285)"} true;
    $t12 := $ChildMutation($t0, 7, $Dereference($t0)->$emissions_per_liquidity_incentive_outside);

    // $t9 := 0 at ./sources/v3/tick.move:416:70+1
    $t9 := 0;
    assume $IsValid'u128'($t9);

    // vector::push_back<u128>($t12, $t9) on_abort goto L5 with $t5 at ./sources/v3/tick.move:416:13+59
    call $t12 := $1_vector_push_back'u128'($t12, $t9);
    if ($abort_flag) {
        assume {:print "$at(25,17226,17285)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(107,9):", $t5} $t5 == $t5;
        goto L5;
    }

    // write_back[Reference($t0).emissions_per_liquidity_incentive_outside (vector<u128>)]($t12) at ./sources/v3/tick.move:416:13+59
    $t0 := $UpdateMutation($t0, $Update'$bb_tick_TickInfo'_emissions_per_liquidity_incentive_outside($Dereference($t0), $Dereference($t12)));

    // trace_local[info]($t0) at ./sources/v3/tick.move:416:13+59
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,9,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // $t10 := 1 at ./sources/v3/tick.move:417:31+1
    assume {:print "$at(25,17317,17318)"} true;
    $t10 := 1;
    assume $IsValid'u64'($t10);

    // $t11 := -($t1, $t10) on_abort goto L5 with $t5 at ./sources/v3/tick.move:417:13+19
    call $t11 := $Sub($t1, $t10);
    if ($abort_flag) {
        assume {:print "$at(25,17299,17318)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(107,9):", $t5} $t5 == $t5;
        goto L5;
    }

    // trace_local[length]($t11) at ./sources/v3/tick.move:417:13+19
    assume {:print "$track_local(107,9,1):", $t11} $t11 == $t11;

    // goto L3 at ./sources/v3/tick.move:415:9+144
    assume {:print "$at(25,17185,17329)"} true;
    goto L3;

    // label L0 at ./sources/v3/tick.move:415:9+144
L0:

    // drop($t0) at ./sources/v3/tick.move:415:9+144
    assume {:print "$at(25,17185,17329)"} true;

    // trace_local[info]($t0) at ./sources/v3/tick.move:412:7+279
    assume {:print "$at(25,17057,17336)"} true;
    $temp_0'$bb_tick_TickInfo' := $Dereference($t0);
    assume {:print "$track_local(107,9,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // goto L4 at ./sources/v3/tick.move:412:7+279
    goto L4;

    // label L3 at ./sources/v3/tick.move:415:9+144
    // Loop invariant checking block for the loop started with header: L2
    assume {:print "$at(25,17185,17329)"} true;
L3:

    // stop() at ./sources/v3/tick.move:415:9+144
    assume {:print "$at(25,17185,17329)"} true;
    assume false;
    return;

    // label L4 at ./sources/v3/tick.move:419:5+1
    assume {:print "$at(25,17335,17336)"} true;
L4:

    // return () at ./sources/v3/tick.move:419:5+1
    assume {:print "$at(25,17335,17336)"} true;
    $ret0 := $t0;
    return;

    // label L5 at ./sources/v3/tick.move:419:5+1
L5:

    // abort($t5) at ./sources/v3/tick.move:419:5+1
    assume {:print "$at(25,17335,17336)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun math_u256::checked_shlw [baseline] at ./sources/math/math_u256.move:18:5+204
procedure {:inline 1} $bb_math_u256_checked_shlw(_$t0: int) returns ($ret0: int, $ret1: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t0: int;
    var $temp_0'bool': bool;
    var $temp_0'u256': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[n]($t0) at ./sources/math/math_u256.move:18:5+1
    assume {:print "$at(12,408,409)"} true;
    assume {:print "$track_local(108,1,0):", $t0} $t0 == $t0;

    // $t3 := 115792089237316195417293883273301227089434195242432897623355228563449095127040 at ./sources/math/math_u256.move:20:17+4
    assume {:print "$at(12,519,523)"} true;
    $t3 := 115792089237316195417293883273301227089434195242432897623355228563449095127040;
    assume $IsValid'u256'($t3);

    // $t4 := >($t0, $t3) at ./sources/math/math_u256.move:20:13+8
    call $t4 := $Gt($t0, $t3);

    // if ($t4) goto L1 else goto L0 at ./sources/math/math_u256.move:20:9+95
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/math_u256.move:21:14+1
    assume {:print "$at(12,540,541)"} true;
L1:

    // $t5 := 0 at ./sources/math/math_u256.move:21:14+1
    assume {:print "$at(12,540,541)"} true;
    $t5 := 0;
    assume $IsValid'u256'($t5);

    // $t1 := $t5 at ./sources/math/math_u256.move:21:14+1
    $t1 := $t5;

    // trace_local[$t4]($t5) at ./sources/math/math_u256.move:21:14+1
    assume {:print "$track_local(108,1,1):", $t5} $t5 == $t5;

    // $t6 := true at ./sources/math/math_u256.move:21:17+4
    $t6 := true;
    assume $IsValid'bool'($t6);

    // $t2 := $t6 at ./sources/math/math_u256.move:21:17+4
    $t2 := $t6;

    // trace_local[$t3]($t6) at ./sources/math/math_u256.move:21:17+4
    assume {:print "$track_local(108,1,2):", $t6} $t6 == $t6;

    // label L2 at ./sources/math/math_u256.move:20:9+95
    assume {:print "$at(12,511,606)"} true;
L2:

    // trace_return[0]($t1) at ./sources/math/math_u256.move:20:9+95
    assume {:print "$at(12,511,606)"} true;
    assume {:print "$track_return(108,1,0):", $t1} $t1 == $t1;

    // trace_return[1]($t2) at ./sources/math/math_u256.move:20:9+95
    assume {:print "$track_return(108,1,1):", $t2} $t2 == $t2;

    // goto L3 at ./sources/math/math_u256.move:20:9+95
    goto L3;

    // label L0 at ./sources/math/math_u256.move:23:15+1
    assume {:print "$at(12,580,581)"} true;
L0:

    // $t7 := 64 at ./sources/math/math_u256.move:23:20+2
    assume {:print "$at(12,585,587)"} true;
    $t7 := 64;
    assume $IsValid'u8'($t7);

    // $t8 := <<($t0, $t7) on_abort goto L4 with $t9 at ./sources/math/math_u256.move:23:14+9
    call $t8 := $ShlU256($t0, $t7);
    if ($abort_flag) {
        assume {:print "$at(12,579,588)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(108,1):", $t9} $t9 == $t9;
        goto L4;
    }

    // $t1 := $t8 at ./sources/math/math_u256.move:23:14+9
    $t1 := $t8;

    // trace_local[$t4]($t8) at ./sources/math/math_u256.move:23:14+9
    assume {:print "$track_local(108,1,1):", $t8} $t8 == $t8;

    // $t10 := false at ./sources/math/math_u256.move:23:25+5
    $t10 := false;
    assume $IsValid'bool'($t10);

    // $t2 := $t10 at ./sources/math/math_u256.move:23:25+5
    $t2 := $t10;

    // trace_local[$t3]($t10) at ./sources/math/math_u256.move:23:25+5
    assume {:print "$track_local(108,1,2):", $t10} $t10 == $t10;

    // goto L2 at ./sources/math/math_u256.move:23:25+5
    goto L2;

    // label L3 at ./sources/math/math_u256.move:25:5+1
    assume {:print "$at(12,611,612)"} true;
L3:

    // return ($t1, $t2) at ./sources/math/math_u256.move:25:5+1
    assume {:print "$at(12,611,612)"} true;
    $ret0 := $t1;
    $ret1 := $t2;
    return;

    // label L4 at ./sources/math/math_u256.move:25:5+1
L4:

    // abort($t9) at ./sources/math/math_u256.move:25:5+1
    assume {:print "$at(12,611,612)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun math_u256::div_round [baseline] at ./sources/math/math_u256.move:27:5+210
procedure {:inline 1} $bb_math_u256_div_round(_$t0: int, _$t1: int, _$t2: bool) returns ($ret0: int)
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $temp_0'bool': bool;
    var $temp_0'u256': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[num]($t0) at ./sources/math/math_u256.move:27:5+1
    assume {:print "$at(12,618,619)"} true;
    assume {:print "$track_local(108,3,0):", $t0} $t0 == $t0;

    // trace_local[denom]($t1) at ./sources/math/math_u256.move:27:5+1
    assume {:print "$track_local(108,3,1):", $t1} $t1 == $t1;

    // trace_local[round_up]($t2) at ./sources/math/math_u256.move:27:5+1
    assume {:print "$track_local(108,3,2):", $t2} $t2 == $t2;

    // $t5 := /($t0, $t1) on_abort goto L7 with $t6 at ./sources/math/math_u256.move:28:17+11
    assume {:print "$at(12,703,714)"} true;
    call $t5 := $Div($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(12,703,714)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(108,3):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[$t5]($t5) at ./sources/math/math_u256.move:28:17+11
    assume {:print "$track_local(108,3,3):", $t5} $t5 == $t5;

    // if ($t2) goto L1 else goto L0 at ./sources/math/math_u256.move:29:13+32
    assume {:print "$at(12,728,760)"} true;
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/math_u256.move:29:27+1
L1:

    // $t7 := *($t5, $t1) on_abort goto L7 with $t6 at ./sources/math/math_u256.move:29:26+11
    assume {:print "$at(12,741,752)"} true;
    call $t7 := $MulU256($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(12,741,752)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(108,3):", $t6} $t6 == $t6;
        goto L7;
    }

    // $t8 := !=($t7, $t0) at ./sources/math/math_u256.move:29:25+20
    $t8 := !$IsEqual'u256'($t7, $t0);

    // $t2 := $t8 at ./sources/math/math_u256.move:29:25+20
    $t2 := $t8;

    // trace_local[round_up]($t8) at ./sources/math/math_u256.move:29:25+20
    assume {:print "$track_local(108,3,2):", $t8} $t8 == $t8;

    // label L5 at ./sources/math/math_u256.move:29:9+98
L5:

    // if ($t2) goto L3 else goto L2 at ./sources/math/math_u256.move:29:9+98
    assume {:print "$at(12,724,822)"} true;
    if ($t2) { goto L3; } else { goto L2; }

    // label L3 at ./sources/math/math_u256.move:30:13+1
    assume {:print "$at(12,776,777)"} true;
L3:

    // $t9 := 1 at ./sources/math/math_u256.move:30:17+1
    assume {:print "$at(12,780,781)"} true;
    $t9 := 1;
    assume $IsValid'u256'($t9);

    // $t10 := +($t5, $t9) on_abort goto L7 with $t6 at ./sources/math/math_u256.move:30:13+5
    call $t10 := $AddU256($t5, $t9);
    if ($abort_flag) {
        assume {:print "$at(12,776,781)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(108,3):", $t6} $t6 == $t6;
        goto L7;
    }

    // $t4 := $t10 at ./sources/math/math_u256.move:30:13+5
    $t4 := $t10;

    // trace_local[$t8]($t10) at ./sources/math/math_u256.move:30:13+5
    assume {:print "$track_local(108,3,4):", $t10} $t10 == $t10;

    // label L4 at ./sources/math/math_u256.move:29:9+98
    assume {:print "$at(12,724,822)"} true;
L4:

    // trace_return[0]($t4) at ./sources/math/math_u256.move:29:9+98
    assume {:print "$at(12,724,822)"} true;
    assume {:print "$track_return(108,3,0):", $t4} $t4 == $t4;

    // goto L6 at ./sources/math/math_u256.move:29:9+98
    goto L6;

    // label L2 at ./sources/math/math_u256.move:32:13+1
    assume {:print "$at(12,811,812)"} true;
L2:

    // $t4 := $t5 at ./sources/math/math_u256.move:32:13+1
    assume {:print "$at(12,811,812)"} true;
    $t4 := $t5;

    // trace_local[$t8]($t5) at ./sources/math/math_u256.move:32:13+1
    assume {:print "$track_local(108,3,4):", $t5} $t5 == $t5;

    // goto L4 at ./sources/math/math_u256.move:32:13+1
    goto L4;

    // label L0 at ./sources/math/math_u256.move:29:13+32
    assume {:print "$at(12,728,760)"} true;
L0:

    // $t11 := false at ./sources/math/math_u256.move:29:13+32
    assume {:print "$at(12,728,760)"} true;
    $t11 := false;
    assume $IsValid'bool'($t11);

    // $t2 := $t11 at ./sources/math/math_u256.move:29:13+32
    $t2 := $t11;

    // trace_local[round_up]($t11) at ./sources/math/math_u256.move:29:13+32
    assume {:print "$track_local(108,3,2):", $t11} $t11 == $t11;

    // goto L5 at ./sources/math/math_u256.move:29:13+32
    goto L5;

    // label L6 at ./sources/math/math_u256.move:34:5+1
    assume {:print "$at(12,827,828)"} true;
L6:

    // return $t4 at ./sources/math/math_u256.move:34:5+1
    assume {:print "$at(12,827,828)"} true;
    $ret0 := $t4;
    return;

    // label L7 at ./sources/math/math_u256.move:34:5+1
L7:

    // abort($t6) at ./sources/math/math_u256.move:34:5+1
    assume {:print "$at(12,827,828)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun swap_math::get_delta_a [baseline] at ./sources/math/swap_math.move:56:5+813
procedure {:inline 1} $bb_swap_math_get_delta_a(_$t0: int, _$t1: int, _$t2: bv128, _$t3: bool) returns ($ret0: int)
{
    // declare local variables
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t0: int;
    var $t1: int;
    var $t2: bv128;
    var $t3: bool;
    var $temp_0'bool': bool;
    var $temp_0'u128': int;
    var $temp_0'bv128': bv128;
    var $temp_0'u256': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[sqrt_price_0]($t0) at ./sources/math/swap_math.move:56:5+1
    assume {:print "$at(13,1691,1692)"} true;
    assume {:print "$track_local(110,3,0):", $t0} $t0 == $t0;

    // trace_local[sqrt_price_1]($t1) at ./sources/math/swap_math.move:56:5+1
    assume {:print "$track_local(110,3,1):", $t1} $t1 == $t1;

    // trace_local[liquidity]($t2) at ./sources/math/swap_math.move:56:5+1
    assume {:print "$track_local(110,3,2):", $t2} $t2 == $t2;

    // trace_local[round_up]($t3) at ./sources/math/swap_math.move:56:5+1
    assume {:print "$track_local(110,3,3):", $t3} $t3 == $t3;

    // $t9 := >($t0, $t1) at ./sources/math/swap_math.move:62:35+27
    assume {:print "$at(13,1866,1893)"} true;
    call $t9 := $Gt($t0, $t1);

    // if ($t9) goto L1 else goto L0 at ./sources/math/swap_math.move:62:31+141
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/swap_math.move:63:13+12
    assume {:print "$at(13,1909,1921)"} true;
L1:

    // $t10 := -($t0, $t1) on_abort goto L11 with $t11 at ./sources/math/swap_math.move:63:13+27
    assume {:print "$at(13,1909,1936)"} true;
    call $t10 := $Sub($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(13,1909,1936)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(110,3):", $t11} $t11 == $t11;
        goto L11;
    }

    // $t4 := $t10 at ./sources/math/swap_math.move:63:13+27
    $t4 := $t10;

    // trace_local[$t7]($t10) at ./sources/math/swap_math.move:63:13+27
    assume {:print "$track_local(110,3,4):", $t10} $t10 == $t10;

    // label L9 at ./sources/math/swap_math.move:67:13+15
    assume {:print "$at(13,2017,2032)"} true;
L9:

    // $t12 := 0 at ./sources/math/swap_math.move:67:32+1
    assume {:print "$at(13,2036,2037)"} true;
    $t12 := 0;
    assume $IsValid'u128'($t12);

    // $t13 := ==($t4, $t12) at ./sources/math/swap_math.move:67:13+20
    $t13 := $IsEqual'u128'($t4, $t12);

    // if ($t13) goto L3 else goto L2 at ./sources/math/swap_math.move:67:13+38
    if ($t13) { goto L3; } else { goto L2; }

    // label L3 at ./sources/math/swap_math.move:67:13+38
L3:

    // $t14 := true at ./sources/math/swap_math.move:67:13+38
    assume {:print "$at(13,2017,2055)"} true;
    $t14 := true;
    assume $IsValid'bool'($t14);

    // $t5 := $t14 at ./sources/math/swap_math.move:67:13+38
    $t5 := $t14;

    // trace_local[$t6]($t14) at ./sources/math/swap_math.move:67:13+38
    assume {:print "$track_local(110,3,5):", $t14} $t14 == $t14;

    // label L8 at ./sources/math/swap_math.move:67:9+76
L8:

    // if ($t5) goto L5 else goto L4 at ./sources/math/swap_math.move:67:9+76
    assume {:print "$at(13,2013,2089)"} true;
    if ($t5) { goto L5; } else { goto L4; }

    // label L5 at ./sources/math/swap_math.move:68:20+1
    assume {:print "$at(13,2078,2079)"} true;
L5:

    // $t15 := 0 at ./sources/math/swap_math.move:68:20+1
    assume {:print "$at(13,2078,2079)"} true;
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // trace_return[0]($t15) at ./sources/math/swap_math.move:68:13+8
    assume {:print "$track_return(110,3,0):", $t15} $t15 == $t15;

    // $t16 := move($t15) at ./sources/math/swap_math.move:68:13+8
    $t16 := $t15;

    // goto L10 at ./sources/math/swap_math.move:68:13+8
    goto L10;

    // label L4 at ./sources/math/swap_math.move:71:38+9
    assume {:print "$at(13,2193,2202)"} true;
L4:

    // $t17 := full_math_u128::full_mul($t2, $t4) on_abort goto L11 with $t11 at ./sources/math/swap_math.move:71:13+52
    assume {:print "$at(13,2168,2220)"} true;
    call $t17 := $bb_full_math_u128_full_mul($bv2int.128($t2), $t4);
    if ($abort_flag) {
        assume {:print "$at(13,2168,2220)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(110,3):", $t11} $t11 == $t11;
        goto L11;
    }

    // ($t18, $t19) := math_u256::checked_shlw($t17) on_abort goto L11 with $t11 at ./sources/math/swap_math.move:70:41+99
    assume {:print "$at(13,2131,2230)"} true;
    call $t18,$t19 := $bb_math_u256_checked_shlw($t17);
    if ($abort_flag) {
        assume {:print "$at(13,2131,2230)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(110,3):", $t11} $t11 == $t11;
        goto L11;
    }

    // trace_local[overflowing]($t19) at ./sources/math/swap_math.move:73:9+71
    assume {:print "$at(13,2240,2311)"} true;
    assume {:print "$track_local(110,3,6):", $t19} $t19 == $t19;

    // trace_local[$t18]($t18) at ./sources/math/swap_math.move:73:9+71
    assume {:print "$track_local(110,3,7):", $t18} $t18 == $t18;

    // if ($t19) goto L7 else goto L6 at ./sources/math/swap_math.move:73:9+71
    if ($t19) { goto L7; } else { goto L6; }

    // label L7 at ./sources/math/swap_math.move:74:19+24
    assume {:print "$at(13,2277,2301)"} true;
L7:

    // $t20 := 2 at ./sources/math/swap_math.move:74:19+24
    assume {:print "$at(13,2277,2301)"} true;
    $t20 := 2;
    assume $IsValid'u64'($t20);

    // trace_abort($t20) at ./sources/math/swap_math.move:74:13+30
    assume {:print "$at(13,2271,2301)"} true;
    assume {:print "$track_abort(110,3):", $t20} $t20 == $t20;

    // $t11 := move($t20) at ./sources/math/swap_math.move:74:13+30
    $t11 := $t20;

    // goto L11 at ./sources/math/swap_math.move:74:13+30
    goto L11;

    // label L6 at ./sources/math/swap_math.move:76:52+12
    assume {:print "$at(13,2364,2376)"} true;
L6:

    // $t21 := full_math_u128::full_mul($t0, $t1) on_abort goto L11 with $t11 at ./sources/math/swap_math.move:76:27+52
    assume {:print "$at(13,2339,2391)"} true;
    call $t21 := $bb_full_math_u128_full_mul($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(13,2339,2391)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(110,3):", $t11} $t11 == $t11;
        goto L11;
    }

    // trace_local[denominator]($t21) at ./sources/math/swap_math.move:77:24+55
    assume {:print "$at(13,2416,2471)"} true;
    assume {:print "$track_local(110,3,8):", $t21} $t21 == $t21;

    // $t22 := math_u256::div_round($t18, $t21, $t3) on_abort goto L11 with $t11 at ./sources/math/swap_math.move:77:24+55
    call $t22 := $bb_math_u256_div_round($t18, $t21, $t3);
    if ($abort_flag) {
        assume {:print "$at(13,2416,2471)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(110,3):", $t11} $t11 == $t11;
        goto L11;
    }

    // $t23 := (u64)($t22) on_abort goto L11 with $t11 at ./sources/math/swap_math.move:78:9+17
    assume {:print "$at(13,2481,2498)"} true;
    call $t23 := $CastU64($t22);
    if ($abort_flag) {
        assume {:print "$at(13,2481,2498)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(110,3):", $t11} $t11 == $t11;
        goto L11;
    }

    // trace_return[0]($t23) at ./sources/math/swap_math.move:61:12+674
    assume {:print "$at(13,1830,2504)"} true;
    assume {:print "$track_return(110,3,0):", $t23} $t23 == $t23;

    // $t16 := move($t23) at ./sources/math/swap_math.move:61:12+674
    $t16 := $t23;

    // goto L10 at ./sources/math/swap_math.move:61:12+674
    goto L10;

    // label L2 at ./sources/math/swap_math.move:67:37+9
    assume {:print "$at(13,2041,2050)"} true;
L2:

    // $t24 := 0 at ./sources/math/swap_math.move:67:50+1
    assume {:print "$at(13,2054,2055)"} true;
    $t24 := 0;
    assume $IsValid'u128'($t24);

    // $t25 := ==($t2, $t24) at ./sources/math/swap_math.move:67:37+14
    $t25 := $IsEqual'bv128'($t2, $int2bv.128($t24));

    // $t5 := $t25 at ./sources/math/swap_math.move:67:37+14
    $t5 := $t25;

    // trace_local[$t6]($t25) at ./sources/math/swap_math.move:67:37+14
    assume {:print "$track_local(110,3,5):", $t25} $t25 == $t25;

    // goto L8 at ./sources/math/swap_math.move:67:37+14
    goto L8;

    // label L0 at ./sources/math/swap_math.move:65:13+12
    assume {:print "$at(13,1966,1978)"} true;
L0:

    // $t26 := -($t1, $t0) on_abort goto L11 with $t11 at ./sources/math/swap_math.move:65:13+27
    assume {:print "$at(13,1966,1993)"} true;
    call $t26 := $Sub($t1, $t0);
    if ($abort_flag) {
        assume {:print "$at(13,1966,1993)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(110,3):", $t11} $t11 == $t11;
        goto L11;
    }

    // $t4 := $t26 at ./sources/math/swap_math.move:65:13+27
    $t4 := $t26;

    // trace_local[$t7]($t26) at ./sources/math/swap_math.move:65:13+27
    assume {:print "$track_local(110,3,4):", $t26} $t26 == $t26;

    // goto L9 at ./sources/math/swap_math.move:65:13+27
    goto L9;

    // label L10 at ./sources/math/swap_math.move:79:5+1
    assume {:print "$at(13,2503,2504)"} true;
L10:

    // return $t16 at ./sources/math/swap_math.move:79:5+1
    assume {:print "$at(13,2503,2504)"} true;
    $ret0 := $t16;
    return;

    // label L11 at ./sources/math/swap_math.move:79:5+1
L11:

    // abort($t11) at ./sources/math/swap_math.move:79:5+1
    assume {:print "$at(13,2503,2504)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun swap_math::get_delta_b [baseline] at ./sources/math/swap_math.move:81:5+772
procedure {:inline 1} $bb_swap_math_get_delta_b(_$t0: int, _$t1: int, _$t2: bv128, _$t3: bool) returns ($ret0: int)
{
    // declare local variables
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: bv256;
    var $t19: bv256;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: bool;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t0: int;
    var $t1: int;
    var $t2: bv128;
    var $t3: bool;
    var $temp_0'bool': bool;
    var $temp_0'u128': int;
    var $temp_0'bv128': bv128;
    var $temp_0'u256': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[sqrt_price_0]($t0) at ./sources/math/swap_math.move:81:5+1
    assume {:print "$at(13,2510,2511)"} true;
    assume {:print "$track_local(110,4,0):", $t0} $t0 == $t0;

    // trace_local[sqrt_price_1]($t1) at ./sources/math/swap_math.move:81:5+1
    assume {:print "$track_local(110,4,1):", $t1} $t1 == $t1;

    // trace_local[liquidity]($t2) at ./sources/math/swap_math.move:81:5+1
    assume {:print "$track_local(110,4,2):", $t2} $t2 == $t2;

    // trace_local[round_up]($t3) at ./sources/math/swap_math.move:81:5+1
    assume {:print "$track_local(110,4,3):", $t3} $t3 == $t3;

    // $t8 := >($t0, $t1) at ./sources/math/swap_math.move:87:35+27
    assume {:print "$at(13,2685,2712)"} true;
    call $t8 := $Gt($t0, $t1);

    // if ($t8) goto L1 else goto L0 at ./sources/math/swap_math.move:87:31+141
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at ./sources/math/swap_math.move:88:13+12
    assume {:print "$at(13,2728,2740)"} true;
L1:

    // $t9 := -($t0, $t1) on_abort goto L14 with $t10 at ./sources/math/swap_math.move:88:13+27
    assume {:print "$at(13,2728,2755)"} true;
    call $t9 := $Sub($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(13,2728,2755)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(110,4):", $t10} $t10 == $t10;
        goto L14;
    }

    // $t4 := $t9 at ./sources/math/swap_math.move:88:13+27
    $t4 := $t9;

    // trace_local[$t7]($t9) at ./sources/math/swap_math.move:88:13+27
    assume {:print "$track_local(110,4,4):", $t9} $t9 == $t9;

    // label L12 at ./sources/math/swap_math.move:92:13+15
    assume {:print "$at(13,2836,2851)"} true;
L12:

    // $t11 := 0 at ./sources/math/swap_math.move:92:32+1
    assume {:print "$at(13,2855,2856)"} true;
    $t11 := 0;
    assume $IsValid'u128'($t11);

    // $t12 := ==($t4, $t11) at ./sources/math/swap_math.move:92:13+20
    $t12 := $IsEqual'u128'($t4, $t11);

    // if ($t12) goto L3 else goto L2 at ./sources/math/swap_math.move:92:13+38
    if ($t12) { goto L3; } else { goto L2; }

    // label L3 at ./sources/math/swap_math.move:92:13+38
L3:

    // $t13 := true at ./sources/math/swap_math.move:92:13+38
    assume {:print "$at(13,2836,2874)"} true;
    $t13 := true;
    assume $IsValid'bool'($t13);

    // $t5 := $t13 at ./sources/math/swap_math.move:92:13+38
    $t5 := $t13;

    // trace_local[$t6]($t13) at ./sources/math/swap_math.move:92:13+38
    assume {:print "$track_local(110,4,5):", $t13} $t13 == $t13;

    // label L11 at ./sources/math/swap_math.move:92:9+76
L11:

    // if ($t5) goto L5 else goto L4 at ./sources/math/swap_math.move:92:9+76
    assume {:print "$at(13,2832,2908)"} true;
    if ($t5) { goto L5; } else { goto L4; }

    // label L5 at ./sources/math/swap_math.move:93:20+1
    assume {:print "$at(13,2897,2898)"} true;
L5:

    // $t14 := 0 at ./sources/math/swap_math.move:93:20+1
    assume {:print "$at(13,2897,2898)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // trace_return[0]($t14) at ./sources/math/swap_math.move:93:13+8
    assume {:print "$track_return(110,4,0):", $t14} $t14 == $t14;

    // $t15 := move($t14) at ./sources/math/swap_math.move:93:13+8
    $t15 := $t14;

    // goto L13 at ./sources/math/swap_math.move:93:13+8
    goto L13;

    // label L4 at ./sources/math/swap_math.move:97:48+9
    assume {:print "$at(13,3050,3059)"} true;
L4:

    // $t16 := full_math_u128::full_mul($t2, $t4) on_abort goto L14 with $t10 at ./sources/math/swap_math.move:97:23+52
    assume {:print "$at(13,3025,3077)"} true;
    call $t16 := $bb_full_math_u128_full_mul($bv2int.128($t2), $t4);
    if ($abort_flag) {
        assume {:print "$at(13,3025,3077)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(110,4):", $t10} $t10 == $t10;
        goto L14;
    }

    // trace_local[product]($t16) at ./sources/math/swap_math.move:97:23+52
    assume {:print "$track_local(110,4,6):", $t16} $t16 == $t16;

    // if ($t3) goto L7 else goto L6 at ./sources/math/swap_math.move:98:31+41
    assume {:print "$at(13,3109,3150)"} true;
    if ($t3) { goto L7; } else { goto L6; }

    // label L7 at ./sources/math/swap_math.move:98:47+7
L7:

    // $t17 := 18446744073709551615 at ./sources/math/swap_math.move:98:57+9
    assume {:print "$at(13,3135,3144)"} true;
    $t17 := 18446744073709551615;
    assume $IsValid'u256'($t17);

    // $t18 := &($t16, $t17) at ./sources/math/swap_math.move:98:46+21
    call $t18 := $AndBv256($int2bv.256($t16), $int2bv.256($t17));

    // $t19 := 0 at ./sources/math/swap_math.move:98:70+1
    $t19 := 0bv256;
    assume $IsValid'bv256'($t19);

    // $t20 := >($t18, $t19) at ./sources/math/swap_math.move:98:45+27
    call $t20 := $GtBv256($t18, $t19);

    // $t7 := $t20 at ./sources/math/swap_math.move:98:45+27
    $t7 := $t20;

    // trace_local[should_round_up]($t20) at ./sources/math/swap_math.move:98:45+27
    assume {:print "$track_local(110,4,7):", $t20} $t20 == $t20;

    // label L10 at ./sources/math/swap_math.move:99:9+82
    assume {:print "$at(13,3160,3242)"} true;
L10:

    // if ($t7) goto L9 else goto L8 at ./sources/math/swap_math.move:99:9+82
    assume {:print "$at(13,3160,3242)"} true;
    if ($t7) { goto L9; } else { goto L8; }

    // label L9 at ./sources/math/swap_math.move:100:23+7
    assume {:print "$at(13,3205,3212)"} true;
L9:

    // $t21 := 64 at ./sources/math/swap_math.move:100:34+2
    assume {:print "$at(13,3216,3218)"} true;
    $t21 := 64;
    assume $IsValid'u8'($t21);

    // $t22 := >>($t16, $t21) on_abort goto L14 with $t10 at ./sources/math/swap_math.move:100:22+15
    call $t22 := $ShrU256($t16, $t21);
    if ($abort_flag) {
        assume {:print "$at(13,3204,3219)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(110,4):", $t10} $t10 == $t10;
        goto L14;
    }

    // $t23 := 1 at ./sources/math/swap_math.move:100:40+1
    $t23 := 1;
    assume $IsValid'u256'($t23);

    // $t24 := +($t22, $t23) on_abort goto L14 with $t10 at ./sources/math/swap_math.move:100:21+21
    call $t24 := $AddU256($t22, $t23);
    if ($abort_flag) {
        assume {:print "$at(13,3203,3224)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(110,4):", $t10} $t10 == $t10;
        goto L14;
    }

    // $t25 := (u64)($t24) on_abort goto L14 with $t10 at ./sources/math/swap_math.move:100:20+30
    call $t25 := $CastU64($t24);
    if ($abort_flag) {
        assume {:print "$at(13,3202,3232)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(110,4):", $t10} $t10 == $t10;
        goto L14;
    }

    // trace_return[0]($t25) at ./sources/math/swap_math.move:100:13+37
    assume {:print "$track_return(110,4,0):", $t25} $t25 == $t25;

    // $t15 := move($t25) at ./sources/math/swap_math.move:100:13+37
    $t15 := $t25;

    // goto L13 at ./sources/math/swap_math.move:100:13+37
    goto L13;

    // label L8 at ./sources/math/swap_math.move:102:11+7
    assume {:print "$at(13,3254,3261)"} true;
L8:

    // $t26 := 64 at ./sources/math/swap_math.move:102:22+2
    assume {:print "$at(13,3265,3267)"} true;
    $t26 := 64;
    assume $IsValid'u8'($t26);

    // $t27 := >>($t16, $t26) on_abort goto L14 with $t10 at ./sources/math/swap_math.move:102:10+15
    call $t27 := $ShrU256($t16, $t26);
    if ($abort_flag) {
        assume {:print "$at(13,3253,3268)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(110,4):", $t10} $t10 == $t10;
        goto L14;
    }

    // $t28 := (u64)($t27) on_abort goto L14 with $t10 at ./sources/math/swap_math.move:102:9+24
    call $t28 := $CastU64($t27);
    if ($abort_flag) {
        assume {:print "$at(13,3252,3276)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(110,4):", $t10} $t10 == $t10;
        goto L14;
    }

    // trace_return[0]($t28) at ./sources/math/swap_math.move:86:12+633
    assume {:print "$at(13,2649,3282)"} true;
    assume {:print "$track_return(110,4,0):", $t28} $t28 == $t28;

    // $t15 := move($t28) at ./sources/math/swap_math.move:86:12+633
    $t15 := $t28;

    // goto L13 at ./sources/math/swap_math.move:86:12+633
    goto L13;

    // label L6 at ./sources/math/swap_math.move:98:31+41
    assume {:print "$at(13,3109,3150)"} true;
L6:

    // $t29 := false at ./sources/math/swap_math.move:98:31+41
    assume {:print "$at(13,3109,3150)"} true;
    $t29 := false;
    assume $IsValid'bool'($t29);

    // $t7 := $t29 at ./sources/math/swap_math.move:98:31+41
    $t7 := $t29;

    // trace_local[should_round_up]($t29) at ./sources/math/swap_math.move:98:31+41
    assume {:print "$track_local(110,4,7):", $t29} $t29 == $t29;

    // goto L10 at ./sources/math/swap_math.move:98:31+41
    goto L10;

    // label L2 at ./sources/math/swap_math.move:92:37+9
    assume {:print "$at(13,2860,2869)"} true;
L2:

    // $t30 := 0 at ./sources/math/swap_math.move:92:50+1
    assume {:print "$at(13,2873,2874)"} true;
    $t30 := 0;
    assume $IsValid'u128'($t30);

    // $t31 := ==($t2, $t30) at ./sources/math/swap_math.move:92:37+14
    $t31 := $IsEqual'bv128'($t2, $int2bv.128($t30));

    // $t5 := $t31 at ./sources/math/swap_math.move:92:37+14
    $t5 := $t31;

    // trace_local[$t6]($t31) at ./sources/math/swap_math.move:92:37+14
    assume {:print "$track_local(110,4,5):", $t31} $t31 == $t31;

    // goto L11 at ./sources/math/swap_math.move:92:37+14
    goto L11;

    // label L0 at ./sources/math/swap_math.move:90:13+12
    assume {:print "$at(13,2785,2797)"} true;
L0:

    // $t32 := -($t1, $t0) on_abort goto L14 with $t10 at ./sources/math/swap_math.move:90:13+27
    assume {:print "$at(13,2785,2812)"} true;
    call $t32 := $Sub($t1, $t0);
    if ($abort_flag) {
        assume {:print "$at(13,2785,2812)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(110,4):", $t10} $t10 == $t10;
        goto L14;
    }

    // $t4 := $t32 at ./sources/math/swap_math.move:90:13+27
    $t4 := $t32;

    // trace_local[$t7]($t32) at ./sources/math/swap_math.move:90:13+27
    assume {:print "$track_local(110,4,4):", $t32} $t32 == $t32;

    // goto L12 at ./sources/math/swap_math.move:90:13+27
    goto L12;

    // label L13 at ./sources/math/swap_math.move:103:5+1
    assume {:print "$at(13,3281,3282)"} true;
L13:

    // return $t15 at ./sources/math/swap_math.move:103:5+1
    assume {:print "$at(13,3281,3282)"} true;
    $ret0 := $t15;
    return;

    // label L14 at ./sources/math/swap_math.move:103:5+1
L14:

    // abort($t10) at ./sources/math/swap_math.move:103:5+1
    assume {:print "$at(13,3281,3282)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// struct rewarder::PositionReward at ./sources/v3/rewarder.move:38:5+124
datatype $bb_rewarder_PositionReward {
    $bb_rewarder_PositionReward($emissions_per_liquidity_inside: int, $amount_owned: int)
}
function {:inline} $Update'$bb_rewarder_PositionReward'_emissions_per_liquidity_inside(s: $bb_rewarder_PositionReward, x: int): $bb_rewarder_PositionReward {
    $bb_rewarder_PositionReward(x, s->$amount_owned)
}
function {:inline} $Update'$bb_rewarder_PositionReward'_amount_owned(s: $bb_rewarder_PositionReward, x: int): $bb_rewarder_PositionReward {
    $bb_rewarder_PositionReward(s->$emissions_per_liquidity_inside, x)
}
function $IsValid'$bb_rewarder_PositionReward'(s: $bb_rewarder_PositionReward): bool {
    $IsValid'u128'(s->$emissions_per_liquidity_inside)
      && $IsValid'u64'(s->$amount_owned)
}
function {:inline} $IsEqual'$bb_rewarder_PositionReward'(s1: $bb_rewarder_PositionReward, s2: $bb_rewarder_PositionReward): bool {
    s1 == s2
}

// struct rewarder::Rewarder at ./sources/v3/rewarder.move:27:5+299
datatype $bb_rewarder_Rewarder {
    $bb_rewarder_Rewarder($reward_store: $1_object_Object'$1_fungible_asset_FungibleStore', $emissions_per_second: int, $emissions_per_second_max: int, $emissions_per_liquidity_start: int, $emissions_per_liquidity_latest: int, $user_owed: int, $pause: bool)
}
function {:inline} $Update'$bb_rewarder_Rewarder'_reward_store(s: $bb_rewarder_Rewarder, x: $1_object_Object'$1_fungible_asset_FungibleStore'): $bb_rewarder_Rewarder {
    $bb_rewarder_Rewarder(x, s->$emissions_per_second, s->$emissions_per_second_max, s->$emissions_per_liquidity_start, s->$emissions_per_liquidity_latest, s->$user_owed, s->$pause)
}
function {:inline} $Update'$bb_rewarder_Rewarder'_emissions_per_second(s: $bb_rewarder_Rewarder, x: int): $bb_rewarder_Rewarder {
    $bb_rewarder_Rewarder(s->$reward_store, x, s->$emissions_per_second_max, s->$emissions_per_liquidity_start, s->$emissions_per_liquidity_latest, s->$user_owed, s->$pause)
}
function {:inline} $Update'$bb_rewarder_Rewarder'_emissions_per_second_max(s: $bb_rewarder_Rewarder, x: int): $bb_rewarder_Rewarder {
    $bb_rewarder_Rewarder(s->$reward_store, s->$emissions_per_second, x, s->$emissions_per_liquidity_start, s->$emissions_per_liquidity_latest, s->$user_owed, s->$pause)
}
function {:inline} $Update'$bb_rewarder_Rewarder'_emissions_per_liquidity_start(s: $bb_rewarder_Rewarder, x: int): $bb_rewarder_Rewarder {
    $bb_rewarder_Rewarder(s->$reward_store, s->$emissions_per_second, s->$emissions_per_second_max, x, s->$emissions_per_liquidity_latest, s->$user_owed, s->$pause)
}
function {:inline} $Update'$bb_rewarder_Rewarder'_emissions_per_liquidity_latest(s: $bb_rewarder_Rewarder, x: int): $bb_rewarder_Rewarder {
    $bb_rewarder_Rewarder(s->$reward_store, s->$emissions_per_second, s->$emissions_per_second_max, s->$emissions_per_liquidity_start, x, s->$user_owed, s->$pause)
}
function {:inline} $Update'$bb_rewarder_Rewarder'_user_owed(s: $bb_rewarder_Rewarder, x: int): $bb_rewarder_Rewarder {
    $bb_rewarder_Rewarder(s->$reward_store, s->$emissions_per_second, s->$emissions_per_second_max, s->$emissions_per_liquidity_start, s->$emissions_per_liquidity_latest, x, s->$pause)
}
function {:inline} $Update'$bb_rewarder_Rewarder'_pause(s: $bb_rewarder_Rewarder, x: bool): $bb_rewarder_Rewarder {
    $bb_rewarder_Rewarder(s->$reward_store, s->$emissions_per_second, s->$emissions_per_second_max, s->$emissions_per_liquidity_start, s->$emissions_per_liquidity_latest, s->$user_owed, x)
}
function $IsValid'$bb_rewarder_Rewarder'(s: $bb_rewarder_Rewarder): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''(s->$reward_store)
      && $IsValid'u64'(s->$emissions_per_second)
      && $IsValid'u64'(s->$emissions_per_second_max)
      && $IsValid'u128'(s->$emissions_per_liquidity_start)
      && $IsValid'u128'(s->$emissions_per_liquidity_latest)
      && $IsValid'u64'(s->$user_owed)
      && $IsValid'bool'(s->$pause)
}
function {:inline} $IsEqual'$bb_rewarder_Rewarder'(s1: $bb_rewarder_Rewarder, s2: $bb_rewarder_Rewarder): bool {
    s1 == s2
}

// struct rewarder::RewarderManager at ./sources/v3/rewarder.move:21:5+129
datatype $bb_rewarder_RewarderManager {
    $bb_rewarder_RewarderManager($rewarders: Vec ($bb_rewarder_Rewarder), $last_updated_time: int, $pause: bool)
}
function {:inline} $Update'$bb_rewarder_RewarderManager'_rewarders(s: $bb_rewarder_RewarderManager, x: Vec ($bb_rewarder_Rewarder)): $bb_rewarder_RewarderManager {
    $bb_rewarder_RewarderManager(x, s->$last_updated_time, s->$pause)
}
function {:inline} $Update'$bb_rewarder_RewarderManager'_last_updated_time(s: $bb_rewarder_RewarderManager, x: int): $bb_rewarder_RewarderManager {
    $bb_rewarder_RewarderManager(s->$rewarders, x, s->$pause)
}
function {:inline} $Update'$bb_rewarder_RewarderManager'_pause(s: $bb_rewarder_RewarderManager, x: bool): $bb_rewarder_RewarderManager {
    $bb_rewarder_RewarderManager(s->$rewarders, s->$last_updated_time, x)
}
function $IsValid'$bb_rewarder_RewarderManager'(s: $bb_rewarder_RewarderManager): bool {
    $IsValid'vec'$bb_rewarder_Rewarder''(s->$rewarders)
      && $IsValid'u64'(s->$last_updated_time)
      && $IsValid'bool'(s->$pause)
}
function {:inline} $IsEqual'$bb_rewarder_RewarderManager'(s1: $bb_rewarder_RewarderManager, s2: $bb_rewarder_RewarderManager): bool {
    $IsEqual'vec'$bb_rewarder_Rewarder''(s1->$rewarders, s2->$rewarders)
    && $IsEqual'u64'(s1->$last_updated_time, s2->$last_updated_time)
    && $IsEqual'bool'(s1->$pause, s2->$pause)}

// fun rewarder::flash [baseline] at ./sources/v3/rewarder.move:274:5+1751
procedure {:inline 1} $bb_rewarder_flash(_$t0: $Mutation ($bb_rewarder_RewarderManager), _$t1: int) returns ($ret0: $Mutation ($bb_rewarder_RewarderManager))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: $Mutation ($bb_rewarder_Rewarder);
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $Mutation (int);
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: Vec ($bb_rewarder_Rewarder);
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: bool;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: bool;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: bool;
    var $t45: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t46: int;
    var $t47: int;
    var $t48: int;
    var $t49: int;
    var $t50: int;
    var $t51: int;
    var $t52: int;
    var $t53: int;
    var $t54: int;
    var $t55: bool;
    var $t56: $Mutation (Vec ($bb_rewarder_Rewarder));
    var $t57: $Mutation ($bb_rewarder_Rewarder);
    var $t58: $Mutation (int);
    var $t59: $Mutation (int);
    var $t60: $Mutation (bool);
    var $t61: $Mutation (int);
    var $t62: $Mutation (int);
    var $t0: $Mutation ($bb_rewarder_RewarderManager);
    var $t1: int;
    var $temp_0'$bb_rewarder_Rewarder': $bb_rewarder_Rewarder;
    var $temp_0'$bb_rewarder_RewarderManager': $bb_rewarder_RewarderManager;
    var $temp_0'bool': bool;
    var $temp_0'u128': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[manager]($t0) at ./sources/v3/rewarder.move:274:5+1
    assume {:print "$at(22,9069,9070)"} true;
    $temp_0'$bb_rewarder_RewarderManager' := $Dereference($t0);
    assume {:print "$track_local(111,4,0):", $temp_0'$bb_rewarder_RewarderManager'} $temp_0'$bb_rewarder_RewarderManager' == $temp_0'$bb_rewarder_RewarderManager';

    // trace_local[pool_liquidity]($t1) at ./sources/v3/rewarder.move:274:5+1
    assume {:print "$track_local(111,4,1):", $t1} $t1 == $t1;

    // $t12 := timestamp::now_seconds() on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:278:24+24
    assume {:print "$at(22,9186,9210)"} true;
    call $t12 := $1_timestamp_now_seconds();
    if ($abort_flag) {
        assume {:print "$at(22,9186,9210)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // trace_local[time_now]($t12) at ./sources/v3/rewarder.move:278:24+24
    assume {:print "$track_local(111,4,2):", $t12} $t12 == $t12;

    // $t14 := get_field<0xbb::rewarder::RewarderManager>.last_updated_time($t0) at ./sources/v3/rewarder.move:279:37+25
    assume {:print "$at(22,9248,9273)"} true;
    $t14 := $Dereference($t0)->$last_updated_time;

    // $t15 := -($t12, $t14) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:279:26+36
    call $t15 := $Sub($t12, $t14);
    if ($abort_flag) {
        assume {:print "$at(22,9237,9273)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // trace_local[$t4]($t15) at ./sources/v3/rewarder.move:279:26+36
    assume {:print "$track_local(111,4,3):", $t15} $t15 == $t15;

    // $t16 := 0 at ./sources/v3/rewarder.move:280:26+1
    assume {:print "$at(22,9300,9301)"} true;
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := ==($t15, $t16) at ./sources/v3/rewarder.move:280:12+15
    $t17 := $IsEqual'u64'($t15, $t16);

    // if ($t17) goto L1 else goto L0 at ./sources/v3/rewarder.move:280:9+26
    if ($t17) { goto L1; } else { goto L0; }

    // label L1 at ./sources/v3/rewarder.move:280:29+6
L1:

    // drop($t0) at ./sources/v3/rewarder.move:280:29+6
    assume {:print "$at(22,9303,9309)"} true;

    // trace_local[manager]($t0) at ./sources/v3/rewarder.move:280:29+6
    $temp_0'$bb_rewarder_RewarderManager' := $Dereference($t0);
    assume {:print "$track_local(111,4,0):", $temp_0'$bb_rewarder_RewarderManager'} $temp_0'$bb_rewarder_RewarderManager' == $temp_0'$bb_rewarder_RewarderManager';

    // goto L17 at ./sources/v3/rewarder.move:280:29+6
    goto L17;

    // label L0 at ./sources/v3/rewarder.move:282:17+1
    assume {:print "$at(22,9328,9329)"} true;
L0:

    // $t18 := 0 at ./sources/v3/rewarder.move:282:17+1
    assume {:print "$at(22,9328,9329)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // trace_local[$t5]($t18) at ./sources/v3/rewarder.move:282:17+1
    assume {:print "$track_local(111,4,4):", $t18} $t18 == $t18;

    // $t19 := get_field<0xbb::rewarder::RewarderManager>.rewarders($t0) at ./sources/v3/rewarder.move:283:37+18
    assume {:print "$at(22,9367,9385)"} true;
    $t19 := $Dereference($t0)->$rewarders;

    // $t20 := vector::length<0xbb::rewarder::Rewarder>($t19) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:283:22+34
    call $t20 := $1_vector_length'$bb_rewarder_Rewarder'($t19);
    if ($abort_flag) {
        assume {:print "$at(22,9352,9386)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // $t5 := $t20 at ./sources/v3/rewarder.move:283:22+34
    $t5 := $t20;

    // trace_local[$t9]($t20) at ./sources/v3/rewarder.move:283:22+34
    assume {:print "$track_local(111,4,5):", $t20} $t20 == $t20;

    // $t21 := get_field<0xbb::rewarder::RewarderManager>.pause($t0) at ./sources/v3/rewarder.move:285:12+13
    assume {:print "$at(22,9451,9464)"} true;
    $t21 := $Dereference($t0)->$pause;

    // if ($t21) goto L2 else goto L4 at ./sources/v3/rewarder.move:285:9+28
    if ($t21) { goto L2; } else { goto L4; }

    // label L2 at ./sources/v3/rewarder.move:285:36+1
L2:

    // $t22 := 0 at ./sources/v3/rewarder.move:285:36+1
    assume {:print "$at(22,9475,9476)"} true;
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t5 := $t22 at ./sources/v3/rewarder.move:285:27+10
    $t5 := $t22;

    // trace_local[$t9]($t22) at ./sources/v3/rewarder.move:285:27+10
    assume {:print "$track_local(111,4,5):", $t22} $t22 == $t22;

    // label L4 at ./sources/v3/rewarder.move:286:15+14
    assume {:print "$at(22,9492,9506)"} true;
L4:

    // $t4 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    assume {:print "$at(22,9492,9506)"} true;
    havoc $t4;

    // assume WellFormed($t4) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($t4);

    // $t6 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t6;

    // assume WellFormed($t6) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'bool'($t6);

    // $t10 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t10;

    // assume WellFormed($t10) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($t10);

    // $t23 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t23;

    // assume WellFormed($t23) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u128'($t23);

    // $t24 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t24;

    // assume WellFormed($t24) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'bool'($t24);

    // $t25 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t25;

    // assume WellFormed($t25) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'bool'($t25);

    // $t26 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t26;

    // assume WellFormed($t26) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'bool'($t26);

    // $t27 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t27;

    // assume WellFormed($t27) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($t27);

    // $t28 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t28;

    // assume WellFormed($t28) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($t28);

    // $t29 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t29;

    // assume WellFormed($t29) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u128'($t29);

    // $t30 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t30;

    // assume WellFormed($t30) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u8'($t30);

    // $t31 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t31;

    // assume WellFormed($t31) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u128'($t31);

    // $t32 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t32;

    // assume WellFormed($t32) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u128'($t32);

    // $t33 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t33;

    // assume WellFormed($t33) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''($t33);

    // $t34 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t34;

    // assume WellFormed($t34) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($t34);

    // $t35 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t35;

    // assume WellFormed($t35) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($t35);

    // $t36 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t36;

    // assume WellFormed($t36) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($t36);

    // $t37 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t37;

    // assume WellFormed($t37) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'bool'($t37);

    // $t38 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t38;

    // assume WellFormed($t38) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u128'($t38);

    // $t39 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t39;

    // assume WellFormed($t39) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u128'($t39);

    // $t40 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t40;

    // assume WellFormed($t40) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($t40);

    // $t41 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t41;

    // assume WellFormed($t41) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($t41);

    // $t42 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t42;

    // assume WellFormed($t42) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($t42);

    // $t43 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t43;

    // assume WellFormed($t43) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($t43);

    // $t44 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t44;

    // assume WellFormed($t44) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'bool'($t44);

    // $t45 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t45;

    // assume WellFormed($t45) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''($t45);

    // $t46 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t46;

    // assume WellFormed($t46) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($t46);

    // $t47 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t47;

    // assume WellFormed($t47) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($t47);

    // $t48 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t48;

    // assume WellFormed($t48) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($t48);

    // $t49 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t49;

    // assume WellFormed($t49) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u128'($t49);

    // $t50 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t50;

    // assume WellFormed($t50) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u8'($t50);

    // $t51 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t51;

    // assume WellFormed($t51) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u128'($t51);

    // $t52 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t52;

    // assume WellFormed($t52) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u128'($t52);

    // $t53 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t53;

    // assume WellFormed($t53) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u128'($t53);

    // $t54 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t54;

    // assume WellFormed($t54) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u128'($t54);

    // $t55 := havoc[val]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t55;

    // assume WellFormed($t55) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'bool'($t55);

    // $t0 := havoc[mut]() at ./sources/v3/rewarder.move:286:15+14
    havoc $temp_0'$bb_rewarder_RewarderManager';
    $t0 := $UpdateMutation($t0, $temp_0'$bb_rewarder_RewarderManager');

    // assume WellFormed($t0) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'$bb_rewarder_RewarderManager'($Dereference($t0));

    // $t56 := havoc[mut_all]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t56;

    // assume WellFormed($t56) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'vec'$bb_rewarder_Rewarder''($Dereference($t56));

    // $t57 := havoc[mut_all]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t57;

    // assume WellFormed($t57) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'$bb_rewarder_Rewarder'($Dereference($t57));

    // $t58 := havoc[mut_all]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t58;

    // assume WellFormed($t58) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u128'($Dereference($t58));

    // $t59 := havoc[mut_all]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t59;

    // assume WellFormed($t59) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u64'($Dereference($t59));

    // $t60 := havoc[mut_all]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t60;

    // assume WellFormed($t60) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'bool'($Dereference($t60));

    // $t61 := havoc[mut_all]() at ./sources/v3/rewarder.move:286:15+14
    havoc $t61;

    // assume WellFormed($t61) at ./sources/v3/rewarder.move:286:15+14
    assume $IsValid'u128'($Dereference($t61));

    // trace_local[manager]($t0) at ./sources/v3/rewarder.move:286:15+14
    assume {:print "$info(): enter loop, variable(s) manager, $t5, $t7, $t35 havocked and reassigned"} true;
    $temp_0'$bb_rewarder_RewarderManager' := $Dereference($t0);
    assume {:print "$track_local(111,4,0):", $temp_0'$bb_rewarder_RewarderManager'} $temp_0'$bb_rewarder_RewarderManager' == $temp_0'$bb_rewarder_RewarderManager';

    // trace_local[$t5]($t4) at ./sources/v3/rewarder.move:286:15+14
    assume {:print "$track_local(111,4,4):", $t4} $t4 == $t4;

    // trace_local[$t7]($t6) at ./sources/v3/rewarder.move:286:15+14
    assume {:print "$track_local(111,4,6):", $t6} $t6 == $t6;

    // trace_local[$t35]($t10) at ./sources/v3/rewarder.move:286:15+14
    assume {:print "$track_local(111,4,10):", $t10} $t10 == $t10;

    // assume Not(AbortFlag()) at ./sources/v3/rewarder.move:286:15+14
    assume !$abort_flag;

    // $t23 := 0 at ./sources/v3/rewarder.move:286:33+1
    $t23 := 0;
    assume $IsValid'u128'($t23);

    // $t24 := !=($t1, $t23) at ./sources/v3/rewarder.move:286:15+19
    $t24 := !$IsEqual'u128'($t1, $t23);

    // if ($t24) goto L6 else goto L5 at ./sources/v3/rewarder.move:286:15+33
    if ($t24) { goto L6; } else { goto L5; }

    // label L6 at ./sources/v3/rewarder.move:286:38+1
L6:

    // $t25 := <($t4, $t5) at ./sources/v3/rewarder.move:286:38+10
    assume {:print "$at(22,9515,9525)"} true;
    call $t25 := $Lt($t4, $t5);

    // $t6 := $t25 at ./sources/v3/rewarder.move:286:38+10
    $t6 := $t25;

    // trace_local[$t7]($t25) at ./sources/v3/rewarder.move:286:38+10
    assume {:print "$track_local(111,4,6):", $t25} $t25 == $t25;

    // label L15 at ./sources/v3/rewarder.move:286:9+1280
L15:

    // if ($t6) goto L8 else goto L7 at ./sources/v3/rewarder.move:286:9+1280
    assume {:print "$at(22,9486,10766)"} true;
    if ($t6) { goto L8; } else { goto L7; }

    // label L8 at ./sources/v3/rewarder.move:287:47+22
    assume {:print "$at(22,9575,9597)"} true;
L8:

    // $t56 := borrow_field<0xbb::rewarder::RewarderManager>.rewarders($t0) at ./sources/v3/rewarder.move:287:47+22
    assume {:print "$at(22,9575,9597)"} true;
    $t56 := $ChildMutation($t0, 0, $Dereference($t0)->$rewarders);

    // $t57 := vector::borrow_mut<0xbb::rewarder::Rewarder>($t56, $t4) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:287:28+45
    call $t57,$t56 := $1_vector_borrow_mut'$bb_rewarder_Rewarder'($t56, $t4);
    if ($abort_flag) {
        assume {:print "$at(22,9556,9601)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // trace_local[rewarder]($t57) at ./sources/v3/rewarder.move:287:28+45
    $temp_0'$bb_rewarder_Rewarder' := $Dereference($t57);
    assume {:print "$track_local(111,4,7):", $temp_0'$bb_rewarder_Rewarder'} $temp_0'$bb_rewarder_Rewarder' == $temp_0'$bb_rewarder_Rewarder';

    // $t26 := get_field<0xbb::rewarder::Rewarder>.pause($t57) at ./sources/v3/rewarder.move:288:17+14
    assume {:print "$at(22,9619,9633)"} true;
    $t26 := $Dereference($t57)->$pause;

    // if ($t26) goto L9 else goto L10 at ./sources/v3/rewarder.move:288:16+15
    if ($t26) { goto L9; } else { goto L10; }

    // label L10 at ./sources/v3/rewarder.move:289:29+29
    assume {:print "$at(22,9665,9694)"} true;
L10:

    // $t27 := get_field<0xbb::rewarder::Rewarder>.emissions_per_second($t57) at ./sources/v3/rewarder.move:289:29+29
    assume {:print "$at(22,9665,9694)"} true;
    $t27 := $Dereference($t57)->$emissions_per_second;

    // $t28 := *($t27, $t15) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:289:29+42
    call $t28 := $MulU64($t27, $t15);
    if ($abort_flag) {
        assume {:print "$at(22,9665,9707)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // trace_local[$t15]($t28) at ./sources/v3/rewarder.move:289:29+42
    assume {:print "$track_local(111,4,8):", $t28} $t28 == $t28;

    // $t29 := (u128)($t28) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:290:54+15
    assume {:print "$at(22,9762,9777)"} true;
    call $t29 := $CastU128($t28);
    if ($abort_flag) {
        assume {:print "$at(22,9762,9777)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // $t30 := 64 at ./sources/v3/rewarder.move:290:73+2
    $t30 := 64;
    assume $IsValid'u8'($t30);

    // $t31 := <<($t29, $t30) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:290:53+23
    call $t31 := $ShlU128($t29, $t30);
    if ($abort_flag) {
        assume {:print "$at(22,9761,9784)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // $t32 := /($t31, $t1) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:290:53+40
    call $t32 := $Div($t31, $t1);
    if ($abort_flag) {
        assume {:print "$at(22,9761,9801)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // trace_local[$t18]($t32) at ./sources/v3/rewarder.move:290:53+40
    assume {:print "$track_local(111,4,9):", $t32} $t32 == $t32;

    // $t33 := get_field<0xbb::rewarder::Rewarder>.reward_store($t57) at ./sources/v3/rewarder.move:292:45+21
    assume {:print "$at(22,9892,9913)"} true;
    $t33 := $Dereference($t57)->$reward_store;

    // $t34 := fungible_asset::balance<0x1::fungible_asset::FungibleStore>($t33) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:292:21+46
    call $t34 := $1_fungible_asset_balance'$1_fungible_asset_FungibleStore'($t33);
    if ($abort_flag) {
        assume {:print "$at(22,9868,9914)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // $t35 := get_field<0xbb::rewarder::Rewarder>.user_owed($t57) at ./sources/v3/rewarder.move:292:70+18
    $t35 := $Dereference($t57)->$user_owed;

    // $t36 := -($t34, $t35) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:291:44+90
    assume {:print "$at(22,9846,9936)"} true;
    call $t36 := $Sub($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(22,9846,9936)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // $t37 := <($t28, $t36) at ./sources/v3/rewarder.move:291:36+98
    call $t37 := $Lt($t28, $t36);

    // if ($t37) goto L12 else goto L11 at ./sources/v3/rewarder.move:291:33+816
    if ($t37) { goto L12; } else { goto L11; }

    // label L12 at ./sources/v3/rewarder.move:295:25+39
    assume {:print "$at(22,10043,10082)"} true;
L12:

    // $t38 := get_field<0xbb::rewarder::Rewarder>.emissions_per_liquidity_latest($t57) at ./sources/v3/rewarder.move:295:25+39
    assume {:print "$at(22,10043,10082)"} true;
    $t38 := $Dereference($t57)->$emissions_per_liquidity_latest;

    // $t39 := +($t38, $t32) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:295:25+71
    call $t39 := $AddU128($t38, $t32);
    if ($abort_flag) {
        assume {:print "$at(22,10043,10114)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // $t58 := borrow_field<0xbb::rewarder::Rewarder>.emissions_per_liquidity_latest($t57) at ./sources/v3/rewarder.move:294:21+39
    assume {:print "$at(22,9977,10016)"} true;
    $t58 := $ChildMutation($t57, 4, $Dereference($t57)->$emissions_per_liquidity_latest);

    // write_ref($t58, $t39) at ./sources/v3/rewarder.move:294:21+137
    $t58 := $UpdateMutation($t58, $t39);

    // write_back[Reference($t57).emissions_per_liquidity_latest (u128)]($t58) at ./sources/v3/rewarder.move:294:21+137
    $t57 := $UpdateMutation($t57, $Update'$bb_rewarder_Rewarder'_emissions_per_liquidity_latest($Dereference($t57), $Dereference($t58)));

    // $t10 := $t28 at ./sources/v3/rewarder.move:296:21+5
    assume {:print "$at(22,10136,10141)"} true;
    $t10 := $t28;

    // trace_local[$t35]($t28) at ./sources/v3/rewarder.move:296:21+5
    assume {:print "$track_local(111,4,10):", $t28} $t28 == $t28;

    // label L13 at ./sources/v3/rewarder.move:305:38+9
    assume {:print "$at(22,10690,10699)"} true;
L13:

    // $t40 := get_field<0xbb::rewarder::Rewarder>.user_owed($t57) at ./sources/v3/rewarder.move:305:50+18
    assume {:print "$at(22,10702,10720)"} true;
    $t40 := $Dereference($t57)->$user_owed;

    // $t41 := +($t10, $t40) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:305:38+30
    call $t41 := $AddU64($t10, $t40);
    if ($abort_flag) {
        assume {:print "$at(22,10690,10720)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // $t59 := borrow_field<0xbb::rewarder::Rewarder>.user_owed($t57) at ./sources/v3/rewarder.move:305:17+18
    $t59 := $ChildMutation($t57, 5, $Dereference($t57)->$user_owed);

    // write_ref($t59, $t41) at ./sources/v3/rewarder.move:305:17+51
    $t59 := $UpdateMutation($t59, $t41);

    // write_back[Reference($t57).user_owed (u64)]($t59) at ./sources/v3/rewarder.move:305:17+51
    $t57 := $UpdateMutation($t57, $Update'$bb_rewarder_Rewarder'_user_owed($Dereference($t57), $Dereference($t59)));

    // write_back[Reference($t56)[]]($t57) at ./sources/v3/rewarder.move:305:17+51
    $t56 := $UpdateMutation($t56, UpdateVec($Dereference($t56), ReadVec($t57->p, LenVec($t56->p)), $Dereference($t57)));

    // write_back[Reference($t0).rewarders (vector<0xbb::rewarder::Rewarder>)]($t56) at ./sources/v3/rewarder.move:305:17+51
    $t0 := $UpdateMutation($t0, $Update'$bb_rewarder_RewarderManager'_rewarders($Dereference($t0), $Dereference($t56)));

    // trace_local[manager]($t0) at ./sources/v3/rewarder.move:305:17+51
    $temp_0'$bb_rewarder_RewarderManager' := $Dereference($t0);
    assume {:print "$track_local(111,4,0):", $temp_0'$bb_rewarder_RewarderManager'} $temp_0'$bb_rewarder_RewarderManager' == $temp_0'$bb_rewarder_RewarderManager';

    // label L14 at ./sources/v3/rewarder.move:307:13+1
    assume {:print "$at(22,10749,10750)"} true;
L14:

    // $t42 := 1 at ./sources/v3/rewarder.move:307:18+1
    assume {:print "$at(22,10754,10755)"} true;
    $t42 := 1;
    assume $IsValid'u64'($t42);

    // $t43 := +($t4, $t42) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:307:13+6
    call $t43 := $AddU64($t4, $t42);
    if ($abort_flag) {
        assume {:print "$at(22,10749,10755)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // trace_local[$t5]($t43) at ./sources/v3/rewarder.move:307:13+6
    assume {:print "$track_local(111,4,4):", $t43} $t43 == $t43;

    // goto L16 at ./sources/v3/rewarder.move:286:9+1280
    assume {:print "$at(22,9486,10766)"} true;
    goto L16;

    // label L11 at ./sources/v3/rewarder.move:298:38+4
    assume {:print "$at(22,10204,10208)"} true;
L11:

    // $t44 := true at ./sources/v3/rewarder.move:298:38+4
    assume {:print "$at(22,10204,10208)"} true;
    $t44 := true;
    assume $IsValid'bool'($t44);

    // $t60 := borrow_field<0xbb::rewarder::Rewarder>.pause($t57) at ./sources/v3/rewarder.move:298:21+14
    $t60 := $ChildMutation($t57, 6, $Dereference($t57)->$pause);

    // write_ref($t60, $t44) at ./sources/v3/rewarder.move:298:21+21
    $t60 := $UpdateMutation($t60, $t44);

    // write_back[Reference($t57).pause (bool)]($t60) at ./sources/v3/rewarder.move:298:21+21
    $t57 := $UpdateMutation($t57, $Update'$bb_rewarder_Rewarder'_pause($Dereference($t57), $Dereference($t60)));

    // $t45 := get_field<0xbb::rewarder::Rewarder>.reward_store($t57) at ./sources/v3/rewarder.move:299:66+21
    assume {:print "$at(22,10275,10296)"} true;
    $t45 := $Dereference($t57)->$reward_store;

    // $t46 := fungible_asset::balance<0x1::fungible_asset::FungibleStore>($t45) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:299:42+46
    call $t46 := $1_fungible_asset_balance'$1_fungible_asset_FungibleStore'($t45);
    if ($abort_flag) {
        assume {:print "$at(22,10251,10297)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // $t47 := get_field<0xbb::rewarder::Rewarder>.user_owed($t57) at ./sources/v3/rewarder.move:299:91+18
    $t47 := $Dereference($t57)->$user_owed;

    // $t48 := -($t46, $t47) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:299:41+69
    call $t48 := $Sub($t46, $t47);
    if ($abort_flag) {
        assume {:print "$at(22,10250,10319)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // trace_local[$t15]($t48) at ./sources/v3/rewarder.move:299:41+69
    assume {:print "$track_local(111,4,8):", $t48} $t48 == $t48;

    // $t49 := (u128)($t48) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:300:65+23
    assume {:print "$at(22,10385,10408)"} true;
    call $t49 := $CastU128($t48);
    if ($abort_flag) {
        assume {:print "$at(22,10385,10408)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // $t50 := 64 at ./sources/v3/rewarder.move:300:92+2
    $t50 := 64;
    assume $IsValid'u8'($t50);

    // $t51 := <<($t49, $t50) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:300:64+31
    call $t51 := $ShlU128($t49, $t50);
    if ($abort_flag) {
        assume {:print "$at(22,10384,10415)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // $t52 := /($t51, $t1) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:300:64+48
    call $t52 := $Div($t51, $t1);
    if ($abort_flag) {
        assume {:print "$at(22,10384,10432)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // trace_local[$t18]($t52) at ./sources/v3/rewarder.move:300:64+48
    assume {:print "$track_local(111,4,9):", $t52} $t52 == $t52;

    // $t53 := get_field<0xbb::rewarder::Rewarder>.emissions_per_liquidity_latest($t57) at ./sources/v3/rewarder.move:302:25+39
    assume {:print "$at(22,10520,10559)"} true;
    $t53 := $Dereference($t57)->$emissions_per_liquidity_latest;

    // $t54 := +($t53, $t52) on_abort goto L18 with $t13 at ./sources/v3/rewarder.move:302:25+78
    call $t54 := $AddU128($t53, $t52);
    if ($abort_flag) {
        assume {:print "$at(22,10520,10598)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(111,4):", $t13} $t13 == $t13;
        goto L18;
    }

    // $t61 := borrow_field<0xbb::rewarder::Rewarder>.emissions_per_liquidity_latest($t57) at ./sources/v3/rewarder.move:301:21+39
    assume {:print "$at(22,10454,10493)"} true;
    $t61 := $ChildMutation($t57, 4, $Dereference($t57)->$emissions_per_liquidity_latest);

    // write_ref($t61, $t54) at ./sources/v3/rewarder.move:301:21+144
    $t61 := $UpdateMutation($t61, $t54);

    // write_back[Reference($t57).emissions_per_liquidity_latest (u128)]($t61) at ./sources/v3/rewarder.move:301:21+144
    $t57 := $UpdateMutation($t57, $Update'$bb_rewarder_Rewarder'_emissions_per_liquidity_latest($Dereference($t57), $Dereference($t61)));

    // $t10 := $t48 at ./sources/v3/rewarder.move:303:21+13
    assume {:print "$at(22,10620,10633)"} true;
    $t10 := $t48;

    // trace_local[$t35]($t48) at ./sources/v3/rewarder.move:303:21+13
    assume {:print "$track_local(111,4,10):", $t48} $t48 == $t48;

    // goto L13 at ./sources/v3/rewarder.move:303:21+13
    goto L13;

    // label L9 at ./sources/v3/rewarder.move:288:13+1120
    assume {:print "$at(22,9615,10735)"} true;
L9:

    // write_back[Reference($t56)[]]($t57) at ./sources/v3/rewarder.move:288:13+1120
    assume {:print "$at(22,9615,10735)"} true;
    $t56 := $UpdateMutation($t56, UpdateVec($Dereference($t56), ReadVec($t57->p, LenVec($t56->p)), $Dereference($t57)));

    // write_back[Reference($t0).rewarders (vector<0xbb::rewarder::Rewarder>)]($t56) at ./sources/v3/rewarder.move:288:13+1120
    $t0 := $UpdateMutation($t0, $Update'$bb_rewarder_RewarderManager'_rewarders($Dereference($t0), $Dereference($t56)));

    // trace_local[manager]($t0) at ./sources/v3/rewarder.move:288:13+1120
    $temp_0'$bb_rewarder_RewarderManager' := $Dereference($t0);
    assume {:print "$track_local(111,4,0):", $temp_0'$bb_rewarder_RewarderManager'} $temp_0'$bb_rewarder_RewarderManager' == $temp_0'$bb_rewarder_RewarderManager';

    // drop($t57) at ./sources/v3/rewarder.move:288:13+1120

    // goto L14 at ./sources/v3/rewarder.move:288:13+1120
    goto L14;

    // label L7 at ./sources/v3/rewarder.move:310:9+25
    assume {:print "$at(22,10777,10802)"} true;
L7:

    // $t62 := borrow_field<0xbb::rewarder::RewarderManager>.last_updated_time($t0) at ./sources/v3/rewarder.move:310:9+25
    assume {:print "$at(22,10777,10802)"} true;
    $t62 := $ChildMutation($t0, 1, $Dereference($t0)->$last_updated_time);

    // trace_local[$t66]($t62) at ./sources/v3/rewarder.move:310:9+36
    $temp_0'u64' := $Dereference($t62);
    assume {:print "$track_local(111,4,11):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // write_ref($t62, $t12) at ./sources/v3/rewarder.move:310:9+36
    $t62 := $UpdateMutation($t62, $t12);

    // write_back[Reference($t0).last_updated_time (u64)]($t62) at ./sources/v3/rewarder.move:310:9+36
    $t0 := $UpdateMutation($t0, $Update'$bb_rewarder_RewarderManager'_last_updated_time($Dereference($t0), $Dereference($t62)));

    // trace_local[manager]($t0) at ./sources/v3/rewarder.move:310:9+36
    $temp_0'$bb_rewarder_RewarderManager' := $Dereference($t0);
    assume {:print "$track_local(111,4,0):", $temp_0'$bb_rewarder_RewarderManager'} $temp_0'$bb_rewarder_RewarderManager' == $temp_0'$bb_rewarder_RewarderManager';

    // trace_local[manager]($t0) at ./sources/v3/rewarder.move:277:7+1659
    assume {:print "$at(22,9161,10820)"} true;
    $temp_0'$bb_rewarder_RewarderManager' := $Dereference($t0);
    assume {:print "$track_local(111,4,0):", $temp_0'$bb_rewarder_RewarderManager'} $temp_0'$bb_rewarder_RewarderManager' == $temp_0'$bb_rewarder_RewarderManager';

    // goto L17 at ./sources/v3/rewarder.move:277:7+1659
    goto L17;

    // label L5 at ./sources/v3/rewarder.move:286:15+33
    assume {:print "$at(22,9492,9525)"} true;
L5:

    // $t55 := false at ./sources/v3/rewarder.move:286:15+33
    assume {:print "$at(22,9492,9525)"} true;
    $t55 := false;
    assume $IsValid'bool'($t55);

    // $t6 := $t55 at ./sources/v3/rewarder.move:286:15+33
    $t6 := $t55;

    // trace_local[$t7]($t55) at ./sources/v3/rewarder.move:286:15+33
    assume {:print "$track_local(111,4,6):", $t55} $t55 == $t55;

    // goto L15 at ./sources/v3/rewarder.move:286:15+33
    goto L15;

    // label L16 at ./sources/v3/rewarder.move:286:15+33
    // Loop invariant checking block for the loop started with header: L4
L16:

    // stop() at ./sources/v3/rewarder.move:286:15+33
    assume {:print "$at(22,9492,9525)"} true;
    assume false;
    return;

    // label L17 at ./sources/v3/rewarder.move:311:5+1
    assume {:print "$at(22,10819,10820)"} true;
L17:

    // return () at ./sources/v3/rewarder.move:311:5+1
    assume {:print "$at(22,10819,10820)"} true;
    $ret0 := $t0;
    return;

    // label L18 at ./sources/v3/rewarder.move:311:5+1
L18:

    // abort($t13) at ./sources/v3/rewarder.move:311:5+1
    assume {:print "$at(22,10819,10820)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun rewarder::get_emissions_per_liquidity_list [baseline] at ./sources/v3/rewarder.move:593:5+295
procedure {:inline 1} $bb_rewarder_get_emissions_per_liquidity_list(_$t0: $bb_rewarder_RewarderManager) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: Vec ($bb_rewarder_Rewarder);
    var $t3: int;
    var $t4: int;
    var $t5: $bb_rewarder_Rewarder;
    var $t6: int;
    var $t7: Vec ($bb_rewarder_Rewarder);
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: $bb_rewarder_Rewarder;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation (Vec (int));
    var $t16: Vec (int);
    var $t0: $bb_rewarder_RewarderManager;
    var $temp_0'$bb_rewarder_Rewarder': $bb_rewarder_Rewarder;
    var $temp_0'$bb_rewarder_RewarderManager': $bb_rewarder_RewarderManager;
    var $temp_0'u64': int;
    var $temp_0'vec'$bb_rewarder_Rewarder'': Vec ($bb_rewarder_Rewarder);
    var $temp_0'vec'u128'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[reward_manager]($t0) at ./sources/v3/rewarder.move:593:5+1
    assume {:print "$at(22,21237,21238)"} true;
    assume {:print "$track_local(111,5,0):", $t0} $t0 == $t0;

    // $t1 := vector::empty<u128>() on_abort goto L5 with $t6 at ./sources/v3/rewarder.move:596:20+21
    assume {:print "$at(22,21367,21388)"} true;
    call $t1 := $1_vector_empty'u128'();
    if ($abort_flag) {
        assume {:print "$at(22,21367,21388)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(111,5):", $t6} $t6 == $t6;
        goto L5;
    }

    // trace_local[list]($t1) at ./sources/v3/rewarder.move:596:20+21
    assume {:print "$track_local(111,5,1):", $t1} $t1 == $t1;

    // $t7 := get_field<0xbb::rewarder::RewarderManager>.rewarders($t0) at ./sources/v3/rewarder.move:597:9+114
    assume {:print "$at(22,21398,21512)"} true;
    $t7 := $t0->$rewarders;

    // trace_local[$t4]($t7) at ./sources/v3/rewarder.move:597:9+114
    assume {:print "$track_local(111,5,2):", $t7} $t7 == $t7;

    // $t8 := 0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:382:17+1
    assume {:print "$at(44,14142,14143)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // trace_local[i]($t8) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:382:17+1
    assume {:print "$track_local(111,5,3):", $t8} $t8 == $t8;

    // $t9 := vector::length<0xbb::rewarder::Rewarder>($t7) on_abort goto L5 with $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:383:19+12
    assume {:print "$at(44,14163,14175)"} true;
    call $t9 := $1_vector_length'$bb_rewarder_Rewarder'($t7);
    if ($abort_flag) {
        assume {:print "$at(44,14163,14175)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(111,5):", $t6} $t6 == $t6;
        goto L5;
    }

    // trace_local[len]($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:383:19+12
    assume {:print "$track_local(111,5,4):", $t9} $t9 == $t9;

    // label L2 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume {:print "$at(44,14192,14193)"} true;
L2:

    // $t1 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume {:print "$at(44,14192,14193)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'vec'u128''($t1);

    // $t3 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t3;

    // assume WellFormed($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'u64'($t3);

    // $t10 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t10;

    // assume WellFormed($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t11;

    // assume WellFormed($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'$bb_rewarder_Rewarder'($t11);

    // $t12 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t12;

    // assume WellFormed($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'u128'($t12);

    // $t13 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t13;

    // assume WellFormed($t13) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'u64'($t13);

    // $t14 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t14;

    // assume WellFormed($t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'u64'($t14);

    // $t15 := havoc[mut_all]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t15;

    // assume WellFormed($t15) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'vec'u128''($Dereference($t15));

    // trace_local[list]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume {:print "$info(): enter loop, variable(s) list, i havocked and reassigned"} true;
    assume {:print "$track_local(111,5,1):", $t1} $t1 == $t1;

    // trace_local[i]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume {:print "$track_local(111,5,3):", $t3} $t3 == $t3;

    // assume Not(AbortFlag()) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume !$abort_flag;

    // $t10 := <($t3, $t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+7
    call $t10 := $Lt($t3, $t9);

    // if ($t10) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:9+81
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:385:22+4
    assume {:print "$at(44,14224,14228)"} true;
L1:

    // $t11 := vector::borrow<0xbb::rewarder::Rewarder>($t7, $t3) on_abort goto L5 with $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:385:15+15
    assume {:print "$at(44,14217,14232)"} true;
    call $t11 := $1_vector_borrow'$bb_rewarder_Rewarder'($t7, $t3);
    if ($abort_flag) {
        assume {:print "$at(44,14217,14232)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(111,5):", $t6} $t6 == $t6;
        goto L5;
    }

    // trace_local[$t10]($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:385:15+15
    assume {:print "$track_local(111,5,5):", $t11} $t11 == $t11;

    // $t15 := borrow_local($t1) at ./sources/v3/rewarder.move:598:13+48
    assume {:print "$at(22,21453,21501)"} true;
    $t15 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t12 := get_field<0xbb::rewarder::Rewarder>.emissions_per_liquidity_latest($t11) at ./sources/v3/rewarder.move:598:28+32
    $t12 := $t11->$emissions_per_liquidity_latest;

    // vector::push_back<u128>($t15, $t12) on_abort goto L5 with $t6 at ./sources/v3/rewarder.move:598:13+48
    call $t15 := $1_vector_push_back'u128'($t15, $t12);
    if ($abort_flag) {
        assume {:print "$at(22,21453,21501)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(111,5):", $t6} $t6 == $t6;
        goto L5;
    }

    // write_back[LocalRoot($t1)@]($t15) at ./sources/v3/rewarder.move:598:13+48
    $t1 := $Dereference($t15);

    // trace_local[list]($t1) at ./sources/v3/rewarder.move:598:13+48
    assume {:print "$track_local(111,5,1):", $t1} $t1 == $t1;

    // $t13 := 1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:386:21+1
    assume {:print "$at(44,14255,14256)"} true;
    $t13 := 1;
    assume $IsValid'u64'($t13);

    // $t14 := +($t3, $t13) on_abort goto L5 with $t6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:386:17+5
    call $t14 := $AddU64($t3, $t13);
    if ($abort_flag) {
        assume {:print "$at(44,14251,14256)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(111,5):", $t6} $t6 == $t6;
        goto L5;
    }

    // trace_local[i]($t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:386:13+9
    assume {:print "$track_local(111,5,3):", $t14} $t14 == $t14;

    // goto L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:9+81
    assume {:print "$at(44,14185,14266)"} true;
    goto L3;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:9+81
L0:

    // $t16 := move($t1) at ./sources/v3/rewarder.move:600:9+4
    assume {:print "$at(22,21522,21526)"} true;
    $t16 := $t1;

    // trace_return[0]($t16) at ./sources/v3/rewarder.move:595:23+186
    assume {:print "$at(22,21346,21532)"} true;
    assume {:print "$track_return(111,5,0):", $t16} $t16 == $t16;

    // goto L4 at ./sources/v3/rewarder.move:595:23+186
    goto L4;

    // label L3 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:9+81
    // Loop invariant checking block for the loop started with header: L2
    assume {:print "$at(44,14185,14266)"} true;
L3:

    // stop() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:9+81
    assume {:print "$at(44,14185,14266)"} true;
    assume false;
    return;

    // label L4 at ./sources/v3/rewarder.move:601:5+1
    assume {:print "$at(22,21531,21532)"} true;
L4:

    // return $t16 at ./sources/v3/rewarder.move:601:5+1
    assume {:print "$at(22,21531,21532)"} true;
    $ret0 := $t16;
    return;

    // label L5 at ./sources/v3/rewarder.move:601:5+1
L5:

    // abort($t6) at ./sources/v3/rewarder.move:601:5+1
    assume {:print "$at(22,21531,21532)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun rewarder::get_emissions_rate_list [baseline] at ./sources/v3/rewarder.move:579:5+397
procedure {:inline 1} $bb_rewarder_get_emissions_rate_list(_$t0: $bb_rewarder_RewarderManager) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: Vec ($bb_rewarder_Rewarder);
    var $t3: int;
    var $t4: int;
    var $t5: $bb_rewarder_Rewarder;
    var $t6: bool;
    var $t7: int;
    var $t8: Vec ($bb_rewarder_Rewarder);
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: $bb_rewarder_Rewarder;
    var $t13: bool;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: $Mutation (Vec (int));
    var $t21: $Mutation (Vec (int));
    var $t22: Vec (int);
    var $t0: $bb_rewarder_RewarderManager;
    var $temp_0'$bb_rewarder_Rewarder': $bb_rewarder_Rewarder;
    var $temp_0'$bb_rewarder_RewarderManager': $bb_rewarder_RewarderManager;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'$bb_rewarder_Rewarder'': Vec ($bb_rewarder_Rewarder);
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[reward_manager]($t0) at ./sources/v3/rewarder.move:579:5+1
    assume {:print "$at(22,20834,20835)"} true;
    assume {:print "$track_local(111,7,0):", $t0} $t0 == $t0;

    // $t1 := vector::empty<u64>() on_abort goto L11 with $t7 at ./sources/v3/rewarder.move:582:20+20
    assume {:print "$at(22,20954,20974)"} true;
    call $t1 := $1_vector_empty'u64'();
    if ($abort_flag) {
        assume {:print "$at(22,20954,20974)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(111,7):", $t7} $t7 == $t7;
        goto L11;
    }

    // trace_local[list]($t1) at ./sources/v3/rewarder.move:582:20+20
    assume {:print "$track_local(111,7,1):", $t1} $t1 == $t1;

    // $t8 := get_field<0xbb::rewarder::RewarderManager>.rewarders($t0) at ./sources/v3/rewarder.move:583:9+227
    assume {:print "$at(22,20984,21211)"} true;
    $t8 := $t0->$rewarders;

    // trace_local[$t4]($t8) at ./sources/v3/rewarder.move:583:9+227
    assume {:print "$track_local(111,7,2):", $t8} $t8 == $t8;

    // $t9 := 0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:382:17+1
    assume {:print "$at(44,14142,14143)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // trace_local[i]($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:382:17+1
    assume {:print "$track_local(111,7,3):", $t9} $t9 == $t9;

    // $t10 := vector::length<0xbb::rewarder::Rewarder>($t8) on_abort goto L11 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:383:19+12
    assume {:print "$at(44,14163,14175)"} true;
    call $t10 := $1_vector_length'$bb_rewarder_Rewarder'($t8);
    if ($abort_flag) {
        assume {:print "$at(44,14163,14175)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(111,7):", $t7} $t7 == $t7;
        goto L11;
    }

    // trace_local[len]($t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:383:19+12
    assume {:print "$track_local(111,7,4):", $t10} $t10 == $t10;

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume {:print "$at(44,14192,14193)"} true;
L6:

    // $t1 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume {:print "$at(44,14192,14193)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'vec'u64''($t1);

    // $t3 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t3;

    // assume WellFormed($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'u64'($t3);

    // $t6 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t6;

    // assume WellFormed($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'bool'($t6);

    // $t11 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t11;

    // assume WellFormed($t11) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'bool'($t11);

    // $t12 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t12;

    // assume WellFormed($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'$bb_rewarder_Rewarder'($t12);

    // $t13 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t13;

    // assume WellFormed($t13) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'bool'($t13);

    // $t14 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t14;

    // assume WellFormed($t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'bool'($t14);

    // $t15 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t15;

    // assume WellFormed($t15) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'u64'($t15);

    // $t16 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t16;

    // assume WellFormed($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'u64'($t16);

    // $t17 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t17;

    // assume WellFormed($t17) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t18;

    // assume WellFormed($t18) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'u64'($t18);

    // $t19 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t19;

    // assume WellFormed($t19) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'bool'($t19);

    // $t20 := havoc[mut_all]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t20;

    // assume WellFormed($t20) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'vec'u64''($Dereference($t20));

    // $t21 := havoc[mut_all]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    havoc $t21;

    // assume WellFormed($t21) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume $IsValid'vec'u64''($Dereference($t21));

    // trace_local[list]($t1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume {:print "$info(): enter loop, variable(s) list, i, $t7 havocked and reassigned"} true;
    assume {:print "$track_local(111,7,1):", $t1} $t1 == $t1;

    // trace_local[i]($t3) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume {:print "$track_local(111,7,3):", $t3} $t3 == $t3;

    // trace_local[$t7]($t6) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume {:print "$track_local(111,7,6):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+1
    assume !$abort_flag;

    // $t11 := <($t3, $t10) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:16+7
    call $t11 := $Lt($t3, $t10);

    // if ($t11) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:9+81
    if ($t11) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:385:22+4
    assume {:print "$at(44,14224,14228)"} true;
L1:

    // $t12 := vector::borrow<0xbb::rewarder::Rewarder>($t8, $t3) on_abort goto L11 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:385:15+15
    assume {:print "$at(44,14217,14232)"} true;
    call $t12 := $1_vector_borrow'$bb_rewarder_Rewarder'($t8, $t3);
    if ($abort_flag) {
        assume {:print "$at(44,14217,14232)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(111,7):", $t7} $t7 == $t7;
        goto L11;
    }

    // trace_local[$t10]($t12) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:385:15+15
    assume {:print "$track_local(111,7,5):", $t12} $t12 == $t12;

    // $t13 := get_field<0xbb::rewarder::RewarderManager>.pause($t0) at ./sources/v3/rewarder.move:584:16+20
    assume {:print "$at(22,21042,21062)"} true;
    $t13 := $t0->$pause;

    // if ($t13) goto L3 else goto L2 at ./sources/v3/rewarder.move:584:16+31
    if ($t13) { goto L3; } else { goto L2; }

    // label L3 at ./sources/v3/rewarder.move:584:16+31
L3:

    // $t14 := true at ./sources/v3/rewarder.move:584:16+31
    assume {:print "$at(22,21042,21073)"} true;
    $t14 := true;
    assume $IsValid'bool'($t14);

    // $t6 := $t14 at ./sources/v3/rewarder.move:584:16+31
    $t6 := $t14;

    // trace_local[$t7]($t14) at ./sources/v3/rewarder.move:584:16+31
    assume {:print "$track_local(111,7,6):", $t14} $t14 == $t14;

    // label L8 at ./sources/v3/rewarder.move:584:13+161
L8:

    // if ($t6) goto L5 else goto L4 at ./sources/v3/rewarder.move:584:13+161
    assume {:print "$at(22,21039,21200)"} true;
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at ./sources/v3/rewarder.move:585:17+17
    assume {:print "$at(22,21093,21110)"} true;
L5:

    // $t20 := borrow_local($t1) at ./sources/v3/rewarder.move:585:17+17
    assume {:print "$at(22,21093,21110)"} true;
    $t20 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t15 := 0 at ./sources/v3/rewarder.move:585:32+1
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // vector::push_back<u64>($t20, $t15) on_abort goto L11 with $t7 at ./sources/v3/rewarder.move:585:17+17
    call $t20 := $1_vector_push_back'u64'($t20, $t15);
    if ($abort_flag) {
        assume {:print "$at(22,21093,21110)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(111,7):", $t7} $t7 == $t7;
        goto L11;
    }

    // write_back[LocalRoot($t1)@]($t20) at ./sources/v3/rewarder.move:585:17+17
    $t1 := $Dereference($t20);

    // trace_local[list]($t1) at ./sources/v3/rewarder.move:585:17+17
    assume {:print "$track_local(111,7,1):", $t1} $t1 == $t1;

    // label L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:386:17+1
    assume {:print "$at(44,14251,14252)"} true;
L7:

    // $t16 := 1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:386:21+1
    assume {:print "$at(44,14255,14256)"} true;
    $t16 := 1;
    assume $IsValid'u64'($t16);

    // $t17 := +($t3, $t16) on_abort goto L11 with $t7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:386:17+5
    call $t17 := $AddU64($t3, $t16);
    if ($abort_flag) {
        assume {:print "$at(44,14251,14256)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(111,7):", $t7} $t7 == $t7;
        goto L11;
    }

    // trace_local[i]($t17) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:386:13+9
    assume {:print "$track_local(111,7,3):", $t17} $t17 == $t17;

    // goto L9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:9+81
    assume {:print "$at(44,14185,14266)"} true;
    goto L9;

    // label L4 at ./sources/v3/rewarder.move:587:17+38
    assume {:print "$at(22,21148,21186)"} true;
L4:

    // $t21 := borrow_local($t1) at ./sources/v3/rewarder.move:587:17+38
    assume {:print "$at(22,21148,21186)"} true;
    $t21 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t18 := get_field<0xbb::rewarder::Rewarder>.emissions_per_second($t12) at ./sources/v3/rewarder.move:587:32+22
    $t18 := $t12->$emissions_per_second;

    // vector::push_back<u64>($t21, $t18) on_abort goto L11 with $t7 at ./sources/v3/rewarder.move:587:17+38
    call $t21 := $1_vector_push_back'u64'($t21, $t18);
    if ($abort_flag) {
        assume {:print "$at(22,21148,21186)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(111,7):", $t7} $t7 == $t7;
        goto L11;
    }

    // write_back[LocalRoot($t1)@]($t21) at ./sources/v3/rewarder.move:587:17+38
    $t1 := $Dereference($t21);

    // trace_local[list]($t1) at ./sources/v3/rewarder.move:587:17+38
    assume {:print "$track_local(111,7,1):", $t1} $t1 == $t1;

    // goto L7 at ./sources/v3/rewarder.move:587:17+38
    goto L7;

    // label L2 at ./sources/v3/rewarder.move:584:40+7
    assume {:print "$at(22,21066,21073)"} true;
L2:

    // $t19 := get_field<0xbb::rewarder::Rewarder>.pause($t12) at ./sources/v3/rewarder.move:584:40+7
    assume {:print "$at(22,21066,21073)"} true;
    $t19 := $t12->$pause;

    // $t6 := $t19 at ./sources/v3/rewarder.move:584:40+7
    $t6 := $t19;

    // trace_local[$t7]($t19) at ./sources/v3/rewarder.move:584:40+7
    assume {:print "$track_local(111,7,6):", $t19} $t19 == $t19;

    // goto L8 at ./sources/v3/rewarder.move:584:40+7
    goto L8;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:9+81
    assume {:print "$at(44,14185,14266)"} true;
L0:

    // $t22 := move($t1) at ./sources/v3/rewarder.move:590:9+4
    assume {:print "$at(22,21221,21225)"} true;
    $t22 := $t1;

    // trace_return[0]($t22) at ./sources/v3/rewarder.move:581:22+298
    assume {:print "$at(22,20933,21231)"} true;
    assume {:print "$track_return(111,7,0):", $t22} $t22 == $t22;

    // goto L10 at ./sources/v3/rewarder.move:581:22+298
    goto L10;

    // label L9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:9+81
    // Loop invariant checking block for the loop started with header: L6
    assume {:print "$at(44,14185,14266)"} true;
L9:

    // stop() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:384:9+81
    assume {:print "$at(44,14185,14266)"} true;
    assume false;
    return;

    // label L10 at ./sources/v3/rewarder.move:591:5+1
    assume {:print "$at(22,21230,21231)"} true;
L10:

    // return $t22 at ./sources/v3/rewarder.move:591:5+1
    assume {:print "$at(22,21230,21231)"} true;
    $ret0 := $t22;
    return;

    // label L11 at ./sources/v3/rewarder.move:591:5+1
L11:

    // abort($t7) at ./sources/v3/rewarder.move:591:5+1
    assume {:print "$at(22,21230,21231)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun rewarder::refresh_position_rewarder [baseline] at ./sources/v3/rewarder.move:384:5+1810
procedure {:inline 1} $bb_rewarder_refresh_position_rewarder(_$t0: $Mutation ($bb_rewarder_RewarderManager), _$t1: Vec ($bb_rewarder_PositionReward), _$t2: Vec (int), _$t3: int) returns ($ret0: Vec ($bb_rewarder_PositionReward), $ret1: $Mutation ($bb_rewarder_RewarderManager))
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: Vec ($bb_rewarder_PositionReward);
    var $t7: int;
    var $t8: $Mutation (int);
    var $t9: $Mutation ($bb_rewarder_PositionReward);
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: Vec ($bb_rewarder_Rewarder);
    var $t14: int;
    var $t15: int;
    var $t16: Vec ($bb_rewarder_PositionReward);
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: $bb_rewarder_PositionReward;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: bool;
    var $t44: bool;
    var $t45: $Mutation (Vec (int));
    var $t46: $Mutation (int);
    var $t47: $Mutation (Vec ($bb_rewarder_PositionReward));
    var $t48: $Mutation (Vec ($bb_rewarder_PositionReward));
    var $t49: $Mutation ($bb_rewarder_PositionReward);
    var $t50: $Mutation (int);
    var $t51: $Mutation (int);
    var $t52: $Mutation (Vec ($bb_rewarder_PositionReward));
    var $t53: $Mutation ($bb_rewarder_PositionReward);
    var $t54: $Mutation (Vec ($bb_rewarder_PositionReward));
    var $t55: $Mutation (Vec ($bb_rewarder_PositionReward));
    var $t56: Vec ($bb_rewarder_PositionReward);
    var $t57: Vec ($bb_rewarder_PositionReward);
    var $t58: int;
    var $t0: $Mutation ($bb_rewarder_RewarderManager);
    var $t1: Vec ($bb_rewarder_PositionReward);
    var $t2: Vec (int);
    var $t3: int;
    var $temp_0'$bb_rewarder_PositionReward': $bb_rewarder_PositionReward;
    var $temp_0'$bb_rewarder_RewarderManager': $bb_rewarder_RewarderManager;
    var $temp_0'u128': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$bb_rewarder_PositionReward'': Vec ($bb_rewarder_PositionReward);
    var $temp_0'vec'u128'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[reward_manager]($t0) at ./sources/v3/rewarder.move:384:5+1
    assume {:print "$at(22,13311,13312)"} true;
    $temp_0'$bb_rewarder_RewarderManager' := $Dereference($t0);
    assume {:print "$track_local(111,14,0):", $temp_0'$bb_rewarder_RewarderManager'} $temp_0'$bb_rewarder_RewarderManager' == $temp_0'$bb_rewarder_RewarderManager';

    // trace_local[reward_tickets]($t1) at ./sources/v3/rewarder.move:384:5+1
    assume {:print "$track_local(111,14,1):", $t1} $t1 == $t1;

    // trace_local[position_emissions_per_liquidity_inside_list]($t2) at ./sources/v3/rewarder.move:384:5+1
    assume {:print "$track_local(111,14,2):", $t2} $t2 == $t2;

    // trace_local[position_liquidity]($t3) at ./sources/v3/rewarder.move:384:5+1
    assume {:print "$track_local(111,14,3):", $t3} $t3 == $t3;

    // $t13 := get_field<0xbb::rewarder::RewarderManager>.rewarders($t0) at ./sources/v3/rewarder.move:390:45+25
    assume {:print "$at(22,13620,13645)"} true;
    $t13 := $Dereference($t0)->$rewarders;

    // $t14 := vector::length<0xbb::rewarder::Rewarder>($t13) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:390:30+41
    call $t14 := $1_vector_length'$bb_rewarder_Rewarder'($t13);
    if ($abort_flag) {
        assume {:print "$at(22,13605,13646)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // trace_local[manager_length]($t14) at ./sources/v3/rewarder.move:390:30+41
    assume {:print "$track_local(111,14,4):", $t14} $t14 == $t14;

    // $t16 := copy($t1) at ./sources/v3/rewarder.move:391:44+15
    assume {:print "$at(22,13691,13706)"} true;
    $t16 := $t1;

    // $t17 := vector::length<0xbb::rewarder::PositionReward>($t16) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:391:29+31
    call $t17 := $1_vector_length'$bb_rewarder_PositionReward'($t16);
    if ($abort_flag) {
        assume {:print "$at(22,13676,13707)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // trace_local[reward_length]($t17) at ./sources/v3/rewarder.move:391:29+31
    assume {:print "$track_local(111,14,5):", $t17} $t17 == $t17;

    // $t6 := vector::empty<0xbb::rewarder::PositionReward>() on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:392:33+31
    assume {:print "$at(22,13741,13772)"} true;
    call $t6 := $1_vector_empty'$bb_rewarder_PositionReward'();
    if ($abort_flag) {
        assume {:print "$at(22,13741,13772)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // trace_local[reward_ticket_van]($t6) at ./sources/v3/rewarder.move:392:33+31
    assume {:print "$track_local(111,14,6):", $t6} $t6 == $t6;

    // $t18 := >=($t14, $t17) at ./sources/v3/rewarder.move:393:17+31
    assume {:print "$at(22,13790,13821)"} true;
    call $t18 := $Ge($t14, $t17);

    // if ($t18) goto L1 else goto L8 at ./sources/v3/rewarder.move:393:9+6
    if ($t18) { goto L1; } else { goto L8; }

    // label L1 at ./sources/v3/rewarder.move:394:17+1
    assume {:print "$at(22,13861,13862)"} true;
L1:

    // $t19 := 0 at ./sources/v3/rewarder.move:394:17+1
    assume {:print "$at(22,13861,13862)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // trace_local[$t11]($t19) at ./sources/v3/rewarder.move:394:17+1
    assume {:print "$track_local(111,14,7):", $t19} $t19 == $t19;

    // label L6 at ./sources/v3/rewarder.move:395:15+14
    assume {:print "$at(22,13878,13892)"} true;
L6:

    // $t1 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    assume {:print "$at(22,13878,13892)"} true;
    havoc $t1;

    // assume WellFormed($t1) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'vec'$bb_rewarder_PositionReward''($t1);

    // $t4 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t4;

    // assume WellFormed($t4) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u64'($t4);

    // $t6 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t6;

    // assume WellFormed($t6) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'vec'$bb_rewarder_PositionReward''($t6);

    // $t7 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t7;

    // assume WellFormed($t7) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u64'($t7);

    // $t20 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t20;

    // assume WellFormed($t20) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t21;

    // assume WellFormed($t21) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'bool'($t21);

    // $t22 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t22;

    // assume WellFormed($t22) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u64'($t22);

    // $t23 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t23;

    // assume WellFormed($t23) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u64'($t23);

    // $t24 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t24;

    // assume WellFormed($t24) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u64'($t24);

    // $t25 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t25;

    // assume WellFormed($t25) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u64'($t25);

    // $t26 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t26;

    // assume WellFormed($t26) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'bool'($t26);

    // $t27 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t27;

    // assume WellFormed($t27) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u128'($t27);

    // $t28 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t28;

    // assume WellFormed($t28) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u64'($t28);

    // $t29 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t29;

    // assume WellFormed($t29) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'$bb_rewarder_PositionReward'($t29);

    // $t30 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t30;

    // assume WellFormed($t30) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u128'($t30);

    // $t31 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t31;

    // assume WellFormed($t31) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u128'($t31);

    // $t32 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t32;

    // assume WellFormed($t32) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u128'($t32);

    // $t33 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t33;

    // assume WellFormed($t33) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'bool'($t33);

    // $t34 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t34;

    // assume WellFormed($t34) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u64'($t34);

    // $t35 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t35;

    // assume WellFormed($t35) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u128'($t35);

    // $t36 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t36;

    // assume WellFormed($t36) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u8'($t36);

    // $t37 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t37;

    // assume WellFormed($t37) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u128'($t37);

    // $t38 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t38;

    // assume WellFormed($t38) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u64'($t38);

    // $t39 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t39;

    // assume WellFormed($t39) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u64'($t39);

    // $t40 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t40;

    // assume WellFormed($t40) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u128'($t40);

    // $t41 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t41;

    // assume WellFormed($t41) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u64'($t41);

    // $t42 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t42;

    // assume WellFormed($t42) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u64'($t42);

    // $t43 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t43;

    // assume WellFormed($t43) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'bool'($t43);

    // $t44 := havoc[val]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t44;

    // assume WellFormed($t44) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'bool'($t44);

    // $t9 := havoc[mut_all]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t9;

    // assume WellFormed($t9) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'$bb_rewarder_PositionReward'($Dereference($t9));

    // $t45 := havoc[mut_all]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t45;

    // assume WellFormed($t45) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'vec'u128''($Dereference($t45));

    // $t46 := havoc[mut_all]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t46;

    // assume WellFormed($t46) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u128'($Dereference($t46));

    // $t47 := havoc[mut_all]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t47;

    // assume WellFormed($t47) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'vec'$bb_rewarder_PositionReward''($Dereference($t47));

    // $t48 := havoc[mut_all]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t48;

    // assume WellFormed($t48) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'vec'$bb_rewarder_PositionReward''($Dereference($t48));

    // $t49 := havoc[mut_all]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t49;

    // assume WellFormed($t49) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'$bb_rewarder_PositionReward'($Dereference($t49));

    // $t50 := havoc[mut_all]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t50;

    // assume WellFormed($t50) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u64'($Dereference($t50));

    // $t51 := havoc[mut_all]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t51;

    // assume WellFormed($t51) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'u128'($Dereference($t51));

    // $t52 := havoc[mut_all]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t52;

    // assume WellFormed($t52) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'vec'$bb_rewarder_PositionReward''($Dereference($t52));

    // $t53 := havoc[mut_all]() at ./sources/v3/rewarder.move:395:15+14
    havoc $t53;

    // assume WellFormed($t53) at ./sources/v3/rewarder.move:395:15+14
    assume $IsValid'$bb_rewarder_PositionReward'($Dereference($t53));

    // trace_local[reward_tickets]($t1) at ./sources/v3/rewarder.move:395:15+14
    assume {:print "$info(): enter loop, variable(s) reward_tickets, manager_length, reward_ticket_van, $t11, ticket havocked and reassigned"} true;
    assume {:print "$track_local(111,14,1):", $t1} $t1 == $t1;

    // trace_local[manager_length]($t4) at ./sources/v3/rewarder.move:395:15+14
    assume {:print "$track_local(111,14,4):", $t4} $t4 == $t4;

    // trace_local[reward_ticket_van]($t6) at ./sources/v3/rewarder.move:395:15+14
    assume {:print "$track_local(111,14,6):", $t6} $t6 == $t6;

    // trace_local[$t11]($t7) at ./sources/v3/rewarder.move:395:15+14
    assume {:print "$track_local(111,14,7):", $t7} $t7 == $t7;

    // trace_local[ticket]($t9) at ./sources/v3/rewarder.move:395:15+14
    $temp_0'$bb_rewarder_PositionReward' := $Dereference($t9);
    assume {:print "$track_local(111,14,9):", $temp_0'$bb_rewarder_PositionReward'} $temp_0'$bb_rewarder_PositionReward' == $temp_0'$bb_rewarder_PositionReward';

    // assume Not(AbortFlag()) at ./sources/v3/rewarder.move:395:15+14
    assume !$abort_flag;

    // $t20 := 0 at ./sources/v3/rewarder.move:395:33+1
    $t20 := 0;
    assume $IsValid'u64'($t20);

    // $t21 := !=($t4, $t20) at ./sources/v3/rewarder.move:395:15+19
    $t21 := !$IsEqual'u64'($t4, $t20);

    // if ($t21) goto L16 else goto L17 at ./sources/v3/rewarder.move:395:9+1132
    if ($t21) { goto L16; } else { goto L17; }

    // label L3 at ./sources/v3/rewarder.move:396:13+14
    assume {:print "$at(22,13913,13927)"} true;
L3:

    // $t22 := 1 at ./sources/v3/rewarder.move:396:31+1
    assume {:print "$at(22,13931,13932)"} true;
    $t22 := 1;
    assume $IsValid'u64'($t22);

    // $t23 := -($t4, $t22) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:396:13+19
    call $t23 := $Sub($t4, $t22);
    if ($abort_flag) {
        assume {:print "$at(22,13913,13932)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // trace_local[manager_length]($t23) at ./sources/v3/rewarder.move:396:13+19
    assume {:print "$track_local(111,14,4):", $t23} $t23 == $t23;

    // $t45 := borrow_local($t2) at ./sources/v3/rewarder.move:398:17+71
    assume {:print "$at(22,14008,14079)"} true;
    $t45 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t46 := vector::borrow_mut<u128>($t45, $t23) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:398:17+71
    call $t46,$t45 := $1_vector_borrow_mut'u128'($t45, $t23);
    if ($abort_flag) {
        assume {:print "$at(22,14008,14079)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // trace_local[position_emissions_per_liquidity_inside]($t46) at ./sources/v3/rewarder.move:398:17+71
    $temp_0'u128' := $Dereference($t46);
    assume {:print "$track_local(111,14,8):", $temp_0'u128'} $temp_0'u128' == $temp_0'u128';

    // $t24 := 1 at ./sources/v3/rewarder.move:399:63+1
    assume {:print "$at(22,14143,14144)"} true;
    $t24 := 1;
    assume $IsValid'u64'($t24);

    // $t25 := +($t23, $t24) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:399:47+18
    call $t25 := $AddU64($t23, $t24);
    if ($abort_flag) {
        assume {:print "$at(22,14127,14145)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // $t26 := <($t17, $t25) at ./sources/v3/rewarder.move:399:29+36
    call $t26 := $Lt($t17, $t25);

    // if ($t26) goto L18 else goto L19 at ./sources/v3/rewarder.move:399:26+355
    if ($t26) { goto L18; } else { goto L19; }

    // label L5 at ./sources/v3/rewarder.move:400:17+154
    assume {:print "$at(22,14165,14319)"} true;
L5:

    // $t47 := borrow_local($t6) at ./sources/v3/rewarder.move:400:17+154
    assume {:print "$at(22,14165,14319)"} true;
    $t47 := $Mutation($Local(6), EmptyVec(), $t6);

    // $t27 := 0 at ./sources/v3/rewarder.move:401:53+1
    assume {:print "$at(22,14261,14262)"} true;
    $t27 := 0;
    assume $IsValid'u128'($t27);

    // $t28 := 0 at ./sources/v3/rewarder.move:402:35+1
    assume {:print "$at(22,14298,14299)"} true;
    $t28 := 0;
    assume $IsValid'u64'($t28);

    // $t29 := pack 0xbb::rewarder::PositionReward($t27, $t28) at ./sources/v3/rewarder.move:400:45+125
    assume {:print "$at(22,14193,14318)"} true;
    $t29 := $bb_rewarder_PositionReward($t27, $t28);

    // vector::push_back<0xbb::rewarder::PositionReward>($t47, $t29) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:400:17+154
    call $t47 := $1_vector_push_back'$bb_rewarder_PositionReward'($t47, $t29);
    if ($abort_flag) {
        assume {:print "$at(22,14165,14319)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // write_back[LocalRoot($t6)@]($t47) at ./sources/v3/rewarder.move:400:17+154
    $t6 := $Dereference($t47);

    // trace_local[reward_ticket_van]($t6) at ./sources/v3/rewarder.move:400:17+154
    assume {:print "$track_local(111,14,6):", $t6} $t6 == $t6;

    // $t48 := borrow_local($t6) at ./sources/v3/rewarder.move:404:17+31
    assume {:print "$at(22,14337,14368)"} true;
    $t48 := $Mutation($Local(6), EmptyVec(), $t6);

    // $t49 := vector::borrow_mut<0xbb::rewarder::PositionReward>($t48, $t7) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:404:17+31
    call $t49,$t48 := $1_vector_borrow_mut'$bb_rewarder_PositionReward'($t48, $t7);
    if ($abort_flag) {
        assume {:print "$at(22,14337,14368)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // $t9 := $t49 at ./sources/v3/rewarder.move:404:17+31
    $t9 := $t49;

    // trace_local[ticket]($t49) at ./sources/v3/rewarder.move:404:17+31
    $temp_0'$bb_rewarder_PositionReward' := $Dereference($t49);
    assume {:print "$track_local(111,14,9):", $temp_0'$bb_rewarder_PositionReward'} $temp_0'$bb_rewarder_PositionReward' == $temp_0'$bb_rewarder_PositionReward';

    // label L7 at ./sources/v3/rewarder.move:410:17+40
    assume {:print "$at(22,14575,14615)"} true;
L7:

    // $t30 := read_ref($t46) at ./sources/v3/rewarder.move:410:17+40
    assume {:print "$at(22,14575,14615)"} true;
    $t30 := $Dereference($t46);

    // $t31 := get_field<0xbb::rewarder::PositionReward>.emissions_per_liquidity_inside($t9) at ./sources/v3/rewarder.move:411:17+37
    assume {:print "$at(22,14633,14670)"} true;
    $t31 := $Dereference($t9)->$emissions_per_liquidity_inside;

    // ($t32, $t33) := math_u128::overflowing_sub($t30, $t31) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:409:68+153
    assume {:print "$at(22,14531,14684)"} true;
    call $t32,$t33 := $bb_math_u128_overflowing_sub($t30, $t31);
    if ($abort_flag) {
        assume {:print "$at(22,14531,14684)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // drop($t33) at ./sources/v3/rewarder.move:409:68+153

    // $t34 := get_field<0xbb::rewarder::PositionReward>.amount_owned($t9) at ./sources/v3/rewarder.move:414:31+19
    assume {:print "$at(22,14717,14736)"} true;
    $t34 := $Dereference($t9)->$amount_owned;

    // trace_local[$t15]($t34) at ./sources/v3/rewarder.move:415:20+36
    assume {:print "$at(22,14758,14794)"} true;
    assume {:print "$track_local(111,14,10):", $t34} $t34 == $t34;

    // $t35 := *($t32, $t3) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:415:19+60
    call $t35 := $MulU128($t32, $t3);
    if ($abort_flag) {
        assume {:print "$at(22,14757,14817)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // $t36 := 64 at ./sources/v3/rewarder.move:415:83+2
    $t36 := 64;
    assume $IsValid'u8'($t36);

    // $t37 := >>($t35, $t36) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:415:18+68
    call $t37 := $ShrU128($t35, $t36);
    if ($abort_flag) {
        assume {:print "$at(22,14756,14824)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // $t38 := (u64)($t37) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:415:17+77
    call $t38 := $CastU64($t37);
    if ($abort_flag) {
        assume {:print "$at(22,14755,14832)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // trace_local[$t16]($t38) at ./sources/v3/rewarder.move:414:31+115
    assume {:print "$at(22,14717,14832)"} true;
    assume {:print "$track_local(111,14,12):", $t38} $t38 == $t38;

    // $t39 := +($t34, $t38) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:414:31+115
    call $t39 := $AddU64($t34, $t38);
    if ($abort_flag) {
        assume {:print "$at(22,14717,14832)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // $t50 := borrow_field<0xbb::rewarder::PositionReward>.amount_owned($t9) at ./sources/v3/rewarder.move:416:13+19
    assume {:print "$at(22,14846,14865)"} true;
    $t50 := $ChildMutation($t9, 1, $Dereference($t9)->$amount_owned);

    // write_ref($t50, $t39) at ./sources/v3/rewarder.move:416:13+33
    $t50 := $UpdateMutation($t50, $t39);

    // write_back[Reference($t9).amount_owned (u64)]($t50) at ./sources/v3/rewarder.move:416:13+33
    $t9 := $UpdateMutation($t9, $Update'$bb_rewarder_PositionReward'_amount_owned($Dereference($t9), $Dereference($t50)));

    // trace_local[ticket]($t9) at ./sources/v3/rewarder.move:416:13+33
    $temp_0'$bb_rewarder_PositionReward' := $Dereference($t9);
    assume {:print "$track_local(111,14,9):", $temp_0'$bb_rewarder_PositionReward'} $temp_0'$bb_rewarder_PositionReward' == $temp_0'$bb_rewarder_PositionReward';

    // $t40 := read_ref($t46) at ./sources/v3/rewarder.move:417:53+40
    assume {:print "$at(22,14933,14973)"} true;
    $t40 := $Dereference($t46);

    // trace_local[position_emissions_per_liquidity_inside_list]($t2) at ./sources/v3/rewarder.move:417:53+40
    assume {:print "$track_local(111,14,2):", $t2} $t2 == $t2;

    // $t51 := borrow_field<0xbb::rewarder::PositionReward>.emissions_per_liquidity_inside($t9) at ./sources/v3/rewarder.move:417:13+37
    $t51 := $ChildMutation($t9, 0, $Dereference($t9)->$emissions_per_liquidity_inside);

    // write_ref($t51, $t40) at ./sources/v3/rewarder.move:417:13+80
    $t51 := $UpdateMutation($t51, $t40);

    // $t43 := is_parent[Reference($t49)@]($t9) at ./sources/v3/rewarder.move:417:13+80
    $t43 := $IsSameMutation($t49, $t9);

    // if ($t43) goto L9 else goto L20 at ./sources/v3/rewarder.move:417:13+80
    if ($t43) { goto L9; } else { goto L20; }

    // label L9 at ./sources/v3/rewarder.move:417:13+80
L9:

    // write_back[Reference($t9).emissions_per_liquidity_inside (u128)]($t51) at ./sources/v3/rewarder.move:417:13+80
    assume {:print "$at(22,14893,14973)"} true;
    $t9 := $UpdateMutation($t9, $Update'$bb_rewarder_PositionReward'_emissions_per_liquidity_inside($Dereference($t9), $Dereference($t51)));

    // trace_local[ticket]($t9) at ./sources/v3/rewarder.move:417:13+80
    $temp_0'$bb_rewarder_PositionReward' := $Dereference($t9);
    assume {:print "$track_local(111,14,9):", $temp_0'$bb_rewarder_PositionReward'} $temp_0'$bb_rewarder_PositionReward' == $temp_0'$bb_rewarder_PositionReward';

    // write_back[Reference($t49)@]($t9) at ./sources/v3/rewarder.move:417:13+80
    $t49 := $UpdateMutation($t49, $Dereference($t9));

    // write_back[Reference($t48)[]]($t49) at ./sources/v3/rewarder.move:417:13+80
    $t48 := $UpdateMutation($t48, UpdateVec($Dereference($t48), ReadVec($t49->p, LenVec($t48->p)), $Dereference($t49)));

    // write_back[LocalRoot($t6)@]($t48) at ./sources/v3/rewarder.move:417:13+80
    $t6 := $Dereference($t48);

    // trace_local[reward_ticket_van]($t6) at ./sources/v3/rewarder.move:417:13+80
    assume {:print "$track_local(111,14,6):", $t6} $t6 == $t6;

    // label L10 at ./sources/v3/rewarder.move:417:13+80
L10:

    // $t44 := is_parent[Reference($t53)@]($t9) at ./sources/v3/rewarder.move:417:13+80
    assume {:print "$at(22,14893,14973)"} true;
    $t44 := $IsSameMutation($t53, $t9);

    // if ($t44) goto L11 else goto L21 at ./sources/v3/rewarder.move:417:13+80
    if ($t44) { goto L11; } else { goto L21; }

    // label L11 at ./sources/v3/rewarder.move:417:13+80
L11:

    // write_back[Reference($t9).emissions_per_liquidity_inside (u128)]($t51) at ./sources/v3/rewarder.move:417:13+80
    assume {:print "$at(22,14893,14973)"} true;
    $t9 := $UpdateMutation($t9, $Update'$bb_rewarder_PositionReward'_emissions_per_liquidity_inside($Dereference($t9), $Dereference($t51)));

    // trace_local[ticket]($t9) at ./sources/v3/rewarder.move:417:13+80
    $temp_0'$bb_rewarder_PositionReward' := $Dereference($t9);
    assume {:print "$track_local(111,14,9):", $temp_0'$bb_rewarder_PositionReward'} $temp_0'$bb_rewarder_PositionReward' == $temp_0'$bb_rewarder_PositionReward';

    // write_back[Reference($t53)@]($t9) at ./sources/v3/rewarder.move:417:13+80
    $t53 := $UpdateMutation($t53, $Dereference($t9));

    // write_back[Reference($t52)[]]($t53) at ./sources/v3/rewarder.move:417:13+80
    $t52 := $UpdateMutation($t52, UpdateVec($Dereference($t52), ReadVec($t53->p, LenVec($t52->p)), $Dereference($t53)));

    // write_back[LocalRoot($t1)@]($t52) at ./sources/v3/rewarder.move:417:13+80
    $t1 := $Dereference($t52);

    // trace_local[reward_tickets]($t1) at ./sources/v3/rewarder.move:417:13+80
    assume {:print "$track_local(111,14,1):", $t1} $t1 == $t1;

    // label L12 at ./sources/v3/rewarder.move:417:13+80
L12:

    // $t41 := 1 at ./sources/v3/rewarder.move:418:18+1
    assume {:print "$at(22,14992,14993)"} true;
    $t41 := 1;
    assume $IsValid'u64'($t41);

    // $t42 := +($t7, $t41) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:418:13+6
    call $t42 := $AddU64($t7, $t41);
    if ($abort_flag) {
        assume {:print "$at(22,14987,14993)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // trace_local[$t11]($t42) at ./sources/v3/rewarder.move:418:13+6
    assume {:print "$track_local(111,14,7):", $t42} $t42 == $t42;

    // goto L13 at ./sources/v3/rewarder.move:395:9+1132
    assume {:print "$at(22,13872,15004)"} true;
    goto L13;

    // label L4 at ./sources/v3/rewarder.move:406:17+41
    assume {:print "$at(22,14406,14447)"} true;
L4:

    // $t52 := borrow_local($t1) at ./sources/v3/rewarder.move:406:17+41
    assume {:print "$at(22,14406,14447)"} true;
    $t52 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t53 := vector::borrow_mut<0xbb::rewarder::PositionReward>($t52, $t23) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:406:17+41
    call $t53,$t52 := $1_vector_borrow_mut'$bb_rewarder_PositionReward'($t52, $t23);
    if ($abort_flag) {
        assume {:print "$at(22,14406,14447)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // $t9 := $t53 at ./sources/v3/rewarder.move:406:17+41
    $t9 := $t53;

    // trace_local[ticket]($t53) at ./sources/v3/rewarder.move:406:17+41
    $temp_0'$bb_rewarder_PositionReward' := $Dereference($t53);
    assume {:print "$track_local(111,14,9):", $temp_0'$bb_rewarder_PositionReward'} $temp_0'$bb_rewarder_PositionReward' == $temp_0'$bb_rewarder_PositionReward';

    // goto L7 at ./sources/v3/rewarder.move:406:17+41
    goto L7;

    // label L2 at ./sources/v3/rewarder.move:420:9+27
    assume {:print "$at(22,15014,15041)"} true;
L2:

    // $t54 := borrow_local($t6) at ./sources/v3/rewarder.move:420:9+27
    assume {:print "$at(22,15014,15041)"} true;
    $t54 := $Mutation($Local(6), EmptyVec(), $t6);

    // vector::reverse<0xbb::rewarder::PositionReward>($t54) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:420:9+27
    call $t54 := $1_vector_reverse'$bb_rewarder_PositionReward'($t54);
    if ($abort_flag) {
        assume {:print "$at(22,15014,15041)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // write_back[LocalRoot($t6)@]($t54) at ./sources/v3/rewarder.move:420:9+27
    $t6 := $Dereference($t54);

    // trace_local[reward_ticket_van]($t6) at ./sources/v3/rewarder.move:420:9+27
    assume {:print "$track_local(111,14,6):", $t6} $t6 == $t6;

    // $t55 := borrow_local($t1) at ./sources/v3/rewarder.move:421:9+40
    assume {:print "$at(22,15051,15091)"} true;
    $t55 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t56 := move($t6) at ./sources/v3/rewarder.move:421:9+40
    $t56 := $t6;

    // vector::append<0xbb::rewarder::PositionReward>($t55, $t56) on_abort goto L15 with $t15 at ./sources/v3/rewarder.move:421:9+40
    call $t55 := $1_vector_append'$bb_rewarder_PositionReward'($t55, $t56);
    if ($abort_flag) {
        assume {:print "$at(22,15051,15091)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(111,14):", $t15} $t15 == $t15;
        goto L15;
    }

    // write_back[LocalRoot($t1)@]($t55) at ./sources/v3/rewarder.move:421:9+40
    $t1 := $Dereference($t55);

    // trace_local[reward_tickets]($t1) at ./sources/v3/rewarder.move:421:9+40
    assume {:print "$track_local(111,14,1):", $t1} $t1 == $t1;

    // $t57 := move($t1) at ./sources/v3/rewarder.move:422:9+14
    assume {:print "$at(22,15101,15115)"} true;
    $t57 := $t1;

    // trace_return[0]($t57) at ./sources/v3/rewarder.move:389:31+1547
    assume {:print "$at(22,13574,15121)"} true;
    assume {:print "$track_return(111,14,0):", $t57} $t57 == $t57;

    // trace_local[reward_manager]($t0) at ./sources/v3/rewarder.move:389:31+1547
    $temp_0'$bb_rewarder_RewarderManager' := $Dereference($t0);
    assume {:print "$track_local(111,14,0):", $temp_0'$bb_rewarder_RewarderManager'} $temp_0'$bb_rewarder_RewarderManager' == $temp_0'$bb_rewarder_RewarderManager';

    // goto L14 at ./sources/v3/rewarder.move:389:31+1547
    goto L14;

    // label L0 at ./sources/v3/rewarder.move:393:50+19
    assume {:print "$at(22,13823,13842)"} true;
L0:

    // $t58 := 1100003 at ./sources/v3/rewarder.move:393:50+19
    assume {:print "$at(22,13823,13842)"} true;
    $t58 := 1100003;
    assume $IsValid'u64'($t58);

    // trace_abort($t58) at ./sources/v3/rewarder.move:393:9+6
    assume {:print "$at(22,13782,13788)"} true;
    assume {:print "$track_abort(111,14):", $t58} $t58 == $t58;

    // $t15 := move($t58) at ./sources/v3/rewarder.move:393:9+6
    $t15 := $t58;

    // goto L15 at ./sources/v3/rewarder.move:393:9+6
    goto L15;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L0 at <internal>:1:1+10
    goto L0;

    // label L13 at <unknown>:1:1+9
    // Loop invariant checking block for the loop started with header: L6
L13:

    // stop() at <unknown>:1:1+9
    assume {:print "$at(0,0,9)"} true;
    assume false;
    return;

    // label L14 at ./sources/v3/rewarder.move:423:5+1
    assume {:print "$at(22,15120,15121)"} true;
L14:

    // return $t57 at ./sources/v3/rewarder.move:423:5+1
    assume {:print "$at(22,15120,15121)"} true;
    $ret0 := $t57;
    $ret1 := $t0;
    return;

    // label L15 at ./sources/v3/rewarder.move:423:5+1
L15:

    // abort($t15) at ./sources/v3/rewarder.move:423:5+1
    assume {:print "$at(22,15120,15121)"} true;
    $abort_code := $t15;
    $abort_flag := true;
    return;

    // label L16 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L16:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L17 at <internal>:1:1+10
L17:

    // drop($t48) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // drop($t49) at <internal>:1:1+10

    // drop($t52) at <internal>:1:1+10

    // drop($t53) at <internal>:1:1+10

    // goto L2 at <internal>:1:1+10
    goto L2;

    // label L18 at <internal>:1:1+10
L18:

    // drop($t48) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // drop($t49) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

    // label L19 at <internal>:1:1+10
L19:

    // drop($t52) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // drop($t53) at <internal>:1:1+10

    // goto L4 at <internal>:1:1+10
    goto L4;

    // label L20 at <internal>:1:1+10
L20:

    // drop($t48) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // drop($t49) at <internal>:1:1+10

    // goto L10 at <internal>:1:1+10
    goto L10;

    // label L21 at <internal>:1:1+10
L21:

    // drop($t9) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // drop($t51) at <internal>:1:1+10

    // drop($t52) at <internal>:1:1+10

    // drop($t53) at <internal>:1:1+10

    // goto L12 at <internal>:1:1+10
    goto L12;

}

// struct position_v3::Info at ./sources/v3/position_v3.move:14:5+648
datatype $bb_position_v3_Info {
    $bb_position_v3_Info($initialized: bool, $liquidity: int, $tick_lower: $bb_i32_I32, $tick_upper: $bb_i32_I32, $fee_growth_inside_a_last: int, $fee_growth_inside_b_last: int, $fee_owed_a: int, $fee_owed_b: int, $token_a: $1_object_Object'$1_fungible_asset_Metadata', $token_b: $1_object_Object'$1_fungible_asset_Metadata', $fee_tier: int, $rewards: Vec ($bb_rewarder_PositionReward))
}
function {:inline} $Update'$bb_position_v3_Info'_initialized(s: $bb_position_v3_Info, x: bool): $bb_position_v3_Info {
    $bb_position_v3_Info(x, s->$liquidity, s->$tick_lower, s->$tick_upper, s->$fee_growth_inside_a_last, s->$fee_growth_inside_b_last, s->$fee_owed_a, s->$fee_owed_b, s->$token_a, s->$token_b, s->$fee_tier, s->$rewards)
}
function {:inline} $Update'$bb_position_v3_Info'_liquidity(s: $bb_position_v3_Info, x: int): $bb_position_v3_Info {
    $bb_position_v3_Info(s->$initialized, x, s->$tick_lower, s->$tick_upper, s->$fee_growth_inside_a_last, s->$fee_growth_inside_b_last, s->$fee_owed_a, s->$fee_owed_b, s->$token_a, s->$token_b, s->$fee_tier, s->$rewards)
}
function {:inline} $Update'$bb_position_v3_Info'_tick_lower(s: $bb_position_v3_Info, x: $bb_i32_I32): $bb_position_v3_Info {
    $bb_position_v3_Info(s->$initialized, s->$liquidity, x, s->$tick_upper, s->$fee_growth_inside_a_last, s->$fee_growth_inside_b_last, s->$fee_owed_a, s->$fee_owed_b, s->$token_a, s->$token_b, s->$fee_tier, s->$rewards)
}
function {:inline} $Update'$bb_position_v3_Info'_tick_upper(s: $bb_position_v3_Info, x: $bb_i32_I32): $bb_position_v3_Info {
    $bb_position_v3_Info(s->$initialized, s->$liquidity, s->$tick_lower, x, s->$fee_growth_inside_a_last, s->$fee_growth_inside_b_last, s->$fee_owed_a, s->$fee_owed_b, s->$token_a, s->$token_b, s->$fee_tier, s->$rewards)
}
function {:inline} $Update'$bb_position_v3_Info'_fee_growth_inside_a_last(s: $bb_position_v3_Info, x: int): $bb_position_v3_Info {
    $bb_position_v3_Info(s->$initialized, s->$liquidity, s->$tick_lower, s->$tick_upper, x, s->$fee_growth_inside_b_last, s->$fee_owed_a, s->$fee_owed_b, s->$token_a, s->$token_b, s->$fee_tier, s->$rewards)
}
function {:inline} $Update'$bb_position_v3_Info'_fee_growth_inside_b_last(s: $bb_position_v3_Info, x: int): $bb_position_v3_Info {
    $bb_position_v3_Info(s->$initialized, s->$liquidity, s->$tick_lower, s->$tick_upper, s->$fee_growth_inside_a_last, x, s->$fee_owed_a, s->$fee_owed_b, s->$token_a, s->$token_b, s->$fee_tier, s->$rewards)
}
function {:inline} $Update'$bb_position_v3_Info'_fee_owed_a(s: $bb_position_v3_Info, x: int): $bb_position_v3_Info {
    $bb_position_v3_Info(s->$initialized, s->$liquidity, s->$tick_lower, s->$tick_upper, s->$fee_growth_inside_a_last, s->$fee_growth_inside_b_last, x, s->$fee_owed_b, s->$token_a, s->$token_b, s->$fee_tier, s->$rewards)
}
function {:inline} $Update'$bb_position_v3_Info'_fee_owed_b(s: $bb_position_v3_Info, x: int): $bb_position_v3_Info {
    $bb_position_v3_Info(s->$initialized, s->$liquidity, s->$tick_lower, s->$tick_upper, s->$fee_growth_inside_a_last, s->$fee_growth_inside_b_last, s->$fee_owed_a, x, s->$token_a, s->$token_b, s->$fee_tier, s->$rewards)
}
function {:inline} $Update'$bb_position_v3_Info'_token_a(s: $bb_position_v3_Info, x: $1_object_Object'$1_fungible_asset_Metadata'): $bb_position_v3_Info {
    $bb_position_v3_Info(s->$initialized, s->$liquidity, s->$tick_lower, s->$tick_upper, s->$fee_growth_inside_a_last, s->$fee_growth_inside_b_last, s->$fee_owed_a, s->$fee_owed_b, x, s->$token_b, s->$fee_tier, s->$rewards)
}
function {:inline} $Update'$bb_position_v3_Info'_token_b(s: $bb_position_v3_Info, x: $1_object_Object'$1_fungible_asset_Metadata'): $bb_position_v3_Info {
    $bb_position_v3_Info(s->$initialized, s->$liquidity, s->$tick_lower, s->$tick_upper, s->$fee_growth_inside_a_last, s->$fee_growth_inside_b_last, s->$fee_owed_a, s->$fee_owed_b, s->$token_a, x, s->$fee_tier, s->$rewards)
}
function {:inline} $Update'$bb_position_v3_Info'_fee_tier(s: $bb_position_v3_Info, x: int): $bb_position_v3_Info {
    $bb_position_v3_Info(s->$initialized, s->$liquidity, s->$tick_lower, s->$tick_upper, s->$fee_growth_inside_a_last, s->$fee_growth_inside_b_last, s->$fee_owed_a, s->$fee_owed_b, s->$token_a, s->$token_b, x, s->$rewards)
}
function {:inline} $Update'$bb_position_v3_Info'_rewards(s: $bb_position_v3_Info, x: Vec ($bb_rewarder_PositionReward)): $bb_position_v3_Info {
    $bb_position_v3_Info(s->$initialized, s->$liquidity, s->$tick_lower, s->$tick_upper, s->$fee_growth_inside_a_last, s->$fee_growth_inside_b_last, s->$fee_owed_a, s->$fee_owed_b, s->$token_a, s->$token_b, s->$fee_tier, x)
}
function $IsValid'$bb_position_v3_Info'(s: $bb_position_v3_Info): bool {
    $IsValid'bool'(s->$initialized)
      && $IsValid'u128'(s->$liquidity)
      && $IsValid'$bb_i32_I32'(s->$tick_lower)
      && $IsValid'$bb_i32_I32'(s->$tick_upper)
      && $IsValid'u128'(s->$fee_growth_inside_a_last)
      && $IsValid'u128'(s->$fee_growth_inside_b_last)
      && $IsValid'u64'(s->$fee_owed_a)
      && $IsValid'u64'(s->$fee_owed_b)
      && $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$token_a)
      && $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$token_b)
      && $IsValid'u8'(s->$fee_tier)
      && $IsValid'vec'$bb_rewarder_PositionReward''(s->$rewards)
}
function {:inline} $IsEqual'$bb_position_v3_Info'(s1: $bb_position_v3_Info, s2: $bb_position_v3_Info): bool {
    $IsEqual'bool'(s1->$initialized, s2->$initialized)
    && $IsEqual'u128'(s1->$liquidity, s2->$liquidity)
    && $IsEqual'$bb_i32_I32'(s1->$tick_lower, s2->$tick_lower)
    && $IsEqual'$bb_i32_I32'(s1->$tick_upper, s2->$tick_upper)
    && $IsEqual'u128'(s1->$fee_growth_inside_a_last, s2->$fee_growth_inside_a_last)
    && $IsEqual'u128'(s1->$fee_growth_inside_b_last, s2->$fee_growth_inside_b_last)
    && $IsEqual'u64'(s1->$fee_owed_a, s2->$fee_owed_a)
    && $IsEqual'u64'(s1->$fee_owed_b, s2->$fee_owed_b)
    && $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''(s1->$token_a, s2->$token_a)
    && $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''(s1->$token_b, s2->$token_b)
    && $IsEqual'u8'(s1->$fee_tier, s2->$fee_tier)
    && $IsEqual'vec'$bb_rewarder_PositionReward''(s1->$rewards, s2->$rewards)}
var $bb_position_v3_Info_$memory: $Memory $bb_position_v3_Info;

// fun position_v3::add_liquidity [baseline] at ./sources/v3/position_v3.move:108:5+1140
procedure {:inline 1} $bb_position_v3_add_liquidity(_$t0: $1_object_Object'$bb_position_v3_Info', _$t1: bv128, _$t2: int, _$t3: int) returns ($ret0: int, $ret1: int, $ret2: bool)
{
    // declare local variables
    var $t4: $Mutation ($bb_position_v3_Info);
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation (int);
    var $t10: int;
    var $t11: int;
    var $t12: $Mutation ($bb_position_v3_Info);
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: $Mutation (int);
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: $Mutation (int);
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: $Mutation (int);
    var $t39: $Mutation (int);
    var $t40: $Mutation (int);
    var $t41: bool;
    var $t0: $1_object_Object'$bb_position_v3_Info';
    var $t1: bv128;
    var $t2: int;
    var $t3: int;
    var $temp_0'$1_object_Object'$bb_position_v3_Info'': $1_object_Object'$bb_position_v3_Info';
    var $temp_0'$bb_position_v3_Info': $bb_position_v3_Info;
    var $temp_0'bool': bool;
    var $temp_0'u128': int;
    var $temp_0'bv128': bv128;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[position]($t0) at ./sources/v3/position_v3.move:108:5+1
    assume {:print "$at(21,3404,3405)"} true;
    assume {:print "$track_local(112,0,0):", $t0} $t0 == $t0;

    // trace_local[liquidity_delta]($t1) at ./sources/v3/position_v3.move:108:5+1
    assume {:print "$track_local(112,0,1):", $t1} $t1 == $t1;

    // trace_local[fee_growth_inside_a]($t2) at ./sources/v3/position_v3.move:108:5+1
    assume {:print "$track_local(112,0,2):", $t2} $t2 == $t2;

    // trace_local[fee_growth_inside_b]($t3) at ./sources/v3/position_v3.move:108:5+1
    assume {:print "$track_local(112,0,3):", $t3} $t3 == $t3;

    // $t10 := object::object_address<0xbb::position_v3::Info>($t0) on_abort goto L2 with $t11 at ./sources/v3/position_v3.move:114:44+33
    assume {:print "$at(21,3648,3681)"} true;
    call $t10 := $1_object_object_address'$bb_position_v3_Info'($t0);
    if ($abort_flag) {
        assume {:print "$at(21,3648,3681)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(112,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t12 := borrow_global<0xbb::position_v3::Info>($t10) on_abort goto L2 with $t11 at ./sources/v3/position_v3.move:114:20+58
    if (!$ResourceExists($bb_position_v3_Info_$memory, $t10)) {
        call $ExecFailureAbort();
    } else {
        $t12 := $Mutation($Global($t10), EmptyVec(), $ResourceValue($bb_position_v3_Info_$memory, $t10));
    }
    if ($abort_flag) {
        assume {:print "$at(21,3624,3682)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(112,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[info]($t12) at ./sources/v3/position_v3.move:114:20+58
    $temp_0'$bb_position_v3_Info' := $Dereference($t12);
    assume {:print "$track_local(112,0,4):", $temp_0'$bb_position_v3_Info'} $temp_0'$bb_position_v3_Info' == $temp_0'$bb_position_v3_Info';

    // $t13 := get_field<0xbb::position_v3::Info>.fee_growth_inside_a_last($t12) at ./sources/v3/position_v3.move:118:13+29
    assume {:print "$at(21,3794,3823)"} true;
    $t13 := $Dereference($t12)->$fee_growth_inside_a_last;

    // ($t14, $t15) := math_u128::overflowing_sub($t2, $t13) on_abort goto L2 with $t11 at ./sources/v3/position_v3.move:116:37+112
    assume {:print "$at(21,3721,3833)"} true;
    call $t14,$t15 := $bb_math_u128_overflowing_sub($t2, $t13);
    if ($abort_flag) {
        assume {:print "$at(21,3721,3833)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(112,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // drop($t15) at ./sources/v3/position_v3.move:116:37+112

    // $t16 := get_field<0xbb::position_v3::Info>.fee_growth_inside_b_last($t12) at ./sources/v3/position_v3.move:122:13+29
    assume {:print "$at(21,3944,3973)"} true;
    $t16 := $Dereference($t12)->$fee_growth_inside_b_last;

    // ($t17, $t18) := math_u128::overflowing_sub($t3, $t16) on_abort goto L2 with $t11 at ./sources/v3/position_v3.move:120:37+112
    assume {:print "$at(21,3871,3983)"} true;
    call $t17,$t18 := $bb_math_u128_overflowing_sub($t3, $t16);
    if ($abort_flag) {
        assume {:print "$at(21,3871,3983)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(112,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // drop($t18) at ./sources/v3/position_v3.move:120:37+112

    // trace_local[$t13]($t17) at ./sources/v3/position_v3.move:125:28+7
    assume {:print "$at(21,4013,4020)"} true;
    assume {:print "$track_local(112,0,5):", $t17} $t17 == $t17;

    // $t19 := get_field<0xbb::position_v3::Info>.liquidity($t12) at ./sources/v3/position_v3.move:125:38+14
    $t19 := $Dereference($t12)->$liquidity;

    // $t20 := *($t14, $t19) on_abort goto L2 with $t11 at ./sources/v3/position_v3.move:125:28+24
    call $t20 := $MulU128($t14, $t19);
    if ($abort_flag) {
        assume {:print "$at(21,4013,4037)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(112,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t21 := get_field<0xbb::position_v3::Info>.liquidity($t12) at ./sources/v3/position_v3.move:126:38+14
    assume {:print "$at(21,4076,4090)"} true;
    $t21 := $Dereference($t12)->$liquidity;

    // $t22 := *($t17, $t21) on_abort goto L2 with $t11 at ./sources/v3/position_v3.move:126:28+24
    call $t22 := $MulU128($t17, $t21);
    if ($abort_flag) {
        assume {:print "$at(21,4066,4090)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(112,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t23 := get_field<0xbb::position_v3::Info>.fee_owed_a($t12) at ./sources/v3/position_v3.move:127:27+15
    assume {:print "$at(21,4118,4133)"} true;
    $t23 := $Dereference($t12)->$fee_owed_a;

    // trace_local[$t29]($t23) at ./sources/v3/position_v3.move:127:47+12
    assume {:print "$track_local(112,0,7):", $t23} $t23 == $t23;

    // trace_local[$t13]($t22) at ./sources/v3/position_v3.move:127:47+12
    assume {:print "$track_local(112,0,5):", $t22} $t22 == $t22;

    // $t24 := 64 at ./sources/v3/position_v3.move:127:63+2
    $t24 := 64;
    assume $IsValid'u8'($t24);

    // $t25 := >>($t20, $t24) on_abort goto L2 with $t11 at ./sources/v3/position_v3.move:127:46+20
    call $t25 := $ShrU128($t20, $t24);
    if ($abort_flag) {
        assume {:print "$at(21,4137,4157)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(112,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t26 := (u64)($t25) on_abort goto L2 with $t11 at ./sources/v3/position_v3.move:127:45+29
    call $t26 := $CastU64($t25);
    if ($abort_flag) {
        assume {:print "$at(21,4136,4165)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(112,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[$t31]($t26) at ./sources/v3/position_v3.move:127:27+47
    assume {:print "$track_local(112,0,8):", $t26} $t26 == $t26;

    // $t27 := +($t23, $t26) on_abort goto L2 with $t11 at ./sources/v3/position_v3.move:127:27+47
    call $t27 := $AddU64($t23, $t26);
    if ($abort_flag) {
        assume {:print "$at(21,4118,4165)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(112,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t28 := borrow_field<0xbb::position_v3::Info>.fee_owed_a($t12) at ./sources/v3/position_v3.move:127:9+15
    $t28 := $ChildMutation($t12, 6, $Dereference($t12)->$fee_owed_a);

    // write_ref($t28, $t27) at ./sources/v3/position_v3.move:127:9+65
    $t28 := $UpdateMutation($t28, $t27);

    // write_back[Reference($t12).fee_owed_a (u64)]($t28) at ./sources/v3/position_v3.move:127:9+65
    $t12 := $UpdateMutation($t12, $Update'$bb_position_v3_Info'_fee_owed_a($Dereference($t12), $Dereference($t28)));

    // $t29 := get_field<0xbb::position_v3::Info>.fee_owed_b($t12) at ./sources/v3/position_v3.move:128:27+15
    assume {:print "$at(21,4193,4208)"} true;
    $t29 := $Dereference($t12)->$fee_owed_b;

    // $t30 := 64 at ./sources/v3/position_v3.move:128:63+2
    $t30 := 64;
    assume $IsValid'u8'($t30);

    // $t31 := >>($t22, $t30) on_abort goto L2 with $t11 at ./sources/v3/position_v3.move:128:46+20
    call $t31 := $ShrU128($t22, $t30);
    if ($abort_flag) {
        assume {:print "$at(21,4212,4232)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(112,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t32 := (u64)($t31) on_abort goto L2 with $t11 at ./sources/v3/position_v3.move:128:45+29
    call $t32 := $CastU64($t31);
    if ($abort_flag) {
        assume {:print "$at(21,4211,4240)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(112,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t33 := +($t29, $t32) on_abort goto L2 with $t11 at ./sources/v3/position_v3.move:128:27+47
    call $t33 := $AddU64($t29, $t32);
    if ($abort_flag) {
        assume {:print "$at(21,4193,4240)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(112,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t34 := borrow_field<0xbb::position_v3::Info>.fee_owed_b($t12) at ./sources/v3/position_v3.move:128:9+15
    $t34 := $ChildMutation($t12, 7, $Dereference($t12)->$fee_owed_b);

    // write_ref($t34, $t33) at ./sources/v3/position_v3.move:128:9+65
    $t34 := $UpdateMutation($t34, $t33);

    // write_back[Reference($t12).fee_owed_b (u64)]($t34) at ./sources/v3/position_v3.move:128:9+65
    $t12 := $UpdateMutation($t12, $Update'$bb_position_v3_Info'_fee_owed_b($Dereference($t12), $Dereference($t34)));

    // $t35 := get_field<0xbb::position_v3::Info>.liquidity($t12) at ./sources/v3/position_v3.move:129:41+14
    assume {:print "$at(21,4282,4296)"} true;
    $t35 := $Dereference($t12)->$liquidity;

    // $t36 := get_field<0xbb::position_v3::Info>.liquidity($t12) at ./sources/v3/position_v3.move:130:26+14
    assume {:print "$at(21,4323,4337)"} true;
    $t36 := $Dereference($t12)->$liquidity;

    // $t37 := +($t36, $t1) on_abort goto L2 with $t11 at ./sources/v3/position_v3.move:130:26+32
    call $t37 := $AddU128($t36, $bv2int.128($t1));
    if ($abort_flag) {
        assume {:print "$at(21,4323,4355)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(112,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t38 := borrow_field<0xbb::position_v3::Info>.liquidity($t12) at ./sources/v3/position_v3.move:130:9+14
    $t38 := $ChildMutation($t12, 1, $Dereference($t12)->$liquidity);

    // write_ref($t38, $t37) at ./sources/v3/position_v3.move:130:9+49
    $t38 := $UpdateMutation($t38, $t37);

    // write_back[Reference($t12).liquidity (u128)]($t38) at ./sources/v3/position_v3.move:130:9+49
    $t12 := $UpdateMutation($t12, $Update'$bb_position_v3_Info'_liquidity($Dereference($t12), $Dereference($t38)));

    // $t39 := borrow_field<0xbb::position_v3::Info>.fee_growth_inside_a_last($t12) at ./sources/v3/position_v3.move:131:9+29
    assume {:print "$at(21,4365,4394)"} true;
    $t39 := $ChildMutation($t12, 4, $Dereference($t12)->$fee_growth_inside_a_last);

    // trace_local[$t49]($t39) at ./sources/v3/position_v3.move:131:9+51
    $temp_0'u128' := $Dereference($t39);
    assume {:print "$track_local(112,0,9):", $temp_0'u128'} $temp_0'u128' == $temp_0'u128';

    // write_ref($t39, $t2) at ./sources/v3/position_v3.move:131:9+51
    $t39 := $UpdateMutation($t39, $t2);

    // write_back[Reference($t12).fee_growth_inside_a_last (u128)]($t39) at ./sources/v3/position_v3.move:131:9+51
    $t12 := $UpdateMutation($t12, $Update'$bb_position_v3_Info'_fee_growth_inside_a_last($Dereference($t12), $Dereference($t39)));

    // $t40 := borrow_field<0xbb::position_v3::Info>.fee_growth_inside_b_last($t12) at ./sources/v3/position_v3.move:132:9+29
    assume {:print "$at(21,4426,4455)"} true;
    $t40 := $ChildMutation($t12, 5, $Dereference($t12)->$fee_growth_inside_b_last);

    // trace_local[$t49]($t40) at ./sources/v3/position_v3.move:132:9+51
    $temp_0'u128' := $Dereference($t40);
    assume {:print "$track_local(112,0,9):", $temp_0'u128'} $temp_0'u128' == $temp_0'u128';

    // write_ref($t40, $t3) at ./sources/v3/position_v3.move:132:9+51
    $t40 := $UpdateMutation($t40, $t3);

    // write_back[Reference($t12).fee_growth_inside_b_last (u128)]($t40) at ./sources/v3/position_v3.move:132:9+51
    $t12 := $UpdateMutation($t12, $Update'$bb_position_v3_Info'_fee_growth_inside_b_last($Dereference($t12), $Dereference($t40)));

    // write_back[0xbb::position_v3::Info@]($t12) at ./sources/v3/position_v3.move:132:9+51
    $bb_position_v3_Info_$memory := $ResourceUpdate($bb_position_v3_Info_$memory, $GlobalLocationAddress($t12),
        $Dereference($t12));

    // $t41 := false at ./sources/v3/position_v3.move:133:54+5
    assume {:print "$at(21,4532,4537)"} true;
    $t41 := false;
    assume $IsValid'bool'($t41);

    // trace_return[0]($t35) at ./sources/v3/position_v3.move:113:41+941
    assume {:print "$at(21,3603,4544)"} true;
    assume {:print "$track_return(112,0,0):", $t35} $t35 == $t35;

    // trace_return[1]($t1) at ./sources/v3/position_v3.move:113:41+941
    assume {:print "$track_return(112,0,1):", $t1} $t1 == $t1;

    // trace_return[2]($t41) at ./sources/v3/position_v3.move:113:41+941
    assume {:print "$track_return(112,0,2):", $t41} $t41 == $t41;

    // label L1 at ./sources/v3/position_v3.move:134:5+1
    assume {:print "$at(21,4543,4544)"} true;
L1:

    // return ($t35, $t1, $t41) at ./sources/v3/position_v3.move:134:5+1
    assume {:print "$at(21,4543,4544)"} true;
    $ret0 := $t35;
    $ret1 := $bv2int.128($t1);
    $ret2 := $t41;
    return;

    // label L2 at ./sources/v3/position_v3.move:134:5+1
L2:

    // abort($t11) at ./sources/v3/position_v3.move:134:5+1
    assume {:print "$at(21,4543,4544)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun position_v3::get_liquidity [baseline] at ./sources/v3/position_v3.move:227:5+188
procedure {:inline 1} $bb_position_v3_get_liquidity(_$t0: $1_object_Object'$bb_position_v3_Info') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: $bb_position_v3_Info;
    var $t4: int;
    var $t0: $1_object_Object'$bb_position_v3_Info';
    var $temp_0'$1_object_Object'$bb_position_v3_Info'': $1_object_Object'$bb_position_v3_Info';
    var $temp_0'u128': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[position]($t0) at ./sources/v3/position_v3.move:227:5+1
    assume {:print "$at(21,7925,7926)"} true;
    assume {:print "$track_local(112,5,0):", $t0} $t0 == $t0;

    // $t1 := object::object_address<0xbb::position_v3::Info>($t0) on_abort goto L2 with $t2 at ./sources/v3/position_v3.move:230:40+33
    assume {:print "$at(21,8049,8082)"} true;
    call $t1 := $1_object_object_address'$bb_position_v3_Info'($t0);
    if ($abort_flag) {
        assume {:print "$at(21,8049,8082)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(112,5):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_global<0xbb::position_v3::Info>($t1) on_abort goto L2 with $t2 at ./sources/v3/position_v3.move:230:20+54
    if (!$ResourceExists($bb_position_v3_Info_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($bb_position_v3_Info_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(21,8029,8083)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(112,5):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t4 := get_field<0xbb::position_v3::Info>.liquidity($t3) at ./sources/v3/position_v3.move:231:9+14
    assume {:print "$at(21,8093,8107)"} true;
    $t4 := $t3->$liquidity;

    // trace_return[0]($t4) at ./sources/v3/position_v3.move:231:9+14
    assume {:print "$track_return(112,5,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/v3/position_v3.move:232:5+1
    assume {:print "$at(21,8112,8113)"} true;
L1:

    // return $t4 at ./sources/v3/position_v3.move:232:5+1
    assume {:print "$at(21,8112,8113)"} true;
    $ret0 := $t4;
    return;

    // label L2 at ./sources/v3/position_v3.move:232:5+1
L2:

    // abort($t2) at ./sources/v3/position_v3.move:232:5+1
    assume {:print "$at(21,8112,8113)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun position_v3::get_pool_info [baseline] at ./sources/v3/position_v3.move:234:5+252
procedure {:inline 1} $bb_position_v3_get_pool_info(_$t0: $1_object_Object'$bb_position_v3_Info') returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata', $ret1: $1_object_Object'$1_fungible_asset_Metadata', $ret2: int)
{
    // declare local variables
    var $t1: $bb_position_v3_Info;
    var $t2: int;
    var $t3: int;
    var $t4: $bb_position_v3_Info;
    var $t5: $1_object_Object'$1_fungible_asset_Metadata';
    var $t6: $1_object_Object'$1_fungible_asset_Metadata';
    var $t7: int;
    var $t0: $1_object_Object'$bb_position_v3_Info';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$bb_position_v3_Info'': $1_object_Object'$bb_position_v3_Info';
    var $temp_0'$bb_position_v3_Info': $bb_position_v3_Info;
    var $temp_0'u8': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[position]($t0) at ./sources/v3/position_v3.move:234:5+1
    assume {:print "$at(21,8119,8120)"} true;
    assume {:print "$track_local(112,6,0):", $t0} $t0 == $t0;

    // $t2 := object::object_address<0xbb::position_v3::Info>($t0) on_abort goto L2 with $t3 at ./sources/v3/position_v3.move:237:40+33
    assume {:print "$at(21,8278,8311)"} true;
    call $t2 := $1_object_object_address'$bb_position_v3_Info'($t0);
    if ($abort_flag) {
        assume {:print "$at(21,8278,8311)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(112,6):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := get_global<0xbb::position_v3::Info>($t2) on_abort goto L2 with $t3 at ./sources/v3/position_v3.move:237:20+54
    if (!$ResourceExists($bb_position_v3_Info_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $ResourceValue($bb_position_v3_Info_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(21,8258,8312)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(112,6):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_local[info]($t4) at ./sources/v3/position_v3.move:237:20+54
    assume {:print "$track_local(112,6,1):", $t4} $t4 == $t4;

    // $t5 := get_field<0xbb::position_v3::Info>.token_a($t4) at ./sources/v3/position_v3.move:238:10+12
    assume {:print "$at(21,8323,8335)"} true;
    $t5 := $t4->$token_a;

    // $t6 := get_field<0xbb::position_v3::Info>.token_b($t4) at ./sources/v3/position_v3.move:238:24+12
    $t6 := $t4->$token_b;

    // $t7 := get_field<0xbb::position_v3::Info>.fee_tier($t4) at ./sources/v3/position_v3.move:238:38+13
    $t7 := $t4->$fee_tier;

    // trace_return[0]($t5) at ./sources/v3/position_v3.move:238:9+43
    assume {:print "$track_return(112,6,0):", $t5} $t5 == $t5;

    // trace_return[1]($t6) at ./sources/v3/position_v3.move:238:9+43
    assume {:print "$track_return(112,6,1):", $t6} $t6 == $t6;

    // trace_return[2]($t7) at ./sources/v3/position_v3.move:238:9+43
    assume {:print "$track_return(112,6,2):", $t7} $t7 == $t7;

    // label L1 at ./sources/v3/position_v3.move:239:5+1
    assume {:print "$at(21,8370,8371)"} true;
L1:

    // return ($t5, $t6, $t7) at ./sources/v3/position_v3.move:239:5+1
    assume {:print "$at(21,8370,8371)"} true;
    $ret0 := $t5;
    $ret1 := $t6;
    $ret2 := $t7;
    return;

    // label L2 at ./sources/v3/position_v3.move:239:5+1
L2:

    // abort($t3) at ./sources/v3/position_v3.move:239:5+1
    assume {:print "$at(21,8370,8371)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun position_v3::get_position_rewards [baseline] at ./sources/v3/position_v3.move:241:5+326
procedure {:inline 1} $bb_position_v3_get_position_rewards(_$t0: $signer, _$t1: $1_object_Object'$bb_position_v3_Info') returns ($ret0: Vec ($bb_rewarder_PositionReward))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: $bb_position_v3_Info;
    var $t7: Vec ($bb_rewarder_PositionReward);
    var $t8: int;
    var $t0: $signer;
    var $t1: $1_object_Object'$bb_position_v3_Info';
    var $temp_0'$1_object_Object'$bb_position_v3_Info'': $1_object_Object'$bb_position_v3_Info';
    var $temp_0'signer': $signer;
    var $temp_0'vec'$bb_rewarder_PositionReward'': Vec ($bb_rewarder_PositionReward);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[user]($t0) at ./sources/v3/position_v3.move:241:5+1
    assume {:print "$at(21,8377,8378)"} true;
    assume {:print "$track_local(112,7,0):", $t0} $t0 == $t0;

    // trace_local[position]($t1) at ./sources/v3/position_v3.move:241:5+1
    assume {:print "$track_local(112,7,1):", $t1} $t1 == $t1;

    // $t2 := signer::address_of($t0) on_abort goto L3 with $t3 at ./sources/v3/position_v3.move:245:44+24
    assume {:print "$at(21,8553,8577)"} true;
    call $t2 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(21,8553,8577)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(112,7):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := object::is_owner<0xbb::position_v3::Info>($t1, $t2) on_abort goto L3 with $t3 at ./sources/v3/position_v3.move:245:17+52
    call $t4 := $1_object_is_owner'$bb_position_v3_Info'($t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(21,8526,8578)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(112,7):", $t3} $t3 == $t3;
        goto L3;
    }

    // if ($t4) goto L1 else goto L0 at ./sources/v3/position_v3.move:245:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at ./sources/v3/position_v3.move:246:63+9
    assume {:print "$at(21,8664,8673)"} true;
L1:

    // $t5 := object::object_address<0xbb::position_v3::Info>($t1) on_abort goto L3 with $t3 at ./sources/v3/position_v3.move:246:40+33
    assume {:print "$at(21,8641,8674)"} true;
    call $t5 := $1_object_object_address'$bb_position_v3_Info'($t1);
    if ($abort_flag) {
        assume {:print "$at(21,8641,8674)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(112,7):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t6 := get_global<0xbb::position_v3::Info>($t5) on_abort goto L3 with $t3 at ./sources/v3/position_v3.move:246:20+54
    if (!$ResourceExists($bb_position_v3_Info_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($bb_position_v3_Info_$memory, $t5);
    }
    if ($abort_flag) {
        assume {:print "$at(21,8621,8675)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(112,7):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t7 := get_field<0xbb::position_v3::Info>.rewards($t6) at ./sources/v3/position_v3.move:247:9+12
    assume {:print "$at(21,8685,8697)"} true;
    $t7 := $t6->$rewards;

    // trace_return[0]($t7) at ./sources/v3/position_v3.move:244:45+195
    assume {:print "$at(21,8508,8703)"} true;
    assume {:print "$track_return(112,7,0):", $t7} $t7 == $t7;

    // goto L2 at ./sources/v3/position_v3.move:244:45+195
    goto L2;

    // label L0 at ./sources/v3/position_v3.move:245:71+19
    assume {:print "$at(21,8580,8599)"} true;
L0:

    // $t8 := 300001 at ./sources/v3/position_v3.move:245:71+19
    assume {:print "$at(21,8580,8599)"} true;
    $t8 := 300001;
    assume $IsValid'u64'($t8);

    // trace_abort($t8) at ./sources/v3/position_v3.move:245:9+6
    assume {:print "$at(21,8518,8524)"} true;
    assume {:print "$track_abort(112,7):", $t8} $t8 == $t8;

    // $t3 := move($t8) at ./sources/v3/position_v3.move:245:9+6
    $t3 := $t8;

    // goto L3 at ./sources/v3/position_v3.move:245:9+6
    goto L3;

    // label L2 at ./sources/v3/position_v3.move:248:5+1
    assume {:print "$at(21,8702,8703)"} true;
L2:

    // return $t7 at ./sources/v3/position_v3.move:248:5+1
    assume {:print "$at(21,8702,8703)"} true;
    $ret0 := $t7;
    return;

    // label L3 at ./sources/v3/position_v3.move:248:5+1
L3:

    // abort($t3) at ./sources/v3/position_v3.move:248:5+1
    assume {:print "$at(21,8702,8703)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun position_v3::get_tick [baseline] at ./sources/v3/position_v3.move:220:5+208
procedure {:inline 1} $bb_position_v3_get_tick(_$t0: $1_object_Object'$bb_position_v3_Info') returns ($ret0: $bb_i32_I32, $ret1: $bb_i32_I32)
{
    // declare local variables
    var $t1: $bb_position_v3_Info;
    var $t2: int;
    var $t3: int;
    var $t4: $bb_position_v3_Info;
    var $t5: $bb_i32_I32;
    var $t6: $bb_i32_I32;
    var $t0: $1_object_Object'$bb_position_v3_Info';
    var $temp_0'$1_object_Object'$bb_position_v3_Info'': $1_object_Object'$bb_position_v3_Info';
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'$bb_position_v3_Info': $bb_position_v3_Info;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[position]($t0) at ./sources/v3/position_v3.move:220:5+1
    assume {:print "$at(21,7711,7712)"} true;
    assume {:print "$track_local(112,8,0):", $t0} $t0 == $t0;

    // $t2 := object::object_address<0xbb::position_v3::Info>($t0) on_abort goto L2 with $t3 at ./sources/v3/position_v3.move:223:40+33
    assume {:print "$at(21,7835,7868)"} true;
    call $t2 := $1_object_object_address'$bb_position_v3_Info'($t0);
    if ($abort_flag) {
        assume {:print "$at(21,7835,7868)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(112,8):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := get_global<0xbb::position_v3::Info>($t2) on_abort goto L2 with $t3 at ./sources/v3/position_v3.move:223:20+54
    if (!$ResourceExists($bb_position_v3_Info_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $ResourceValue($bb_position_v3_Info_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(21,7815,7869)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(112,8):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_local[info]($t4) at ./sources/v3/position_v3.move:223:20+54
    assume {:print "$track_local(112,8,1):", $t4} $t4 == $t4;

    // $t5 := get_field<0xbb::position_v3::Info>.tick_lower($t4) at ./sources/v3/position_v3.move:224:10+15
    assume {:print "$at(21,7880,7895)"} true;
    $t5 := $t4->$tick_lower;

    // $t6 := get_field<0xbb::position_v3::Info>.tick_upper($t4) at ./sources/v3/position_v3.move:224:27+15
    $t6 := $t4->$tick_upper;

    // trace_return[0]($t5) at ./sources/v3/position_v3.move:224:9+34
    assume {:print "$track_return(112,8,0):", $t5} $t5 == $t5;

    // trace_return[1]($t6) at ./sources/v3/position_v3.move:224:9+34
    assume {:print "$track_return(112,8,1):", $t6} $t6 == $t6;

    // label L1 at ./sources/v3/position_v3.move:225:5+1
    assume {:print "$at(21,7918,7919)"} true;
L1:

    // return ($t5, $t6) at ./sources/v3/position_v3.move:225:5+1
    assume {:print "$at(21,7918,7919)"} true;
    $ret0 := $t5;
    $ret1 := $t6;
    return;

    // label L2 at ./sources/v3/position_v3.move:225:5+1
L2:

    // abort($t3) at ./sources/v3/position_v3.move:225:5+1
    assume {:print "$at(21,7918,7919)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun position_v3::update_rewards [baseline] at ./sources/v3/position_v3.move:257:5+244
procedure {:inline 1} $bb_position_v3_update_rewards(_$t0: $1_object_Object'$bb_position_v3_Info', _$t1: Vec ($bb_rewarder_PositionReward)) returns ()
{
    // declare local variables
    var $t2: $Mutation (Vec ($bb_rewarder_PositionReward));
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation ($bb_position_v3_Info);
    var $t6: $Mutation (Vec ($bb_rewarder_PositionReward));
    var $t0: $1_object_Object'$bb_position_v3_Info';
    var $t1: Vec ($bb_rewarder_PositionReward);
    var $temp_0'$1_object_Object'$bb_position_v3_Info'': $1_object_Object'$bb_position_v3_Info';
    var $temp_0'vec'$bb_rewarder_PositionReward'': Vec ($bb_rewarder_PositionReward);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[position]($t0) at ./sources/v3/position_v3.move:257:5+1
    assume {:print "$at(21,8927,8928)"} true;
    assume {:print "$track_local(112,11,0):", $t0} $t0 == $t0;

    // trace_local[new_rewards]($t1) at ./sources/v3/position_v3.move:257:5+1
    assume {:print "$track_local(112,11,1):", $t1} $t1 == $t1;

    // $t3 := object::object_address<0xbb::position_v3::Info>($t0) on_abort goto L2 with $t4 at ./sources/v3/position_v3.move:261:44+33
    assume {:print "$at(21,9095,9128)"} true;
    call $t3 := $1_object_object_address'$bb_position_v3_Info'($t0);
    if ($abort_flag) {
        assume {:print "$at(21,9095,9128)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(112,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := borrow_global<0xbb::position_v3::Info>($t3) on_abort goto L2 with $t4 at ./sources/v3/position_v3.move:261:20+58
    if (!$ResourceExists($bb_position_v3_Info_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $Mutation($Global($t3), EmptyVec(), $ResourceValue($bb_position_v3_Info_$memory, $t3));
    }
    if ($abort_flag) {
        assume {:print "$at(21,9071,9129)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(112,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t6 := borrow_field<0xbb::position_v3::Info>.rewards($t5) at ./sources/v3/position_v3.move:262:9+12
    assume {:print "$at(21,9139,9151)"} true;
    $t6 := $ChildMutation($t5, 11, $Dereference($t5)->$rewards);

    // trace_local[$t5]($t6) at ./sources/v3/position_v3.move:262:9+26
    $temp_0'vec'$bb_rewarder_PositionReward'' := $Dereference($t6);
    assume {:print "$track_local(112,11,2):", $temp_0'vec'$bb_rewarder_PositionReward''} $temp_0'vec'$bb_rewarder_PositionReward'' == $temp_0'vec'$bb_rewarder_PositionReward'';

    // write_ref($t6, $t1) at ./sources/v3/position_v3.move:262:9+26
    $t6 := $UpdateMutation($t6, $t1);

    // write_back[Reference($t5).rewards (vector<0xbb::rewarder::PositionReward>)]($t6) at ./sources/v3/position_v3.move:262:9+26
    $t5 := $UpdateMutation($t5, $Update'$bb_position_v3_Info'_rewards($Dereference($t5), $Dereference($t6)));

    // write_back[0xbb::position_v3::Info@]($t5) at ./sources/v3/position_v3.move:262:9+26
    $bb_position_v3_Info_$memory := $ResourceUpdate($bb_position_v3_Info_$memory, $GlobalLocationAddress($t5),
        $Dereference($t5));

    // label L1 at ./sources/v3/position_v3.move:263:5+1
    assume {:print "$at(21,9170,9171)"} true;
L1:

    // return () at ./sources/v3/position_v3.move:263:5+1
    assume {:print "$at(21,9170,9171)"} true;
    return;

    // label L2 at ./sources/v3/position_v3.move:263:5+1
L2:

    // abort($t4) at ./sources/v3/position_v3.move:263:5+1
    assume {:print "$at(21,9170,9171)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// struct position_blacklist::PositionBlackList at ./sources/v3/position_blacklist.move:7:5+82
datatype $bb_position_blacklist_PositionBlackList {
    $bb_position_blacklist_PositionBlackList($addresses: $1_smart_vector_SmartVector'address')
}
function {:inline} $Update'$bb_position_blacklist_PositionBlackList'_addresses(s: $bb_position_blacklist_PositionBlackList, x: $1_smart_vector_SmartVector'address'): $bb_position_blacklist_PositionBlackList {
    $bb_position_blacklist_PositionBlackList(x)
}
function $IsValid'$bb_position_blacklist_PositionBlackList'(s: $bb_position_blacklist_PositionBlackList): bool {
    $IsValid'$1_smart_vector_SmartVector'address''(s->$addresses)
}
function {:inline} $IsEqual'$bb_position_blacklist_PositionBlackList'(s1: $bb_position_blacklist_PositionBlackList, s2: $bb_position_blacklist_PositionBlackList): bool {
    $IsEqual'$1_smart_vector_SmartVector'address''(s1->$addresses, s2->$addresses)}

// fun position_blacklist::blocked_out_liquidity_amount [baseline] at ./sources/v3/position_blacklist.move:20:5+519
procedure {:inline 1} $bb_position_blacklist_blocked_out_liquidity_amount(_$t0: $bb_position_blacklist_PositionBlackList, _$t1: $bb_i32_I32) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: $1_smart_vector_SmartVector'address';
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $bb_i32_I32;
    var $t8: $bb_i32_I32;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: $1_smart_vector_SmartVector'address';
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: $1_object_Object'$bb_position_v3_Info';
    var $t19: $bb_i32_I32;
    var $t20: $bb_i32_I32;
    var $t21: bool;
    var $t22: bool;
    var $t23: $1_object_Object'$bb_position_v3_Info';
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: bool;
    var $t29: int;
    var $t0: $bb_position_blacklist_PositionBlackList;
    var $t1: $bb_i32_I32;
    var $temp_0'$1_smart_vector_SmartVector'address'': $1_smart_vector_SmartVector'address';
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'$bb_position_blacklist_PositionBlackList': $bb_position_blacklist_PositionBlackList;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u128': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[list]($t0) at ./sources/v3/position_blacklist.move:20:5+1
    assume {:print "$at(20,535,536)"} true;
    assume {:print "$track_local(113,3,0):", $t0} $t0 == $t0;

    // trace_local[current_tick]($t1) at ./sources/v3/position_blacklist.move:20:5+1
    assume {:print "$track_local(113,3,1):", $t1} $t1 == $t1;

    // $t11 := 0 at ./sources/v3/position_blacklist.move:21:33+1
    assume {:print "$at(20,660,661)"} true;
    $t11 := 0;
    assume $IsValid'u128'($t11);

    // trace_local[total_blocked_out]($t11) at ./sources/v3/position_blacklist.move:21:33+1
    assume {:print "$track_local(113,3,2):", $t11} $t11 == $t11;

    // $t12 := get_field<0xbb::position_blacklist::PositionBlackList>.addresses($t0) at ./sources/v3/position_blacklist.move:22:9+350
    assume {:print "$at(20,671,1021)"} true;
    $t12 := $t0->$addresses;

    // trace_local[$t5]($t12) at ./sources/v3/position_blacklist.move:22:9+350
    assume {:print "$track_local(113,3,3):", $t12} $t12 == $t12;

    // $t13 := 0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:365:17+1
    assume {:print "$at(79,15537,15538)"} true;
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // trace_local[i]($t13) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:365:17+1
    assume {:print "$track_local(113,3,4):", $t13} $t13 == $t13;

    // $t14 := smart_vector::length<address>($t12) on_abort goto L11 with $t15 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:366:19+37
    assume {:print "$at(79,15558,15595)"} true;
    call $t14 := $1_smart_vector_length'address'($t12);
    if ($abort_flag) {
        assume {:print "$at(79,15558,15595)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(113,3):", $t15} $t15 == $t15;
        goto L11;
    }

    // trace_local[len]($t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:366:19+37
    assume {:print "$track_local(113,3,5):", $t14} $t14 == $t14;

    // label L6 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume {:print "$at(79,15612,15613)"} true;
L6:

    // $t2 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume {:print "$at(79,15612,15613)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'u128'($t2);

    // $t4 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t4;

    // assume WellFormed($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'u64'($t4);

    // $t9 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t9;

    // assume WellFormed($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'bool'($t9);

    // $t16 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t16;

    // assume WellFormed($t16) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'bool'($t16);

    // $t17 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t17;

    // assume WellFormed($t17) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'address'($t17);

    // $t18 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t18;

    // assume WellFormed($t18) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'$1_object_Object'$bb_position_v3_Info''($t18);

    // $t19 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t19;

    // assume WellFormed($t19) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'$bb_i32_I32'($t19);

    // $t20 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t20;

    // assume WellFormed($t20) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'$bb_i32_I32'($t20);

    // $t21 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t21;

    // assume WellFormed($t21) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'bool'($t21);

    // $t22 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t22;

    // assume WellFormed($t22) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'bool'($t22);

    // $t23 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t23;

    // assume WellFormed($t23) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'$1_object_Object'$bb_position_v3_Info''($t23);

    // $t24 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t24;

    // assume WellFormed($t24) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'u128'($t24);

    // $t25 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t25;

    // assume WellFormed($t25) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'u128'($t25);

    // $t26 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t26;

    // assume WellFormed($t26) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'u64'($t26);

    // $t27 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t27;

    // assume WellFormed($t27) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'u64'($t27);

    // $t28 := havoc[val]() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    havoc $t28;

    // assume WellFormed($t28) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume $IsValid'bool'($t28);

    // trace_local[total_blocked_out]($t2) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume {:print "$info(): enter loop, variable(s) total_blocked_out, i, $t8 havocked and reassigned"} true;
    assume {:print "$track_local(113,3,2):", $t2} $t2 == $t2;

    // trace_local[i]($t4) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume {:print "$track_local(113,3,4):", $t4} $t4 == $t4;

    // trace_local[$t8]($t9) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume {:print "$track_local(113,3,9):", $t9} $t9 == $t9;

    // assume Not(AbortFlag()) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+1
    assume !$abort_flag;

    // $t16 := <($t4, $t14) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:16+7
    call $t16 := $Lt($t4, $t14);

    // if ($t16) goto L1 else goto L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:9+106
    if ($t16) { goto L1; } else { goto L0; }

    // label L1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:368:47+4
    assume {:print "$at(79,15669,15673)"} true;
L1:

    // $t17 := smart_vector::borrow<address>($t12, $t4) on_abort goto L11 with $t15 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:368:15+40
    assume {:print "$at(79,15637,15677)"} true;
    call $t17 := $1_smart_vector_borrow'address'($t12, $t4);
    if ($abort_flag) {
        assume {:print "$at(79,15637,15677)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(113,3):", $t15} $t15 == $t15;
        goto L11;
    }

    // trace_local[$t11]($t17) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:368:15+40
    assume {:print "$track_local(113,3,6):", $t17} $t17 == $t17;

    // $t18 := object::address_to_object<0xbb::position_v3::Info>($t17) on_abort goto L11 with $t15 at ./sources/v3/position_blacklist.move:23:56+51
    assume {:print "$at(20,762,813)"} true;
    call $t18 := $1_object_address_to_object'$bb_position_v3_Info'($t17);
    if ($abort_flag) {
        assume {:print "$at(20,762,813)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(113,3):", $t15} $t15 == $t15;
        goto L11;
    }

    // ($t19, $t20) := position_v3::get_tick($t18) on_abort goto L11 with $t15 at ./sources/v3/position_blacklist.move:23:34+74
    call $t19,$t20 := $bb_position_v3_get_tick($t18);
    if ($abort_flag) {
        assume {:print "$at(20,740,814)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(113,3):", $t15} $t15 == $t15;
        goto L11;
    }

    // trace_local[upper]($t20) at ./sources/v3/position_blacklist.move:23:34+74
    assume {:print "$track_local(113,3,7):", $t20} $t20 == $t20;

    // trace_local[lower]($t19) at ./sources/v3/position_blacklist.move:23:34+74
    assume {:print "$track_local(113,3,8):", $t19} $t19 == $t19;

    // $t21 := i32::gte($t1, $t19) on_abort goto L11 with $t15 at ./sources/v3/position_blacklist.move:24:16+29
    assume {:print "$at(20,831,860)"} true;
    call $t21 := $bb_i32_gte($t1, $t19);
    if ($abort_flag) {
        assume {:print "$at(20,831,860)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(113,3):", $t15} $t15 == $t15;
        goto L11;
    }

    // if ($t21) goto L3 else goto L2 at ./sources/v3/position_blacklist.move:24:16+61
    if ($t21) { goto L3; } else { goto L2; }

    // label L3 at ./sources/v3/position_blacklist.move:24:57+12
L3:

    // $t22 := i32::lt($t1, $t20) on_abort goto L11 with $t15 at ./sources/v3/position_blacklist.move:24:49+28
    assume {:print "$at(20,864,892)"} true;
    call $t22 := $bb_i32_lt($t1, $t20);
    if ($abort_flag) {
        assume {:print "$at(20,864,892)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(113,3):", $t15} $t15 == $t15;
        goto L11;
    }

    // $t9 := $t22 at ./sources/v3/position_blacklist.move:24:49+28
    $t9 := $t22;

    // trace_local[$t8]($t22) at ./sources/v3/position_blacklist.move:24:49+28
    assume {:print "$track_local(113,3,9):", $t22} $t22 == $t22;

    // label L8 at ./sources/v3/position_blacklist.move:24:13+182
L8:

    // if ($t9) goto L5 else goto L4 at ./sources/v3/position_blacklist.move:24:13+182
    assume {:print "$at(20,828,1010)"} true;
    if ($t9) { goto L5; } else { goto L4; }

    // label L5 at ./sources/v3/position_blacklist.move:25:110+5
    assume {:print "$at(20,1003,1008)"} true;
L5:

    // $t23 := object::address_to_object<0xbb::position_v3::Info>($t17) on_abort goto L11 with $t15 at ./sources/v3/position_blacklist.move:25:65+51
    assume {:print "$at(20,958,1009)"} true;
    call $t23 := $1_object_address_to_object'$bb_position_v3_Info'($t17);
    if ($abort_flag) {
        assume {:print "$at(20,958,1009)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(113,3):", $t15} $t15 == $t15;
        goto L11;
    }

    // $t24 := position_v3::get_liquidity($t23) on_abort goto L11 with $t15 at ./sources/v3/position_blacklist.move:25:38+79
    call $t24 := $bb_position_v3_get_liquidity($t23);
    if ($abort_flag) {
        assume {:print "$at(20,931,1010)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(113,3):", $t15} $t15 == $t15;
        goto L11;
    }

    // trace_local[$t]($t24) at ./sources/v3/position_blacklist.move:25:38+79
    assume {:print "$track_local(113,3,10):", $t24} $t24 == $t24;

    // $t25 := +($t2, $t24) on_abort goto L11 with $t15 at ./sources/v3/position_blacklist.move:25:17+100
    call $t25 := $AddU128($t2, $t24);
    if ($abort_flag) {
        assume {:print "$at(20,910,1010)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(113,3):", $t15} $t15 == $t15;
        goto L11;
    }

    // trace_local[total_blocked_out]($t25) at ./sources/v3/position_blacklist.move:25:17+100
    assume {:print "$track_local(113,3,2):", $t25} $t25 == $t25;

    // label L7 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:369:17+1
    assume {:print "$at(79,15696,15697)"} true;
L7:

    // $t26 := 1 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:369:21+1
    assume {:print "$at(79,15700,15701)"} true;
    $t26 := 1;
    assume $IsValid'u64'($t26);

    // $t27 := +($t4, $t26) on_abort goto L11 with $t15 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:369:17+5
    call $t27 := $AddU64($t4, $t26);
    if ($abort_flag) {
        assume {:print "$at(79,15696,15701)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(113,3):", $t15} $t15 == $t15;
        goto L11;
    }

    // trace_local[i]($t27) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:369:13+9
    assume {:print "$track_local(113,3,4):", $t27} $t27 == $t27;

    // goto L9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:9+106
    assume {:print "$at(79,15605,15711)"} true;
    goto L9;

    // label L4 at ./sources/v3/position_blacklist.move:24:13+182
    assume {:print "$at(20,828,1010)"} true;
L4:

    // goto L7 at ./sources/v3/position_blacklist.move:24:13+182
    assume {:print "$at(20,828,1010)"} true;
    goto L7;

    // label L2 at ./sources/v3/position_blacklist.move:24:16+61
L2:

    // $t28 := false at ./sources/v3/position_blacklist.move:24:16+61
    assume {:print "$at(20,831,892)"} true;
    $t28 := false;
    assume $IsValid'bool'($t28);

    // $t9 := $t28 at ./sources/v3/position_blacklist.move:24:16+61
    $t9 := $t28;

    // trace_local[$t8]($t28) at ./sources/v3/position_blacklist.move:24:16+61
    assume {:print "$track_local(113,3,9):", $t28} $t28 == $t28;

    // goto L8 at ./sources/v3/position_blacklist.move:24:16+61
    goto L8;

    // label L0 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:9+106
    assume {:print "$at(79,15605,15711)"} true;
L0:

    // trace_return[0]($t2) at ./sources/v3/position_blacklist.move:20:96+428
    assume {:print "$at(20,626,1054)"} true;
    assume {:print "$track_return(113,3,0):", $t2} $t2 == $t2;

    // $t29 := move($t2) at ./sources/v3/position_blacklist.move:20:96+428
    $t29 := $t2;

    // goto L10 at ./sources/v3/position_blacklist.move:20:96+428
    goto L10;

    // label L9 at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:9+106
    // Loop invariant checking block for the loop started with header: L6
    assume {:print "$at(79,15605,15711)"} true;
L9:

    // stop() at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.move:367:9+106
    assume {:print "$at(79,15605,15711)"} true;
    assume false;
    return;

    // label L10 at ./sources/v3/position_blacklist.move:28:5+1
    assume {:print "$at(20,1053,1054)"} true;
L10:

    // return $t29 at ./sources/v3/position_blacklist.move:28:5+1
    assume {:print "$at(20,1053,1054)"} true;
    $ret0 := $t29;
    return;

    // label L11 at ./sources/v3/position_blacklist.move:28:5+1
L11:

    // abort($t15) at ./sources/v3/position_blacklist.move:28:5+1
    assume {:print "$at(20,1053,1054)"} true;
    $abort_code := $t15;
    $abort_flag := true;
    return;

}

// fun package_manager::get_resource_address [baseline] at ./sources/v3/package_manager.move:63:5+160
procedure {:inline 1} $bb_package_manager_get_resource_address() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: int;
    var $temp_0'address': int;

    // bytecode translation starts here
    // $t1 := 0xbb at ./sources/v3/package_manager.move:65:14+13
    assume {:print "$at(18,1971,1984)"} true;
    $t1 := 187;
    assume $IsValid'address'($t1);

    // trace_local[$t2]($t1) at ./sources/v3/package_manager.move:65:14+13
    assume {:print "$track_local(114,9,0):", $t1} $t1 == $t1;

    // $t2 := [80, 65, 67, 75, 65, 71, 69, 95, 77, 65, 78, 65, 71, 69, 82] at ./sources/v3/package_manager.move:66:13+18
    assume {:print "$at(18,1998,2016)"} true;
    $t2 := ConcatVec(ConcatVec(ConcatVec(MakeVec4(80, 65, 67, 75), MakeVec4(65, 71, 69, 95)), MakeVec4(77, 65, 78, 65)), MakeVec3(71, 69, 82));
    assume $IsValid'vec'u8''($t2);

    // $t3 := opaque begin: account::create_resource_address($t1, $t2) at ./sources/v3/package_manager.move:64:9+102
    assume {:print "$at(18,1924,2026)"} true;

    // assume WellFormed($t3) at ./sources/v3/package_manager.move:64:9+102
    assume $IsValid'address'($t3);

    // assume Eq<address>($t3, account::spec_create_resource_address($t1, $t2)) at ./sources/v3/package_manager.move:64:9+102
    assume $IsEqual'address'($t3, $1_account_spec_create_resource_address($t1, $t2));

    // assume Neq<address>($t1, $t3) at ./sources/v3/package_manager.move:64:9+102
    assume !$IsEqual'address'($t1, $t3);

    // $t3 := opaque end: account::create_resource_address($t1, $t2) at ./sources/v3/package_manager.move:64:9+102

    // trace_return[0]($t3) at ./sources/v3/package_manager.move:64:9+102
    assume {:print "$track_return(114,9,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/v3/package_manager.move:68:5+1
    assume {:print "$at(18,2031,2032)"} true;
L1:

    // return $t3 at ./sources/v3/package_manager.move:68:5+1
    assume {:print "$at(18,2031,2032)"} true;
    $ret0 := $t3;
    return;

}

// struct lp::LPObjectRef at ./sources/v3/lp.move:26:5+275
datatype $bb_lp_LPObjectRef {
    $bb_lp_LPObjectRef($token_a: $1_object_Object'$1_fungible_asset_Metadata', $token_b: $1_object_Object'$1_fungible_asset_Metadata', $fee_tier: int, $lp_amount: int, $transfer_ref: $1_object_TransferRef, $delete_ref: $1_object_DeleteRef, $extend_ref: $1_object_ExtendRef)
}
function {:inline} $Update'$bb_lp_LPObjectRef'_token_a(s: $bb_lp_LPObjectRef, x: $1_object_Object'$1_fungible_asset_Metadata'): $bb_lp_LPObjectRef {
    $bb_lp_LPObjectRef(x, s->$token_b, s->$fee_tier, s->$lp_amount, s->$transfer_ref, s->$delete_ref, s->$extend_ref)
}
function {:inline} $Update'$bb_lp_LPObjectRef'_token_b(s: $bb_lp_LPObjectRef, x: $1_object_Object'$1_fungible_asset_Metadata'): $bb_lp_LPObjectRef {
    $bb_lp_LPObjectRef(s->$token_a, x, s->$fee_tier, s->$lp_amount, s->$transfer_ref, s->$delete_ref, s->$extend_ref)
}
function {:inline} $Update'$bb_lp_LPObjectRef'_fee_tier(s: $bb_lp_LPObjectRef, x: int): $bb_lp_LPObjectRef {
    $bb_lp_LPObjectRef(s->$token_a, s->$token_b, x, s->$lp_amount, s->$transfer_ref, s->$delete_ref, s->$extend_ref)
}
function {:inline} $Update'$bb_lp_LPObjectRef'_lp_amount(s: $bb_lp_LPObjectRef, x: int): $bb_lp_LPObjectRef {
    $bb_lp_LPObjectRef(s->$token_a, s->$token_b, s->$fee_tier, x, s->$transfer_ref, s->$delete_ref, s->$extend_ref)
}
function {:inline} $Update'$bb_lp_LPObjectRef'_transfer_ref(s: $bb_lp_LPObjectRef, x: $1_object_TransferRef): $bb_lp_LPObjectRef {
    $bb_lp_LPObjectRef(s->$token_a, s->$token_b, s->$fee_tier, s->$lp_amount, x, s->$delete_ref, s->$extend_ref)
}
function {:inline} $Update'$bb_lp_LPObjectRef'_delete_ref(s: $bb_lp_LPObjectRef, x: $1_object_DeleteRef): $bb_lp_LPObjectRef {
    $bb_lp_LPObjectRef(s->$token_a, s->$token_b, s->$fee_tier, s->$lp_amount, s->$transfer_ref, x, s->$extend_ref)
}
function {:inline} $Update'$bb_lp_LPObjectRef'_extend_ref(s: $bb_lp_LPObjectRef, x: $1_object_ExtendRef): $bb_lp_LPObjectRef {
    $bb_lp_LPObjectRef(s->$token_a, s->$token_b, s->$fee_tier, s->$lp_amount, s->$transfer_ref, s->$delete_ref, x)
}
function $IsValid'$bb_lp_LPObjectRef'(s: $bb_lp_LPObjectRef): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$token_a)
      && $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$token_b)
      && $IsValid'u8'(s->$fee_tier)
      && $IsValid'u64'(s->$lp_amount)
      && $IsValid'$1_object_TransferRef'(s->$transfer_ref)
      && $IsValid'$1_object_DeleteRef'(s->$delete_ref)
      && $IsValid'$1_object_ExtendRef'(s->$extend_ref)
}
function {:inline} $IsEqual'$bb_lp_LPObjectRef'(s1: $bb_lp_LPObjectRef, s2: $bb_lp_LPObjectRef): bool {
    s1 == s2
}
var $bb_lp_LPObjectRef_$memory: $Memory $bb_lp_LPObjectRef;

// struct lp::LPTokenRefs at ./sources/v3/lp.move:18:5+160
datatype $bb_lp_LPTokenRefs {
    $bb_lp_LPTokenRefs($burn_ref: $1_fungible_asset_BurnRef, $mint_ref: $1_fungible_asset_MintRef, $transfer_ref: $1_fungible_asset_TransferRef, $extend_ref: $1_object_ExtendRef)
}
function {:inline} $Update'$bb_lp_LPTokenRefs'_burn_ref(s: $bb_lp_LPTokenRefs, x: $1_fungible_asset_BurnRef): $bb_lp_LPTokenRefs {
    $bb_lp_LPTokenRefs(x, s->$mint_ref, s->$transfer_ref, s->$extend_ref)
}
function {:inline} $Update'$bb_lp_LPTokenRefs'_mint_ref(s: $bb_lp_LPTokenRefs, x: $1_fungible_asset_MintRef): $bb_lp_LPTokenRefs {
    $bb_lp_LPTokenRefs(s->$burn_ref, x, s->$transfer_ref, s->$extend_ref)
}
function {:inline} $Update'$bb_lp_LPTokenRefs'_transfer_ref(s: $bb_lp_LPTokenRefs, x: $1_fungible_asset_TransferRef): $bb_lp_LPTokenRefs {
    $bb_lp_LPTokenRefs(s->$burn_ref, s->$mint_ref, x, s->$extend_ref)
}
function {:inline} $Update'$bb_lp_LPTokenRefs'_extend_ref(s: $bb_lp_LPTokenRefs, x: $1_object_ExtendRef): $bb_lp_LPTokenRefs {
    $bb_lp_LPTokenRefs(s->$burn_ref, s->$mint_ref, s->$transfer_ref, x)
}
function $IsValid'$bb_lp_LPTokenRefs'(s: $bb_lp_LPTokenRefs): bool {
    $IsValid'$1_fungible_asset_BurnRef'(s->$burn_ref)
      && $IsValid'$1_fungible_asset_MintRef'(s->$mint_ref)
      && $IsValid'$1_fungible_asset_TransferRef'(s->$transfer_ref)
      && $IsValid'$1_object_ExtendRef'(s->$extend_ref)
}
function {:inline} $IsEqual'$bb_lp_LPTokenRefs'(s1: $bb_lp_LPTokenRefs, s2: $bb_lp_LPTokenRefs): bool {
    s1 == s2
}
var $bb_lp_LPTokenRefs_$memory: $Memory $bb_lp_LPTokenRefs;

// fun lp::mint_to [baseline] at ./sources/v3/lp.move:86:5+569
procedure {:inline 1} $bb_lp_mint_to(_$t0: $bb_lp_LPTokenRefs, _$t1: $1_object_Object'$1_fungible_asset_Metadata', _$t2: bv128, _$t3: int) returns ()
{
    // declare local variables
    var $t4: $Mutation ($bb_lp_LPObjectRef);
    var $t5: int;
    var $t6: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t7: $1_fungible_asset_FungibleAsset;
    var $t8: $Mutation ($bb_lp_LPObjectRef);
    var $t9: int;
    var $t10: bv64;
    var $t11: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t12: $1_fungible_asset_MintRef;
    var $t13: $1_fungible_asset_FungibleAsset;
    var $t14: $1_fungible_asset_TransferRef;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation (int);
    var $t0: $bb_lp_LPTokenRefs;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $t2: bv128;
    var $t3: int;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$bb_lp_LPObjectRef': $bb_lp_LPObjectRef;
    var $temp_0'$bb_lp_LPTokenRefs': $bb_lp_LPTokenRefs;
    var $temp_0'address': int;
    var $temp_0'bv128': bv128;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[lp_token_refs]($t0) at ./sources/v3/lp.move:86:5+1
    assume {:print "$at(17,3174,3175)"} true;
    assume {:print "$track_local(115,2,0):", $t0} $t0 == $t0;

    // trace_local[pool]($t1) at ./sources/v3/lp.move:86:5+1
    assume {:print "$track_local(115,2,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at ./sources/v3/lp.move:86:5+1
    assume {:print "$track_local(115,2,2):", $t2} $t2 == $t2;

    // trace_local[lp]($t3) at ./sources/v3/lp.move:86:5+1
    assume {:print "$track_local(115,2,3):", $t3} $t3 == $t3;

    // $t8 := borrow_global<0xbb::lp::LPObjectRef>($t3) on_abort goto L2 with $t9 at ./sources/v3/lp.move:92:25+34
    assume {:print "$at(17,3358,3392)"} true;
    if (!$ResourceExists($bb_lp_LPObjectRef_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t8 := $Mutation($Global($t3), EmptyVec(), $ResourceValue($bb_lp_LPObjectRef_$memory, $t3));
    }
    if ($abort_flag) {
        assume {:print "$at(17,3358,3392)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(115,2):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[lp_object]($t8) at ./sources/v3/lp.move:92:25+34
    $temp_0'$bb_lp_LPObjectRef' := $Dereference($t8);
    assume {:print "$track_local(115,2,4):", $temp_0'$bb_lp_LPObjectRef'} $temp_0'$bb_lp_LPObjectRef' == $temp_0'$bb_lp_LPObjectRef';

    // $t10 := (u64)($t2) on_abort goto L2 with $t9 at ./sources/v3/lp.move:93:28+15
    assume {:print "$at(17,3421,3436)"} true;
    call $t10 := $CastBv128to64($t2);
    if ($abort_flag) {
        assume {:print "$at(17,3421,3436)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(115,2):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[token_amount]($t10) at ./sources/v3/lp.move:93:28+15
    assume {:print "$track_local(115,2,5):", $t10} $t10 == $t10;

    // $t11 := lp::ensure_lp_token_store<0x1::fungible_asset::Metadata>($t0, $t3, $t1) on_abort goto L2 with $t9 at ./sources/v3/lp.move:94:21+46
    assume {:print "$at(17,3458,3504)"} true;
    call $t11 := $bb_lp_ensure_lp_token_store'$1_fungible_asset_Metadata'($t0, $t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(17,3458,3504)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(115,2):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[store]($t11) at ./sources/v3/lp.move:94:21+46
    assume {:print "$track_local(115,2,6):", $t11} $t11 == $t11;

    // $t12 := get_field<0xbb::lp::LPTokenRefs>.mint_ref($t0) at ./sources/v3/lp.move:95:42+23
    assume {:print "$at(17,3547,3570)"} true;
    $t12 := $t0->$mint_ref;

    // $t13 := fungible_asset::mint($t12, $t10) on_abort goto L2 with $t9 at ./sources/v3/lp.move:95:21+59
    call $t13 := $1_fungible_asset_mint($t12, $bv2int.64($t10));
    if ($abort_flag) {
        assume {:print "$at(17,3526,3585)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(115,2):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[token]($t13) at ./sources/v3/lp.move:95:21+59
    assume {:print "$track_local(115,2,7):", $t13} $t13 == $t13;

    // $t14 := get_field<0xbb::lp::LPTokenRefs>.transfer_ref($t0) at ./sources/v3/lp.move:96:42+27
    assume {:print "$at(17,3628,3655)"} true;
    $t14 := $t0->$transfer_ref;

    // fungible_asset::deposit_with_ref<0x1::fungible_asset::FungibleStore>($t14, $t11, $t13) on_abort goto L2 with $t9 at ./sources/v3/lp.move:96:9+75
    call $1_fungible_asset_deposit_with_ref'$1_fungible_asset_FungibleStore'($t14, $t11, $t13);
    if ($abort_flag) {
        assume {:print "$at(17,3595,3670)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(115,2):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t15 := get_field<0xbb::lp::LPObjectRef>.lp_amount($t8) at ./sources/v3/lp.move:97:31+19
    assume {:print "$at(17,3702,3721)"} true;
    $t15 := $Dereference($t8)->$lp_amount;

    // $t16 := +($t15, $t10) on_abort goto L2 with $t9 at ./sources/v3/lp.move:97:31+34
    call $t16 := $AddU64($t15, $bv2int.64($t10));
    if ($abort_flag) {
        assume {:print "$at(17,3702,3736)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(115,2):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t17 := borrow_field<0xbb::lp::LPObjectRef>.lp_amount($t8) at ./sources/v3/lp.move:97:9+19
    $t17 := $ChildMutation($t8, 3, $Dereference($t8)->$lp_amount);

    // write_ref($t17, $t16) at ./sources/v3/lp.move:97:9+56
    $t17 := $UpdateMutation($t17, $t16);

    // write_back[Reference($t8).lp_amount (u64)]($t17) at ./sources/v3/lp.move:97:9+56
    $t8 := $UpdateMutation($t8, $Update'$bb_lp_LPObjectRef'_lp_amount($Dereference($t8), $Dereference($t17)));

    // write_back[0xbb::lp::LPObjectRef@]($t8) at ./sources/v3/lp.move:97:9+56
    $bb_lp_LPObjectRef_$memory := $ResourceUpdate($bb_lp_LPObjectRef_$memory, $GlobalLocationAddress($t8),
        $Dereference($t8));

    // label L1 at ./sources/v3/lp.move:98:5+1
    assume {:print "$at(17,3742,3743)"} true;
L1:

    // return () at ./sources/v3/lp.move:98:5+1
    assume {:print "$at(17,3742,3743)"} true;
    return;

    // label L2 at ./sources/v3/lp.move:98:5+1
L2:

    // abort($t9) at ./sources/v3/lp.move:98:5+1
    assume {:print "$at(17,3742,3743)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun lp::ensure_lp_token_store<0x1::fungible_asset::Metadata> [baseline] at ./sources/v3/lp.move:140:5+499
procedure {:inline 1} $bb_lp_ensure_lp_token_store'$1_fungible_asset_Metadata'(_$t0: $bb_lp_LPTokenRefs, _$t1: int, _$t2: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t3: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t4: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t5: int;
    var $t6: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t7: bool;
    var $t8: $1_fungible_asset_TransferRef;
    var $t9: bool;
    var $t0: $bb_lp_LPTokenRefs;
    var $t1: int;
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$bb_lp_LPTokenRefs': $bb_lp_LPTokenRefs;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[lp_token_refs]($t0) at ./sources/v3/lp.move:140:5+1
    assume {:print "$at(17,5333,5334)"} true;
    assume {:print "$track_local(115,5,0):", $t0} $t0 == $t0;

    // trace_local[lp]($t1) at ./sources/v3/lp.move:140:5+1
    assume {:print "$track_local(115,5,1):", $t1} $t1 == $t1;

    // trace_local[pool]($t2) at ./sources/v3/lp.move:140:5+1
    assume {:print "$track_local(115,5,2):", $t2} $t2 == $t2;

    // $t4 := primary_fungible_store::ensure_primary_store_exists<#0>($t1, $t2) on_abort goto L4 with $t5 at ./sources/v3/lp.move:145:9+61
    assume {:print "$at(17,5489,5550)"} true;
    call $t4 := $1_primary_fungible_store_ensure_primary_store_exists'$1_fungible_asset_Metadata'($t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(17,5489,5550)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(115,5):", $t5} $t5 == $t5;
        goto L4;
    }

    // drop($t4) at ./sources/v3/lp.move:145:9+61

    // $t6 := primary_fungible_store::primary_store<#0>($t1, $t2) on_abort goto L4 with $t5 at ./sources/v3/lp.move:146:21+47
    assume {:print "$at(17,5572,5619)"} true;
    call $t6 := $1_primary_fungible_store_primary_store'$1_fungible_asset_Metadata'($t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(17,5572,5619)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(115,5):", $t5} $t5 == $t5;
        goto L4;
    }

    // trace_local[store]($t6) at ./sources/v3/lp.move:146:21+47
    assume {:print "$track_local(115,5,3):", $t6} $t6 == $t6;

    // $t7 := fungible_asset::is_frozen<0x1::fungible_asset::FungibleStore>($t6) on_abort goto L4 with $t5 at ./sources/v3/lp.move:147:14+32
    assume {:print "$at(17,5634,5666)"} true;
    call $t7 := $1_fungible_asset_is_frozen'$1_fungible_asset_FungibleStore'($t6);
    if ($abort_flag) {
        assume {:print "$at(17,5634,5666)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(115,5):", $t5} $t5 == $t5;
        goto L4;
    }

    // if ($t7) goto L0 else goto L1 at ./sources/v3/lp.move:147:13+33
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at ./sources/v3/lp.move:148:32+27
    assume {:print "$at(17,5701,5728)"} true;
L1:

    // $t8 := get_field<0xbb::lp::LPTokenRefs>.transfer_ref($t0) at ./sources/v3/lp.move:148:32+27
    assume {:print "$at(17,5701,5728)"} true;
    $t8 := $t0->$transfer_ref;

    // $t9 := true at ./sources/v3/lp.move:149:66+4
    assume {:print "$at(17,5795,5799)"} true;
    $t9 := true;
    assume $IsValid'bool'($t9);

    // fungible_asset::set_frozen_flag<0x1::fungible_asset::FungibleStore>($t8, $t6, $t9) on_abort goto L4 with $t5 at ./sources/v3/lp.move:149:13+58
    call $1_fungible_asset_set_frozen_flag'$1_fungible_asset_FungibleStore'($t8, $t6, $t9);
    if ($abort_flag) {
        assume {:print "$at(17,5742,5800)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(115,5):", $t5} $t5 == $t5;
        goto L4;
    }

    // label L2 at ./sources/v3/lp.move:151:9+5
    assume {:print "$at(17,5821,5826)"} true;
L2:

    // trace_return[0]($t6) at ./sources/v3/lp.move:144:30+353
    assume {:print "$at(17,5479,5832)"} true;
    assume {:print "$track_return(115,5,0):", $t6} $t6 == $t6;

    // goto L3 at ./sources/v3/lp.move:144:30+353
    goto L3;

    // label L0 at ./sources/v3/lp.move:147:9+182
    assume {:print "$at(17,5629,5811)"} true;
L0:

    // goto L2 at ./sources/v3/lp.move:147:9+182
    assume {:print "$at(17,5629,5811)"} true;
    goto L2;

    // label L3 at ./sources/v3/lp.move:152:5+1
    assume {:print "$at(17,5831,5832)"} true;
L3:

    // return $t6 at ./sources/v3/lp.move:152:5+1
    assume {:print "$at(17,5831,5832)"} true;
    $ret0 := $t6;
    return;

    // label L4 at ./sources/v3/lp.move:152:5+1
L4:

    // abort($t5) at ./sources/v3/lp.move:152:5+1
    assume {:print "$at(17,5831,5832)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun lp::get_pool_seeds [baseline] at ./sources/v3/lp.move:132:5+349
procedure {:inline 1} $bb_lp_get_pool_seeds(_$t0: $1_object_Object'$1_fungible_asset_Metadata', _$t1: $1_object_Object'$1_fungible_asset_Metadata', _$t2: int) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation (Vec (int));
    var $t8: int;
    var $t9: Vec (int);
    var $t10: $Mutation (Vec (int));
    var $t11: int;
    var $t12: Vec (int);
    var $t13: $Mutation (Vec (int));
    var $t14: Vec (int);
    var $t15: Vec (int);
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $t2: int;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[token_a]($t0) at ./sources/v3/lp.move:132:5+1
    assume {:print "$at(17,4978,4979)"} true;
    assume {:print "$track_local(115,6,0):", $t0} $t0 == $t0;

    // trace_local[token_b]($t1) at ./sources/v3/lp.move:132:5+1
    assume {:print "$track_local(115,6,1):", $t1} $t1 == $t1;

    // trace_local[fee_tier]($t2) at ./sources/v3/lp.move:132:5+1
    assume {:print "$track_local(115,6,2):", $t2} $t2 == $t2;

    // $t3 := vector::empty<u8>() on_abort goto L2 with $t6 at ./sources/v3/lp.move:133:21+6
    assume {:print "$at(17,5106,5112)"} true;
    call $t3 := $1_vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(17,5106,5112)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(115,6):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[seeds]($t3) at ./sources/v3/lp.move:133:21+6
    assume {:print "$track_local(115,6,3):", $t3} $t3 == $t3;

    // $t7 := borrow_local($t3) at ./sources/v3/lp.move:134:9+62
    assume {:print "$at(17,5124,5186)"} true;
    $t7 := $Mutation($Local(3), EmptyVec(), $t3);

    // $t8 := object::object_address<0x1::fungible_asset::Metadata>($t0) on_abort goto L2 with $t6 at ./sources/v3/lp.move:134:37+32
    call $t8 := $1_object_object_address'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(17,5152,5184)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(115,6):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[$t8]($t8) at ./sources/v3/lp.move:134:37+32
    assume {:print "$track_local(115,6,4):", $t8} $t8 == $t8;

    // $t9 := bcs::to_bytes<address>($t8) on_abort goto L2 with $t6 at ./sources/v3/lp.move:134:22+48
    call $t9 := $1_bcs_to_bytes'address'($t8);
    if ($abort_flag) {
        assume {:print "$at(17,5137,5185)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(115,6):", $t6} $t6 == $t6;
        goto L2;
    }

    // vector::append<u8>($t7, $t9) on_abort goto L2 with $t6 at ./sources/v3/lp.move:134:9+62
    call $t7 := $1_vector_append'u8'($t7, $t9);
    if ($abort_flag) {
        assume {:print "$at(17,5124,5186)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(115,6):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[LocalRoot($t3)@]($t7) at ./sources/v3/lp.move:134:9+62
    $t3 := $Dereference($t7);

    // trace_local[seeds]($t3) at ./sources/v3/lp.move:134:9+62
    assume {:print "$track_local(115,6,3):", $t3} $t3 == $t3;

    // $t10 := borrow_local($t3) at ./sources/v3/lp.move:135:9+62
    assume {:print "$at(17,5196,5258)"} true;
    $t10 := $Mutation($Local(3), EmptyVec(), $t3);

    // $t11 := object::object_address<0x1::fungible_asset::Metadata>($t1) on_abort goto L2 with $t6 at ./sources/v3/lp.move:135:37+32
    call $t11 := $1_object_object_address'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(17,5224,5256)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(115,6):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[$t13]($t11) at ./sources/v3/lp.move:135:37+32
    assume {:print "$track_local(115,6,5):", $t11} $t11 == $t11;

    // $t12 := bcs::to_bytes<address>($t11) on_abort goto L2 with $t6 at ./sources/v3/lp.move:135:22+48
    call $t12 := $1_bcs_to_bytes'address'($t11);
    if ($abort_flag) {
        assume {:print "$at(17,5209,5257)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(115,6):", $t6} $t6 == $t6;
        goto L2;
    }

    // vector::append<u8>($t10, $t12) on_abort goto L2 with $t6 at ./sources/v3/lp.move:135:9+62
    call $t10 := $1_vector_append'u8'($t10, $t12);
    if ($abort_flag) {
        assume {:print "$at(17,5196,5258)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(115,6):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[LocalRoot($t3)@]($t10) at ./sources/v3/lp.move:135:9+62
    $t3 := $Dereference($t10);

    // trace_local[seeds]($t3) at ./sources/v3/lp.move:135:9+62
    assume {:print "$track_local(115,6,3):", $t3} $t3 == $t3;

    // $t13 := borrow_local($t3) at ./sources/v3/lp.move:136:9+38
    assume {:print "$at(17,5268,5306)"} true;
    $t13 := $Mutation($Local(3), EmptyVec(), $t3);

    // $t14 := bcs::to_bytes<u8>($t2) on_abort goto L2 with $t6 at ./sources/v3/lp.move:136:22+24
    call $t14 := $1_bcs_to_bytes'u8'($t2);
    if ($abort_flag) {
        assume {:print "$at(17,5281,5305)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(115,6):", $t6} $t6 == $t6;
        goto L2;
    }

    // vector::append<u8>($t13, $t14) on_abort goto L2 with $t6 at ./sources/v3/lp.move:136:9+38
    call $t13 := $1_vector_append'u8'($t13, $t14);
    if ($abort_flag) {
        assume {:print "$at(17,5268,5306)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(115,6):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[LocalRoot($t3)@]($t13) at ./sources/v3/lp.move:136:9+38
    $t3 := $Dereference($t13);

    // trace_local[seeds]($t3) at ./sources/v3/lp.move:136:9+38
    assume {:print "$track_local(115,6,3):", $t3} $t3 == $t3;

    // $t15 := move($t3) at ./sources/v3/lp.move:137:9+5
    assume {:print "$at(17,5316,5321)"} true;
    $t15 := $t3;

    // trace_return[0]($t15) at ./sources/v3/lp.move:132:111+243
    assume {:print "$at(17,5084,5327)"} true;
    assume {:print "$track_return(115,6,0):", $t15} $t15 == $t15;

    // label L1 at ./sources/v3/lp.move:138:5+1
    assume {:print "$at(17,5326,5327)"} true;
L1:

    // return $t15 at ./sources/v3/lp.move:138:5+1
    assume {:print "$at(17,5326,5327)"} true;
    $ret0 := $t15;
    return;

    // label L2 at ./sources/v3/lp.move:138:5+1
L2:

    // abort($t6) at ./sources/v3/lp.move:138:5+1
    assume {:print "$at(17,5326,5327)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// struct pool_v3::AddLiquidityEvent at ./sources/v3/pool_v3.move:122:5+335
datatype $bb_pool_v3_AddLiquidityEvent {
    $bb_pool_v3_AddLiquidityEvent($pool_id: int, $object_id: int, $token_a: $1_object_Object'$1_fungible_asset_Metadata', $token_b: $1_object_Object'$1_fungible_asset_Metadata', $fee_tier: int, $is_delete: bool, $added_lp_amount: int, $previous_liquidity_amount: int, $amount_a: int, $amount_b: int)
}
function {:inline} $Update'$bb_pool_v3_AddLiquidityEvent'_pool_id(s: $bb_pool_v3_AddLiquidityEvent, x: int): $bb_pool_v3_AddLiquidityEvent {
    $bb_pool_v3_AddLiquidityEvent(x, s->$object_id, s->$token_a, s->$token_b, s->$fee_tier, s->$is_delete, s->$added_lp_amount, s->$previous_liquidity_amount, s->$amount_a, s->$amount_b)
}
function {:inline} $Update'$bb_pool_v3_AddLiquidityEvent'_object_id(s: $bb_pool_v3_AddLiquidityEvent, x: int): $bb_pool_v3_AddLiquidityEvent {
    $bb_pool_v3_AddLiquidityEvent(s->$pool_id, x, s->$token_a, s->$token_b, s->$fee_tier, s->$is_delete, s->$added_lp_amount, s->$previous_liquidity_amount, s->$amount_a, s->$amount_b)
}
function {:inline} $Update'$bb_pool_v3_AddLiquidityEvent'_token_a(s: $bb_pool_v3_AddLiquidityEvent, x: $1_object_Object'$1_fungible_asset_Metadata'): $bb_pool_v3_AddLiquidityEvent {
    $bb_pool_v3_AddLiquidityEvent(s->$pool_id, s->$object_id, x, s->$token_b, s->$fee_tier, s->$is_delete, s->$added_lp_amount, s->$previous_liquidity_amount, s->$amount_a, s->$amount_b)
}
function {:inline} $Update'$bb_pool_v3_AddLiquidityEvent'_token_b(s: $bb_pool_v3_AddLiquidityEvent, x: $1_object_Object'$1_fungible_asset_Metadata'): $bb_pool_v3_AddLiquidityEvent {
    $bb_pool_v3_AddLiquidityEvent(s->$pool_id, s->$object_id, s->$token_a, x, s->$fee_tier, s->$is_delete, s->$added_lp_amount, s->$previous_liquidity_amount, s->$amount_a, s->$amount_b)
}
function {:inline} $Update'$bb_pool_v3_AddLiquidityEvent'_fee_tier(s: $bb_pool_v3_AddLiquidityEvent, x: int): $bb_pool_v3_AddLiquidityEvent {
    $bb_pool_v3_AddLiquidityEvent(s->$pool_id, s->$object_id, s->$token_a, s->$token_b, x, s->$is_delete, s->$added_lp_amount, s->$previous_liquidity_amount, s->$amount_a, s->$amount_b)
}
function {:inline} $Update'$bb_pool_v3_AddLiquidityEvent'_is_delete(s: $bb_pool_v3_AddLiquidityEvent, x: bool): $bb_pool_v3_AddLiquidityEvent {
    $bb_pool_v3_AddLiquidityEvent(s->$pool_id, s->$object_id, s->$token_a, s->$token_b, s->$fee_tier, x, s->$added_lp_amount, s->$previous_liquidity_amount, s->$amount_a, s->$amount_b)
}
function {:inline} $Update'$bb_pool_v3_AddLiquidityEvent'_added_lp_amount(s: $bb_pool_v3_AddLiquidityEvent, x: int): $bb_pool_v3_AddLiquidityEvent {
    $bb_pool_v3_AddLiquidityEvent(s->$pool_id, s->$object_id, s->$token_a, s->$token_b, s->$fee_tier, s->$is_delete, x, s->$previous_liquidity_amount, s->$amount_a, s->$amount_b)
}
function {:inline} $Update'$bb_pool_v3_AddLiquidityEvent'_previous_liquidity_amount(s: $bb_pool_v3_AddLiquidityEvent, x: int): $bb_pool_v3_AddLiquidityEvent {
    $bb_pool_v3_AddLiquidityEvent(s->$pool_id, s->$object_id, s->$token_a, s->$token_b, s->$fee_tier, s->$is_delete, s->$added_lp_amount, x, s->$amount_a, s->$amount_b)
}
function {:inline} $Update'$bb_pool_v3_AddLiquidityEvent'_amount_a(s: $bb_pool_v3_AddLiquidityEvent, x: int): $bb_pool_v3_AddLiquidityEvent {
    $bb_pool_v3_AddLiquidityEvent(s->$pool_id, s->$object_id, s->$token_a, s->$token_b, s->$fee_tier, s->$is_delete, s->$added_lp_amount, s->$previous_liquidity_amount, x, s->$amount_b)
}
function {:inline} $Update'$bb_pool_v3_AddLiquidityEvent'_amount_b(s: $bb_pool_v3_AddLiquidityEvent, x: int): $bb_pool_v3_AddLiquidityEvent {
    $bb_pool_v3_AddLiquidityEvent(s->$pool_id, s->$object_id, s->$token_a, s->$token_b, s->$fee_tier, s->$is_delete, s->$added_lp_amount, s->$previous_liquidity_amount, s->$amount_a, x)
}
function $IsValid'$bb_pool_v3_AddLiquidityEvent'(s: $bb_pool_v3_AddLiquidityEvent): bool {
    $IsValid'address'(s->$pool_id)
      && $IsValid'address'(s->$object_id)
      && $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$token_a)
      && $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$token_b)
      && $IsValid'u8'(s->$fee_tier)
      && $IsValid'bool'(s->$is_delete)
      && $IsValid'u128'(s->$added_lp_amount)
      && $IsValid'u128'(s->$previous_liquidity_amount)
      && $IsValid'u64'(s->$amount_a)
      && $IsValid'u64'(s->$amount_b)
}
function {:inline} $IsEqual'$bb_pool_v3_AddLiquidityEvent'(s1: $bb_pool_v3_AddLiquidityEvent, s2: $bb_pool_v3_AddLiquidityEvent): bool {
    s1 == s2
}

// struct pool_v3::LiquidityPoolConfigsV3 at ./sources/v3/pool_v3.move:37:5+292
datatype $bb_pool_v3_LiquidityPoolConfigsV3 {
    $bb_pool_v3_LiquidityPoolConfigsV3($all_pools: $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'', $is_paused: bool, $fee_manager: int, $pauser: int, $pending_fee_manager: int, $pending_pauser: int, $tick_spacing_list: Vec (int))
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolConfigsV3'_all_pools(s: $bb_pool_v3_LiquidityPoolConfigsV3, x: $1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3''): $bb_pool_v3_LiquidityPoolConfigsV3 {
    $bb_pool_v3_LiquidityPoolConfigsV3(x, s->$is_paused, s->$fee_manager, s->$pauser, s->$pending_fee_manager, s->$pending_pauser, s->$tick_spacing_list)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolConfigsV3'_is_paused(s: $bb_pool_v3_LiquidityPoolConfigsV3, x: bool): $bb_pool_v3_LiquidityPoolConfigsV3 {
    $bb_pool_v3_LiquidityPoolConfigsV3(s->$all_pools, x, s->$fee_manager, s->$pauser, s->$pending_fee_manager, s->$pending_pauser, s->$tick_spacing_list)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolConfigsV3'_fee_manager(s: $bb_pool_v3_LiquidityPoolConfigsV3, x: int): $bb_pool_v3_LiquidityPoolConfigsV3 {
    $bb_pool_v3_LiquidityPoolConfigsV3(s->$all_pools, s->$is_paused, x, s->$pauser, s->$pending_fee_manager, s->$pending_pauser, s->$tick_spacing_list)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolConfigsV3'_pauser(s: $bb_pool_v3_LiquidityPoolConfigsV3, x: int): $bb_pool_v3_LiquidityPoolConfigsV3 {
    $bb_pool_v3_LiquidityPoolConfigsV3(s->$all_pools, s->$is_paused, s->$fee_manager, x, s->$pending_fee_manager, s->$pending_pauser, s->$tick_spacing_list)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolConfigsV3'_pending_fee_manager(s: $bb_pool_v3_LiquidityPoolConfigsV3, x: int): $bb_pool_v3_LiquidityPoolConfigsV3 {
    $bb_pool_v3_LiquidityPoolConfigsV3(s->$all_pools, s->$is_paused, s->$fee_manager, s->$pauser, x, s->$pending_pauser, s->$tick_spacing_list)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolConfigsV3'_pending_pauser(s: $bb_pool_v3_LiquidityPoolConfigsV3, x: int): $bb_pool_v3_LiquidityPoolConfigsV3 {
    $bb_pool_v3_LiquidityPoolConfigsV3(s->$all_pools, s->$is_paused, s->$fee_manager, s->$pauser, s->$pending_fee_manager, x, s->$tick_spacing_list)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolConfigsV3'_tick_spacing_list(s: $bb_pool_v3_LiquidityPoolConfigsV3, x: Vec (int)): $bb_pool_v3_LiquidityPoolConfigsV3 {
    $bb_pool_v3_LiquidityPoolConfigsV3(s->$all_pools, s->$is_paused, s->$fee_manager, s->$pauser, s->$pending_fee_manager, s->$pending_pauser, x)
}
function $IsValid'$bb_pool_v3_LiquidityPoolConfigsV3'(s: $bb_pool_v3_LiquidityPoolConfigsV3): bool {
    $IsValid'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(s->$all_pools)
      && $IsValid'bool'(s->$is_paused)
      && $IsValid'address'(s->$fee_manager)
      && $IsValid'address'(s->$pauser)
      && $IsValid'address'(s->$pending_fee_manager)
      && $IsValid'address'(s->$pending_pauser)
      && $IsValid'vec'u64''(s->$tick_spacing_list)
}
function {:inline} $IsEqual'$bb_pool_v3_LiquidityPoolConfigsV3'(s1: $bb_pool_v3_LiquidityPoolConfigsV3, s2: $bb_pool_v3_LiquidityPoolConfigsV3): bool {
    $IsEqual'$1_smart_vector_SmartVector'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''(s1->$all_pools, s2->$all_pools)
    && $IsEqual'bool'(s1->$is_paused, s2->$is_paused)
    && $IsEqual'address'(s1->$fee_manager, s2->$fee_manager)
    && $IsEqual'address'(s1->$pauser, s2->$pauser)
    && $IsEqual'address'(s1->$pending_fee_manager, s2->$pending_fee_manager)
    && $IsEqual'address'(s1->$pending_pauser, s2->$pending_pauser)
    && $IsEqual'vec'u64''(s1->$tick_spacing_list, s2->$tick_spacing_list)}
var $bb_pool_v3_LiquidityPoolConfigsV3_$memory: $Memory $bb_pool_v3_LiquidityPoolConfigsV3;

// struct pool_v3::LiquidityPoolV3 at ./sources/v3/pool_v3.move:65:5+1544
datatype $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3($token_a_liquidity: $1_object_Object'$1_fungible_asset_FungibleStore', $token_b_liquidity: $1_object_Object'$1_fungible_asset_FungibleStore', $token_a_fee: $1_object_Object'$1_fungible_asset_FungibleStore', $token_b_fee: $1_object_Object'$1_fungible_asset_FungibleStore', $sqrt_price: int, $liquidity: int, $tick: $bb_i32_I32, $observation_index: int, $observation_cardinality: int, $observation_cardinality_next: int, $fee_rate: int, $fee_protocol: int, $unlocked: bool, $fee_growth_global_a: int, $fee_growth_global_b: int, $seconds_per_liquidity_oracle: int, $seconds_per_liquidity_incentive: int, $position_blacklist: $bb_position_blacklist_PositionBlackList, $last_update_timestamp: int, $tick_info: Table int ($bb_tick_TickInfo), $tick_map: $bb_tick_bitmap_BitMap, $tick_spacing: bv32, $protocol_fees: $bb_pool_v3_ProtocolFees, $lp_token_refs: $bb_lp_LPTokenRefs, $max_liquidity_per_tick: int, $rewarder_manager: $bb_rewarder_RewarderManager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_token_a_liquidity(s: $bb_pool_v3_LiquidityPoolV3, x: $1_object_Object'$1_fungible_asset_FungibleStore'): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(x, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_token_b_liquidity(s: $bb_pool_v3_LiquidityPoolV3, x: $1_object_Object'$1_fungible_asset_FungibleStore'): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, x, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_token_a_fee(s: $bb_pool_v3_LiquidityPoolV3, x: $1_object_Object'$1_fungible_asset_FungibleStore'): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, x, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_token_b_fee(s: $bb_pool_v3_LiquidityPoolV3, x: $1_object_Object'$1_fungible_asset_FungibleStore'): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, x, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_sqrt_price(s: $bb_pool_v3_LiquidityPoolV3, x: int): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, x, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_liquidity(s: $bb_pool_v3_LiquidityPoolV3, x: int): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, x, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_tick(s: $bb_pool_v3_LiquidityPoolV3, x: $bb_i32_I32): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, x, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_observation_index(s: $bb_pool_v3_LiquidityPoolV3, x: int): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, x, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_observation_cardinality(s: $bb_pool_v3_LiquidityPoolV3, x: int): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, x, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_observation_cardinality_next(s: $bb_pool_v3_LiquidityPoolV3, x: int): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, x, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_fee_rate(s: $bb_pool_v3_LiquidityPoolV3, x: int): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, x, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_fee_protocol(s: $bb_pool_v3_LiquidityPoolV3, x: int): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, x, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_unlocked(s: $bb_pool_v3_LiquidityPoolV3, x: bool): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, x, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_fee_growth_global_a(s: $bb_pool_v3_LiquidityPoolV3, x: int): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, x, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_fee_growth_global_b(s: $bb_pool_v3_LiquidityPoolV3, x: int): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, x, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_seconds_per_liquidity_oracle(s: $bb_pool_v3_LiquidityPoolV3, x: int): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, x, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_seconds_per_liquidity_incentive(s: $bb_pool_v3_LiquidityPoolV3, x: int): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, x, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_position_blacklist(s: $bb_pool_v3_LiquidityPoolV3, x: $bb_position_blacklist_PositionBlackList): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, x, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_last_update_timestamp(s: $bb_pool_v3_LiquidityPoolV3, x: int): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, x, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_tick_info(s: $bb_pool_v3_LiquidityPoolV3, x: Table int ($bb_tick_TickInfo)): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, x, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_tick_map(s: $bb_pool_v3_LiquidityPoolV3, x: $bb_tick_bitmap_BitMap): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, x, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_tick_spacing(s: $bb_pool_v3_LiquidityPoolV3, x: bv32): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, x, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_protocol_fees(s: $bb_pool_v3_LiquidityPoolV3, x: $bb_pool_v3_ProtocolFees): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, x, s->$lp_token_refs, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_lp_token_refs(s: $bb_pool_v3_LiquidityPoolV3, x: $bb_lp_LPTokenRefs): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, x, s->$max_liquidity_per_tick, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_max_liquidity_per_tick(s: $bb_pool_v3_LiquidityPoolV3, x: int): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, x, s->$rewarder_manager)
}
function {:inline} $Update'$bb_pool_v3_LiquidityPoolV3'_rewarder_manager(s: $bb_pool_v3_LiquidityPoolV3, x: $bb_rewarder_RewarderManager): $bb_pool_v3_LiquidityPoolV3 {
    $bb_pool_v3_LiquidityPoolV3(s->$token_a_liquidity, s->$token_b_liquidity, s->$token_a_fee, s->$token_b_fee, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_protocol, s->$unlocked, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$seconds_per_liquidity_oracle, s->$seconds_per_liquidity_incentive, s->$position_blacklist, s->$last_update_timestamp, s->$tick_info, s->$tick_map, s->$tick_spacing, s->$protocol_fees, s->$lp_token_refs, s->$max_liquidity_per_tick, x)
}
function $IsValid'$bb_pool_v3_LiquidityPoolV3'(s: $bb_pool_v3_LiquidityPoolV3): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''(s->$token_a_liquidity)
      && $IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''(s->$token_b_liquidity)
      && $IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''(s->$token_a_fee)
      && $IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''(s->$token_b_fee)
      && $IsValid'u128'(s->$sqrt_price)
      && $IsValid'u128'(s->$liquidity)
      && $IsValid'$bb_i32_I32'(s->$tick)
      && $IsValid'u64'(s->$observation_index)
      && $IsValid'u64'(s->$observation_cardinality)
      && $IsValid'u64'(s->$observation_cardinality_next)
      && $IsValid'u64'(s->$fee_rate)
      && $IsValid'u64'(s->$fee_protocol)
      && $IsValid'bool'(s->$unlocked)
      && $IsValid'u128'(s->$fee_growth_global_a)
      && $IsValid'u128'(s->$fee_growth_global_b)
      && $IsValid'u128'(s->$seconds_per_liquidity_oracle)
      && $IsValid'u128'(s->$seconds_per_liquidity_incentive)
      && $IsValid'$bb_position_blacklist_PositionBlackList'(s->$position_blacklist)
      && $IsValid'u64'(s->$last_update_timestamp)
      && $IsValid'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''(s->$tick_info)
      && $IsValid'$bb_tick_bitmap_BitMap'(s->$tick_map)
      && $IsValid'bv32'(s->$tick_spacing)
      && $IsValid'$bb_pool_v3_ProtocolFees'(s->$protocol_fees)
      && $IsValid'$bb_lp_LPTokenRefs'(s->$lp_token_refs)
      && $IsValid'u128'(s->$max_liquidity_per_tick)
      && $IsValid'$bb_rewarder_RewarderManager'(s->$rewarder_manager)
}
function {:inline} $IsEqual'$bb_pool_v3_LiquidityPoolV3'(s1: $bb_pool_v3_LiquidityPoolV3, s2: $bb_pool_v3_LiquidityPoolV3): bool {
    $IsEqual'$1_object_Object'$1_fungible_asset_FungibleStore''(s1->$token_a_liquidity, s2->$token_a_liquidity)
    && $IsEqual'$1_object_Object'$1_fungible_asset_FungibleStore''(s1->$token_b_liquidity, s2->$token_b_liquidity)
    && $IsEqual'$1_object_Object'$1_fungible_asset_FungibleStore''(s1->$token_a_fee, s2->$token_a_fee)
    && $IsEqual'$1_object_Object'$1_fungible_asset_FungibleStore''(s1->$token_b_fee, s2->$token_b_fee)
    && $IsEqual'u128'(s1->$sqrt_price, s2->$sqrt_price)
    && $IsEqual'u128'(s1->$liquidity, s2->$liquidity)
    && $IsEqual'$bb_i32_I32'(s1->$tick, s2->$tick)
    && $IsEqual'u64'(s1->$observation_index, s2->$observation_index)
    && $IsEqual'u64'(s1->$observation_cardinality, s2->$observation_cardinality)
    && $IsEqual'u64'(s1->$observation_cardinality_next, s2->$observation_cardinality_next)
    && $IsEqual'u64'(s1->$fee_rate, s2->$fee_rate)
    && $IsEqual'u64'(s1->$fee_protocol, s2->$fee_protocol)
    && $IsEqual'bool'(s1->$unlocked, s2->$unlocked)
    && $IsEqual'u128'(s1->$fee_growth_global_a, s2->$fee_growth_global_a)
    && $IsEqual'u128'(s1->$fee_growth_global_b, s2->$fee_growth_global_b)
    && $IsEqual'u128'(s1->$seconds_per_liquidity_oracle, s2->$seconds_per_liquidity_oracle)
    && $IsEqual'u128'(s1->$seconds_per_liquidity_incentive, s2->$seconds_per_liquidity_incentive)
    && $IsEqual'$bb_position_blacklist_PositionBlackList'(s1->$position_blacklist, s2->$position_blacklist)
    && $IsEqual'u64'(s1->$last_update_timestamp, s2->$last_update_timestamp)
    && $IsEqual'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''(s1->$tick_info, s2->$tick_info)
    && $IsEqual'$bb_tick_bitmap_BitMap'(s1->$tick_map, s2->$tick_map)
    && $IsEqual'bv32'(s1->$tick_spacing, s2->$tick_spacing)
    && $IsEqual'$bb_pool_v3_ProtocolFees'(s1->$protocol_fees, s2->$protocol_fees)
    && $IsEqual'$bb_lp_LPTokenRefs'(s1->$lp_token_refs, s2->$lp_token_refs)
    && $IsEqual'u128'(s1->$max_liquidity_per_tick, s2->$max_liquidity_per_tick)
    && $IsEqual'$bb_rewarder_RewarderManager'(s1->$rewarder_manager, s2->$rewarder_manager)}
var $bb_pool_v3_LiquidityPoolV3_$memory: $Memory $bb_pool_v3_LiquidityPoolV3;

// struct pool_v3::PoolSnapshot at ./sources/v3/pool_v3.move:188:5+645
datatype $bb_pool_v3_PoolSnapshot {
    $bb_pool_v3_PoolSnapshot($pool_id: int, $sqrt_price: int, $liquidity: int, $tick: $bb_i32_I32, $observation_index: int, $observation_cardinality: int, $observation_cardinality_next: int, $fee_rate: int, $fee_rate_denominatore: int, $fee_growth_global_a: int, $fee_growth_global_b: int, $tick_spacing: bv32)
}
function {:inline} $Update'$bb_pool_v3_PoolSnapshot'_pool_id(s: $bb_pool_v3_PoolSnapshot, x: int): $bb_pool_v3_PoolSnapshot {
    $bb_pool_v3_PoolSnapshot(x, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_rate_denominatore, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$tick_spacing)
}
function {:inline} $Update'$bb_pool_v3_PoolSnapshot'_sqrt_price(s: $bb_pool_v3_PoolSnapshot, x: int): $bb_pool_v3_PoolSnapshot {
    $bb_pool_v3_PoolSnapshot(s->$pool_id, x, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_rate_denominatore, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$tick_spacing)
}
function {:inline} $Update'$bb_pool_v3_PoolSnapshot'_liquidity(s: $bb_pool_v3_PoolSnapshot, x: int): $bb_pool_v3_PoolSnapshot {
    $bb_pool_v3_PoolSnapshot(s->$pool_id, s->$sqrt_price, x, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_rate_denominatore, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$tick_spacing)
}
function {:inline} $Update'$bb_pool_v3_PoolSnapshot'_tick(s: $bb_pool_v3_PoolSnapshot, x: $bb_i32_I32): $bb_pool_v3_PoolSnapshot {
    $bb_pool_v3_PoolSnapshot(s->$pool_id, s->$sqrt_price, s->$liquidity, x, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_rate_denominatore, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$tick_spacing)
}
function {:inline} $Update'$bb_pool_v3_PoolSnapshot'_observation_index(s: $bb_pool_v3_PoolSnapshot, x: int): $bb_pool_v3_PoolSnapshot {
    $bb_pool_v3_PoolSnapshot(s->$pool_id, s->$sqrt_price, s->$liquidity, s->$tick, x, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_rate_denominatore, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$tick_spacing)
}
function {:inline} $Update'$bb_pool_v3_PoolSnapshot'_observation_cardinality(s: $bb_pool_v3_PoolSnapshot, x: int): $bb_pool_v3_PoolSnapshot {
    $bb_pool_v3_PoolSnapshot(s->$pool_id, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, x, s->$observation_cardinality_next, s->$fee_rate, s->$fee_rate_denominatore, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$tick_spacing)
}
function {:inline} $Update'$bb_pool_v3_PoolSnapshot'_observation_cardinality_next(s: $bb_pool_v3_PoolSnapshot, x: int): $bb_pool_v3_PoolSnapshot {
    $bb_pool_v3_PoolSnapshot(s->$pool_id, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, x, s->$fee_rate, s->$fee_rate_denominatore, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$tick_spacing)
}
function {:inline} $Update'$bb_pool_v3_PoolSnapshot'_fee_rate(s: $bb_pool_v3_PoolSnapshot, x: int): $bb_pool_v3_PoolSnapshot {
    $bb_pool_v3_PoolSnapshot(s->$pool_id, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, x, s->$fee_rate_denominatore, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$tick_spacing)
}
function {:inline} $Update'$bb_pool_v3_PoolSnapshot'_fee_rate_denominatore(s: $bb_pool_v3_PoolSnapshot, x: int): $bb_pool_v3_PoolSnapshot {
    $bb_pool_v3_PoolSnapshot(s->$pool_id, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, x, s->$fee_growth_global_a, s->$fee_growth_global_b, s->$tick_spacing)
}
function {:inline} $Update'$bb_pool_v3_PoolSnapshot'_fee_growth_global_a(s: $bb_pool_v3_PoolSnapshot, x: int): $bb_pool_v3_PoolSnapshot {
    $bb_pool_v3_PoolSnapshot(s->$pool_id, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_rate_denominatore, x, s->$fee_growth_global_b, s->$tick_spacing)
}
function {:inline} $Update'$bb_pool_v3_PoolSnapshot'_fee_growth_global_b(s: $bb_pool_v3_PoolSnapshot, x: int): $bb_pool_v3_PoolSnapshot {
    $bb_pool_v3_PoolSnapshot(s->$pool_id, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_rate_denominatore, s->$fee_growth_global_a, x, s->$tick_spacing)
}
function {:inline} $Update'$bb_pool_v3_PoolSnapshot'_tick_spacing(s: $bb_pool_v3_PoolSnapshot, x: bv32): $bb_pool_v3_PoolSnapshot {
    $bb_pool_v3_PoolSnapshot(s->$pool_id, s->$sqrt_price, s->$liquidity, s->$tick, s->$observation_index, s->$observation_cardinality, s->$observation_cardinality_next, s->$fee_rate, s->$fee_rate_denominatore, s->$fee_growth_global_a, s->$fee_growth_global_b, x)
}
function $IsValid'$bb_pool_v3_PoolSnapshot'(s: $bb_pool_v3_PoolSnapshot): bool {
    $IsValid'address'(s->$pool_id)
      && $IsValid'u128'(s->$sqrt_price)
      && $IsValid'u128'(s->$liquidity)
      && $IsValid'$bb_i32_I32'(s->$tick)
      && $IsValid'u64'(s->$observation_index)
      && $IsValid'u64'(s->$observation_cardinality)
      && $IsValid'u64'(s->$observation_cardinality_next)
      && $IsValid'u64'(s->$fee_rate)
      && $IsValid'u64'(s->$fee_rate_denominatore)
      && $IsValid'u128'(s->$fee_growth_global_a)
      && $IsValid'u128'(s->$fee_growth_global_b)
      && $IsValid'bv32'(s->$tick_spacing)
}
function {:inline} $IsEqual'$bb_pool_v3_PoolSnapshot'(s1: $bb_pool_v3_PoolSnapshot, s2: $bb_pool_v3_PoolSnapshot): bool {
    s1 == s2
}

// struct pool_v3::ProtocolFees at ./sources/v3/pool_v3.move:104:5+115
datatype $bb_pool_v3_ProtocolFees {
    $bb_pool_v3_ProtocolFees($token_a: $1_object_Object'$1_fungible_asset_FungibleStore', $token_b: $1_object_Object'$1_fungible_asset_FungibleStore')
}
function {:inline} $Update'$bb_pool_v3_ProtocolFees'_token_a(s: $bb_pool_v3_ProtocolFees, x: $1_object_Object'$1_fungible_asset_FungibleStore'): $bb_pool_v3_ProtocolFees {
    $bb_pool_v3_ProtocolFees(x, s->$token_b)
}
function {:inline} $Update'$bb_pool_v3_ProtocolFees'_token_b(s: $bb_pool_v3_ProtocolFees, x: $1_object_Object'$1_fungible_asset_FungibleStore'): $bb_pool_v3_ProtocolFees {
    $bb_pool_v3_ProtocolFees(s->$token_a, x)
}
function $IsValid'$bb_pool_v3_ProtocolFees'(s: $bb_pool_v3_ProtocolFees): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''(s->$token_a)
      && $IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''(s->$token_b)
}
function {:inline} $IsEqual'$bb_pool_v3_ProtocolFees'(s1: $bb_pool_v3_ProtocolFees, s2: $bb_pool_v3_ProtocolFees): bool {
    s1 == s2
}

// fun pool_v3::add_liquidity [verification] at ./sources/v3/pool_v3.move:516:5+4487
procedure {:timeLimit 120} $bb_pool_v3_add_liquidity$verify(_$t0: $signer, _$t1: $1_object_Object'$bb_position_v3_Info', _$t2: bv128, _$t3: $1_fungible_asset_FungibleAsset, _$t4: $1_fungible_asset_FungibleAsset) returns ($ret0: int, $ret1: int, $ret2: $1_fungible_asset_FungibleAsset, $ret3: $1_fungible_asset_FungibleAsset)
{
    // declare local variables
    var $t5: $bb_i32_I32;
    var $t6: $bb_i32_I32;
    var $t7: int;
    var $t8: $1_object_Object'$1_fungible_asset_Metadata';
    var $t9: $1_object_Object'$1_fungible_asset_Metadata';
    var $t10: int;
    var $t11: $1_object_Object'$1_fungible_asset_Metadata';
    var $t12: $1_object_Object'$1_fungible_asset_Metadata';
    var $t13: $Mutation ($bb_pool_v3_LiquidityPoolV3);
    var $t14: $bb_pool_v3_LiquidityPoolV3;
    var $t15: $Mutation ($bb_pool_v3_LiquidityPoolV3);
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: $Mutation (int);
    var $t22: Vec (int);
    var $t23: bool;
    var $t24: $Mutation ($bb_pool_v3_LiquidityPoolV3);
    var $t25: $bb_i32_I32;
    var $t26: Vec (int);
    var $t27: $bb_tick_TickInfo;
    var $t28: Vec (int);
    var $t29: $Mutation ($bb_pool_v3_LiquidityPoolV3);
    var $t30: $bb_i32_I32;
    var $t31: Vec (int);
    var $t32: $bb_tick_TickInfo;
    var $t33: Vec (int);
    var $t34: Vec (int);
    var $t35: int;
    var $t36: Vec ($bb_rewarder_PositionReward);
    var $t37: $Mutation ($bb_rewarder_RewarderManager);
    var $t38: int;
    var $t39: bool;
    var $t40: $bb_lp_LPTokenRefs;
    var $t41: $1_fungible_asset_FungibleAsset;
    var $t42: $1_fungible_asset_FungibleAsset;
    var $t43: int;
    var $t44: int;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: int;
    var $t49: $bb_pool_v3_LiquidityPoolV3;
    var $t50: int;
    var $t51: int;
    var $t52: bool;
    var $t53: $bb_i32_I32;
    var $t54: $bb_i32_I32;
    var $t55: $1_object_Object'$1_fungible_asset_Metadata';
    var $t56: $1_object_Object'$1_fungible_asset_Metadata';
    var $t57: int;
    var $t58: int;
    var $t59: $Mutation ($bb_pool_v3_LiquidityPoolV3);
    var $t60: int;
    var $t61: $bb_pool_v3_LiquidityPoolV3;
    var $t62: int;
    var $t63: int;
    var $t64: $bb_i32_I32;
    var $t65: int;
    var $t66: int;
    var $t67: int;
    var $t68: int;
    var $t69: int;
    var $t70: int;
    var $t71: int;
    var $t72: bv32;
    var $t73: $bb_pool_v3_PoolSnapshot;
    var $t74: int;
    var $t75: int;
    var $t76: int;
    var $t77: $bb_pool_v3_LiquidityPoolV3;
    var $t78: $bb_position_blacklist_PositionBlackList;
    var $t79: $bb_i32_I32;
    var $t80: int;
    var $t81: int;
    var $t82: int;
    var $t83: int;
    var $t84: int;
    var $t85: bool;
    var $t86: int;
    var $t87: int;
    var $t88: int;
    var $t89: int;
    var $t90: int;
    var $t91: int;
    var $t92: bool;
    var $t93: int;
    var $t94: int;
    var $t95: int;
    var $t96: int;
    var $t97: int;
    var $t98: int;
    var $t99: $Mutation (int);
    var $t100: int;
    var $t101: int;
    var $t102: $Mutation (int);
    var $t103: $Mutation (int);
    var $t104: $Mutation ($bb_rewarder_RewarderManager);
    var $t105: $bb_rewarder_RewarderManager;
    var $t106: Vec (int);
    var $t107: $Mutation (Table int ($bb_tick_TickInfo));
    var $t108: int;
    var $t109: int;
    var $t110: int;
    var $t111: int;
    var $t112: bool;
    var $t113: $bb_i32_I32;
    var $t114: bool;
    var $t115: bool;
    var $t116: $Mutation (Table int ($bb_tick_TickInfo));
    var $t117: int;
    var $t118: int;
    var $t119: int;
    var $t120: int;
    var $t121: bool;
    var $t122: $bb_i32_I32;
    var $t123: bool;
    var $t124: bool;
    var $t125: $Mutation ($bb_tick_bitmap_BitMap);
    var $t126: bv32;
    var $t127: $Mutation ($bb_tick_bitmap_BitMap);
    var $t128: bv32;
    var $t129: $bb_rewarder_RewarderManager;
    var $t130: Vec (int);
    var $t131: Table int ($bb_tick_TickInfo);
    var $t132: $bb_tick_TickInfo;
    var $t133: Vec (int);
    var $t134: int;
    var $t135: int;
    var $t136: bool;
    var $t137: $Mutation (Table int ($bb_tick_TickInfo));
    var $t138: $Mutation ($bb_tick_TickInfo);
    var $t139: int;
    var $t140: $bb_rewarder_RewarderManager;
    var $t141: Vec (int);
    var $t142: Table int ($bb_tick_TickInfo);
    var $t143: $bb_tick_TickInfo;
    var $t144: Vec (int);
    var $t145: int;
    var $t146: int;
    var $t147: bool;
    var $t148: $Mutation (Table int ($bb_tick_TickInfo));
    var $t149: $Mutation ($bb_tick_TickInfo);
    var $t150: int;
    var $t151: Table int ($bb_tick_TickInfo);
    var $t152: $bb_tick_TickInfo;
    var $t153: Table int ($bb_tick_TickInfo);
    var $t154: $bb_tick_TickInfo;
    var $t155: $bb_i32_I32;
    var $t156: Vec (int);
    var $t157: $Mutation ($bb_rewarder_RewarderManager);
    var $t158: Vec ($bb_rewarder_PositionReward);
    var $t159: int;
    var $t160: Vec ($bb_rewarder_PositionReward);
    var $t161: Table int ($bb_tick_TickInfo);
    var $t162: $bb_tick_TickInfo;
    var $t163: Table int ($bb_tick_TickInfo);
    var $t164: $bb_tick_TickInfo;
    var $t165: $bb_i32_I32;
    var $t166: int;
    var $t167: int;
    var $t168: int;
    var $t169: int;
    var $t170: int;
    var $t171: int;
    var $t172: bool;
    var $t173: bv128;
    var $t174: int;
    var $t175: int;
    var $t176: $1_fungible_asset_FungibleAsset;
    var $t177: $1_fungible_asset_FungibleAsset;
    var $t178: $bb_lp_LPTokenRefs;
    var $t179: int;
    var $t180: $1_object_Object'$1_fungible_asset_Metadata';
    var $t181: int;
    var $t182: int;
    var $t183: $bb_pool_v3_LiquidityPoolV3;
    var $t184: int;
    var $t185: int;
    var $t186: $bb_i32_I32;
    var $t187: int;
    var $t188: int;
    var $t189: int;
    var $t190: int;
    var $t191: int;
    var $t192: int;
    var $t193: int;
    var $t194: bv32;
    var $t195: $bb_pool_v3_PoolSnapshot;
    var $t196: int;
    var $t197: int;
    var $t198: $bb_pool_v3_AddLiquidityEvent;
    var $t199: int;
    var $t200: int;
    var $t201: int;
    var $t202: $bb_pool_v3_LiquidityPoolV3;
    var $t0: $signer;
    var $t1: $1_object_Object'$bb_position_v3_Info';
    var $t2: bv128;
    var $t3: $1_fungible_asset_FungibleAsset;
    var $t4: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$bb_position_v3_Info'': $1_object_Object'$bb_position_v3_Info';
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'$bb_lp_LPTokenRefs': $bb_lp_LPTokenRefs;
    var $temp_0'$bb_pool_v3_LiquidityPoolV3': $bb_pool_v3_LiquidityPoolV3;
    var $temp_0'$bb_tick_TickInfo': $bb_tick_TickInfo;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u128': int;
    var $temp_0'bv128': bv128;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'$bb_rewarder_PositionReward'': Vec ($bb_rewarder_PositionReward);
    var $temp_0'vec'u128'': Vec (int);
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/v3/pool_v3.move:516:5+1
    assume {:print "$at(2,17744,17745)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at ./sources/v3/pool_v3.move:516:5+1
    assume $IsValid'$1_object_Object'$bb_position_v3_Info''($t1);

    // assume WellFormed($t2) at ./sources/v3/pool_v3.move:516:5+1
    assume $IsValid'bv128'($t2);

    // assume WellFormed($t3) at ./sources/v3/pool_v3.move:516:5+1
    assume $IsValid'$1_fungible_asset_FungibleAsset'($t3);

    // assume WellFormed($t4) at ./sources/v3/pool_v3.move:516:5+1
    assume $IsValid'$1_fungible_asset_FungibleAsset'($t4);

    // assume forall $rsc: 0x1::features::Features: ResourceDomain<0x1::features::Features>(): WellFormed($rsc) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: 0x1::chain_status::GenesisEndMarker: ResourceDomain<0x1::chain_status::GenesisEndMarker>(): WellFormed($rsc) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: 0x1::timestamp::CurrentTimeMicroseconds: ResourceDomain<0x1::timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x1::object::Untransferable: ResourceDomain<0x1::object::Untransferable>(): WellFormed($rsc) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_Untransferable_$memory, $a_0);
    ($IsValid'$1_object_Untransferable'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::Untransferable: ResourceDomain<0x1::fungible_asset::Untransferable>(): WellFormed($rsc) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0);
    ($IsValid'$1_fungible_asset_Untransferable'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::ConcurrentFungibleBalance: ResourceDomain<0x1::fungible_asset::ConcurrentFungibleBalance>(): WellFormed($rsc) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::ConcurrentSupply: ResourceDomain<0x1::fungible_asset::ConcurrentSupply>(): WellFormed($rsc) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentSupply'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::DispatchFunctionStore: ResourceDomain<0x1::fungible_asset::DispatchFunctionStore>(): And(WellFormed($rsc), And(And(Le(Len<0x1::function_info::FunctionInfo>(select option::Option.vec(select fungible_asset::DispatchFunctionStore.withdraw_function($rsc))), 1), Le(Len<0x1::function_info::FunctionInfo>(select option::Option.vec(select fungible_asset::DispatchFunctionStore.deposit_function($rsc))), 1)), Le(Len<0x1::function_info::FunctionInfo>(select option::Option.vec(select fungible_asset::DispatchFunctionStore.derived_balance_function($rsc))), 1))) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_DispatchFunctionStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_DispatchFunctionStore_$memory, $a_0);
    (($IsValid'$1_fungible_asset_DispatchFunctionStore'($rsc) && (((LenVec($rsc->$withdraw_function->$vec) <= 1) && (LenVec($rsc->$deposit_function->$vec) <= 1)) && (LenVec($rsc->$derived_balance_function->$vec) <= 1))))));

    // assume forall $rsc: 0x1::fungible_asset::FungibleStore: ResourceDomain<0x1::fungible_asset::FungibleStore>(): WellFormed($rsc) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0);
    ($IsValid'$1_fungible_asset_FungibleStore'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::Supply: ResourceDomain<0x1::fungible_asset::Supply>(): And(WellFormed($rsc), Le(Len<u128>(select option::Option.vec(select fungible_asset::Supply.maximum($rsc))), 1)) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Supply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Supply_$memory, $a_0);
    (($IsValid'$1_fungible_asset_Supply'($rsc) && (LenVec($rsc->$maximum->$vec) <= 1)))));

    // assume forall $rsc: 0x1::dispatchable_fungible_asset::TransferRefStore: ResourceDomain<0x1::dispatchable_fungible_asset::TransferRefStore>(): WellFormed($rsc) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_dispatchable_fungible_asset_TransferRefStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_dispatchable_fungible_asset_TransferRefStore_$memory, $a_0);
    ($IsValid'$1_dispatchable_fungible_asset_TransferRefStore'($rsc))));

    // assume forall $rsc: 0x1::primary_fungible_store::DeriveRefPod: ResourceDomain<0x1::primary_fungible_store::DeriveRefPod>(): WellFormed($rsc) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0)}(var $rsc := $ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0);
    ($IsValid'$1_primary_fungible_store_DeriveRefPod'($rsc))));

    // assume forall $rsc: 0x1::reconfiguration::Configuration: ResourceDomain<0x1::reconfiguration::Configuration>(): WellFormed($rsc) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: 0xbb::position_v3::Info: ResourceDomain<0xbb::position_v3::Info>(): WellFormed($rsc) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($bb_position_v3_Info_$memory, $a_0)}(var $rsc := $ResourceValue($bb_position_v3_Info_$memory, $a_0);
    ($IsValid'$bb_position_v3_Info'($rsc))));

    // assume forall $rsc: 0xbb::lp::LPObjectRef: ResourceDomain<0xbb::lp::LPObjectRef>(): WellFormed($rsc) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($bb_lp_LPObjectRef_$memory, $a_0)}(var $rsc := $ResourceValue($bb_lp_LPObjectRef_$memory, $a_0);
    ($IsValid'$bb_lp_LPObjectRef'($rsc))));

    // assume forall $rsc: 0xbb::pool_v3::LiquidityPoolConfigsV3: ResourceDomain<0xbb::pool_v3::LiquidityPoolConfigsV3>(): And(WellFormed($rsc), And(And(And(And(And(And(Or(option::$is_none<u64>(select smart_vector::SmartVector.bucket_size(select pool_v3::LiquidityPoolConfigsV3.all_pools($rsc))), And(option::$is_some<u64>(select smart_vector::SmartVector.bucket_size(select pool_v3::LiquidityPoolConfigsV3.all_pools($rsc))), Neq<u64>(option::$borrow<u64>(select smart_vector::SmartVector.bucket_size(select pool_v3::LiquidityPoolConfigsV3.all_pools($rsc))), 0))), Or(option::$is_none<u64>(select smart_vector::SmartVector.inline_capacity(select pool_v3::LiquidityPoolConfigsV3.all_pools($rsc))), Le(Len<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>(select smart_vector::SmartVector.inline_vec(select pool_v3::LiquidityPoolConfigsV3.all_pools($rsc))), option::$borrow<u64>(select smart_vector::SmartVector.inline_capacity(select pool_v3::LiquidityPoolConfigsV3.all_pools($rsc)))))), Or(And(option::$is_none<u64>(select smart_vector::SmartVector.inline_capacity(select pool_v3::LiquidityPoolConfigsV3.all_pools($rsc))), option::$is_none<u64>(select smart_vector::SmartVector.bucket_size(select pool_v3::LiquidityPoolConfigsV3.all_pools($rsc)))), And(option::$is_some<u64>(select smart_vector::SmartVector.inline_capacity(select pool_v3::LiquidityPoolConfigsV3.all_pools($rsc))), option::$is_some<u64>(select smart_vector::SmartVector.bucket_size(select pool_v3::LiquidityPoolConfigsV3.all_pools($rsc)))))), Le(Len<0x1::big_vector::BigVector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select option::Option.vec(select smart_vector::SmartVector.big_vec(select pool_v3::LiquidityPoolConfigsV3.all_pools($rsc)))), 1)), forall $elem: 0x1::big_vector::BigVector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>: select option::Option.vec(select smart_vector::SmartVector.big_vec(select pool_v3::LiquidityPoolConfigsV3.all_pools($rsc))): And(And(And(And(And(And(And(And(And(And(And(Neq<u64>(select big_vector::BigVector.bucket_size($elem), 0), Implies(Eq<u64>(big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem)), 0), Eq<u64>(select big_vector::BigVector.end_index($elem), 0))), Implies(Eq<u64>(select big_vector::BigVector.end_index($elem), 0), Eq<u64>(big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem)), 0))), Le(select big_vector::BigVector.end_index($elem), Mul(big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem)), select big_vector::BigVector.bucket_size($elem)))), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem)), 0), forall i: num: Range(0, Sub(big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem)), 1)): Eq<num>(Len<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>(table_with_length::spec_get<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem), i)), select big_vector::BigVector.bucket_size($elem)))), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem)), 0), Le(Len<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>(table_with_length::spec_get<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem), Sub(big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem)), 1))), select big_vector::BigVector.bucket_size($elem)))), forall i: num: Range(0, big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem))): big_vector::spec_table_contains<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem), i)), Eq<u64>(big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem)), Div(Sub(Add(select big_vector::BigVector.end_index($elem), select big_vector::BigVector.bucket_size($elem)), 1), select big_vector::BigVector.bucket_size($elem)))), Or(And(Eq<u64>(big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem)), 0), Eq<u64>(select big_vector::BigVector.end_index($elem), 0)), And(Neq<u64>(big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem)), 0), Eq<num>(Add(Mul(Sub(big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem)), 1), select big_vector::BigVector.bucket_size($elem)), Len<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>(table_with_length::spec_get<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem), Sub(big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem)), 1)))), select big_vector::BigVector.end_index($elem))))), forall i: u64: TypeDomain<u64>() where Ge(i, big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem))): Not(big_vector::spec_table_contains<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem), i))), forall i: u64: TypeDomain<u64>() where Lt(i, big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem))): big_vector::spec_table_contains<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem), i)), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem)), 0), Gt(Len<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>(table_with_length::spec_get<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem), Sub(big_vector::spec_table_len<u64, vector<0x1::object::Object<0xbb::pool_v3::LiquidityPoolV3>>>(select big_vector::BigVector.buckets($elem)), 1))), 0)))), Le(Len<u64>(select option::Option.vec(select smart_vector::SmartVector.inline_capacity(select pool_v3::LiquidityPoolConfigsV3.all_pools($rsc)))), 1)), Le(Len<u64>(select option::Option.vec(select smart_vector::SmartVector.bucket_size(select pool_v3::LiquidityPoolConfigsV3.all_pools($rsc)))), 1))) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($bb_pool_v3_LiquidityPoolConfigsV3_$memory, $a_0)}(var $rsc := $ResourceValue($bb_pool_v3_LiquidityPoolConfigsV3_$memory, $a_0);
    (($IsValid'$bb_pool_v3_LiquidityPoolConfigsV3'($rsc) && ((((((($1_option_$is_none'u64'($rsc->$all_pools->$bucket_size) || ($1_option_$is_some'u64'($rsc->$all_pools->$bucket_size) && !$IsEqual'u64'($1_option_$borrow'u64'($rsc->$all_pools->$bucket_size), 0))) && ($1_option_$is_none'u64'($rsc->$all_pools->$inline_capacity) || (LenVec($rsc->$all_pools->$inline_vec) <= $1_option_$borrow'u64'($rsc->$all_pools->$inline_capacity)))) && (($1_option_$is_none'u64'($rsc->$all_pools->$inline_capacity) && $1_option_$is_none'u64'($rsc->$all_pools->$bucket_size)) || ($1_option_$is_some'u64'($rsc->$all_pools->$inline_capacity) && $1_option_$is_some'u64'($rsc->$all_pools->$bucket_size)))) && (LenVec($rsc->$all_pools->$big_vec->$vec) <= 1)) && (var $range_1 := $rsc->$all_pools->$big_vec->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((((((((!$IsEqual'u64'($elem->$bucket_size, 0) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets), 0) ==> $IsEqual'u64'($elem->$end_index, 0))) && ($IsEqual'u64'($elem->$end_index, 0) ==> $IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets), 0))) && ($elem->$end_index <= ($1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets) * $elem->$bucket_size))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets), 0) || (var $range_3 := $Range(0, ($1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets) - 1)); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ($IsEqual'num'(LenVec($1_table_with_length_spec_get'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets, i)), $elem->$bucket_size))))))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets), 0) || (LenVec($1_table_with_length_spec_get'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets, ($1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets) - 1))) <= $elem->$bucket_size))) && (var $range_5 := $Range(0, $1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets)); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var i := $i_6;
    ($1_big_vector_spec_table_contains'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets, i)))))) && $IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets), ((($elem->$end_index + $elem->$bucket_size) - 1) div $elem->$bucket_size))) && (($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets), 0) && $IsEqual'u64'($elem->$end_index, 0)) || (!$IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets), 0) && $IsEqual'num'(((($1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets) - 1) * $elem->$bucket_size) + LenVec($1_table_with_length_spec_get'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets, ($1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets) - 1)))), $elem->$end_index)))) && (forall i: int :: $IsValid'u64'(i) ==> ((i >= $1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets)))  ==> (!$1_big_vector_spec_table_contains'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets, i)))) && (forall i: int :: $IsValid'u64'(i) ==> ((i < $1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets)))  ==> ($1_big_vector_spec_table_contains'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets, i)))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets), 0) || (LenVec($1_table_with_length_spec_get'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets, ($1_big_vector_spec_table_len'u64_vec'$1_object_Object'$bb_pool_v3_LiquidityPoolV3'''($elem->$buckets) - 1))) > 0)))))))) && (LenVec($rsc->$all_pools->$inline_capacity->$vec) <= 1)) && (LenVec($rsc->$all_pools->$bucket_size->$vec) <= 1))))));

    // assume forall $rsc: 0xbb::pool_v3::LiquidityPoolV3: ResourceDomain<0xbb::pool_v3::LiquidityPoolV3>(): And(WellFormed($rsc), And(And(And(And(And(And(Or(option::$is_none<u64>(select smart_vector::SmartVector.bucket_size(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($rsc)))), And(option::$is_some<u64>(select smart_vector::SmartVector.bucket_size(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($rsc)))), Neq<u64>(option::$borrow<u64>(select smart_vector::SmartVector.bucket_size(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($rsc)))), 0))), Or(option::$is_none<u64>(select smart_vector::SmartVector.inline_capacity(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($rsc)))), Le(Len<address>(select smart_vector::SmartVector.inline_vec(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($rsc)))), option::$borrow<u64>(select smart_vector::SmartVector.inline_capacity(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($rsc))))))), Or(And(option::$is_none<u64>(select smart_vector::SmartVector.inline_capacity(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($rsc)))), option::$is_none<u64>(select smart_vector::SmartVector.bucket_size(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($rsc))))), And(option::$is_some<u64>(select smart_vector::SmartVector.inline_capacity(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($rsc)))), option::$is_some<u64>(select smart_vector::SmartVector.bucket_size(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($rsc))))))), Le(Len<0x1::big_vector::BigVector<address>>(select option::Option.vec(select smart_vector::SmartVector.big_vec(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($rsc))))), 1)), forall $elem: 0x1::big_vector::BigVector<address>: select option::Option.vec(select smart_vector::SmartVector.big_vec(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($rsc)))): And(And(And(And(And(And(And(And(And(And(And(Neq<u64>(select big_vector::BigVector.bucket_size($elem), 0), Implies(Eq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 0), Eq<u64>(select big_vector::BigVector.end_index($elem), 0))), Implies(Eq<u64>(select big_vector::BigVector.end_index($elem), 0), Eq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 0))), Le(select big_vector::BigVector.end_index($elem), Mul(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), select big_vector::BigVector.bucket_size($elem)))), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 0), forall i: num: Range(0, Sub(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 1)): Eq<num>(Len<address>(table_with_length::spec_get<u64, vector<address>>(select big_vector::BigVector.buckets($elem), i)), select big_vector::BigVector.bucket_size($elem)))), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 0), Le(Len<address>(table_with_length::spec_get<u64, vector<address>>(select big_vector::BigVector.buckets($elem), Sub(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 1))), select big_vector::BigVector.bucket_size($elem)))), forall i: num: Range(0, big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem))): big_vector::spec_table_contains<u64, vector<address>>(select big_vector::BigVector.buckets($elem), i)), Eq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), Div(Sub(Add(select big_vector::BigVector.end_index($elem), select big_vector::BigVector.bucket_size($elem)), 1), select big_vector::BigVector.bucket_size($elem)))), Or(And(Eq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 0), Eq<u64>(select big_vector::BigVector.end_index($elem), 0)), And(Neq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 0), Eq<num>(Add(Mul(Sub(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 1), select big_vector::BigVector.bucket_size($elem)), Len<address>(table_with_length::spec_get<u64, vector<address>>(select big_vector::BigVector.buckets($elem), Sub(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 1)))), select big_vector::BigVector.end_index($elem))))), forall i: u64: TypeDomain<u64>() where Ge(i, big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem))): Not(big_vector::spec_table_contains<u64, vector<address>>(select big_vector::BigVector.buckets($elem), i))), forall i: u64: TypeDomain<u64>() where Lt(i, big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem))): big_vector::spec_table_contains<u64, vector<address>>(select big_vector::BigVector.buckets($elem), i)), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 0), Gt(Len<address>(table_with_length::spec_get<u64, vector<address>>(select big_vector::BigVector.buckets($elem), Sub(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 1))), 0)))), Le(Len<u64>(select option::Option.vec(select smart_vector::SmartVector.inline_capacity(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($rsc))))), 1)), Le(Len<u64>(select option::Option.vec(select smart_vector::SmartVector.bucket_size(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($rsc))))), 1))) at ./sources/v3/pool_v3.move:516:5+1
    assume (forall $a_0: int :: {$ResourceValue($bb_pool_v3_LiquidityPoolV3_$memory, $a_0)}(var $rsc := $ResourceValue($bb_pool_v3_LiquidityPoolV3_$memory, $a_0);
    (($IsValid'$bb_pool_v3_LiquidityPoolV3'($rsc) && ((((((($1_option_$is_none'u64'($rsc->$position_blacklist->$addresses->$bucket_size) || ($1_option_$is_some'u64'($rsc->$position_blacklist->$addresses->$bucket_size) && !$IsEqual'u64'($1_option_$borrow'u64'($rsc->$position_blacklist->$addresses->$bucket_size), 0))) && ($1_option_$is_none'u64'($rsc->$position_blacklist->$addresses->$inline_capacity) || (LenVec($rsc->$position_blacklist->$addresses->$inline_vec) <= $1_option_$borrow'u64'($rsc->$position_blacklist->$addresses->$inline_capacity)))) && (($1_option_$is_none'u64'($rsc->$position_blacklist->$addresses->$inline_capacity) && $1_option_$is_none'u64'($rsc->$position_blacklist->$addresses->$bucket_size)) || ($1_option_$is_some'u64'($rsc->$position_blacklist->$addresses->$inline_capacity) && $1_option_$is_some'u64'($rsc->$position_blacklist->$addresses->$bucket_size)))) && (LenVec($rsc->$position_blacklist->$addresses->$big_vec->$vec) <= 1)) && (var $range_1 := $rsc->$position_blacklist->$addresses->$big_vec->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((((((((!$IsEqual'u64'($elem->$bucket_size, 0) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), 0) ==> $IsEqual'u64'($elem->$end_index, 0))) && ($IsEqual'u64'($elem->$end_index, 0) ==> $IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), 0))) && ($elem->$end_index <= ($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets) * $elem->$bucket_size))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), 0) || (var $range_3 := $Range(0, ($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets) - 1)); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ($IsEqual'num'(LenVec($1_table_with_length_spec_get'u64_vec'address''($elem->$buckets, i)), $elem->$bucket_size))))))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), 0) || (LenVec($1_table_with_length_spec_get'u64_vec'address''($elem->$buckets, ($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets) - 1))) <= $elem->$bucket_size))) && (var $range_5 := $Range(0, $1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets)); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var i := $i_6;
    ($1_big_vector_spec_table_contains'u64_vec'address''($elem->$buckets, i)))))) && $IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), ((($elem->$end_index + $elem->$bucket_size) - 1) div $elem->$bucket_size))) && (($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), 0) && $IsEqual'u64'($elem->$end_index, 0)) || (!$IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), 0) && $IsEqual'num'(((($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets) - 1) * $elem->$bucket_size) + LenVec($1_table_with_length_spec_get'u64_vec'address''($elem->$buckets, ($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets) - 1)))), $elem->$end_index)))) && (forall i: int :: $IsValid'u64'(i) ==> ((i >= $1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets)))  ==> (!$1_big_vector_spec_table_contains'u64_vec'address''($elem->$buckets, i)))) && (forall i: int :: $IsValid'u64'(i) ==> ((i < $1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets)))  ==> ($1_big_vector_spec_table_contains'u64_vec'address''($elem->$buckets, i)))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), 0) || (LenVec($1_table_with_length_spec_get'u64_vec'address''($elem->$buckets, ($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets) - 1))) > 0)))))))) && (LenVec($rsc->$position_blacklist->$addresses->$inline_capacity->$vec) <= 1)) && (LenVec($rsc->$position_blacklist->$addresses->$bucket_size->$vec) <= 1))))));

    // assume Implies(chain_status::$is_operating(), exists<0x1::timestamp::CurrentTimeMicroseconds>(0x1)) at ./sources/v3/pool_v3.move:516:5+4487
    // global invariant at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at ./sources/v3/pool_v3.move:516:5+4487
    // global invariant at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Identical($t48, object::$object_address<0xbb::position_v3::Info>($t1)) at ./sources/v3/pool_v3.move:631:5+49
    assume {:print "$at(2,22521,22570)"} true;
    assume ($t48 == $1_object_$object_address'$bb_position_v3_Info'($t1));

    // assume Identical($t49, global<0xbb::pool_v3::LiquidityPoolV3>($t48)) at ./sources/v3/pool_v3.move:632:5+46
    assume {:print "$at(2,22575,22621)"} true;
    assume ($t49 == $ResourceValue($bb_pool_v3_LiquidityPoolV3_$memory, $t48));

    // trace_local[user]($t0) at ./sources/v3/pool_v3.move:516:5+1
    assume {:print "$at(2,17744,17745)"} true;
    assume {:print "$track_local(117,12,0):", $t0} $t0 == $t0;

    // trace_local[position]($t1) at ./sources/v3/pool_v3.move:516:5+1
    assume {:print "$track_local(117,12,1):", $t1} $t1 == $t1;

    // trace_local[liquidity_delta]($t2) at ./sources/v3/pool_v3.move:516:5+1
    assume {:print "$track_local(117,12,2):", $t2} $t2 == $t2;

    // trace_local[fa_a]($t3) at ./sources/v3/pool_v3.move:516:5+1
    assume {:print "$track_local(117,12,3):", $t3} $t3 == $t3;

    // trace_local[fa_b]($t4) at ./sources/v3/pool_v3.move:516:5+1
    assume {:print "$track_local(117,12,4):", $t4} $t4 == $t4;

    // $t50 := signer::address_of($t0) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:523:44+24
    assume {:print "$at(2,18067,18091)"} true;
    call $t50 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,18067,18091)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t52 := object::is_owner<0xbb::position_v3::Info>($t1, $t50) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:523:17+52
    call $t52 := $1_object_is_owner'$bb_position_v3_Info'($t1, $t50);
    if ($abort_flag) {
        assume {:print "$at(2,18040,18092)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // if ($t52) goto L1 else goto L0 at ./sources/v3/pool_v3.move:523:9+6
    if ($t52) { goto L1; } else { goto L0; }

    // label L1 at ./sources/v3/pool_v3.move:524:40+31
    assume {:print "$at(2,18155,18186)"} true;
L1:

    // ($t53, $t54) := position_v3::get_tick($t1) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:524:40+31
    assume {:print "$at(2,18155,18186)"} true;
    call $t53,$t54 := $bb_position_v3_get_tick($t1);
    if ($abort_flag) {
        assume {:print "$at(2,18155,18186)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[tick_upper]($t54) at ./sources/v3/pool_v3.move:524:40+31
    assume {:print "$track_local(117,12,5):", $t54} $t54 == $t54;

    // trace_local[tick_lower]($t53) at ./sources/v3/pool_v3.move:524:40+31
    assume {:print "$track_local(117,12,6):", $t53} $t53 == $t53;

    // ($t55, $t56, $t57) := position_v3::get_pool_info($t1) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:525:44+36
    assume {:print "$at(2,18231,18267)"} true;
    call $t55,$t56,$t57 := $bb_position_v3_get_pool_info($t1);
    if ($abort_flag) {
        assume {:print "$at(2,18231,18267)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[fee_tier]($t57) at ./sources/v3/pool_v3.move:525:44+36
    assume {:print "$track_local(117,12,7):", $t57} $t57 == $t57;

    // trace_local[token_b]($t56) at ./sources/v3/pool_v3.move:525:44+36
    assume {:print "$track_local(117,12,8):", $t56} $t56 == $t56;

    // trace_local[token_a]($t55) at ./sources/v3/pool_v3.move:525:44+36
    assume {:print "$track_local(117,12,9):", $t55} $t55 == $t55;

    // $t58 := pool_v3::liquidity_pool_address($t55, $t56, $t57) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1937:44+50
    assume {:print "$at(2,76198,76248)"} true;
    call $t58 := $bb_pool_v3_liquidity_pool_address($t55, $t56, $t57);
    if ($abort_flag) {
        assume {:print "$at(2,76198,76248)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t59 := borrow_global<0xbb::pool_v3::LiquidityPoolV3>($t58) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1937:9+86
    if (!$ResourceExists($bb_pool_v3_LiquidityPoolV3_$memory, $t58)) {
        call $ExecFailureAbort();
    } else {
        $t59 := $Mutation($Global($t58), EmptyVec(), $ResourceValue($bb_pool_v3_LiquidityPoolV3_$memory, $t58));
    }
    if ($abort_flag) {
        assume {:print "$at(2,76163,76249)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[pool]($t59) at ./sources/v3/pool_v3.move:1937:9+86
    $temp_0'$bb_pool_v3_LiquidityPoolV3' := $Dereference($t59);
    assume {:print "$track_local(117,12,13):", $temp_0'$bb_pool_v3_LiquidityPoolV3'} $temp_0'$bb_pool_v3_LiquidityPoolV3' == $temp_0'$bb_pool_v3_LiquidityPoolV3';

    // pool_v3::check_protocol_pause() on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:527:9+22
    assume {:print "$at(2,18338,18360)"} true;
    call $bb_pool_v3_check_protocol_pause();
    if ($abort_flag) {
        assume {:print "$at(2,18338,18360)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t60 := pool_v3::liquidity_pool_address($t55, $t56, $t57) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:528:28+50
    assume {:print "$at(2,18389,18439)"} true;
    call $t60 := $bb_pool_v3_liquidity_pool_address($t55, $t56, $t57);
    if ($abort_flag) {
        assume {:print "$at(2,18389,18439)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t61 := read_ref($t59) at ./sources/v3/pool_v3.move:528:80+4
    $t61 := $Dereference($t59);

    // trace_local[$t30]($t61) at ./sources/v3/pool_v3.move:528:80+4
    assume {:print "$track_local(117,12,14):", $t61} $t61 == $t61;

    // $t62 := get_field<0xbb::pool_v3::LiquidityPoolV3>.sqrt_price($t61) at ./sources/v3/pool_v3.move:1898:25+15
    assume {:print "$at(2,74469,74484)"} true;
    $t62 := $t61->$sqrt_price;

    // $t63 := get_field<0xbb::pool_v3::LiquidityPoolV3>.liquidity($t61) at ./sources/v3/pool_v3.move:1899:24+14
    assume {:print "$at(2,74509,74523)"} true;
    $t63 := $t61->$liquidity;

    // $t64 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick($t61) at ./sources/v3/pool_v3.move:1900:19+9
    assume {:print "$at(2,74543,74552)"} true;
    $t64 := $t61->$tick;

    // $t65 := get_field<0xbb::pool_v3::LiquidityPoolV3>.observation_index($t61) at ./sources/v3/pool_v3.move:1902:32+22
    assume {:print "$at(2,74658,74680)"} true;
    $t65 := $t61->$observation_index;

    // $t66 := get_field<0xbb::pool_v3::LiquidityPoolV3>.observation_cardinality($t61) at ./sources/v3/pool_v3.move:1904:38+28
    assume {:print "$at(2,74799,74827)"} true;
    $t66 := $t61->$observation_cardinality;

    // $t67 := get_field<0xbb::pool_v3::LiquidityPoolV3>.observation_cardinality_next($t61) at ./sources/v3/pool_v3.move:1906:43+33
    assume {:print "$at(2,74968,75001)"} true;
    $t67 := $t61->$observation_cardinality_next;

    // $t68 := get_field<0xbb::pool_v3::LiquidityPoolV3>.fee_rate($t61) at ./sources/v3/pool_v3.move:1907:23+13
    assume {:print "$at(2,75025,75038)"} true;
    $t68 := $t61->$fee_rate;

    // $t69 := 1000000 at ./sources/v3/pool_v3.move:1908:36+20
    assume {:print "$at(2,75075,75095)"} true;
    $t69 := 1000000;
    assume $IsValid'u64'($t69);

    // $t70 := get_field<0xbb::pool_v3::LiquidityPoolV3>.fee_growth_global_a($t61) at ./sources/v3/pool_v3.move:1909:34+24
    assume {:print "$at(2,75130,75154)"} true;
    $t70 := $t61->$fee_growth_global_a;

    // $t71 := get_field<0xbb::pool_v3::LiquidityPoolV3>.fee_growth_global_b($t61) at ./sources/v3/pool_v3.move:1910:34+24
    assume {:print "$at(2,75189,75213)"} true;
    $t71 := $t61->$fee_growth_global_b;

    // $t72 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick_spacing($t61) at ./sources/v3/pool_v3.move:1911:27+17
    assume {:print "$at(2,75241,75258)"} true;
    $t72 := $t61->$tick_spacing;

    // $t73 := pack 0xbb::pool_v3::PoolSnapshot($t60, $t62, $t63, $t64, $t65, $t66, $t67, $t68, $t69, $t70, $t71, $t72) at ./sources/v3/pool_v3.move:1896:21+910
    assume {:print "$at(2,74410,75320)"} true;
    $t73 := $bb_pool_v3_PoolSnapshot($t60, $t62, $t63, $t64, $t65, $t66, $t67, $t68, $t69, $t70, $t71, $t72);

    // opaque begin: event::emit<0xbb::pool_v3::PoolSnapshot>($t73) at ./sources/v3/pool_v3.move:1896:9+923

    // opaque end: event::emit<0xbb::pool_v3::PoolSnapshot>($t73) at ./sources/v3/pool_v3.move:1896:9+923

    // trace_local[pool]($t59) at ./sources/v3/pool_v3.move:1851:16+27
    assume {:print "$at(2,72360,72387)"} true;
    $temp_0'$bb_pool_v3_LiquidityPoolV3' := $Dereference($t59);
    assume {:print "$track_local(117,12,15):", $temp_0'$bb_pool_v3_LiquidityPoolV3'} $temp_0'$bb_pool_v3_LiquidityPoolV3' == $temp_0'$bb_pool_v3_LiquidityPoolV3';

    // $t74 := timestamp::now_seconds() on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1852:27+24
    assume {:print "$at(2,72444,72468)"} true;
    call $t74 := $1_timestamp_now_seconds();
    if ($abort_flag) {
        assume {:print "$at(2,72444,72468)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[$t39]($t74) at ./sources/v3/pool_v3.move:1852:27+24
    assume {:print "$track_local(117,12,16):", $t74} $t74 == $t74;

    // $t75 := get_field<0xbb::pool_v3::LiquidityPoolV3>.last_update_timestamp($t59) at ./sources/v3/pool_v3.move:1853:39+26
    assume {:print "$at(2,72508,72534)"} true;
    $t75 := $Dereference($t59)->$last_update_timestamp;

    // $t76 := -($t74, $t75) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1853:25+40
    call $t76 := $Sub($t74, $t75);
    if ($abort_flag) {
        assume {:print "$at(2,72494,72534)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[$t41]($t76) at ./sources/v3/pool_v3.move:1853:25+40
    assume {:print "$track_local(117,12,17):", $t76} $t76 == $t76;

    // $t77 := read_ref($t59) at ./sources/v3/pool_v3.move:1854:59+4
    assume {:print "$at(2,72594,72598)"} true;
    $t77 := $Dereference($t59);

    // trace_local[$t30]($t77) at ./sources/v3/pool_v3.move:1854:59+4
    assume {:print "$track_local(117,12,14):", $t77} $t77 == $t77;

    // $t78 := get_field<0xbb::pool_v3::LiquidityPoolV3>.position_blacklist($t77) at ./sources/v3/pool_v3.move:1036:13+24
    assume {:print "$at(2,38033,38057)"} true;
    $t78 := $t77->$position_blacklist;

    // $t79 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick($t77) at ./sources/v3/pool_v3.move:1037:13+9
    assume {:print "$at(2,38071,38080)"} true;
    $t79 := $t77->$tick;

    // $t80 := position_blacklist::blocked_out_liquidity_amount($t78, $t79) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1035:37+119
    assume {:print "$at(2,37971,38090)"} true;
    call $t80 := $bb_position_blacklist_blocked_out_liquidity_amount($t78, $t79);
    if ($abort_flag) {
        assume {:print "$at(2,37971,38090)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[$t33]($t80) at ./sources/v3/pool_v3.move:1035:37+119
    assume {:print "$track_local(117,12,18):", $t80} $t80 == $t80;

    // $t81 := get_field<0xbb::pool_v3::LiquidityPoolV3>.liquidity($t77) at ./sources/v3/pool_v3.move:1039:9+14
    assume {:print "$at(2,38100,38114)"} true;
    $t81 := $t77->$liquidity;

    // $t82 := -($t81, $t80) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1039:9+38
    call $t82 := $Sub($t81, $t80);
    if ($abort_flag) {
        assume {:print "$at(2,38100,38138)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[$t33]($t82) at ./sources/v3/pool_v3.move:1039:9+38
    assume {:print "$track_local(117,12,18):", $t82} $t82 == $t82;

    // $t83 := get_field<0xbb::pool_v3::LiquidityPoolV3>.liquidity($t59) at ./sources/v3/pool_v3.move:1855:53+14
    assume {:print "$at(2,72653,72667)"} true;
    $t83 := $Dereference($t59)->$liquidity;

    // $t84 := 0 at ./sources/v3/pool_v3.move:1855:71+1
    $t84 := 0;
    assume $IsValid'u128'($t84);

    // $t85 := !=($t83, $t84) at ./sources/v3/pool_v3.move:1855:53+19
    $t85 := !$IsEqual'u128'($t83, $t84);

    // if ($t85) goto L3 else goto L2 at ./sources/v3/pool_v3.move:1855:50+123
    if ($t85) { goto L3; } else { goto L2; }

    // label L3 at ./sources/v3/pool_v3.move:1856:14+19
    assume {:print "$at(2,72689,72708)"} true;
L3:

    // $t86 := (u128)($t76) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1856:14+19
    assume {:print "$at(2,72689,72708)"} true;
    call $t86 := $CastU128($t76);
    if ($abort_flag) {
        assume {:print "$at(2,72689,72708)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t87 := 64 at ./sources/v3/pool_v3.move:1856:37+2
    $t87 := 64;
    assume $IsValid'u8'($t87);

    // $t88 := <<($t86, $t87) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1856:13+27
    call $t88 := $ShlU128($t86, $t87);
    if ($abort_flag) {
        assume {:print "$at(2,72688,72715)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t89 := get_field<0xbb::pool_v3::LiquidityPoolV3>.liquidity($t59) at ./sources/v3/pool_v3.move:1856:43+14
    $t89 := $Dereference($t59)->$liquidity;

    // $t90 := /($t88, $t89) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1856:13+44
    call $t90 := $Div($t88, $t89);
    if ($abort_flag) {
        assume {:print "$at(2,72688,72732)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t19 := $t90 at ./sources/v3/pool_v3.move:1856:13+44
    $t19 := $t90;

    // trace_local[$t35]($t90) at ./sources/v3/pool_v3.move:1856:13+44
    assume {:print "$track_local(117,12,19):", $t90} $t90 == $t90;

    // label L19 at ./sources/v3/pool_v3.move:1861:56+19
    assume {:print "$at(2,72831,72850)"} true;
L19:

    // $t91 := 0 at ./sources/v3/pool_v3.move:1861:79+1
    assume {:print "$at(2,72854,72855)"} true;
    $t91 := 0;
    assume $IsValid'u128'($t91);

    // $t92 := !=($t82, $t91) at ./sources/v3/pool_v3.move:1861:56+24
    $t92 := !$IsEqual'u128'($t82, $t91);

    // if ($t92) goto L5 else goto L4 at ./sources/v3/pool_v3.move:1861:53+133
    if ($t92) { goto L5; } else { goto L4; }

    // label L5 at ./sources/v3/pool_v3.move:1862:14+19
    assume {:print "$at(2,72872,72891)"} true;
L5:

    // $t93 := (u128)($t76) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1862:14+19
    assume {:print "$at(2,72872,72891)"} true;
    call $t93 := $CastU128($t76);
    if ($abort_flag) {
        assume {:print "$at(2,72872,72891)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t94 := 64 at ./sources/v3/pool_v3.move:1862:37+2
    $t94 := 64;
    assume $IsValid'u8'($t94);

    // $t95 := <<($t93, $t94) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1862:13+27
    call $t95 := $ShlU128($t93, $t94);
    if ($abort_flag) {
        assume {:print "$at(2,72871,72898)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t96 := /($t95, $t82) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1862:13+49
    call $t96 := $Div($t95, $t82);
    if ($abort_flag) {
        assume {:print "$at(2,72871,72920)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t20 := $t96 at ./sources/v3/pool_v3.move:1862:13+49
    $t20 := $t96;

    // trace_local[$t48]($t96) at ./sources/v3/pool_v3.move:1862:13+49
    assume {:print "$track_local(117,12,20):", $t96} $t96 == $t96;

    // label L18 at ./sources/v3/pool_v3.move:1866:45+33
    assume {:print "$at(2,73007,73040)"} true;
L18:

    // $t97 := get_field<0xbb::pool_v3::LiquidityPoolV3>.seconds_per_liquidity_oracle($t59) at ./sources/v3/pool_v3.move:1866:45+33
    assume {:print "$at(2,73007,73040)"} true;
    $t97 := $Dereference($t59)->$seconds_per_liquidity_oracle;

    // $t98 := +($t97, $t19) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1866:45+70
    call $t98 := $AddU128($t97, $t19);
    if ($abort_flag) {
        assume {:print "$at(2,73007,73077)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t99 := borrow_field<0xbb::pool_v3::LiquidityPoolV3>.seconds_per_liquidity_oracle($t59) at ./sources/v3/pool_v3.move:1866:9+33
    $t99 := $ChildMutation($t59, 15, $Dereference($t59)->$seconds_per_liquidity_oracle);

    // write_ref($t99, $t98) at ./sources/v3/pool_v3.move:1866:9+106
    $t99 := $UpdateMutation($t99, $t98);

    // write_back[Reference($t59).seconds_per_liquidity_oracle (u128)]($t99) at ./sources/v3/pool_v3.move:1866:9+106
    $t59 := $UpdateMutation($t59, $Update'$bb_pool_v3_LiquidityPoolV3'_seconds_per_liquidity_oracle($Dereference($t59), $Dereference($t99)));

    // $t100 := get_field<0xbb::pool_v3::LiquidityPoolV3>.seconds_per_liquidity_incentive($t59) at ./sources/v3/pool_v3.move:1867:48+36
    assume {:print "$at(2,73126,73162)"} true;
    $t100 := $Dereference($t59)->$seconds_per_liquidity_incentive;

    // $t101 := +($t100, $t20) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1867:48+76
    call $t101 := $AddU128($t100, $t20);
    if ($abort_flag) {
        assume {:print "$at(2,73126,73202)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t102 := borrow_field<0xbb::pool_v3::LiquidityPoolV3>.seconds_per_liquidity_incentive($t59) at ./sources/v3/pool_v3.move:1867:9+36
    $t102 := $ChildMutation($t59, 16, $Dereference($t59)->$seconds_per_liquidity_incentive);

    // write_ref($t102, $t101) at ./sources/v3/pool_v3.move:1867:9+115
    $t102 := $UpdateMutation($t102, $t101);

    // write_back[Reference($t59).seconds_per_liquidity_incentive (u128)]($t102) at ./sources/v3/pool_v3.move:1867:9+115
    $t59 := $UpdateMutation($t59, $Update'$bb_pool_v3_LiquidityPoolV3'_seconds_per_liquidity_incentive($Dereference($t59), $Dereference($t102)));

    // $t103 := borrow_field<0xbb::pool_v3::LiquidityPoolV3>.last_update_timestamp($t59) at ./sources/v3/pool_v3.move:1868:9+26
    assume {:print "$at(2,73212,73238)"} true;
    $t103 := $ChildMutation($t59, 18, $Dereference($t59)->$last_update_timestamp);

    // trace_local[$t94]($t103) at ./sources/v3/pool_v3.move:1868:9+40
    $temp_0'u64' := $Dereference($t103);
    assume {:print "$track_local(117,12,21):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // write_ref($t103, $t74) at ./sources/v3/pool_v3.move:1868:9+40
    $t103 := $UpdateMutation($t103, $t74);

    // write_back[Reference($t59).last_update_timestamp (u64)]($t103) at ./sources/v3/pool_v3.move:1868:9+40
    $t59 := $UpdateMutation($t59, $Update'$bb_pool_v3_LiquidityPoolV3'_last_update_timestamp($Dereference($t59), $Dereference($t103)));

    // $t104 := borrow_field<0xbb::pool_v3::LiquidityPoolV3>.rewarder_manager($t59) at ./sources/v3/pool_v3.move:1869:25+26
    assume {:print "$at(2,73278,73304)"} true;
    $t104 := $ChildMutation($t59, 25, $Dereference($t59)->$rewarder_manager);

    // rewarder::flash($t104, $t82) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1869:9+64
    call $t104 := $bb_rewarder_flash($t104, $t82);
    if ($abort_flag) {
        assume {:print "$at(2,73262,73326)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // write_back[Reference($t59).rewarder_manager (0xbb::rewarder::RewarderManager)]($t104) at ./sources/v3/pool_v3.move:1869:9+64
    $t59 := $UpdateMutation($t59, $Update'$bb_pool_v3_LiquidityPoolV3'_rewarder_manager($Dereference($t59), $Dereference($t104)));

    // $t105 := get_field<0xbb::pool_v3::LiquidityPoolV3>.rewarder_manager($t59) at ./sources/v3/pool_v3.move:531:13+22
    assume {:print "$at(2,18592,18614)"} true;
    $t105 := $Dereference($t59)->$rewarder_manager;

    // $t106 := rewarder::get_emissions_per_liquidity_list($t105) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:530:46+88
    assume {:print "$at(2,18536,18624)"} true;
    call $t106 := $bb_rewarder_get_emissions_per_liquidity_list($t105);
    if ($abort_flag) {
        assume {:print "$at(2,18536,18624)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[emissions_per_liquidity_global]($t106) at ./sources/v3/pool_v3.move:530:46+88
    assume {:print "$track_local(117,12,22):", $t106} $t106 == $t106;

    // $t107 := borrow_field<0xbb::pool_v3::LiquidityPoolV3>.tick_info($t59) at ./sources/v3/pool_v3.move:535:13+19
    assume {:print "$at(2,18719,18738)"} true;
    $t107 := $ChildMutation($t59, 19, $Dereference($t59)->$tick_info);

    // $t108 := get_field<0xbb::pool_v3::LiquidityPoolV3>.fee_growth_global_a($t59) at ./sources/v3/pool_v3.move:537:13+24
    assume {:print "$at(2,18776,18800)"} true;
    $t108 := $Dereference($t59)->$fee_growth_global_a;

    // $t109 := get_field<0xbb::pool_v3::LiquidityPoolV3>.fee_growth_global_b($t59) at ./sources/v3/pool_v3.move:538:13+24
    assume {:print "$at(2,18814,18838)"} true;
    $t109 := $Dereference($t59)->$fee_growth_global_b;

    // $t110 := get_field<0xbb::pool_v3::LiquidityPoolV3>.seconds_per_liquidity_oracle($t59) at ./sources/v3/pool_v3.move:539:13+33
    assume {:print "$at(2,18852,18885)"} true;
    $t110 := $Dereference($t59)->$seconds_per_liquidity_oracle;

    // $t111 := get_field<0xbb::pool_v3::LiquidityPoolV3>.seconds_per_liquidity_incentive($t59) at ./sources/v3/pool_v3.move:540:13+36
    assume {:print "$at(2,18899,18935)"} true;
    $t111 := $Dereference($t59)->$seconds_per_liquidity_incentive;

    // $t112 := true at ./sources/v3/pool_v3.move:542:13+4
    assume {:print "$at(2,18993,18997)"} true;
    $t112 := true;
    assume $IsValid'bool'($t112);

    // $t113 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick($t59) at ./sources/v3/pool_v3.move:544:13+9
    assume {:print "$at(2,19040,19049)"} true;
    $t113 := $Dereference($t59)->$tick;

    // $t114 := false at ./sources/v3/pool_v3.move:545:13+5
    assume {:print "$at(2,19063,19068)"} true;
    $t114 := false;
    assume $IsValid'bool'($t114);

    // $t115 := pool_v3::update_tick($t107, $t53, $t108, $t109, $t110, $t111, $t106, $t112, $t2, $t113, $t114) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:534:29+384
    assume {:print "$at(2,18694,19078)"} true;
    call $t115,$t107 := $bb_pool_v3_update_tick($t107, $t53, $t108, $t109, $t110, $t111, $t106, $t112, $t2, $t113, $t114);
    if ($abort_flag) {
        assume {:print "$at(2,18694,19078)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // write_back[Reference($t59).tick_info (0x1::smart_table::SmartTable<0xbb::i32::I32, 0xbb::tick::TickInfo>)]($t107) at ./sources/v3/pool_v3.move:534:29+384
    $t59 := $UpdateMutation($t59, $Update'$bb_pool_v3_LiquidityPoolV3'_tick_info($Dereference($t59), $Dereference($t107)));

    // $t116 := borrow_field<0xbb::pool_v3::LiquidityPoolV3>.tick_info($t59) at ./sources/v3/pool_v3.move:549:13+19
    assume {:print "$at(2,19174,19193)"} true;
    $t116 := $ChildMutation($t59, 19, $Dereference($t59)->$tick_info);

    // $t117 := get_field<0xbb::pool_v3::LiquidityPoolV3>.fee_growth_global_a($t59) at ./sources/v3/pool_v3.move:551:13+24
    assume {:print "$at(2,19231,19255)"} true;
    $t117 := $Dereference($t59)->$fee_growth_global_a;

    // $t118 := get_field<0xbb::pool_v3::LiquidityPoolV3>.fee_growth_global_b($t59) at ./sources/v3/pool_v3.move:552:13+24
    assume {:print "$at(2,19269,19293)"} true;
    $t118 := $Dereference($t59)->$fee_growth_global_b;

    // $t119 := get_field<0xbb::pool_v3::LiquidityPoolV3>.seconds_per_liquidity_oracle($t59) at ./sources/v3/pool_v3.move:553:13+33
    assume {:print "$at(2,19307,19340)"} true;
    $t119 := $Dereference($t59)->$seconds_per_liquidity_oracle;

    // $t120 := get_field<0xbb::pool_v3::LiquidityPoolV3>.seconds_per_liquidity_incentive($t59) at ./sources/v3/pool_v3.move:554:13+36
    assume {:print "$at(2,19354,19390)"} true;
    $t120 := $Dereference($t59)->$seconds_per_liquidity_incentive;

    // $t121 := true at ./sources/v3/pool_v3.move:556:13+4
    assume {:print "$at(2,19448,19452)"} true;
    $t121 := true;
    assume $IsValid'bool'($t121);

    // $t122 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick($t59) at ./sources/v3/pool_v3.move:558:13+9
    assume {:print "$at(2,19495,19504)"} true;
    $t122 := $Dereference($t59)->$tick;

    // $t123 := true at ./sources/v3/pool_v3.move:559:13+4
    assume {:print "$at(2,19518,19522)"} true;
    $t123 := true;
    assume $IsValid'bool'($t123);

    // $t124 := pool_v3::update_tick($t116, $t54, $t117, $t118, $t119, $t120, $t106, $t121, $t2, $t122, $t123) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:548:29+383
    assume {:print "$at(2,19149,19532)"} true;
    call $t124,$t116 := $bb_pool_v3_update_tick($t116, $t54, $t117, $t118, $t119, $t120, $t106, $t121, $t2, $t122, $t123);
    if ($abort_flag) {
        assume {:print "$at(2,19149,19532)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // write_back[Reference($t59).tick_info (0x1::smart_table::SmartTable<0xbb::i32::I32, 0xbb::tick::TickInfo>)]($t116) at ./sources/v3/pool_v3.move:548:29+383
    $t59 := $UpdateMutation($t59, $Update'$bb_pool_v3_LiquidityPoolV3'_tick_info($Dereference($t59), $Dereference($t116)));

    // trace_local[$t114]($t124) at ./sources/v3/pool_v3.move:548:29+383
    assume {:print "$track_local(117,12,23):", $t124} $t124 == $t124;

    // if ($t115) goto L6 else goto L8 at ./sources/v3/pool_v3.move:562:9+117
    assume {:print "$at(2,19598,19715)"} true;
    if ($t115) { goto L6; } else { goto L8; }

    // label L6 at ./sources/v3/pool_v3.move:563:36+18
    assume {:print "$at(2,19654,19672)"} true;
L6:

    // $t125 := borrow_field<0xbb::pool_v3::LiquidityPoolV3>.tick_map($t59) at ./sources/v3/pool_v3.move:563:36+18
    assume {:print "$at(2,19654,19672)"} true;
    $t125 := $ChildMutation($t59, 20, $Dereference($t59)->$tick_map);

    // $t126 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick_spacing($t59) at ./sources/v3/pool_v3.move:563:68+17
    $t126 := $Dereference($t59)->$tick_spacing;

    // tick_bitmap::flip_tick($t125, $t53, $t126) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:563:13+73
    call $t125 := $bb_tick_bitmap_flip_tick($t125, $t53, $t126);
    if ($abort_flag) {
        assume {:print "$at(2,19631,19704)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // write_back[Reference($t59).tick_map (0xbb::tick_bitmap::BitMap)]($t125) at ./sources/v3/pool_v3.move:563:13+73
    $t59 := $UpdateMutation($t59, $Update'$bb_pool_v3_LiquidityPoolV3'_tick_map($Dereference($t59), $Dereference($t125)));

    // label L8 at ./sources/v3/pool_v3.move:565:9+117
    assume {:print "$at(2,19725,19842)"} true;
L8:

    // if ($t124) goto L9 else goto L11 at ./sources/v3/pool_v3.move:565:9+117
    assume {:print "$at(2,19725,19842)"} true;
    if ($t124) { goto L9; } else { goto L11; }

    // label L9 at ./sources/v3/pool_v3.move:566:36+18
    assume {:print "$at(2,19781,19799)"} true;
L9:

    // $t127 := borrow_field<0xbb::pool_v3::LiquidityPoolV3>.tick_map($t59) at ./sources/v3/pool_v3.move:566:36+18
    assume {:print "$at(2,19781,19799)"} true;
    $t127 := $ChildMutation($t59, 20, $Dereference($t59)->$tick_map);

    // $t128 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick_spacing($t59) at ./sources/v3/pool_v3.move:566:68+17
    $t128 := $Dereference($t59)->$tick_spacing;

    // tick_bitmap::flip_tick($t127, $t54, $t128) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:566:13+73
    call $t127 := $bb_tick_bitmap_flip_tick($t127, $t54, $t128);
    if ($abort_flag) {
        assume {:print "$at(2,19758,19831)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // write_back[Reference($t59).tick_map (0xbb::tick_bitmap::BitMap)]($t127) at ./sources/v3/pool_v3.move:566:13+73
    $t59 := $UpdateMutation($t59, $Update'$bb_pool_v3_LiquidityPoolV3'_tick_map($Dereference($t59), $Dereference($t127)));

    // label L11 at ./sources/v3/pool_v3.move:1366:16+34
    assume {:print "$at(2,51663,51697)"} true;
L11:

    // trace_local[pool_mut]($t59) at ./sources/v3/pool_v3.move:1366:16+34
    assume {:print "$at(2,51663,51697)"} true;
    $temp_0'$bb_pool_v3_LiquidityPoolV3' := $Dereference($t59);
    assume {:print "$track_local(117,12,24):", $temp_0'$bb_pool_v3_LiquidityPoolV3'} $temp_0'$bb_pool_v3_LiquidityPoolV3' == $temp_0'$bb_pool_v3_LiquidityPoolV3';

    // trace_local[$t37]($t53) at ./sources/v3/pool_v3.move:1366:16+34
    assume {:print "$track_local(117,12,25):", $t53} $t53 == $t53;

    // $t129 := get_field<0xbb::pool_v3::LiquidityPoolV3>.rewarder_manager($t59) at ./sources/v3/pool_v3.move:1368:47+26
    assume {:print "$at(2,51834,51860)"} true;
    $t129 := $Dereference($t59)->$rewarder_manager;

    // $t130 := rewarder::get_emissions_rate_list($t129) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1368:13+61
    call $t130 := $bb_rewarder_get_emissions_rate_list($t129);
    if ($abort_flag) {
        assume {:print "$at(2,51800,51861)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[emissions_per_liquidity_global]($t130) at ./sources/v3/pool_v3.move:1368:13+61
    assume {:print "$track_local(117,12,26):", $t130} $t130 == $t130;

    // $t131 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick_info($t59) at ./sources/v3/pool_v3.move:1370:65+19
    assume {:print "$at(2,51970,51989)"} true;
    $t131 := $Dereference($t59)->$tick_info;

    // $t132 := pool_v3::get_tick($t131, $t53) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1370:56+35
    call $t132 := $bb_pool_v3_get_tick($t131, $t53);
    if ($abort_flag) {
        assume {:print "$at(2,51961,51996)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[$t146]($t132) at ./sources/v3/pool_v3.move:1370:56+35
    assume {:print "$track_local(117,12,27):", $t132} $t132 == $t132;

    // $t133 := tick::get_emissions_per_liquidity_outside($t132) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1370:13+79
    call $t133 := $bb_tick_get_emissions_per_liquidity_outside($t132);
    if ($abort_flag) {
        assume {:print "$at(2,51918,51997)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[emissions_per_liquidity_tick]($t133) at ./sources/v3/pool_v3.move:1370:13+79
    assume {:print "$track_local(117,12,28):", $t133} $t133 == $t133;

    // $t134 := vector::length<u64>($t130) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1371:12+39
    assume {:print "$at(2,52010,52049)"} true;
    call $t134 := $1_vector_length'u64'($t130);
    if ($abort_flag) {
        assume {:print "$at(2,52010,52049)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t135 := vector::length<u128>($t133) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1371:55+37
    call $t135 := $1_vector_length'u128'($t133);
    if ($abort_flag) {
        assume {:print "$at(2,52053,52090)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t136 := !=($t134, $t135) at ./sources/v3/pool_v3.move:1371:12+80
    $t136 := !$IsEqual'u64'($t134, $t135);

    // if ($t136) goto L13 else goto L12 at ./sources/v3/pool_v3.move:1371:9+270
    if ($t136) { goto L13; } else { goto L12; }

    // label L13 at ./sources/v3/pool_v3.move:1373:30+23
    assume {:print "$at(2,52165,52188)"} true;
L13:

    // $t137 := borrow_field<0xbb::pool_v3::LiquidityPoolV3>.tick_info($t59) at ./sources/v3/pool_v3.move:1373:30+23
    assume {:print "$at(2,52165,52188)"} true;
    $t137 := $ChildMutation($t59, 19, $Dereference($t59)->$tick_info);

    // $t138 := pool_v3::get_tick_mut($t137, $t53) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1373:17+43
    call $t138,$t137 := $bb_pool_v3_get_tick_mut($t137, $t53);
    if ($abort_flag) {
        assume {:print "$at(2,52152,52195)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t139 := vector::length<u64>($t130) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1374:17+39
    assume {:print "$at(2,52213,52252)"} true;
    call $t139 := $1_vector_length'u64'($t130);
    if ($abort_flag) {
        assume {:print "$at(2,52213,52252)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // tick::padding_emissions_list($t138, $t139) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1372:13+160
    assume {:print "$at(2,52106,52266)"} true;
    call $t138 := $bb_tick_padding_emissions_list($t138, $t139);
    if ($abort_flag) {
        assume {:print "$at(2,52106,52266)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // write_back[Reference($t137)[]]($t138) at ./sources/v3/pool_v3.move:1372:13+160
    $t137 := $UpdateMutation($t137, UpdateTable($Dereference($t137), ReadVec($t138->p, LenVec($t137->p)), $Dereference($t138)));

    // write_back[Reference($t59).tick_info (0x1::smart_table::SmartTable<0xbb::i32::I32, 0xbb::tick::TickInfo>)]($t137) at ./sources/v3/pool_v3.move:1372:13+160
    $t59 := $UpdateMutation($t59, $Update'$bb_pool_v3_LiquidityPoolV3'_tick_info($Dereference($t59), $Dereference($t137)));

    // label L17 at ./sources/v3/pool_v3.move:1366:16+34
    assume {:print "$at(2,51663,51697)"} true;
L17:

    // trace_local[pool_mut]($t59) at ./sources/v3/pool_v3.move:1366:16+34
    assume {:print "$at(2,51663,51697)"} true;
    $temp_0'$bb_pool_v3_LiquidityPoolV3' := $Dereference($t59);
    assume {:print "$track_local(117,12,29):", $temp_0'$bb_pool_v3_LiquidityPoolV3'} $temp_0'$bb_pool_v3_LiquidityPoolV3' == $temp_0'$bb_pool_v3_LiquidityPoolV3';

    // trace_local[$t112]($t54) at ./sources/v3/pool_v3.move:1366:16+34
    assume {:print "$track_local(117,12,30):", $t54} $t54 == $t54;

    // $t140 := get_field<0xbb::pool_v3::LiquidityPoolV3>.rewarder_manager($t59) at ./sources/v3/pool_v3.move:1368:47+26
    assume {:print "$at(2,51834,51860)"} true;
    $t140 := $Dereference($t59)->$rewarder_manager;

    // $t141 := rewarder::get_emissions_rate_list($t140) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1368:13+61
    call $t141 := $bb_rewarder_get_emissions_rate_list($t140);
    if ($abort_flag) {
        assume {:print "$at(2,51800,51861)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[emissions_per_liquidity_global]($t141) at ./sources/v3/pool_v3.move:1368:13+61
    assume {:print "$track_local(117,12,31):", $t141} $t141 == $t141;

    // $t142 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick_info($t59) at ./sources/v3/pool_v3.move:1370:65+19
    assume {:print "$at(2,51970,51989)"} true;
    $t142 := $Dereference($t59)->$tick_info;

    // $t143 := pool_v3::get_tick($t142, $t54) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1370:56+35
    call $t143 := $bb_pool_v3_get_tick($t142, $t54);
    if ($abort_flag) {
        assume {:print "$at(2,51961,51996)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[$t163]($t143) at ./sources/v3/pool_v3.move:1370:56+35
    assume {:print "$track_local(117,12,32):", $t143} $t143 == $t143;

    // $t144 := tick::get_emissions_per_liquidity_outside($t143) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1370:13+79
    call $t144 := $bb_tick_get_emissions_per_liquidity_outside($t143);
    if ($abort_flag) {
        assume {:print "$at(2,51918,51997)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[emissions_per_liquidity_tick]($t144) at ./sources/v3/pool_v3.move:1370:13+79
    assume {:print "$track_local(117,12,33):", $t144} $t144 == $t144;

    // $t145 := vector::length<u64>($t141) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1371:12+39
    assume {:print "$at(2,52010,52049)"} true;
    call $t145 := $1_vector_length'u64'($t141);
    if ($abort_flag) {
        assume {:print "$at(2,52010,52049)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t146 := vector::length<u128>($t144) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1371:55+37
    call $t146 := $1_vector_length'u128'($t144);
    if ($abort_flag) {
        assume {:print "$at(2,52053,52090)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t147 := !=($t145, $t146) at ./sources/v3/pool_v3.move:1371:12+80
    $t147 := !$IsEqual'u64'($t145, $t146);

    // if ($t147) goto L15 else goto L14 at ./sources/v3/pool_v3.move:1371:9+270
    if ($t147) { goto L15; } else { goto L14; }

    // label L15 at ./sources/v3/pool_v3.move:1373:30+23
    assume {:print "$at(2,52165,52188)"} true;
L15:

    // $t148 := borrow_field<0xbb::pool_v3::LiquidityPoolV3>.tick_info($t59) at ./sources/v3/pool_v3.move:1373:30+23
    assume {:print "$at(2,52165,52188)"} true;
    $t148 := $ChildMutation($t59, 19, $Dereference($t59)->$tick_info);

    // $t149 := pool_v3::get_tick_mut($t148, $t54) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1373:17+43
    call $t149,$t148 := $bb_pool_v3_get_tick_mut($t148, $t54);
    if ($abort_flag) {
        assume {:print "$at(2,52152,52195)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t150 := vector::length<u64>($t141) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1374:17+39
    assume {:print "$at(2,52213,52252)"} true;
    call $t150 := $1_vector_length'u64'($t141);
    if ($abort_flag) {
        assume {:print "$at(2,52213,52252)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // tick::padding_emissions_list($t149, $t150) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1372:13+160
    assume {:print "$at(2,52106,52266)"} true;
    call $t149 := $bb_tick_padding_emissions_list($t149, $t150);
    if ($abort_flag) {
        assume {:print "$at(2,52106,52266)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // write_back[Reference($t148)[]]($t149) at ./sources/v3/pool_v3.move:1372:13+160
    $t148 := $UpdateMutation($t148, UpdateTable($Dereference($t148), ReadVec($t149->p, LenVec($t148->p)), $Dereference($t149)));

    // write_back[Reference($t59).tick_info (0x1::smart_table::SmartTable<0xbb::i32::I32, 0xbb::tick::TickInfo>)]($t148) at ./sources/v3/pool_v3.move:1372:13+160
    $t59 := $UpdateMutation($t59, $Update'$bb_pool_v3_LiquidityPoolV3'_tick_info($Dereference($t59), $Dereference($t148)));

    // label L16 at ./sources/v3/pool_v3.move:572:22+15
    assume {:print "$at(2,20162,20177)"} true;
L16:

    // $t151 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick_info($t59) at ./sources/v3/pool_v3.move:572:22+15
    assume {:print "$at(2,20162,20177)"} true;
    $t151 := $Dereference($t59)->$tick_info;

    // $t152 := pool_v3::get_tick($t151, $t53) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:572:13+37
    call $t152 := $bb_pool_v3_get_tick($t151, $t53);
    if ($abort_flag) {
        assume {:print "$at(2,20153,20190)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t153 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick_info($t59) at ./sources/v3/pool_v3.move:573:22+15
    assume {:print "$at(2,20213,20228)"} true;
    $t153 := $Dereference($t59)->$tick_info;

    // $t154 := pool_v3::get_tick($t153, $t54) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:573:13+37
    call $t154 := $bb_pool_v3_get_tick($t153, $t54);
    if ($abort_flag) {
        assume {:print "$at(2,20204,20241)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t155 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick($t59) at ./sources/v3/pool_v3.move:576:13+9
    assume {:print "$at(2,20303,20312)"} true;
    $t155 := $Dereference($t59)->$tick;

    // $t156 := tick::get_emissions_per_liquidity_incentive_inside($t152, $t154, $t53, $t54, $t155, $t106) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:571:55+277
    assume {:print "$at(2,20089,20366)"} true;
    call $t156 := $bb_tick_get_emissions_per_liquidity_incentive_inside($t152, $t154, $t53, $t54, $t155, $t106);
    if ($abort_flag) {
        assume {:print "$at(2,20089,20366)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[$t109]($t156) at ./sources/v3/pool_v3.move:571:55+277
    assume {:print "$track_local(117,12,34):", $t156} $t156 == $t156;

    // $t157 := borrow_field<0xbb::pool_v3::LiquidityPoolV3>.rewarder_manager($t59) at ./sources/v3/pool_v3.move:580:13+26
    assume {:print "$at(2,20432,20458)"} true;
    $t157 := $ChildMutation($t59, 25, $Dereference($t59)->$rewarder_manager);

    // $t158 := position_v3::get_position_rewards($t0, $t1) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:581:13+49
    assume {:print "$at(2,20472,20521)"} true;
    call $t158 := $bb_position_v3_get_position_rewards($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,20472,20521)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t159 := position_v3::get_liquidity($t1) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:583:13+36
    assume {:print "$at(2,20588,20624)"} true;
    call $t159 := $bb_position_v3_get_liquidity($t1);
    if ($abort_flag) {
        assume {:print "$at(2,20588,20624)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[$t50]($t159) at ./sources/v3/pool_v3.move:1386:13+16
    assume {:print "$at(2,52650,52666)"} true;
    assume {:print "$track_local(117,12,35):", $t159} $t159 == $t159;

    // $t160 := rewarder::refresh_position_rewarder($t157, $t158, $t156, $t159) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:1385:30+190
    assume {:print "$at(2,52601,52791)"} true;
    call $t160,$t157 := $bb_rewarder_refresh_position_rewarder($t157, $t158, $t156, $t159);
    if ($abort_flag) {
        assume {:print "$at(2,52601,52791)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // write_back[Reference($t59).rewarder_manager (0xbb::rewarder::RewarderManager)]($t157) at ./sources/v3/pool_v3.move:1385:30+190
    $t59 := $UpdateMutation($t59, $Update'$bb_pool_v3_LiquidityPoolV3'_rewarder_manager($Dereference($t59), $Dereference($t157)));

    // trace_local[$t189]($t160) at ./sources/v3/pool_v3.move:1385:30+190
    assume {:print "$track_local(117,12,36):", $t160} $t160 == $t160;

    // position_v3::update_rewards($t1, $t160) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:585:9+50
    assume {:print "$at(2,20644,20694)"} true;
    call $bb_position_v3_update_rewards($t1, $t160);
    if ($abort_flag) {
        assume {:print "$at(2,20644,20694)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t161 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick_info($t59) at ./sources/v3/pool_v3.move:588:22+15
    assume {:print "$at(2,20838,20853)"} true;
    $t161 := $Dereference($t59)->$tick_info;

    // $t162 := pool_v3::get_tick($t161, $t53) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:588:13+37
    call $t162 := $bb_pool_v3_get_tick($t161, $t53);
    if ($abort_flag) {
        assume {:print "$at(2,20829,20866)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t163 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick_info($t59) at ./sources/v3/pool_v3.move:589:22+15
    assume {:print "$at(2,20889,20904)"} true;
    $t163 := $Dereference($t59)->$tick_info;

    // $t164 := pool_v3::get_tick($t163, $t54) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:589:13+37
    call $t164 := $bb_pool_v3_get_tick($t163, $t54);
    if ($abort_flag) {
        assume {:print "$at(2,20880,20917)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t165 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick($t59) at ./sources/v3/pool_v3.move:592:13+9
    assume {:print "$at(2,20979,20988)"} true;
    $t165 := $Dereference($t59)->$tick;

    // $t166 := get_field<0xbb::pool_v3::LiquidityPoolV3>.fee_growth_global_a($t59) at ./sources/v3/pool_v3.move:593:13+24
    assume {:print "$at(2,21002,21026)"} true;
    $t166 := $Dereference($t59)->$fee_growth_global_a;

    // $t167 := get_field<0xbb::pool_v3::LiquidityPoolV3>.fee_growth_global_b($t59) at ./sources/v3/pool_v3.move:594:13+24
    assume {:print "$at(2,21040,21064)"} true;
    $t167 := $Dereference($t59)->$fee_growth_global_b;

    // ($t168, $t169) := tick::get_fee_growth_inside($t162, $t164, $t53, $t54, $t165, $t166, $t167) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:587:58+286
    assume {:print "$at(2,20788,21074)"} true;
    call $t168,$t169 := $bb_tick_get_fee_growth_inside($t162, $t164, $t53, $t54, $t165, $t166, $t167);
    if ($abort_flag) {
        assume {:print "$at(2,20788,21074)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[$t103]($t169) at ./sources/v3/pool_v3.move:587:58+286
    assume {:print "$track_local(117,12,38):", $t169} $t169 == $t169;

    // trace_local[$t50]($t168) at ./sources/v3/pool_v3.move:587:58+286
    assume {:print "$track_local(117,12,35):", $t168} $t168 == $t168;

    // ($t170, $t171, $t172) := position_v3::add_liquidity($t1, $t2, $t168, $t169) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:596:70+153
    assume {:print "$at(2,21145,21298)"} true;
    call $t170,$t171,$t172 := $bb_position_v3_add_liquidity($t1, $t2, $t168, $t169);
    if ($abort_flag) {
        assume {:print "$at(2,21145,21298)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[$t9]($t172) at ./sources/v3/pool_v3.move:596:70+153
    assume {:print "$track_local(117,12,39):", $t172} $t172 == $t172;

    // trace_local[$t103]($t171) at ./sources/v3/pool_v3.move:596:70+153
    assume {:print "$track_local(117,12,38):", $t171} $t171 == $t171;

    // trace_local[$t50]($t170) at ./sources/v3/pool_v3.move:596:70+153
    assume {:print "$track_local(117,12,35):", $t170} $t170 == $t170;

    // ($t173, $t174, $t175, $t176, $t177) := pool_v3::merge_into_pool($t59, $t53, $t54, $t2, $t3, $t4) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:604:13+74
    assume {:print "$at(2,21402,21476)"} true;
    call $t173,$t174,$t175,$t176,$t177,$t59 := $bb_pool_v3_merge_into_pool($t59, $t53, $t54, $t2, $t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(2,21402,21476)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t178 := get_field<0xbb::pool_v3::LiquidityPoolV3>.lp_token_refs($t59) at ./sources/v3/pool_v3.move:606:13+19
    assume {:print "$at(2,21511,21530)"} true;
    $t178 := $Dereference($t59)->$lp_token_refs;

    // $t179 := pool_v3::liquidity_pool_address($t55, $t56, $t57) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:607:49+50
    assume {:print "$at(2,21580,21630)"} true;
    call $t179 := $bb_pool_v3_liquidity_pool_address($t55, $t56, $t57);
    if ($abort_flag) {
        assume {:print "$at(2,21580,21630)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t180 := object::address_to_object<0x1::fungible_asset::Metadata>($t179) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:607:13+87
    call $t180 := $1_object_address_to_object'$1_fungible_asset_Metadata'($t179);
    if ($abort_flag) {
        assume {:print "$at(2,21544,21631)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[token_a]($t180) at ./sources/v3/pool_v3.move:608:13+15
    assume {:print "$at(2,21645,21660)"} true;
    assume {:print "$track_local(117,12,12):", $t180} $t180 == $t180;

    // trace_local[$t227]($t178) at ./sources/v3/pool_v3.move:608:13+15
    assume {:print "$track_local(117,12,40):", $t178} $t178 == $t178;

    // trace_local[fa_b]($t177) at ./sources/v3/pool_v3.move:608:13+15
    assume {:print "$track_local(117,12,41):", $t177} $t177 == $t177;

    // trace_local[$t226]($t176) at ./sources/v3/pool_v3.move:608:13+15
    assume {:print "$track_local(117,12,42):", $t176} $t176 == $t176;

    // trace_local[$t45]($t175) at ./sources/v3/pool_v3.move:608:13+15
    assume {:print "$track_local(117,12,43):", $t175} $t175 == $t175;

    // trace_local[$t43]($t174) at ./sources/v3/pool_v3.move:608:13+15
    assume {:print "$track_local(117,12,44):", $t174} $t174 == $t174;

    // $t181 := object::object_address<0xbb::position_v3::Info>($t1) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:609:13+33
    assume {:print "$at(2,21674,21707)"} true;
    call $t181 := $1_object_object_address'$bb_position_v3_Info'($t1);
    if ($abort_flag) {
        assume {:print "$at(2,21674,21707)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // trace_local[$t11]($t181) at ./sources/v3/pool_v3.move:605:9+231
    assume {:print "$at(2,21486,21717)"} true;
    assume {:print "$track_local(117,12,46):", $t181} $t181 == $t181;

    // trace_local[$t105]($t173) at ./sources/v3/pool_v3.move:605:9+231
    assume {:print "$track_local(117,12,45):", $t173} $t173 == $t173;

    // lp::mint_to($t178, $t180, $t173, $t181) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:605:9+231
    call $bb_lp_mint_to($t178, $t180, $t173, $t181);
    if ($abort_flag) {
        assume {:print "$at(2,21486,21717)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t182 := pool_v3::liquidity_pool_address($t55, $t56, $t57) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:611:28+50
    assume {:print "$at(2,21746,21796)"} true;
    call $t182 := $bb_pool_v3_liquidity_pool_address($t55, $t56, $t57);
    if ($abort_flag) {
        assume {:print "$at(2,21746,21796)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t183 := read_ref($t59) at ./sources/v3/pool_v3.move:611:80+4
    $t183 := $Dereference($t59);

    // assert Or(option::$is_none<u64>(select smart_vector::SmartVector.bucket_size(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($t59)))), And(option::$is_some<u64>(select smart_vector::SmartVector.bucket_size(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($t59)))), Neq<u64>(option::$borrow<u64>(select smart_vector::SmartVector.bucket_size(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($t59)))), 0))) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.spec.move:5:9+121
    // data invariant at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.spec.move:5:9+121
    assume {:print "$at(80,118,239)"} true;
    assert {:msg "assert_failed(80,118,239): data invariant does not hold"}
      ($1_option_$is_none'u64'($Dereference($t59)->$position_blacklist->$addresses->$bucket_size) || ($1_option_$is_some'u64'($Dereference($t59)->$position_blacklist->$addresses->$bucket_size) && !$IsEqual'u64'($1_option_$borrow'u64'($Dereference($t59)->$position_blacklist->$addresses->$bucket_size), 0)));

    // assert Or(option::$is_none<u64>(select smart_vector::SmartVector.inline_capacity(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($t59)))), Le(Len<address>(select smart_vector::SmartVector.inline_vec(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($t59)))), option::$borrow<u64>(select smart_vector::SmartVector.inline_capacity(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($t59)))))) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.spec.move:8:9+111
    // data invariant at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.spec.move:8:9+111
    assume {:print "$at(80,319,430)"} true;
    assert {:msg "assert_failed(80,319,430): data invariant does not hold"}
      ($1_option_$is_none'u64'($Dereference($t59)->$position_blacklist->$addresses->$inline_capacity) || (LenVec($Dereference($t59)->$position_blacklist->$addresses->$inline_vec) <= $1_option_$borrow'u64'($Dereference($t59)->$position_blacklist->$addresses->$inline_capacity)));

    // assert Or(And(option::$is_none<u64>(select smart_vector::SmartVector.inline_capacity(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($t59)))), option::$is_none<u64>(select smart_vector::SmartVector.bucket_size(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($t59))))), And(option::$is_some<u64>(select smart_vector::SmartVector.inline_capacity(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($t59)))), option::$is_some<u64>(select smart_vector::SmartVector.bucket_size(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($t59)))))) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.spec.move:11:9+159
    // data invariant at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/smart_vector.spec.move:11:9+159
    assume {:print "$at(80,538,697)"} true;
    assert {:msg "assert_failed(80,538,697): data invariant does not hold"}
      (($1_option_$is_none'u64'($Dereference($t59)->$position_blacklist->$addresses->$inline_capacity) && $1_option_$is_none'u64'($Dereference($t59)->$position_blacklist->$addresses->$bucket_size)) || ($1_option_$is_some'u64'($Dereference($t59)->$position_blacklist->$addresses->$inline_capacity) && $1_option_$is_some'u64'($Dereference($t59)->$position_blacklist->$addresses->$bucket_size)));

    // assert Le(Len<0x1::big_vector::BigVector<address>>(select option::Option.vec(select smart_vector::SmartVector.big_vec(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($t59))))), 1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(39,530,554)"} true;
    assert {:msg "assert_failed(39,530,554): data invariant does not hold"}
      (LenVec($Dereference($t59)->$position_blacklist->$addresses->$big_vec->$vec) <= 1);

    // assert forall $elem: 0x1::big_vector::BigVector<address>: select option::Option.vec(select smart_vector::SmartVector.big_vec(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($t59)))): And(And(And(And(And(And(And(And(And(And(And(Neq<u64>(select big_vector::BigVector.bucket_size($elem), 0), Implies(Eq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 0), Eq<u64>(select big_vector::BigVector.end_index($elem), 0))), Implies(Eq<u64>(select big_vector::BigVector.end_index($elem), 0), Eq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 0))), Le(select big_vector::BigVector.end_index($elem), Mul(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), select big_vector::BigVector.bucket_size($elem)))), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 0), forall i: num: Range(0, Sub(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 1)): Eq<num>(Len<address>(table_with_length::spec_get<u64, vector<address>>(select big_vector::BigVector.buckets($elem), i)), select big_vector::BigVector.bucket_size($elem)))), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 0), Le(Len<address>(table_with_length::spec_get<u64, vector<address>>(select big_vector::BigVector.buckets($elem), Sub(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 1))), select big_vector::BigVector.bucket_size($elem)))), forall i: num: Range(0, big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem))): big_vector::spec_table_contains<u64, vector<address>>(select big_vector::BigVector.buckets($elem), i)), Eq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), Div(Sub(Add(select big_vector::BigVector.end_index($elem), select big_vector::BigVector.bucket_size($elem)), 1), select big_vector::BigVector.bucket_size($elem)))), Or(And(Eq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 0), Eq<u64>(select big_vector::BigVector.end_index($elem), 0)), And(Neq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 0), Eq<num>(Add(Mul(Sub(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 1), select big_vector::BigVector.bucket_size($elem)), Len<address>(table_with_length::spec_get<u64, vector<address>>(select big_vector::BigVector.buckets($elem), Sub(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 1)))), select big_vector::BigVector.end_index($elem))))), forall i: u64: TypeDomain<u64>() where Ge(i, big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem))): Not(big_vector::spec_table_contains<u64, vector<address>>(select big_vector::BigVector.buckets($elem), i))), forall i: u64: TypeDomain<u64>() where Lt(i, big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem))): big_vector::spec_table_contains<u64, vector<address>>(select big_vector::BigVector.buckets($elem), i)), Or(Eq<u64>(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 0), Gt(Len<address>(table_with_length::spec_get<u64, vector<address>>(select big_vector::BigVector.buckets($elem), Sub(big_vector::spec_table_len<u64, vector<address>>(select big_vector::BigVector.buckets($elem)), 1))), 0))) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.spec.move:7:9+27
    // data invariant at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/sources/data_structures/big_vector.spec.move:7:9+27
    assume {:print "$at(76,132,159)"} true;
    assert {:msg "assert_failed(76,132,159): data invariant does not hold"}
      (var $range_0 := $Dereference($t59)->$position_blacklist->$addresses->$big_vec->$vec; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((((((((((((!$IsEqual'u64'($elem->$bucket_size, 0) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), 0) ==> $IsEqual'u64'($elem->$end_index, 0))) && ($IsEqual'u64'($elem->$end_index, 0) ==> $IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), 0))) && ($elem->$end_index <= ($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets) * $elem->$bucket_size))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), 0) || (var $range_2 := $Range(0, ($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets) - 1)); (forall $i_3: int :: $InRange($range_2, $i_3) ==> (var i := $i_3;
    ($IsEqual'num'(LenVec($1_table_with_length_spec_get'u64_vec'address''($elem->$buckets, i)), $elem->$bucket_size))))))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), 0) || (LenVec($1_table_with_length_spec_get'u64_vec'address''($elem->$buckets, ($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets) - 1))) <= $elem->$bucket_size))) && (var $range_4 := $Range(0, $1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets)); (forall $i_5: int :: $InRange($range_4, $i_5) ==> (var i := $i_5;
    ($1_big_vector_spec_table_contains'u64_vec'address''($elem->$buckets, i)))))) && $IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), ((($elem->$end_index + $elem->$bucket_size) - 1) div $elem->$bucket_size))) && (($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), 0) && $IsEqual'u64'($elem->$end_index, 0)) || (!$IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), 0) && $IsEqual'num'(((($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets) - 1) * $elem->$bucket_size) + LenVec($1_table_with_length_spec_get'u64_vec'address''($elem->$buckets, ($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets) - 1)))), $elem->$end_index)))) && (forall i: int :: $IsValid'u64'(i) ==> ((i >= $1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets)))  ==> (!$1_big_vector_spec_table_contains'u64_vec'address''($elem->$buckets, i)))) && (forall i: int :: $IsValid'u64'(i) ==> ((i < $1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets)))  ==> ($1_big_vector_spec_table_contains'u64_vec'address''($elem->$buckets, i)))) && ($IsEqual'u64'($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets), 0) || (LenVec($1_table_with_length_spec_get'u64_vec'address''($elem->$buckets, ($1_big_vector_spec_table_len'u64_vec'address''($elem->$buckets) - 1))) > 0)))))));

    // assert Le(Len<u64>(select option::Option.vec(select smart_vector::SmartVector.inline_capacity(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($t59))))), 1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(39,530,554)"} true;
    assert {:msg "assert_failed(39,530,554): data invariant does not hold"}
      (LenVec($Dereference($t59)->$position_blacklist->$addresses->$inline_capacity->$vec) <= 1);

    // assert Le(Len<u64>(select option::Option.vec(select smart_vector::SmartVector.bucket_size(select position_blacklist::PositionBlackList.addresses(select pool_v3::LiquidityPoolV3.position_blacklist($t59))))), 1) at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /Users/icarus/.move/https___github_com_aptos-labs_aptos-framework_git_mainnet/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assert {:msg "assert_failed(39,530,554): data invariant does not hold"}
      (LenVec($Dereference($t59)->$position_blacklist->$addresses->$bucket_size->$vec) <= 1);

    // write_back[0xbb::pool_v3::LiquidityPoolV3@]($t59) at ./sources/v3/pool_v3.move:611:80+4
    assume {:print "$at(2,21798,21802)"} true;
    $bb_pool_v3_LiquidityPoolV3_$memory := $ResourceUpdate($bb_pool_v3_LiquidityPoolV3_$memory, $GlobalLocationAddress($t59),
        $Dereference($t59));

    // trace_local[$t30]($t183) at ./sources/v3/pool_v3.move:611:80+4
    assume {:print "$track_local(117,12,14):", $t183} $t183 == $t183;

    // $t184 := get_field<0xbb::pool_v3::LiquidityPoolV3>.sqrt_price($t183) at ./sources/v3/pool_v3.move:1898:25+15
    assume {:print "$at(2,74469,74484)"} true;
    $t184 := $t183->$sqrt_price;

    // $t185 := get_field<0xbb::pool_v3::LiquidityPoolV3>.liquidity($t183) at ./sources/v3/pool_v3.move:1899:24+14
    assume {:print "$at(2,74509,74523)"} true;
    $t185 := $t183->$liquidity;

    // $t186 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick($t183) at ./sources/v3/pool_v3.move:1900:19+9
    assume {:print "$at(2,74543,74552)"} true;
    $t186 := $t183->$tick;

    // $t187 := get_field<0xbb::pool_v3::LiquidityPoolV3>.observation_index($t183) at ./sources/v3/pool_v3.move:1902:32+22
    assume {:print "$at(2,74658,74680)"} true;
    $t187 := $t183->$observation_index;

    // $t188 := get_field<0xbb::pool_v3::LiquidityPoolV3>.observation_cardinality($t183) at ./sources/v3/pool_v3.move:1904:38+28
    assume {:print "$at(2,74799,74827)"} true;
    $t188 := $t183->$observation_cardinality;

    // $t189 := get_field<0xbb::pool_v3::LiquidityPoolV3>.observation_cardinality_next($t183) at ./sources/v3/pool_v3.move:1906:43+33
    assume {:print "$at(2,74968,75001)"} true;
    $t189 := $t183->$observation_cardinality_next;

    // $t190 := get_field<0xbb::pool_v3::LiquidityPoolV3>.fee_rate($t183) at ./sources/v3/pool_v3.move:1907:23+13
    assume {:print "$at(2,75025,75038)"} true;
    $t190 := $t183->$fee_rate;

    // $t191 := 1000000 at ./sources/v3/pool_v3.move:1908:36+20
    assume {:print "$at(2,75075,75095)"} true;
    $t191 := 1000000;
    assume $IsValid'u64'($t191);

    // $t192 := get_field<0xbb::pool_v3::LiquidityPoolV3>.fee_growth_global_a($t183) at ./sources/v3/pool_v3.move:1909:34+24
    assume {:print "$at(2,75130,75154)"} true;
    $t192 := $t183->$fee_growth_global_a;

    // $t193 := get_field<0xbb::pool_v3::LiquidityPoolV3>.fee_growth_global_b($t183) at ./sources/v3/pool_v3.move:1910:34+24
    assume {:print "$at(2,75189,75213)"} true;
    $t193 := $t183->$fee_growth_global_b;

    // $t194 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick_spacing($t183) at ./sources/v3/pool_v3.move:1911:27+17
    assume {:print "$at(2,75241,75258)"} true;
    $t194 := $t183->$tick_spacing;

    // $t195 := pack 0xbb::pool_v3::PoolSnapshot($t182, $t184, $t185, $t186, $t187, $t188, $t189, $t190, $t191, $t192, $t193, $t194) at ./sources/v3/pool_v3.move:1896:21+910
    assume {:print "$at(2,74410,75320)"} true;
    $t195 := $bb_pool_v3_PoolSnapshot($t182, $t184, $t185, $t186, $t187, $t188, $t189, $t190, $t191, $t192, $t193, $t194);

    // opaque begin: event::emit<0xbb::pool_v3::PoolSnapshot>($t195) at ./sources/v3/pool_v3.move:1896:9+923

    // opaque end: event::emit<0xbb::pool_v3::PoolSnapshot>($t195) at ./sources/v3/pool_v3.move:1896:9+923

    // $t196 := pool_v3::liquidity_pool_address($t55, $t56, $t57) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:613:22+50
    assume {:print "$at(2,21865,21915)"} true;
    call $t196 := $bb_pool_v3_liquidity_pool_address($t55, $t56, $t57);
    if ($abort_flag) {
        assume {:print "$at(2,21865,21915)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t197 := object::object_address<0xbb::position_v3::Info>($t1) on_abort goto L21 with $t51 at ./sources/v3/pool_v3.move:614:24+33
    assume {:print "$at(2,21940,21973)"} true;
    call $t197 := $1_object_object_address'$bb_position_v3_Info'($t1);
    if ($abort_flag) {
        assume {:print "$at(2,21940,21973)"} true;
        $t51 := $abort_code;
        assume {:print "$track_abort(117,12):", $t51} $t51 == $t51;
        goto L21;
    }

    // $t198 := pack 0xbb::pool_v3::AddLiquidityEvent($t196, $t197, $t55, $t56, $t57, $t172, $t171, $t170, $t174, $t175) at ./sources/v3/pool_v3.move:612:21+357
    assume {:print "$at(2,21825,22182)"} true;
    $t198 := $bb_pool_v3_AddLiquidityEvent($t196, $t197, $t55, $t56, $t57, $t172, $t171, $t170, $t174, $t175);

    // opaque begin: event::emit<0xbb::pool_v3::AddLiquidityEvent>($t198) at ./sources/v3/pool_v3.move:612:9+370

    // opaque end: event::emit<0xbb::pool_v3::AddLiquidityEvent>($t198) at ./sources/v3/pool_v3.move:612:9+370

    // trace_return[0]($t174) at ./sources/v3/pool_v3.move:522:97+4209
    assume {:print "$at(2,18022,22231)"} true;
    assume {:print "$track_return(117,12,0):", $t174} $t174 == $t174;

    // trace_return[1]($t175) at ./sources/v3/pool_v3.move:522:97+4209
    assume {:print "$track_return(117,12,1):", $t175} $t175 == $t175;

    // trace_return[2]($t176) at ./sources/v3/pool_v3.move:522:97+4209
    assume {:print "$track_return(117,12,2):", $t176} $t176 == $t176;

    // trace_return[3]($t177) at ./sources/v3/pool_v3.move:522:97+4209
    assume {:print "$track_return(117,12,3):", $t177} $t177 == $t177;

    // goto L20 at ./sources/v3/pool_v3.move:522:97+4209
    goto L20;

    // label L14 at ./sources/v3/pool_v3.move:1371:9+270
    assume {:print "$at(2,52007,52277)"} true;
L14:

    // drop($t59) at ./sources/v3/pool_v3.move:1371:9+270
    assume {:print "$at(2,52007,52277)"} true;

    // goto L16 at ./sources/v3/pool_v3.move:1371:9+270
    goto L16;

    // label L12 at ./sources/v3/pool_v3.move:1371:9+270
L12:

    // drop($t59) at ./sources/v3/pool_v3.move:1371:9+270
    assume {:print "$at(2,52007,52277)"} true;

    // goto L17 at ./sources/v3/pool_v3.move:1371:9+270
    goto L17;

    // label L4 at ./sources/v3/pool_v3.move:1864:13+1
    assume {:print "$at(2,72950,72951)"} true;
L4:

    // $t199 := 0 at ./sources/v3/pool_v3.move:1864:13+1
    assume {:print "$at(2,72950,72951)"} true;
    $t199 := 0;
    assume $IsValid'u128'($t199);

    // $t20 := $t199 at ./sources/v3/pool_v3.move:1864:13+1
    $t20 := $t199;

    // trace_local[$t48]($t199) at ./sources/v3/pool_v3.move:1864:13+1
    assume {:print "$track_local(117,12,20):", $t199} $t199 == $t199;

    // goto L18 at ./sources/v3/pool_v3.move:1864:13+1
    goto L18;

    // label L2 at ./sources/v3/pool_v3.move:1858:13+1
    assume {:print "$at(2,72762,72763)"} true;
L2:

    // $t200 := 0 at ./sources/v3/pool_v3.move:1858:13+1
    assume {:print "$at(2,72762,72763)"} true;
    $t200 := 0;
    assume $IsValid'u128'($t200);

    // $t19 := $t200 at ./sources/v3/pool_v3.move:1858:13+1
    $t19 := $t200;

    // trace_local[$t35]($t200) at ./sources/v3/pool_v3.move:1858:13+1
    assume {:print "$track_local(117,12,19):", $t200} $t200 == $t200;

    // goto L19 at ./sources/v3/pool_v3.move:1858:13+1
    goto L19;

    // label L0 at ./sources/v3/pool_v3.move:523:9+6
    assume {:print "$at(2,18032,18038)"} true;
L0:

    // $t201 := 100008 at ./sources/v3/pool_v3.move:523:71+19
    assume {:print "$at(2,18094,18113)"} true;
    $t201 := 100008;
    assume $IsValid'u64'($t201);

    // trace_abort($t201) at ./sources/v3/pool_v3.move:523:9+6
    assume {:print "$at(2,18032,18038)"} true;
    assume {:print "$track_abort(117,12):", $t201} $t201 == $t201;

    // $t51 := move($t201) at ./sources/v3/pool_v3.move:523:9+6
    $t51 := $t201;

    // goto L21 at ./sources/v3/pool_v3.move:523:9+6
    goto L21;

    // label L20 at ./sources/v3/pool_v3.move:625:5+1
    assume {:print "$at(2,22230,22231)"} true;
L20:

    // assume Identical($t202, global<0xbb::pool_v3::LiquidityPoolV3>($t48)) at ./sources/v3/pool_v3.move:633:5+56
    assume {:print "$at(2,22626,22682)"} true;
    assume ($t202 == $ResourceValue($bb_pool_v3_LiquidityPoolV3_$memory, $t48));

    // assert Ge(fungible_asset::$balance<0x1::fungible_asset::FungibleStore>(select pool_v3::LiquidityPoolV3.token_a_liquidity<0xbb::pool_v3::LiquidityPoolV3>($t202)), fungible_asset::$balance<0x1::fungible_asset::FungibleStore>(select pool_v3::LiquidityPoolV3.token_a_liquidity<0xbb::pool_v3::LiquidityPoolV3>($t49))) at ./sources/v3/pool_v3.move:634:5+112
    assume {:print "$at(2,22687,22799)"} true;
    assert {:msg "assert_failed(2,22687,22799): post-condition does not hold"}
      ($1_fungible_asset_$balance'$1_fungible_asset_FungibleStore'($1_fungible_asset_ConcurrentFungibleBalance_$memory, $1_fungible_asset_FungibleStore_$memory, $t202->$token_a_liquidity) >= $1_fungible_asset_$balance'$1_fungible_asset_FungibleStore'($1_fungible_asset_ConcurrentFungibleBalance_$memory, $1_fungible_asset_FungibleStore_$memory, $t49->$token_a_liquidity));

    // assert Ge(fungible_asset::$balance<0x1::fungible_asset::FungibleStore>(select pool_v3::LiquidityPoolV3.token_b_liquidity<0xbb::pool_v3::LiquidityPoolV3>($t202)), fungible_asset::$balance<0x1::fungible_asset::FungibleStore>(select pool_v3::LiquidityPoolV3.token_b_liquidity<0xbb::pool_v3::LiquidityPoolV3>($t49))) at ./sources/v3/pool_v3.move:635:5+112
    assume {:print "$at(2,22804,22916)"} true;
    assert {:msg "assert_failed(2,22804,22916): post-condition does not hold"}
      ($1_fungible_asset_$balance'$1_fungible_asset_FungibleStore'($1_fungible_asset_ConcurrentFungibleBalance_$memory, $1_fungible_asset_FungibleStore_$memory, $t202->$token_b_liquidity) >= $1_fungible_asset_$balance'$1_fungible_asset_FungibleStore'($1_fungible_asset_ConcurrentFungibleBalance_$memory, $1_fungible_asset_FungibleStore_$memory, $t49->$token_b_liquidity));

    // assert Ge(select pool_v3::LiquidityPoolV3.liquidity<0xbb::pool_v3::LiquidityPoolV3>($t202), select pool_v3::LiquidityPoolV3.liquidity<0xbb::pool_v3::LiquidityPoolV3>($t49)) at ./sources/v3/pool_v3.move:636:5+46
    assume {:print "$at(2,22921,22967)"} true;
    assert {:msg "assert_failed(2,22921,22967): post-condition does not hold"}
      ($t202->$liquidity >= $t49->$liquidity);

    // return ($t174, $t175, $t176, $t177) at ./sources/v3/pool_v3.move:636:5+46
    $ret0 := $t174;
    $ret1 := $t175;
    $ret2 := $t176;
    $ret3 := $t177;
    return;

    // label L21 at ./sources/v3/pool_v3.move:625:5+1
    assume {:print "$at(2,22230,22231)"} true;
L21:

    // abort($t51) at ./sources/v3/pool_v3.move:625:5+1
    assume {:print "$at(2,22230,22231)"} true;
    $abort_code := $t51;
    $abort_flag := true;
    return;

}

// fun pool_v3::get_tick [baseline] at ./sources/v3/pool_v3.move:1952:5+150
procedure {:inline 1} $bb_pool_v3_get_tick(_$t0: Table int ($bb_tick_TickInfo), _$t1: $bb_i32_I32) returns ($ret0: $bb_tick_TickInfo)
{
    // declare local variables
    var $t2: $bb_tick_TickInfo;
    var $t3: int;
    var $t0: Table int ($bb_tick_TickInfo);
    var $t1: $bb_i32_I32;
    var $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'': Table int ($bb_tick_TickInfo);
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'$bb_tick_TickInfo': $bb_tick_TickInfo;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[tick_infos]($t0) at ./sources/v3/pool_v3.move:1952:5+1
    assume {:print "$at(2,76595,76596)"} true;
    assume {:print "$track_local(117,14,0):", $t0} $t0 == $t0;

    // trace_local[tick]($t1) at ./sources/v3/pool_v3.move:1952:5+1
    assume {:print "$track_local(117,14,1):", $t1} $t1 == $t1;

    // $t2 := smart_table::borrow<0xbb::i32::I32, 0xbb::tick::TickInfo>($t0, $t1) on_abort goto L2 with $t3 at ./sources/v3/pool_v3.move:1956:10+37
    assume {:print "$at(2,76702,76739)"} true;
    call $t2 := $1_smart_table_borrow'$bb_i32_I32_$bb_tick_TickInfo'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,76702,76739)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(117,14):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/v3/pool_v3.move:1956:9+38
    assume {:print "$track_return(117,14,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/v3/pool_v3.move:1957:5+1
    assume {:print "$at(2,76744,76745)"} true;
L1:

    // return $t2 at ./sources/v3/pool_v3.move:1957:5+1
    assume {:print "$at(2,76744,76745)"} true;
    $ret0 := $t2;
    return;

    // label L2 at ./sources/v3/pool_v3.move:1957:5+1
L2:

    // abort($t3) at ./sources/v3/pool_v3.move:1957:5+1
    assume {:print "$at(2,76744,76745)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun pool_v3::check_protocol_pause [baseline] at ./sources/v3/pool_v3.move:352:5+177
procedure {:inline 1} $bb_pool_v3_check_protocol_pause() returns ()
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: $bb_pool_v3_LiquidityPoolConfigsV3;
    var $t3: bool;
    var $t4: int;

    // bytecode translation starts here
    // $t0 := package_manager::get_resource_address() on_abort goto L3 with $t1 at ./sources/v3/pool_v3.move:1921:47+22
    assume {:print "$at(2,75683,75705)"} true;
    call $t0 := $bb_package_manager_get_resource_address();
    if ($abort_flag) {
        assume {:print "$at(2,75683,75705)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(117,25):", $t1} $t1 == $t1;
        goto L3;
    }

    // $t2 := get_global<0xbb::pool_v3::LiquidityPoolConfigsV3>($t0) on_abort goto L3 with $t1 at ./sources/v3/pool_v3.move:1921:9+61
    if (!$ResourceExists($bb_pool_v3_LiquidityPoolConfigsV3_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($bb_pool_v3_LiquidityPoolConfigsV3_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,75645,75706)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(117,25):", $t1} $t1 == $t1;
        goto L3;
    }

    // $t3 := get_field<0xbb::pool_v3::LiquidityPoolConfigsV3>.is_paused($t2) at ./sources/v3/pool_v3.move:354:18+16
    assume {:print "$at(2,11286,11302)"} true;
    $t3 := $t2->$is_paused;

    // if ($t3) goto L0 else goto L1 at ./sources/v3/pool_v3.move:354:17+17
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ./sources/v3/pool_v3.move:352:64+118
    assume {:print "$at(2,11210,11328)"} true;
L1:

    // goto L2 at ./sources/v3/pool_v3.move:352:64+118
    assume {:print "$at(2,11210,11328)"} true;
    goto L2;

    // label L0 at ./sources/v3/pool_v3.move:354:36+16
    assume {:print "$at(2,11304,11320)"} true;
L0:

    // $t4 := 100014 at ./sources/v3/pool_v3.move:354:36+16
    assume {:print "$at(2,11304,11320)"} true;
    $t4 := 100014;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at ./sources/v3/pool_v3.move:354:9+6
    assume {:print "$at(2,11277,11283)"} true;
    assume {:print "$track_abort(117,25):", $t4} $t4 == $t4;

    // $t1 := move($t4) at ./sources/v3/pool_v3.move:354:9+6
    $t1 := $t4;

    // goto L3 at ./sources/v3/pool_v3.move:354:9+6
    goto L3;

    // label L2 at ./sources/v3/pool_v3.move:355:5+1
    assume {:print "$at(2,11327,11328)"} true;
L2:

    // return () at ./sources/v3/pool_v3.move:355:5+1
    assume {:print "$at(2,11327,11328)"} true;
    return;

    // label L3 at ./sources/v3/pool_v3.move:355:5+1
L3:

    // abort($t1) at ./sources/v3/pool_v3.move:355:5+1
    assume {:print "$at(2,11327,11328)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun pool_v3::get_tick_mut [baseline] at ./sources/v3/pool_v3.move:1959:5+295
procedure {:inline 1} $bb_pool_v3_get_tick_mut(_$t0: $Mutation (Table int ($bb_tick_TickInfo)), _$t1: $bb_i32_I32) returns ($ret0: $Mutation ($bb_tick_TickInfo), $ret1: $Mutation (Table int ($bb_tick_TickInfo)))
{
    // declare local variables
    var $t2: Table int ($bb_tick_TickInfo);
    var $t3: bool;
    var $t4: int;
    var $t5: $bb_tick_TickInfo;
    var $t6: $Mutation ($bb_tick_TickInfo);
    var $t0: $Mutation (Table int ($bb_tick_TickInfo));
    var $t1: $bb_i32_I32;
    var $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'': Table int ($bb_tick_TickInfo);
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'$bb_tick_TickInfo': $bb_tick_TickInfo;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[tick_infos]($t0) at ./sources/v3/pool_v3.move:1959:5+1
    assume {:print "$at(2,76751,76752)"} true;
    $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'' := $Dereference($t0);
    assume {:print "$track_local(117,47,0):", $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''} $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'' == $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'';

    // trace_local[tick]($t1) at ./sources/v3/pool_v3.move:1959:5+1
    assume {:print "$track_local(117,47,1):", $t1} $t1 == $t1;

    // $t2 := read_ref($t0) at ./sources/v3/pool_v3.move:1963:35+10
    assume {:print "$at(2,76896,76906)"} true;
    $t2 := $Dereference($t0);

    // $t3 := smart_table::contains<0xbb::i32::I32, 0xbb::tick::TickInfo>($t2, $t1) on_abort goto L4 with $t4 at ./sources/v3/pool_v3.move:1963:13+39
    call $t3 := $1_smart_table_contains'$bb_i32_I32_$bb_tick_TickInfo'($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,76874,76913)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(117,47):", $t4} $t4 == $t4;
        goto L4;
    }

    // if ($t3) goto L1 else goto L0 at ./sources/v3/pool_v3.move:1963:12+40
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at ./sources/v3/pool_v3.move:1963:9+119
L1:

    // goto L2 at ./sources/v3/pool_v3.move:1963:9+119
    assume {:print "$at(2,76870,76989)"} true;
    goto L2;

    // label L0 at ./sources/v3/pool_v3.move:1964:30+10
    assume {:print "$at(2,76946,76956)"} true;
L0:

    // $t5 := tick::empty() on_abort goto L4 with $t4 at ./sources/v3/pool_v3.move:1964:48+13
    assume {:print "$at(2,76964,76977)"} true;
    call $t5 := $bb_tick_empty();
    if ($abort_flag) {
        assume {:print "$at(2,76964,76977)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(117,47):", $t4} $t4 == $t4;
        goto L4;
    }

    // smart_table::add<0xbb::i32::I32, 0xbb::tick::TickInfo>($t0, $t1, $t5) on_abort goto L4 with $t4 at ./sources/v3/pool_v3.move:1964:13+49
    call $t0 := $1_smart_table_add'$bb_i32_I32_$bb_tick_TickInfo'($t0, $t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,76929,76978)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(117,47):", $t4} $t4 == $t4;
        goto L4;
    }

    // label L2 at ./sources/v3/pool_v3.move:1966:33+10
    assume {:print "$at(2,77023,77033)"} true;
L2:

    // $t6 := smart_table::borrow_mut<0xbb::i32::I32, 0xbb::tick::TickInfo>($t0, $t1) on_abort goto L4 with $t4 at ./sources/v3/pool_v3.move:1966:9+41
    assume {:print "$at(2,76999,77040)"} true;
    call $t6,$t0 := $1_smart_table_borrow_mut'$bb_i32_I32_$bb_tick_TickInfo'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,76999,77040)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(117,47):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_return[0]($t6) at ./sources/v3/pool_v3.move:1962:22+186
    assume {:print "$at(2,76860,77046)"} true;
    $temp_0'$bb_tick_TickInfo' := $Dereference($t6);
    assume {:print "$track_return(117,47,0):", $temp_0'$bb_tick_TickInfo'} $temp_0'$bb_tick_TickInfo' == $temp_0'$bb_tick_TickInfo';

    // trace_local[tick_infos]($t0) at ./sources/v3/pool_v3.move:1962:22+186
    $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'' := $Dereference($t0);
    assume {:print "$track_local(117,47,0):", $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''} $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'' == $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'';

    // trace_local[tick_infos]($t0) at ./sources/v3/pool_v3.move:1962:22+186
    $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'' := $Dereference($t0);
    assume {:print "$track_local(117,47,0):", $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''} $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'' == $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'';

    // label L3 at ./sources/v3/pool_v3.move:1967:5+1
    assume {:print "$at(2,77045,77046)"} true;
L3:

    // return $t6 at ./sources/v3/pool_v3.move:1967:5+1
    assume {:print "$at(2,77045,77046)"} true;
    $ret0 := $t6;
    $ret1 := $t0;
    return;

    // label L4 at ./sources/v3/pool_v3.move:1967:5+1
L4:

    // abort($t4) at ./sources/v3/pool_v3.move:1967:5+1
    assume {:print "$at(2,77045,77046)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun pool_v3::liquidity_pool_address [baseline] at ./sources/v3/pool_v3.move:297:5+419
procedure {:inline 1} $bb_pool_v3_liquidity_pool_address(_$t0: $1_object_Object'$1_fungible_asset_Metadata', _$t1: $1_object_Object'$1_fungible_asset_Metadata', _$t2: int) returns ($ret0: int)
{
    // declare local variables
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: Vec (int);
    var $t10: int;
    var $t11: bool;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $t2: int;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[token_a]($t0) at ./sources/v3/pool_v3.move:297:5+1
    assume {:print "$at(2,9563,9564)"} true;
    assume {:print "$track_local(117,51,0):", $t0} $t0 == $t0;

    // trace_local[token_b]($t1) at ./sources/v3/pool_v3.move:297:5+1
    assume {:print "$track_local(117,51,1):", $t1} $t1 == $t1;

    // trace_local[fee_tier]($t2) at ./sources/v3/pool_v3.move:297:5+1
    assume {:print "$track_local(117,51,2):", $t2} $t2 == $t2;

    // $t4 := utils::is_sorted($t0, $t1) on_abort goto L3 with $t5 at ./sources/v3/pool_v3.move:302:14+27
    assume {:print "$at(2,9720,9747)"} true;
    call $t4 := $bb_utils_is_sorted($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,9720,9747)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(117,51):", $t5} $t5 == $t5;
        goto L3;
    }

    // if ($t4) goto L0 else goto L1 at ./sources/v3/pool_v3.move:302:13+28
    if ($t4) { goto L0; } else { goto L1; }

    // label L1 at ./sources/v3/pool_v3.move:303:43+7
    assume {:print "$at(2,9793,9800)"} true;
L1:

    // $t6 := pool_v3::liquidity_pool_address($t1, $t0, $t2) on_abort goto L3 with $t5 at ./sources/v3/pool_v3.move:303:20+50
    assume {:print "$at(2,9770,9820)"} true;
    call $t6 := $bb_pool_v3_liquidity_pool_address($t1, $t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,9770,9820)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(117,51):", $t5} $t5 == $t5;
        goto L3;
    }

    // trace_return[0]($t6) at ./sources/v3/pool_v3.move:303:13+57
    assume {:print "$track_return(117,51,0):", $t6} $t6 == $t6;

    // $t7 := move($t6) at ./sources/v3/pool_v3.move:303:13+57
    $t7 := $t6;

    // goto L2 at ./sources/v3/pool_v3.move:303:13+57
    goto L2;

    // label L0 at ./sources/v3/pool_v3.move:306:14+22
    assume {:print "$at(2,9884,9906)"} true;
L0:

    // $t8 := package_manager::get_resource_address() on_abort goto L3 with $t5 at ./sources/v3/pool_v3.move:306:14+22
    assume {:print "$at(2,9884,9906)"} true;
    call $t8 := $bb_package_manager_get_resource_address();
    if ($abort_flag) {
        assume {:print "$at(2,9884,9906)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(117,51):", $t5} $t5 == $t5;
        goto L3;
    }

    // trace_local[$t10]($t8) at ./sources/v3/pool_v3.move:306:14+22
    assume {:print "$track_local(117,51,3):", $t8} $t8 == $t8;

    // $t9 := lp::get_pool_seeds($t0, $t1, $t2) on_abort goto L3 with $t5 at ./sources/v3/pool_v3.move:307:13+46
    assume {:print "$at(2,9920,9966)"} true;
    call $t9 := $bb_lp_get_pool_seeds($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,9920,9966)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(117,51):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t10 := opaque begin: object::create_object_address($t8, $t9) at ./sources/v3/pool_v3.move:305:9+136
    assume {:print "$at(2,9840,9976)"} true;

    // $t11 := havoc[val]() at ./sources/v3/pool_v3.move:305:9+136
    havoc $t11;

    // if ($t11) goto L5 else goto L4 at ./sources/v3/pool_v3.move:305:9+136
    if ($t11) { goto L5; } else { goto L4; }

    // label L5 at ./sources/v3/pool_v3.move:305:9+136
L5:

    // trace_abort($t5) at ./sources/v3/pool_v3.move:305:9+136
    assume {:print "$at(2,9840,9976)"} true;
    assume {:print "$track_abort(117,51):", $t5} $t5 == $t5;

    // goto L3 at ./sources/v3/pool_v3.move:305:9+136
    goto L3;

    // label L4 at ./sources/v3/pool_v3.move:305:9+136
L4:

    // assume WellFormed($t10) at ./sources/v3/pool_v3.move:305:9+136
    assume {:print "$at(2,9840,9976)"} true;
    assume $IsValid'address'($t10);

    // assume Eq<address>($t10, object::spec_create_object_address($t8, $t9)) at ./sources/v3/pool_v3.move:305:9+136
    assume $IsEqual'address'($t10, $1_object_spec_create_object_address($t8, $t9));

    // $t10 := opaque end: object::create_object_address($t8, $t9) at ./sources/v3/pool_v3.move:305:9+136

    // trace_return[0]($t10) at ./sources/v3/pool_v3.move:301:16+277
    assume {:print "$at(2,9705,9982)"} true;
    assume {:print "$track_return(117,51,0):", $t10} $t10 == $t10;

    // $t7 := move($t10) at ./sources/v3/pool_v3.move:301:16+277
    $t7 := $t10;

    // label L2 at ./sources/v3/pool_v3.move:309:5+1
    assume {:print "$at(2,9981,9982)"} true;
L2:

    // return $t7 at ./sources/v3/pool_v3.move:309:5+1
    assume {:print "$at(2,9981,9982)"} true;
    $ret0 := $t7;
    return;

    // label L3 at ./sources/v3/pool_v3.move:309:5+1
L3:

    // abort($t5) at ./sources/v3/pool_v3.move:309:5+1
    assume {:print "$at(2,9981,9982)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun pool_v3::merge_into_pool [baseline] at ./sources/v3/pool_v3.move:1445:5+3568
procedure {:inline 1} $bb_pool_v3_merge_into_pool(_$t0: $Mutation ($bb_pool_v3_LiquidityPoolV3), _$t1: $bb_i32_I32, _$t2: $bb_i32_I32, _$t3: bv128, _$t4: $1_fungible_asset_FungibleAsset, _$t5: $1_fungible_asset_FungibleAsset) returns ($ret0: bv128, $ret1: int, $ret2: int, $ret3: $1_fungible_asset_FungibleAsset, $ret4: $1_fungible_asset_FungibleAsset, $ret5: $Mutation ($bb_pool_v3_LiquidityPoolV3))
{
    // declare local variables
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bv128;
    var $t11: bool;
    var $t12: $bb_i32_I32;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: $1_fungible_asset_FungibleAsset;
    var $t20: int;
    var $t21: bool;
    var $t22: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t23: $Mutation ($1_fungible_asset_FungibleAsset);
    var $t24: $1_fungible_asset_FungibleAsset;
    var $t25: $1_fungible_asset_FungibleAsset;
    var $t26: $1_fungible_asset_FungibleAsset;
    var $t27: int;
    var $t28: $bb_i32_I32;
    var $t29: bool;
    var $t30: int;
    var $t31: int;
    var $t32: bool;
    var $t33: int;
    var $t34: $1_fungible_asset_FungibleAsset;
    var $t35: int;
    var $t36: bool;
    var $t37: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t38: $Mutation ($1_fungible_asset_FungibleAsset);
    var $t39: $1_fungible_asset_FungibleAsset;
    var $t40: int;
    var $t41: int;
    var $t42: bool;
    var $t43: int;
    var $t44: $1_fungible_asset_FungibleAsset;
    var $t45: int;
    var $t46: bool;
    var $t47: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t48: $Mutation ($1_fungible_asset_FungibleAsset);
    var $t49: $1_fungible_asset_FungibleAsset;
    var $t50: int;
    var $t51: int;
    var $t52: $Mutation (int);
    var $t53: int;
    var $t54: int;
    var $t55: int;
    var $t56: int;
    var $t57: bool;
    var $t58: int;
    var $t59: $1_fungible_asset_FungibleAsset;
    var $t60: int;
    var $t61: bool;
    var $t62: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t63: $Mutation ($1_fungible_asset_FungibleAsset);
    var $t64: $1_fungible_asset_FungibleAsset;
    var $t65: int;
    var $t66: int;
    var $t0: $Mutation ($bb_pool_v3_LiquidityPoolV3);
    var $t1: $bb_i32_I32;
    var $t2: $bb_i32_I32;
    var $t3: bv128;
    var $t4: $1_fungible_asset_FungibleAsset;
    var $t5: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'$bb_pool_v3_LiquidityPoolV3': $bb_pool_v3_LiquidityPoolV3;
    var $temp_0'bv128': bv128;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // trace_local[pool]($t0) at ./sources/v3/pool_v3.move:1445:5+1
    assume {:print "$at(2,54726,54727)"} true;
    $temp_0'$bb_pool_v3_LiquidityPoolV3' := $Dereference($t0);
    assume {:print "$track_local(117,58,0):", $temp_0'$bb_pool_v3_LiquidityPoolV3'} $temp_0'$bb_pool_v3_LiquidityPoolV3' == $temp_0'$bb_pool_v3_LiquidityPoolV3';

    // trace_local[tick_lower]($t1) at ./sources/v3/pool_v3.move:1445:5+1
    assume {:print "$track_local(117,58,1):", $t1} $t1 == $t1;

    // trace_local[tick_upper]($t2) at ./sources/v3/pool_v3.move:1445:5+1
    assume {:print "$track_local(117,58,2):", $t2} $t2 == $t2;

    // trace_local[liquidity_delta]($t3) at ./sources/v3/pool_v3.move:1445:5+1
    assume {:print "$track_local(117,58,3):", $t3} $t3 == $t3;

    // trace_local[fa_a]($t4) at ./sources/v3/pool_v3.move:1445:5+1
    assume {:print "$track_local(117,58,4):", $t4} $t4 == $t4;

    // trace_local[fa_b]($t5) at ./sources/v3/pool_v3.move:1445:5+1
    assume {:print "$track_local(117,58,5):", $t5} $t5 == $t5;

    // $t8 := 0 at ./sources/v3/pool_v3.move:1453:37+1
    assume {:print "$at(2,55013,55014)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t6 := $t8 at ./sources/v3/pool_v3.move:1453:37+1
    $t6 := $t8;

    // trace_local[$t13]($t8) at ./sources/v3/pool_v3.move:1453:37+1
    assume {:print "$track_local(117,58,6):", $t8} $t8 == $t8;

    // $t9 := 0 at ./sources/v3/pool_v3.move:1453:40+1
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // $t7 := $t9 at ./sources/v3/pool_v3.move:1453:40+1
    $t7 := $t9;

    // trace_local[$t14]($t9) at ./sources/v3/pool_v3.move:1453:40+1
    assume {:print "$track_local(117,58,7):", $t9} $t9 == $t9;

    // $t10 := 0 at ./sources/v3/pool_v3.move:1454:36+1
    assume {:print "$at(2,55055,55056)"} true;
    $t10 := 0bv128;
    assume $IsValid'bv128'($t10);

    // $t11 := !=($t3, $t10) at ./sources/v3/pool_v3.move:1454:17+20
    $t11 := !$IsEqual'bv128'($t3, $t10);

    // if ($t11) goto L1 else goto L0 at ./sources/v3/pool_v3.move:1454:9+6
    if ($t11) { goto L1; } else { goto L0; }

    // label L1 at ./sources/v3/pool_v3.move:1455:21+9
    assume {:print "$at(2,55105,55114)"} true;
L1:

    // $t12 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick($t0) at ./sources/v3/pool_v3.move:1455:21+9
    assume {:print "$at(2,55105,55114)"} true;
    $t12 := $Dereference($t0)->$tick;

    // $t13 := i32::lt($t12, $t1) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1455:13+31
    call $t13 := $bb_i32_lt($t12, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,55097,55128)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // if ($t13) goto L3 else goto L2 at ./sources/v3/pool_v3.move:1455:9+3136
    if ($t13) { goto L3; } else { goto L2; }

    // label L3 at ./sources/v3/pool_v3.move:1459:17+45
    assume {:print "$at(2,55416,55461)"} true;
L3:

    // $t15 := tick_math::get_sqrt_price_at_tick($t1) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1459:17+45
    assume {:print "$at(2,55416,55461)"} true;
    call $t15 := $bb_tick_math_get_sqrt_price_at_tick($t1);
    if ($abort_flag) {
        assume {:print "$at(2,55416,55461)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t16 := tick_math::get_sqrt_price_at_tick($t2) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1460:17+45
    assume {:print "$at(2,55479,55524)"} true;
    call $t16 := $bb_tick_math_get_sqrt_price_at_tick($t2);
    if ($abort_flag) {
        assume {:print "$at(2,55479,55524)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t17 := false at ./sources/v3/pool_v3.move:1462:17+5
    assume {:print "$at(2,55575,55580)"} true;
    $t17 := false;
    assume $IsValid'bool'($t17);

    // $t18 := swap_math::get_delta_a($t15, $t16, $t3, $t17) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1458:24+218
    assume {:print "$at(2,55376,55594)"} true;
    call $t18 := $bb_swap_math_get_delta_a($t15, $t16, $t3, $t17);
    if ($abort_flag) {
        assume {:print "$at(2,55376,55594)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t6 := $t18 at ./sources/v3/pool_v3.move:1458:13+229
    $t6 := $t18;

    // trace_local[$t13]($t18) at ./sources/v3/pool_v3.move:1458:13+229
    assume {:print "$track_local(117,58,6):", $t18} $t18 == $t18;

    // $t19 := copy($t4) at ./sources/v3/pool_v3.move:1464:44+5
    assume {:print "$at(2,55639,55644)"} true;
    $t19 := $t4;

    // $t20 := fungible_asset::amount($t19) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1464:21+29
    call $t20 := $1_fungible_asset_amount($t19);
    if ($abort_flag) {
        assume {:print "$at(2,55616,55645)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t21 := >=($t20, $t18) at ./sources/v3/pool_v3.move:1464:21+41
    call $t21 := $Ge($t20, $t18);

    // if ($t21) goto L5 else goto L4 at ./sources/v3/pool_v3.move:1464:13+6
    if ($t21) { goto L5; } else { goto L4; }

    // label L5 at ./sources/v3/pool_v3.move:1466:17+22
    assume {:print "$at(2,55748,55770)"} true;
L5:

    // $t22 := get_field<0xbb::pool_v3::LiquidityPoolV3>.token_a_liquidity($t0) at ./sources/v3/pool_v3.move:1466:17+22
    assume {:print "$at(2,55748,55770)"} true;
    $t22 := $Dereference($t0)->$token_a_liquidity;

    // $t23 := borrow_local($t4) at ./sources/v3/pool_v3.move:1467:41+9
    assume {:print "$at(2,55812,55821)"} true;
    $t23 := $Mutation($Local(4), EmptyVec(), $t4);

    // $t24 := fungible_asset::extract($t23, $t18) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1467:17+44
    call $t24,$t23 := $1_fungible_asset_extract($t23, $t18);
    if ($abort_flag) {
        assume {:print "$at(2,55788,55832)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // write_back[LocalRoot($t4)@]($t23) at ./sources/v3/pool_v3.move:1467:17+44
    $t4 := $Dereference($t23);

    // trace_local[fa_a]($t4) at ./sources/v3/pool_v3.move:1467:17+44
    assume {:print "$track_local(117,58,4):", $t4} $t4 == $t4;

    // dispatchable_fungible_asset::deposit<0x1::fungible_asset::FungibleStore>($t22, $t24) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1465:13+152
    assume {:print "$at(2,55694,55846)"} true;
    call $1_dispatchable_fungible_asset_deposit'$1_fungible_asset_FungibleStore'($t22, $t24);
    if ($abort_flag) {
        assume {:print "$at(2,55694,55846)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // label L12 at ./sources/v3/pool_v3.move:1523:10+15
    assume {:print "$at(2,58240,58255)"} true;
L12:

    // $t25 := move($t4) at ./sources/v3/pool_v3.move:1523:47+4
    assume {:print "$at(2,58277,58281)"} true;
    $t25 := $t4;

    // $t26 := move($t5) at ./sources/v3/pool_v3.move:1523:53+4
    $t26 := $t5;

    // trace_return[0]($t3) at ./sources/v3/pool_v3.move:1452:55+3319
    assume {:print "$at(2,54975,58294)"} true;
    assume {:print "$track_return(117,58,0):", $t3} $t3 == $t3;

    // trace_return[1]($t6) at ./sources/v3/pool_v3.move:1452:55+3319
    assume {:print "$track_return(117,58,1):", $t6} $t6 == $t6;

    // trace_return[2]($t7) at ./sources/v3/pool_v3.move:1452:55+3319
    assume {:print "$track_return(117,58,2):", $t7} $t7 == $t7;

    // trace_return[3]($t25) at ./sources/v3/pool_v3.move:1452:55+3319
    assume {:print "$track_return(117,58,3):", $t25} $t25 == $t25;

    // trace_return[4]($t26) at ./sources/v3/pool_v3.move:1452:55+3319
    assume {:print "$track_return(117,58,4):", $t26} $t26 == $t26;

    // trace_local[pool]($t0) at ./sources/v3/pool_v3.move:1452:55+3319
    $temp_0'$bb_pool_v3_LiquidityPoolV3' := $Dereference($t0);
    assume {:print "$track_local(117,58,0):", $temp_0'$bb_pool_v3_LiquidityPoolV3'} $temp_0'$bb_pool_v3_LiquidityPoolV3' == $temp_0'$bb_pool_v3_LiquidityPoolV3';

    // pack_ref_deep($t0) at ./sources/v3/pool_v3.move:1452:55+3319

    // goto L15 at ./sources/v3/pool_v3.move:1452:55+3319
    goto L15;

    // label L4 at ./sources/v3/pool_v3.move:1464:13+6
    assume {:print "$at(2,55608,55614)"} true;
L4:

    // pack_ref_deep($t0) at ./sources/v3/pool_v3.move:1464:13+6
    assume {:print "$at(2,55608,55614)"} true;

    // drop($t0) at ./sources/v3/pool_v3.move:1464:13+6

    // $t27 := 100006 at ./sources/v3/pool_v3.move:1464:64+20
    $t27 := 100006;
    assume $IsValid'u64'($t27);

    // trace_abort($t27) at ./sources/v3/pool_v3.move:1464:13+6
    assume {:print "$at(2,55608,55614)"} true;
    assume {:print "$track_abort(117,58):", $t27} $t27 == $t27;

    // $t14 := move($t27) at ./sources/v3/pool_v3.move:1464:13+6
    $t14 := $t27;

    // goto L16 at ./sources/v3/pool_v3.move:1464:13+6
    goto L16;

    // label L2 at ./sources/v3/pool_v3.move:1469:28+9
    assume {:print "$at(2,55875,55884)"} true;
L2:

    // $t28 := get_field<0xbb::pool_v3::LiquidityPoolV3>.tick($t0) at ./sources/v3/pool_v3.move:1469:28+9
    assume {:print "$at(2,55875,55884)"} true;
    $t28 := $Dereference($t0)->$tick;

    // $t29 := i32::lt($t28, $t2) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1469:20+30
    call $t29 := $bb_i32_lt($t28, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,55867,55897)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // if ($t29) goto L7 else goto L6 at ./sources/v3/pool_v3.move:1469:16+2366
    if ($t29) { goto L7; } else { goto L6; }

    // label L7 at ./sources/v3/pool_v3.move:1485:17+15
    assume {:print "$at(2,56530,56545)"} true;
L7:

    // $t30 := get_field<0xbb::pool_v3::LiquidityPoolV3>.sqrt_price($t0) at ./sources/v3/pool_v3.move:1485:17+15
    assume {:print "$at(2,56530,56545)"} true;
    $t30 := $Dereference($t0)->$sqrt_price;

    // $t31 := tick_math::get_sqrt_price_at_tick($t2) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1486:17+45
    assume {:print "$at(2,56563,56608)"} true;
    call $t31 := $bb_tick_math_get_sqrt_price_at_tick($t2);
    if ($abort_flag) {
        assume {:print "$at(2,56563,56608)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t32 := false at ./sources/v3/pool_v3.move:1488:17+5
    assume {:print "$at(2,56659,56664)"} true;
    $t32 := false;
    assume $IsValid'bool'($t32);

    // $t33 := swap_math::get_delta_a($t30, $t31, $t3, $t32) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1484:24+188
    assume {:print "$at(2,56490,56678)"} true;
    call $t33 := $bb_swap_math_get_delta_a($t30, $t31, $t3, $t32);
    if ($abort_flag) {
        assume {:print "$at(2,56490,56678)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t6 := $t33 at ./sources/v3/pool_v3.move:1484:13+199
    $t6 := $t33;

    // trace_local[$t13]($t33) at ./sources/v3/pool_v3.move:1484:13+199
    assume {:print "$track_local(117,58,6):", $t33} $t33 == $t33;

    // $t34 := copy($t4) at ./sources/v3/pool_v3.move:1490:44+5
    assume {:print "$at(2,56723,56728)"} true;
    $t34 := $t4;

    // $t35 := fungible_asset::amount($t34) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1490:21+29
    call $t35 := $1_fungible_asset_amount($t34);
    if ($abort_flag) {
        assume {:print "$at(2,56700,56729)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t36 := >=($t35, $t33) at ./sources/v3/pool_v3.move:1490:21+41
    call $t36 := $Ge($t35, $t33);

    // if ($t36) goto L9 else goto L8 at ./sources/v3/pool_v3.move:1490:13+6
    if ($t36) { goto L9; } else { goto L8; }

    // label L9 at ./sources/v3/pool_v3.move:1492:17+22
    assume {:print "$at(2,56832,56854)"} true;
L9:

    // $t37 := get_field<0xbb::pool_v3::LiquidityPoolV3>.token_a_liquidity($t0) at ./sources/v3/pool_v3.move:1492:17+22
    assume {:print "$at(2,56832,56854)"} true;
    $t37 := $Dereference($t0)->$token_a_liquidity;

    // $t38 := borrow_local($t4) at ./sources/v3/pool_v3.move:1493:41+9
    assume {:print "$at(2,56896,56905)"} true;
    $t38 := $Mutation($Local(4), EmptyVec(), $t4);

    // $t39 := fungible_asset::extract($t38, $t33) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1493:17+44
    call $t39,$t38 := $1_fungible_asset_extract($t38, $t33);
    if ($abort_flag) {
        assume {:print "$at(2,56872,56916)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // write_back[LocalRoot($t4)@]($t38) at ./sources/v3/pool_v3.move:1493:17+44
    $t4 := $Dereference($t38);

    // trace_local[fa_a]($t4) at ./sources/v3/pool_v3.move:1493:17+44
    assume {:print "$track_local(117,58,4):", $t4} $t4 == $t4;

    // dispatchable_fungible_asset::deposit<0x1::fungible_asset::FungibleStore>($t37, $t39) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1491:13+152
    assume {:print "$at(2,56778,56930)"} true;
    call $1_dispatchable_fungible_asset_deposit'$1_fungible_asset_FungibleStore'($t37, $t39);
    if ($abort_flag) {
        assume {:print "$at(2,56778,56930)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t40 := tick_math::get_sqrt_price_at_tick($t1) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1496:17+45
    assume {:print "$at(2,56995,57040)"} true;
    call $t40 := $bb_tick_math_get_sqrt_price_at_tick($t1);
    if ($abort_flag) {
        assume {:print "$at(2,56995,57040)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t41 := get_field<0xbb::pool_v3::LiquidityPoolV3>.sqrt_price($t0) at ./sources/v3/pool_v3.move:1497:17+15
    assume {:print "$at(2,57058,57073)"} true;
    $t41 := $Dereference($t0)->$sqrt_price;

    // $t42 := false at ./sources/v3/pool_v3.move:1499:17+5
    assume {:print "$at(2,57124,57129)"} true;
    $t42 := false;
    assume $IsValid'bool'($t42);

    // $t43 := swap_math::get_delta_b($t40, $t41, $t3, $t42) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1495:24+188
    assume {:print "$at(2,56955,57143)"} true;
    call $t43 := $bb_swap_math_get_delta_b($t40, $t41, $t3, $t42);
    if ($abort_flag) {
        assume {:print "$at(2,56955,57143)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t7 := $t43 at ./sources/v3/pool_v3.move:1495:13+199
    $t7 := $t43;

    // trace_local[$t14]($t43) at ./sources/v3/pool_v3.move:1495:13+199
    assume {:print "$track_local(117,58,7):", $t43} $t43 == $t43;

    // $t44 := copy($t5) at ./sources/v3/pool_v3.move:1501:44+5
    assume {:print "$at(2,57188,57193)"} true;
    $t44 := $t5;

    // $t45 := fungible_asset::amount($t44) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1501:21+29
    call $t45 := $1_fungible_asset_amount($t44);
    if ($abort_flag) {
        assume {:print "$at(2,57165,57194)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t46 := >=($t45, $t43) at ./sources/v3/pool_v3.move:1501:21+41
    call $t46 := $Ge($t45, $t43);

    // if ($t46) goto L11 else goto L10 at ./sources/v3/pool_v3.move:1501:13+6
    if ($t46) { goto L11; } else { goto L10; }

    // label L11 at ./sources/v3/pool_v3.move:1503:17+22
    assume {:print "$at(2,57297,57319)"} true;
L11:

    // $t47 := get_field<0xbb::pool_v3::LiquidityPoolV3>.token_b_liquidity($t0) at ./sources/v3/pool_v3.move:1503:17+22
    assume {:print "$at(2,57297,57319)"} true;
    $t47 := $Dereference($t0)->$token_b_liquidity;

    // $t48 := borrow_local($t5) at ./sources/v3/pool_v3.move:1504:41+9
    assume {:print "$at(2,57361,57370)"} true;
    $t48 := $Mutation($Local(5), EmptyVec(), $t5);

    // $t49 := fungible_asset::extract($t48, $t43) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1504:17+44
    call $t49,$t48 := $1_fungible_asset_extract($t48, $t43);
    if ($abort_flag) {
        assume {:print "$at(2,57337,57381)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // write_back[LocalRoot($t5)@]($t48) at ./sources/v3/pool_v3.move:1504:17+44
    $t5 := $Dereference($t48);

    // trace_local[fa_b]($t5) at ./sources/v3/pool_v3.move:1504:17+44
    assume {:print "$track_local(117,58,5):", $t5} $t5 == $t5;

    // dispatchable_fungible_asset::deposit<0x1::fungible_asset::FungibleStore>($t47, $t49) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1502:13+152
    assume {:print "$at(2,57243,57395)"} true;
    call $1_dispatchable_fungible_asset_deposit'$1_fungible_asset_FungibleStore'($t47, $t49);
    if ($abort_flag) {
        assume {:print "$at(2,57243,57395)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t50 := get_field<0xbb::pool_v3::LiquidityPoolV3>.liquidity($t0) at ./sources/v3/pool_v3.move:1507:56+14
    assume {:print "$at(2,57453,57467)"} true;
    $t50 := $Dereference($t0)->$liquidity;

    // $t51 := liquidity_math::add_delta($t50, $t3) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1507:30+58
    call $t51 := $bb_liquidity_math_add_delta($t50, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,57427,57485)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t52 := borrow_field<0xbb::pool_v3::LiquidityPoolV3>.liquidity($t0) at ./sources/v3/pool_v3.move:1507:13+14
    $t52 := $ChildMutation($t0, 5, $Dereference($t0)->$liquidity);

    // write_ref($t52, $t51) at ./sources/v3/pool_v3.move:1507:13+75
    $t52 := $UpdateMutation($t52, $t51);

    // write_back[Reference($t0).liquidity (u128)]($t52) at ./sources/v3/pool_v3.move:1507:13+75
    $t0 := $UpdateMutation($t0, $Update'$bb_pool_v3_LiquidityPoolV3'_liquidity($Dereference($t0), $Dereference($t52)));

    // trace_local[pool]($t0) at ./sources/v3/pool_v3.move:1507:13+75
    $temp_0'$bb_pool_v3_LiquidityPoolV3' := $Dereference($t0);
    assume {:print "$track_local(117,58,0):", $temp_0'$bb_pool_v3_LiquidityPoolV3'} $temp_0'$bb_pool_v3_LiquidityPoolV3' == $temp_0'$bb_pool_v3_LiquidityPoolV3';

    // goto L12 at ./sources/v3/pool_v3.move:1469:52+1597
    assume {:print "$at(2,55899,57496)"} true;
    goto L12;

    // label L10 at ./sources/v3/pool_v3.move:1501:13+6
    assume {:print "$at(2,57157,57163)"} true;
L10:

    // pack_ref_deep($t0) at ./sources/v3/pool_v3.move:1501:13+6
    assume {:print "$at(2,57157,57163)"} true;

    // drop($t0) at ./sources/v3/pool_v3.move:1501:13+6

    // $t53 := 100007 at ./sources/v3/pool_v3.move:1501:64+20
    $t53 := 100007;
    assume $IsValid'u64'($t53);

    // trace_abort($t53) at ./sources/v3/pool_v3.move:1501:13+6
    assume {:print "$at(2,57157,57163)"} true;
    assume {:print "$track_abort(117,58):", $t53} $t53 == $t53;

    // $t14 := move($t53) at ./sources/v3/pool_v3.move:1501:13+6
    $t14 := $t53;

    // goto L16 at ./sources/v3/pool_v3.move:1501:13+6
    goto L16;

    // label L8 at ./sources/v3/pool_v3.move:1490:13+6
    assume {:print "$at(2,56692,56698)"} true;
L8:

    // pack_ref_deep($t0) at ./sources/v3/pool_v3.move:1490:13+6
    assume {:print "$at(2,56692,56698)"} true;

    // drop($t0) at ./sources/v3/pool_v3.move:1490:13+6

    // $t54 := 100006 at ./sources/v3/pool_v3.move:1490:64+20
    $t54 := 100006;
    assume $IsValid'u64'($t54);

    // trace_abort($t54) at ./sources/v3/pool_v3.move:1490:13+6
    assume {:print "$at(2,56692,56698)"} true;
    assume {:print "$track_abort(117,58):", $t54} $t54 == $t54;

    // $t14 := move($t54) at ./sources/v3/pool_v3.move:1490:13+6
    $t14 := $t54;

    // goto L16 at ./sources/v3/pool_v3.move:1490:13+6
    goto L16;

    // label L6 at ./sources/v3/pool_v3.move:1512:17+45
    assume {:print "$at(2,57788,57833)"} true;
L6:

    // $t55 := tick_math::get_sqrt_price_at_tick($t1) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1512:17+45
    assume {:print "$at(2,57788,57833)"} true;
    call $t55 := $bb_tick_math_get_sqrt_price_at_tick($t1);
    if ($abort_flag) {
        assume {:print "$at(2,57788,57833)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t56 := tick_math::get_sqrt_price_at_tick($t2) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1513:17+45
    assume {:print "$at(2,57851,57896)"} true;
    call $t56 := $bb_tick_math_get_sqrt_price_at_tick($t2);
    if ($abort_flag) {
        assume {:print "$at(2,57851,57896)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t57 := false at ./sources/v3/pool_v3.move:1515:17+5
    assume {:print "$at(2,57947,57952)"} true;
    $t57 := false;
    assume $IsValid'bool'($t57);

    // $t58 := swap_math::get_delta_b($t55, $t56, $t3, $t57) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1511:24+218
    assume {:print "$at(2,57748,57966)"} true;
    call $t58 := $bb_swap_math_get_delta_b($t55, $t56, $t3, $t57);
    if ($abort_flag) {
        assume {:print "$at(2,57748,57966)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t7 := $t58 at ./sources/v3/pool_v3.move:1511:13+229
    $t7 := $t58;

    // trace_local[$t14]($t58) at ./sources/v3/pool_v3.move:1511:13+229
    assume {:print "$track_local(117,58,7):", $t58} $t58 == $t58;

    // $t59 := copy($t5) at ./sources/v3/pool_v3.move:1517:44+5
    assume {:print "$at(2,58011,58016)"} true;
    $t59 := $t5;

    // $t60 := fungible_asset::amount($t59) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1517:21+29
    call $t60 := $1_fungible_asset_amount($t59);
    if ($abort_flag) {
        assume {:print "$at(2,57988,58017)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t61 := >=($t60, $t58) at ./sources/v3/pool_v3.move:1517:21+41
    call $t61 := $Ge($t60, $t58);

    // if ($t61) goto L14 else goto L13 at ./sources/v3/pool_v3.move:1517:13+6
    if ($t61) { goto L14; } else { goto L13; }

    // label L14 at ./sources/v3/pool_v3.move:1519:17+22
    assume {:print "$at(2,58120,58142)"} true;
L14:

    // $t62 := get_field<0xbb::pool_v3::LiquidityPoolV3>.token_b_liquidity($t0) at ./sources/v3/pool_v3.move:1519:17+22
    assume {:print "$at(2,58120,58142)"} true;
    $t62 := $Dereference($t0)->$token_b_liquidity;

    // $t63 := borrow_local($t5) at ./sources/v3/pool_v3.move:1520:41+9
    assume {:print "$at(2,58184,58193)"} true;
    $t63 := $Mutation($Local(5), EmptyVec(), $t5);

    // $t64 := fungible_asset::extract($t63, $t58) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1520:17+44
    call $t64,$t63 := $1_fungible_asset_extract($t63, $t58);
    if ($abort_flag) {
        assume {:print "$at(2,58160,58204)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // write_back[LocalRoot($t5)@]($t63) at ./sources/v3/pool_v3.move:1520:17+44
    $t5 := $Dereference($t63);

    // trace_local[fa_b]($t5) at ./sources/v3/pool_v3.move:1520:17+44
    assume {:print "$track_local(117,58,5):", $t5} $t5 == $t5;

    // dispatchable_fungible_asset::deposit<0x1::fungible_asset::FungibleStore>($t62, $t64) on_abort goto L16 with $t14 at ./sources/v3/pool_v3.move:1518:13+152
    assume {:print "$at(2,58066,58218)"} true;
    call $1_dispatchable_fungible_asset_deposit'$1_fungible_asset_FungibleStore'($t62, $t64);
    if ($abort_flag) {
        assume {:print "$at(2,58066,58218)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(117,58):", $t14} $t14 == $t14;
        goto L16;
    }

    // goto L12 at ./sources/v3/pool_v3.move:1518:13+152
    goto L12;

    // label L13 at ./sources/v3/pool_v3.move:1517:13+6
    assume {:print "$at(2,57980,57986)"} true;
L13:

    // pack_ref_deep($t0) at ./sources/v3/pool_v3.move:1517:13+6
    assume {:print "$at(2,57980,57986)"} true;

    // drop($t0) at ./sources/v3/pool_v3.move:1517:13+6

    // $t65 := 100007 at ./sources/v3/pool_v3.move:1517:64+20
    $t65 := 100007;
    assume $IsValid'u64'($t65);

    // trace_abort($t65) at ./sources/v3/pool_v3.move:1517:13+6
    assume {:print "$at(2,57980,57986)"} true;
    assume {:print "$track_abort(117,58):", $t65} $t65 == $t65;

    // $t14 := move($t65) at ./sources/v3/pool_v3.move:1517:13+6
    $t14 := $t65;

    // goto L16 at ./sources/v3/pool_v3.move:1517:13+6
    goto L16;

    // label L0 at ./sources/v3/pool_v3.move:1454:9+6
    assume {:print "$at(2,55028,55034)"} true;
L0:

    // pack_ref_deep($t0) at ./sources/v3/pool_v3.move:1454:9+6
    assume {:print "$at(2,55028,55034)"} true;

    // drop($t0) at ./sources/v3/pool_v3.move:1454:9+6

    // $t66 := 100005 at ./sources/v3/pool_v3.move:1454:39+24
    $t66 := 100005;
    assume $IsValid'u64'($t66);

    // trace_abort($t66) at ./sources/v3/pool_v3.move:1454:9+6
    assume {:print "$at(2,55028,55034)"} true;
    assume {:print "$track_abort(117,58):", $t66} $t66 == $t66;

    // $t14 := move($t66) at ./sources/v3/pool_v3.move:1454:9+6
    $t14 := $t66;

    // goto L16 at ./sources/v3/pool_v3.move:1454:9+6
    goto L16;

    // label L15 at ./sources/v3/pool_v3.move:1524:5+1
    assume {:print "$at(2,58293,58294)"} true;
L15:

    // return ($t3, $t6, $t7, $t25, $t26) at ./sources/v3/pool_v3.move:1524:5+1
    assume {:print "$at(2,58293,58294)"} true;
    $ret0 := $t3;
    $ret1 := $t6;
    $ret2 := $t7;
    $ret3 := $t25;
    $ret4 := $t26;
    $ret5 := $t0;
    return;

    // label L16 at ./sources/v3/pool_v3.move:1524:5+1
L16:

    // abort($t14) at ./sources/v3/pool_v3.move:1524:5+1
    assume {:print "$at(2,58293,58294)"} true;
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun pool_v3::update_tick [baseline] at ./sources/v3/pool_v3.move:2000:5+860
procedure {:inline 1} $bb_pool_v3_update_tick(_$t0: $Mutation (Table int ($bb_tick_TickInfo)), _$t1: $bb_i32_I32, _$t2: int, _$t3: int, _$t4: int, _$t5: int, _$t6: Vec (int), _$t7: bool, _$t8: bv128, _$t9: $bb_i32_I32, _$t10: bool) returns ($ret0: bool, $ret1: $Mutation (Table int ($bb_tick_TickInfo)))
{
    // declare local variables
    var $t11: $Mutation ($bb_tick_TickInfo);
    var $t12: int;
    var $t13: bool;
    var $t0: $Mutation (Table int ($bb_tick_TickInfo));
    var $t1: $bb_i32_I32;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: Vec (int);
    var $t7: bool;
    var $t8: bv128;
    var $t9: $bb_i32_I32;
    var $t10: bool;
    var $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'': Table int ($bb_tick_TickInfo);
    var $temp_0'$bb_i32_I32': $bb_i32_I32;
    var $temp_0'bool': bool;
    var $temp_0'u128': int;
    var $temp_0'bv128': bv128;
    var $temp_0'vec'u128'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;
    $t7 := _$t7;
    $t8 := _$t8;
    $t9 := _$t9;
    $t10 := _$t10;

    // bytecode translation starts here
    // trace_local[tick_infos]($t0) at ./sources/v3/pool_v3.move:2000:5+1
    assume {:print "$at(2,77995,77996)"} true;
    $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'' := $Dereference($t0);
    assume {:print "$track_local(117,73,0):", $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''} $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'' == $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'';

    // trace_local[tick_to_update]($t1) at ./sources/v3/pool_v3.move:2000:5+1
    assume {:print "$track_local(117,73,1):", $t1} $t1 == $t1;

    // trace_local[fee_growth_global_a]($t2) at ./sources/v3/pool_v3.move:2000:5+1
    assume {:print "$track_local(117,73,2):", $t2} $t2 == $t2;

    // trace_local[fee_growth_global_b]($t3) at ./sources/v3/pool_v3.move:2000:5+1
    assume {:print "$track_local(117,73,3):", $t3} $t3 == $t3;

    // trace_local[seconds_per_liquidity_oracle]($t4) at ./sources/v3/pool_v3.move:2000:5+1
    assume {:print "$track_local(117,73,4):", $t4} $t4 == $t4;

    // trace_local[seconds_per_liquidity_incentive]($t5) at ./sources/v3/pool_v3.move:2000:5+1
    assume {:print "$track_local(117,73,5):", $t5} $t5 == $t5;

    // trace_local[emissions_per_liquidity]($t6) at ./sources/v3/pool_v3.move:2000:5+1
    assume {:print "$track_local(117,73,6):", $t6} $t6 == $t6;

    // trace_local[direction]($t7) at ./sources/v3/pool_v3.move:2000:5+1
    assume {:print "$track_local(117,73,7):", $t7} $t7 == $t7;

    // trace_local[liquidity_delta]($t8) at ./sources/v3/pool_v3.move:2000:5+1
    assume {:print "$track_local(117,73,8):", $t8} $t8 == $t8;

    // trace_local[tick_current]($t9) at ./sources/v3/pool_v3.move:2000:5+1
    assume {:print "$track_local(117,73,9):", $t9} $t9 == $t9;

    // trace_local[upper]($t10) at ./sources/v3/pool_v3.move:2000:5+1
    assume {:print "$track_local(117,73,10):", $t10} $t10 == $t10;

    // $t11 := pool_v3::get_tick_mut($t0, $t1) on_abort goto L2 with $t12 at ./sources/v3/pool_v3.move:2013:24+40
    assume {:print "$at(2,78440,78480)"} true;
    call $t11,$t0 := $bb_pool_v3_get_tick_mut($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,78440,78480)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(117,73):", $t12} $t12 == $t12;
        goto L2;
    }

    // $t13 := tick::update($t11, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10) on_abort goto L2 with $t12 at ./sources/v3/pool_v3.move:2014:9+359
    assume {:print "$at(2,78490,78849)"} true;
    call $t13,$t11 := $bb_tick_update($t11, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10);
    if ($abort_flag) {
        assume {:print "$at(2,78490,78849)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(117,73):", $t12} $t12 == $t12;
        goto L2;
    }

    // write_back[Reference($t0)[]]($t11) at ./sources/v3/pool_v3.move:2014:9+359
    $t0 := $UpdateMutation($t0, UpdateTable($Dereference($t0), ReadVec($t11->p, LenVec($t0->p)), $Dereference($t11)));

    // trace_local[tick_infos]($t0) at ./sources/v3/pool_v3.move:2014:9+359
    $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'' := $Dereference($t0);
    assume {:print "$track_local(117,73,0):", $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''} $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'' == $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'';

    // trace_return[0]($t13) at ./sources/v3/pool_v3.move:2014:9+359
    assume {:print "$track_return(117,73,0):", $t13} $t13 == $t13;

    // trace_local[tick_infos]($t0) at ./sources/v3/pool_v3.move:2014:9+359
    $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'' := $Dereference($t0);
    assume {:print "$track_local(117,73,0):", $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo''} $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'' == $temp_0'$1_smart_table_SmartTable'$bb_i32_I32_$bb_tick_TickInfo'';

    // label L1 at ./sources/v3/pool_v3.move:2027:5+1
    assume {:print "$at(2,78854,78855)"} true;
L1:

    // return $t13 at ./sources/v3/pool_v3.move:2027:5+1
    assume {:print "$at(2,78854,78855)"} true;
    $ret0 := $t13;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/v3/pool_v3.move:2027:5+1
L2:

    // abort($t12) at ./sources/v3/pool_v3.move:2027:5+1
    assume {:print "$at(2,78854,78855)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}
